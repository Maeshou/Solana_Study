[
  {
    "name": "initialize_escrow",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "require ! (ctx . accounts . initializer_deposit_token_account . owner == & token :: ID , ErrorCode :: InvalidInitializerTokenOwner) ;"
      },
      {
        "id": 2,
        "label": "require ! (ctx . accounts . escrow_account . owner == & token :: ID , ErrorCode :: InvalidEscrowTokenOwner) ;"
      },
      {
        "id": 3,
        "label": "let escrow_info = ctx . accounts . escrow_state . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "require ! (escrow_info . owner == ctx . program_id , ErrorCode :: InvalidEscrowStateOwner) ;"
      },
      {
        "id": 5,
        "label": "let escrow_state = & mut ctx . accounts . escrow_state ;"
      },
      {
        "id": 6,
        "label": "escrow_state . initializer = ctx . accounts . initializer . key () ;"
      },
      {
        "id": 7,
        "label": "escrow_state . initializer_deposit_token_account = ctx . accounts . initializer_deposit_token_account . key () ;"
      },
      {
        "id": 8,
        "label": "escrow_state . initializer_receive_token_account = ctx . accounts . initializer_receive_token_account . key () ;"
      },
      {
        "id": 9,
        "label": "escrow_state . initializer_amount = amount ;"
      },
      {
        "id": 10,
        "label": "escrow_state . taker_amount = expected_amount ;"
      },
      {
        "id": 11,
        "label": "let transfer_instruction = Transfer { from : ctx . accounts . initializer_deposit_token_account . to_account_info () , to : ctx . accounts . escrow_account . to_account_info () , authority : ctx . accounts . initializer . to_account_info () , } ;"
      },
      {
        "id": 12,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , transfer_instruction ,) ;"
      },
      {
        "id": 13,
        "label": "token :: transfer (cpi_ctx , amount)"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "call"
      }
    ]
  },
  {
    "name": "exchange",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let escrow_state_info = ctx . accounts . escrow_state . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "require ! (escrow_state_info . owner == ctx . program_id , ErrorCode :: InvalidEscrowStateOwner) ;"
      },
      {
        "id": 17,
        "label": "require ! (ctx . accounts . taker_deposit_token_account . owner == & token :: ID , ErrorCode :: InvalidTakerTokenOwner) ;"
      },
      {
        "id": 18,
        "label": "require ! (ctx . accounts . taker_receive_token_account . owner == & token :: ID , ErrorCode :: InvalidTakerReceiveTokenOwner) ;"
      },
      {
        "id": 19,
        "label": "let escrow_state = & ctx . accounts . escrow_state ;"
      },
      {
        "id": 20,
        "label": "let transfer_to_initializer = Transfer { from : ctx . accounts . taker_deposit_token_account . to_account_info () , to : ctx . accounts . initializer_receive_token_account . to_account_info () , authority : ctx . accounts . taker . to_account_info () , } ;"
      },
      {
        "id": 21,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , transfer_to_initializer ,) ;"
      },
      {
        "id": 22,
        "label": "token :: transfer (cpi_ctx , escrow_state . taker_amount) ? ;"
      },
      {
        "id": 23,
        "label": "let seeds = & [b\"escrow\" , escrow_state . initializer . as_ref () , & [ctx . accounts . escrow_state . bump] ,] ;"
      },
      {
        "id": 24,
        "label": "let signer = & [& seeds [..]] ;"
      },
      {
        "id": 25,
        "label": "let transfer_to_taker = Transfer { from : ctx . accounts . escrow_account . to_account_info () , to : ctx . accounts . taker_receive_token_account . to_account_info () , authority : ctx . accounts . escrow_state . to_account_info () , } ;"
      },
      {
        "id": 26,
        "label": "let cpi_ctx = CpiContext :: new_with_signer (ctx . accounts . token_program . to_account_info () , transfer_to_taker , signer ,) ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (cpi_ctx , escrow_state . initializer_amount)"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "call"
      }
    ]
  }
]