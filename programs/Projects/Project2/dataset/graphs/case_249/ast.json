[
  {
    "name": "breed",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Breed >",
      "parent1: u64",
      "parent2: u64",
      "slot: u64"
    ],
    "attributes": [],
    "body": [
      "let b = & mut ctx . accounts . cd ;",
      "let key = (parent1 , parent2) ;",
      "if slot >= * b . next_available . get (& key) . unwrap_or (& 0)",
      "{",
      "b . next_available . insert (key , slot + b . cooldown_slots) ;",
      "b . breed_count = b . breed_count . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "Breed",
    "node_type": "struct",
    "fields": [
      {
        "name": "cd",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , CooldownData >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "CooldownData",
    "node_type": "struct",
    "fields": [
      {
        "name": "next_available",
        "attribute": null,
        "field_type": "BTreeMap < (u64 , u64) , u64 >"
      },
      {
        "name": "cooldown_slots",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "breed_count",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]