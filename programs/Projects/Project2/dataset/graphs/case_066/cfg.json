[
  {
    "name": "create_auction",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let auction = & mut ctx . accounts . auction ;"
      },
      {
        "id": 2,
        "label": "auction . nft_mint = ctx . accounts . nft_mint . key () ;"
      },
      {
        "id": 3,
        "label": "auction . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 4,
        "label": "auction . starting_bid = starting_bid ;"
      },
      {
        "id": 5,
        "label": "auction . current_bid = starting_bid ;"
      },
      {
        "id": 6,
        "label": "auction . highest_bidder = Pubkey :: default () ;"
      },
      {
        "id": 7,
        "label": "auction . end_time = Clock :: get () ? . unix_timestamp + duration ;"
      },
      {
        "id": 8,
        "label": "auction . is_active = true ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "place_bid",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let auction = & mut ctx . accounts . auction ;"
      },
      {
        "id": 12,
        "label": "require ! (auction . is_active , AuctionError :: AuctionInactive) ;"
      },
      {
        "id": 13,
        "label": "require ! (Clock :: get () ?. unix_timestamp < auction . end_time , AuctionError :: AuctionExpired) ;"
      },
      {
        "id": 14,
        "label": "require ! (bid_amount > auction . current_bid , AuctionError :: BidTooLow) ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "auction . highest_bidder != Pubkey :: default ()"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "auction . current_bid = bid_amount ;"
      },
      {
        "id": 23,
        "label": "auction . highest_bidder = ctx . accounts . bidder . key () ;"
      },
      {
        "id": 24,
        "label": "let cpi_accounts = anchor_spl :: token :: Transfer { from : ctx . accounts . bidder_token_account . to_account_info () , to : ctx . accounts . escrow_token_account . to_account_info () , authority : ctx . accounts . bidder . to_account_info () , } ;"
      },
      {
        "id": 25,
        "label": "let cpi_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 26,
        "label": "let cpi_ctx = CpiContext :: new (cpi_program , cpi_accounts) ;"
      },
      {
        "id": 27,
        "label": "anchor_spl :: token :: transfer (cpi_ctx , bid_amount) ? ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 15,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  }
]