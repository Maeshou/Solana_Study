[
  {
    "name": "swap",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . slots ;"
      },
      {
        "id": 2,
        "label": "let i = idx as usize ;"
      },
      {
        "id": 3,
        "label": "require ! (i < s . slots . len () , ErrorCode :: IndexOutOfRange) ;"
      },
      {
        "id": 4,
        "label": "require ! (new_id != 0 , ErrorCode :: InvalidNewId) ;"
      },
      {
        "id": 5,
        "label": "require ! (ctx . accounts . authority . is_signer , ErrorCode :: MissingSigner) ;"
      },
      {
        "id": 6,
        "label": "require ! (s . authority == ctx . accounts . authority . key () , ErrorCode :: InvalidOwner) ;"
      },
      {
        "id": 7,
        "label": "if statement"
      },
      {
        "id": 8,
        "label": "predicate"
      },
      {
        "id": 9,
        "label": "s . slots [i] != 0"
      },
      {
        "id": 10,
        "label": "True body"
      },
      {
        "id": 11,
        "label": "let old = s . slots [i] ;"
      },
      {
        "id": 12,
        "label": "s . slots [i] = new_id ;"
      },
      {
        "id": 13,
        "label": "s . swap_count = s . swap_count . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 14,
        "label": "s . last_swapped = old ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "s . slots [i] = new_id ;"
      },
      {
        "id": 17,
        "label": "s . equipped_count = s . equipped_count . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "predicate"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "true"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 7,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 14,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  }
]