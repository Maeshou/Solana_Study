[
  {
    "name": "init_box",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . mbox ;"
      },
      {
        "id": 2,
        "label": "b . prizes = prizes ;"
      },
      {
        "id": 3,
        "label": "b . next_index = 0 ;"
      },
      {
        "id": 4,
        "label": "b . opens = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "open_box",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let b = & mut ctx . accounts . mbox ;"
      },
      {
        "id": 8,
        "label": "if statement"
      },
      {
        "id": 9,
        "label": "predicate"
      },
      {
        "id": 10,
        "label": "(b . next_index as usize) < b . prizes . len ()"
      },
      {
        "id": 11,
        "label": "True body"
      },
      {
        "id": 12,
        "label": "let prize = b . prizes [b . next_index as usize] ;"
      },
      {
        "id": 13,
        "label": "b . next_index += 1 ;"
      },
      {
        "id": 14,
        "label": "b . opens = b . opens . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "Ok (prize)"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "b . empty_opens = b . empty_opens . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "Ok (0)"
      },
      {
        "id": 19,
        "label": "merge"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "predicate"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "true"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 8,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 15,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  }
]