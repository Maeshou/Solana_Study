[
  {
    "name": "init_tag_list",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let tags = & mut ctx . accounts . tag_list ;"
      },
      {
        "id": 2,
        "label": "tags . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "tags . tags = Vec :: new () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_tag",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let tags = & mut ctx . accounts . tag_list ;"
      },
      {
        "id": 7,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 8,
        "label": "require ! (tags . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 9,
        "label": "require ! (tags . tags . len () < MAX_TAGS , ErrorCode :: MaxTagsReached) ;"
      },
      {
        "id": 10,
        "label": "require ! (name . len () <= 32 , ErrorCode :: NameTooLong) ;"
      },
      {
        "id": 11,
        "label": "let mut duplicate = false ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "t . name == name"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "duplicate = true ;"
      },
      {
        "id": 18,
        "label": "break ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "Loop End"
      },
      {
        "id": 23,
        "label": "require ! (! duplicate , ErrorCode :: DuplicateTag) ;"
      },
      {
        "id": 24,
        "label": "tags . tags . push (TagItem { name , created_at : now }) ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 12,
        "to": 22,
        "label": "for"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      }
    ]
  },
  {
    "name": "rename_tag",
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "let tags = & mut ctx . accounts . tag_list ;"
      },
      {
        "id": 28,
        "label": "let user = ctx . accounts . user . key () ;"
      },
      {
        "id": 29,
        "label": "require ! (tags . owner == user , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 30,
        "label": "require ! ((index as usize) < tags . tags . len () , ErrorCode :: IndexOutOfBounds) ;"
      },
      {
        "id": 31,
        "label": "require ! (new_name . len () <= 32 , ErrorCode :: NameTooLong) ;"
      },
      {
        "id": 32,
        "label": "let mut exists = false ;"
      },
      {
        "id": 33,
        "label": "Loop Start"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "t . name == new_name"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "exists = true ;"
      },
      {
        "id": 39,
        "label": "break ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "No-op"
      },
      {
        "id": 42,
        "label": "merge"
      },
      {
        "id": 43,
        "label": "Loop End"
      },
      {
        "id": 44,
        "label": "require ! (! exists , ErrorCode :: DuplicateTag) ;"
      },
      {
        "id": 45,
        "label": "tags . tags [index as usize] . name = new_name ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 34,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 33,
        "to": 43,
        "label": "for"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      }
    ]
  },
  {
    "name": "delete_tag",
    "nodes": [
      {
        "id": 47,
        "label": "Entry"
      },
      {
        "id": 48,
        "label": "let tags = & mut ctx . accounts . tag_list ;"
      },
      {
        "id": 49,
        "label": "require ! (tags . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 50,
        "label": "let idx = tags . tags . iter () . enumerate () . find_map (| (i , _) | if i == index as usize { Some (i) } else { None }) ;"
      },
      {
        "id": 51,
        "label": "let i = idx . ok_or (ErrorCode :: IndexOutOfBounds) ? ;"
      },
      {
        "id": 52,
        "label": "tags . tags . remove (i) ;"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]