[
  {
    "name": "deposit",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Deposit >",
      "amount: u64"
    ],
    "attributes": [],
    "body": [
      "require ! (ctx . accounts . user_token_account . owner == & token :: ID , ErrorCode :: InvalidUserTokenOwner) ;",
      "require ! (ctx . accounts . vault_token_account . owner == & token :: ID , ErrorCode :: InvalidVaultTokenOwner) ;",
      "require ! (ctx . accounts . vault . to_account_info () . owner == ctx . program_id , ErrorCode :: InvalidVaultOwner) ;",
      "let vault = & mut ctx . accounts . vault ;",
      "vault . total_deposited += amount ;",
      "let transfer_instruction = Transfer { from : ctx . accounts . user_token_account . to_account_info () , to : ctx . accounts . vault_token_account . to_account_info () , authority : ctx . accounts . authority . to_account_info () , } ;",
      "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , transfer_instruction ,) ;",
      "token :: transfer (cpi_ctx , amount)"
    ]
  },
  {
    "name": "withdraw",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Withdraw >",
      "amount: u64"
    ],
    "attributes": [],
    "body": [
      "let vault_info = ctx . accounts . vault . to_account_info () ;",
      "require ! (vault_info . owner == ctx . program_id , ErrorCode :: InvalidVaultOwner) ;",
      "let vault = & mut ctx . accounts . vault ;",
      "require ! (vault . total_deposited >= amount , ErrorCode :: InsufficientFunds) ;",
      "vault . total_deposited -= amount ;",
      "let seeds = & [b\"vault\" , ctx . accounts . vault . authority . as_ref () , & [ctx . accounts . vault . bump] ,] ;",
      "let signer = & [& seeds [..]] ;",
      "let transfer_instruction = Transfer { from : ctx . accounts . vault_token_account . to_account_info () , to : ctx . accounts . user_token_account . to_account_info () , authority : ctx . accounts . vault . to_account_info () , } ;",
      "let cpi_ctx = CpiContext :: new_with_signer (ctx . accounts . token_program . to_account_info () , transfer_instruction , signer ,) ;",
      "token :: transfer (cpi_ctx , amount)"
    ]
  },
  {
    "name": "Deposit",
    "node_type": "struct",
    "fields": [
      {
        "name": "vault",
        "attribute": "# [account (mut , constraint = vault . to_account_info () . owner == program_id)]",
        "field_type": "Account < 'info , Vault >"
      },
      {
        "name": "user_token_account",
        "attribute": "# [account (mut , constraint = user_token_account . owner == & token :: ID)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "vault_token_account",
        "attribute": "# [account (mut , constraint = vault_token_account . owner == & token :: ID)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Withdraw",
    "node_type": "struct",
    "fields": [
      {
        "name": "vault",
        "attribute": "# [account (mut , has_one = authority , constraint = vault . to_account_info () . owner == program_id)]",
        "field_type": "Account < 'info , Vault >"
      },
      {
        "name": "user_token_account",
        "attribute": "# [account (mut , constraint = user_token_account . owner == & token :: ID)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "vault_token_account",
        "attribute": "# [account (mut , constraint = vault_token_account . owner == & token :: ID)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Vault",
    "node_type": "struct",
    "fields": [
      {
        "name": "authority",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "total_deposited",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "bump",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]