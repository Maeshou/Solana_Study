[
  {
    "name": "add_item",
    "inputs": [
      "ctx: Context < AddItem >",
      "label: String",
      "quantity: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if label . len () > 64 { return Err (ErrorCode :: LabelTooLong . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: LabelTooLong . into ()) ;"
      },
      {
        "id": 3,
        "label": "let item = & mut ctx . accounts . item ;"
      },
      {
        "id": 4,
        "label": "item . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 5,
        "label": "item . label = label ;"
      },
      {
        "id": 6,
        "label": "item . quantity = quantity ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: item"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: item"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: item"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: item"
      }
    ]
  },
  {
    "name": "adjust_quantity",
    "inputs": [
      "ctx: Context < AdjustQuantity >",
      "delta: i32"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let item = & mut ctx . accounts . item ;"
      },
      {
        "id": 10,
        "label": "let user = ctx . accounts . user . key () ;"
      },
      {
        "id": 11,
        "label": "if item . owner != user { return Err (ErrorCode :: Unauthorized . into ()) ; }"
      },
      {
        "id": 12,
        "label": "return Err (ErrorCode :: Unauthorized . into ()) ;"
      },
      {
        "id": 13,
        "label": "let new_qty = item . quantity as i32 + delta ;"
      },
      {
        "id": 14,
        "label": "if new_qty < 0 { return Err (ErrorCode :: InsufficientQuantity . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (ErrorCode :: InsufficientQuantity . into ()) ;"
      },
      {
        "id": 16,
        "label": "item . quantity = new_qty as u32 ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: item"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: user"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: item"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: user"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: new_qty"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: item"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: new_qty"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: item"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: new_qty"
      }
    ]
  }
]