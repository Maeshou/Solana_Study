[
  {
    "name": "update_admin",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < UpdateAdmin >",
      "new_admin: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let config_info = & ctx . accounts . config ;",
      "if * config_info . owner != * ctx . program_id",
      "{",
      "return err ! (ErrorCode :: InvalidOwner) ;",
      "}",
      "let mut config_data = Config :: try_from_slice (& config_info . data . borrow ()) ? ;",
      "config_data . admin = new_admin ;",
      "let mut data_slice = & mut config_info . data . borrow_mut () [..] ;",
      "config_data . try_serialize (& mut data_slice) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "UpdateAdmin",
    "node_type": "struct",
    "fields": [
      {
        "name": "config",
        "attribute": "# [doc = \" CHECK: We perform a manual owner check inside the instruction.\"] # [account (mut , has_one = admin)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Config",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "creation_fee",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]