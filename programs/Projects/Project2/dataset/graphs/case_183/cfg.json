[
  {
    "name": "initialize",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let log = & mut ctx . accounts . log ;"
      },
      {
        "id": 2,
        "label": "log . owner = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "log . bump = * ctx . bumps . get (\"log\") . unwrap () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_temperature",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let log = & mut ctx . accounts . log ;"
      },
      {
        "id": 7,
        "label": "let list = & mut log . entries ;"
      },
      {
        "id": 8,
        "label": "if statement"
      },
      {
        "id": 9,
        "label": "predicate"
      },
      {
        "id": 10,
        "label": "list . len () >= MAX_ENTRIES"
      },
      {
        "id": 11,
        "label": "True body"
      },
      {
        "id": 12,
        "label": "return err ! (ErrorCode :: MaxEntriesReached) ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "No-op"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 17,
        "label": "list . push ((now , temp_x100)) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "predicate"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "true"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "purge_old",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 21,
        "label": "let cutoff = now . checked_sub (age_limit_secs) . ok_or (ErrorCode :: TimestampOverflow) ? ;"
      },
      {
        "id": 22,
        "label": "ctx . accounts . log . entries . retain (| & (ts , _) | { if ts >= cutoff { true } else { false } }) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "average_recent",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let log = & ctx . accounts . log ;"
      },
      {
        "id": 26,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 27,
        "label": "let start = now . checked_sub (window_secs) . ok_or (ErrorCode :: TimestampOverflow) ? ;"
      },
      {
        "id": 28,
        "label": "let mut sum : u128 = 0 ;"
      },
      {
        "id": 29,
        "label": "let mut cnt : u64 = 0 ;"
      },
      {
        "id": 30,
        "label": "Loop Start"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "ts >= start"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "sum = sum . wrapping_add (temp as u128) ;"
      },
      {
        "id": 36,
        "label": "cnt = cnt . wrapping_add (1) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "cnt > 0"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let avg_x100 = (sum / cnt as u128) as u64 ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Average recent temp: {}.{:02}â„ƒ\" , avg_x100 / 100 , avg_x100 % 100) ;"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "No-op"
      },
      {
        "id": 49,
        "label": "merge"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 30,
        "to": 40,
        "label": "for"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 41,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]