[
  {
    "name": "init_queue",
    "inputs": [
      "ctx: Context < InitQueue >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let q = & mut ctx . accounts . queue ;"
      },
      {
        "id": 2,
        "label": "q . head = None ;"
      },
      {
        "id": 3,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: q"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: q"
      }
    ]
  },
  {
    "name": "enqueue",
    "inputs": [
      "ctx: Context < ModifyQueue >",
      "player: Pubkey"
    ],
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let q = & mut ctx . accounts . queue ;"
      },
      {
        "id": 6,
        "label": "let node = Node { key : player , next : q . head } ;"
      },
      {
        "id": 7,
        "label": "q . head = Some (Box :: into_inner (Box :: new (node))) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: q"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: node"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: q"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: q"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: node"
      }
    ]
  },
  {
    "name": "dequeue",
    "inputs": [
      "ctx: Context < ModifyQueue >"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let q = & mut ctx . accounts . queue ;"
      },
      {
        "id": 11,
        "label": "if let Some (mut first) = q . head . take () { q . head = first . next . take () . map (Box :: into_inner) ; return Ok (Some (first . key)) ; }"
      },
      {
        "id": 12,
        "label": "q . head = first . next . take () . map (Box :: into_inner) ;"
      },
      {
        "id": 13,
        "label": "return Ok (Some (first . key)) ;"
      },
      {
        "id": 14,
        "label": "Ok (None)"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: q"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: q"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: q"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: q"
      }
    ]
  }
]