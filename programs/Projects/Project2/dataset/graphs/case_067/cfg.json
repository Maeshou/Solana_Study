[
  {
    "name": "initialize_dao",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let dao = & mut ctx . accounts . dao ;"
      },
      {
        "id": 2,
        "label": "dao . governance_token = ctx . accounts . governance_token . key () ;"
      },
      {
        "id": 3,
        "label": "dao . voting_period = voting_period ;"
      },
      {
        "id": 4,
        "label": "dao . min_tokens_to_propose = min_tokens ;"
      },
      {
        "id": 5,
        "label": "dao . proposal_count = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_proposal",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "require ! (ctx . accounts . proposer_token_account . amount >= ctx . accounts . dao . min_tokens_to_propose , DAOError :: InsufficientTokens) ;"
      },
      {
        "id": 9,
        "label": "let dao = & mut ctx . accounts . dao ;"
      },
      {
        "id": 10,
        "label": "let proposal = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 11,
        "label": "proposal . dao = dao . key () ;"
      },
      {
        "id": 12,
        "label": "proposal . proposer = ctx . accounts . proposer . key () ;"
      },
      {
        "id": 13,
        "label": "proposal . title = title ;"
      },
      {
        "id": 14,
        "label": "proposal . description = description ;"
      },
      {
        "id": 15,
        "label": "proposal . yes_votes = 0 ;"
      },
      {
        "id": 16,
        "label": "proposal . no_votes = 0 ;"
      },
      {
        "id": 17,
        "label": "proposal . end_time = Clock :: get () ? . unix_timestamp + dao . voting_period ;"
      },
      {
        "id": 18,
        "label": "proposal . executed = false ;"
      },
      {
        "id": 19,
        "label": "dao . proposal_count += 1 ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  },
  {
    "name": "vote_on_proposal",
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let proposal = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 23,
        "label": "require ! (Clock :: get () ?. unix_timestamp < proposal . end_time , DAOError :: VotingPeriodEnded) ;"
      },
      {
        "id": 24,
        "label": "require ! (ctx . accounts . voter_token_account . amount >= voting_power , DAOError :: InsufficientVotingPower) ;"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "vote"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "proposal . yes_votes += voting_power ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "proposal . no_votes += voting_power ;"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 25,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  }
]