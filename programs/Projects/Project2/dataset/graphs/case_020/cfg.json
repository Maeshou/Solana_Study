[
  {
    "name": "create_campaign",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let campaign = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 2,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 3,
        "label": "let current_time = clock . unix_timestamp ;"
      },
      {
        "id": 4,
        "label": "campaign . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 5,
        "label": "campaign . title = title ;"
      },
      {
        "id": 6,
        "label": "campaign . description = description ;"
      },
      {
        "id": 7,
        "label": "campaign . goal_amount = goal_amount ;"
      },
      {
        "id": 8,
        "label": "campaign . raised_amount = 0 ;"
      },
      {
        "id": 9,
        "label": "campaign . start_time = current_time ;"
      },
      {
        "id": 10,
        "label": "campaign . end_time = current_time . checked_add (duration_days as i64 * 24 * 60 * 60) . ok_or (CrowdfundingError :: Overflow) ? ;"
      },
      {
        "id": 11,
        "label": "campaign . is_active = true ;"
      },
      {
        "id": 12,
        "label": "campaign . is_successful = false ;"
      },
      {
        "id": 13,
        "label": "campaign . backer_count = 0 ;"
      },
      {
        "id": 14,
        "label": "campaign . bump = * ctx . bumps . get (\"campaign\") . unwrap () ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "contribute",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let campaign = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 18,
        "label": "let contribution = & mut ctx . accounts . contribution ;"
      },
      {
        "id": 19,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 20,
        "label": "let current_time = clock . unix_timestamp ;"
      },
      {
        "id": 21,
        "label": "require ! (campaign . is_active , CrowdfundingError :: CampaignNotActive) ;"
      },
      {
        "id": 22,
        "label": "require ! (current_time <= campaign . end_time , CrowdfundingError :: CampaignEnded) ;"
      },
      {
        "id": 23,
        "label": "require ! (amount > 0 , CrowdfundingError :: InvalidAmount) ;"
      },
      {
        "id": 24,
        "label": "contribution . campaign = campaign . key () ;"
      },
      {
        "id": 25,
        "label": "contribution . backer = ctx . accounts . backer . key () ;"
      },
      {
        "id": 26,
        "label": "contribution . amount = amount ;"
      },
      {
        "id": 27,
        "label": "contribution . contributed_at = current_time ;"
      },
      {
        "id": 28,
        "label": "contribution . refunded = false ;"
      },
      {
        "id": 29,
        "label": "contribution . bump = * ctx . bumps . get (\"contribution\") . unwrap () ;"
      },
      {
        "id": 30,
        "label": "campaign . raised_amount = campaign . raised_amount . checked_add (amount) . ok_or (CrowdfundingError :: Overflow) ? ;"
      },
      {
        "id": 31,
        "label": "campaign . backer_count = campaign . backer_count . checked_add (1) . ok_or (CrowdfundingError :: Overflow) ? ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "campaign . raised_amount >= campaign . goal_amount"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "campaign . is_successful = true ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . backer . key () , & ctx . accounts . campaign . key () , amount ,) ;"
      },
      {
        "id": 41,
        "label": "invoke (& ix , & [ctx . accounts . backer . to_account_info () , ctx . accounts . campaign . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  },
  {
    "name": "finalize_campaign",
    "nodes": [
      {
        "id": 43,
        "label": "Entry"
      },
      {
        "id": 44,
        "label": "let campaign = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 45,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 46,
        "label": "let current_time = clock . unix_timestamp ;"
      },
      {
        "id": 47,
        "label": "require ! (current_time > campaign . end_time , CrowdfundingError :: CampaignStillActive) ;"
      },
      {
        "id": 48,
        "label": "require ! (campaign . creator == ctx . accounts . creator . key () , CrowdfundingError :: Unauthorized) ;"
      },
      {
        "id": 49,
        "label": "campaign . is_active = false ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "campaign . is_successful"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "let amount = campaign . raised_amount ;"
      },
      {
        "id": 55,
        "label": "let ix = system_instruction :: transfer (& campaign . key () , & ctx . accounts . creator . key () , amount ,) ;"
      },
      {
        "id": 56,
        "label": "invoke (& ix , & [ctx . accounts . campaign . to_account_info () , ctx . accounts . creator . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 50,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      }
    ]
  },
  {
    "name": "refund_contribution",
    "nodes": [
      {
        "id": 61,
        "label": "Entry"
      },
      {
        "id": 62,
        "label": "let campaign = & ctx . accounts . campaign ;"
      },
      {
        "id": 63,
        "label": "let contribution = & mut ctx . accounts . contribution ;"
      },
      {
        "id": 64,
        "label": "require ! (! campaign . is_active , CrowdfundingError :: CampaignStillActive) ;"
      },
      {
        "id": 65,
        "label": "require ! (! campaign . is_successful , CrowdfundingError :: CampaignSuccessful) ;"
      },
      {
        "id": 66,
        "label": "require ! (contribution . backer == ctx . accounts . backer . key () , CrowdfundingError :: Unauthorized) ;"
      },
      {
        "id": 67,
        "label": "require ! (! contribution . refunded , CrowdfundingError :: AlreadyRefunded) ;"
      },
      {
        "id": 68,
        "label": "contribution . refunded = true ;"
      },
      {
        "id": 69,
        "label": "let amount = contribution . amount ;"
      },
      {
        "id": 70,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . campaign . key () , & ctx . accounts . backer . key () , amount ,) ;"
      },
      {
        "id": 71,
        "label": "invoke (& ix , & [ctx . accounts . campaign . to_account_info () , ctx . accounts . backer . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 72,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      }
    ]
  }
]