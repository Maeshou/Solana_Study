[
  {
    "name": "create_patient_record",
    "inputs": [
      "ctx: Context < CreatePatientRecord >",
      "name: String",
      "date_of_birth: i64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let patient_record = & mut ctx . accounts . patient_record ;"
      },
      {
        "id": 2,
        "label": "patient_record . patient = ctx . accounts . patient . key () ;"
      },
      {
        "id": 3,
        "label": "patient_record . name = name ;"
      },
      {
        "id": 4,
        "label": "patient_record . date_of_birth = date_of_birth ;"
      },
      {
        "id": 5,
        "label": "patient_record . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 6,
        "label": "patient_record . authorized_doctors = Vec :: new () ;"
      },
      {
        "id": 7,
        "label": "patient_record . bump = * ctx . bumps . get (\"patient_record\") . unwrap () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: patient_record"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: patient_record"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: patient_record"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: patient_record"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: patient_record"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: patient_record"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: patient_record"
      }
    ]
  },
  {
    "name": "authorize_doctor",
    "inputs": [
      "ctx: Context < AuthorizeDoctor >"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let patient_record = & mut ctx . accounts . patient_record ;"
      },
      {
        "id": 11,
        "label": "require ! (! patient_record . authorized_doctors . contains (ctx . accounts . doctor . key) , HealthcareError :: DoctorAlreadyAuthorized) ;"
      },
      {
        "id": 12,
        "label": "patient_record . authorized_doctors . push (* ctx . accounts . doctor . key) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: patient_record"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: patient_record"
      }
    ]
  },
  {
    "name": "add_medical_record",
    "inputs": [
      "ctx: Context < AddMedicalRecord >",
      "diagnosis: String",
      "treatment: String",
      "notes: String"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let patient_record = & ctx . accounts . patient_record ;"
      },
      {
        "id": 16,
        "label": "let medical_record = & mut ctx . accounts . medical_record ;"
      },
      {
        "id": 17,
        "label": "require ! (patient_record . authorized_doctors . contains (& ctx . accounts . doctor . key ()) , HealthcareError :: DoctorNotAuthorized) ;"
      },
      {
        "id": 18,
        "label": "medical_record . patient_record = patient_record . key () ;"
      },
      {
        "id": 19,
        "label": "medical_record . doctor = ctx . accounts . doctor . key () ;"
      },
      {
        "id": 20,
        "label": "medical_record . diagnosis = diagnosis ;"
      },
      {
        "id": 21,
        "label": "medical_record . treatment = treatment ;"
      },
      {
        "id": 22,
        "label": "medical_record . notes = notes ;"
      },
      {
        "id": 23,
        "label": "medical_record . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 24,
        "label": "medical_record . bump = * ctx . bumps . get (\"medical_record\") . unwrap () ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: patient_record"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: medical_record"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: medical_record"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: patient_record"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: medical_record"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: medical_record"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: medical_record"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: medical_record"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: medical_record"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: medical_record"
      }
    ]
  },
  {
    "name": "revoke_doctor_access",
    "inputs": [
      "ctx: Context < RevokeDoctorAccess >"
    ],
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "let patient_record = & mut ctx . accounts . patient_record ;"
      },
      {
        "id": 28,
        "label": "patient_record . authorized_doctors . retain (| & x | x != * ctx . accounts . doctor . key) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 27,
        "to": 27,
        "label": "def: patient_record"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: patient_record"
      }
    ]
  }
]