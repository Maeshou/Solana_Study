[
  {
    "name": "create_event",
    "inputs": [
      "ctx: Context < CreateEvent >",
      "name: String",
      "venue: String",
      "date: i64",
      "ticket_price: u64",
      "max_tickets: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let event = & mut ctx . accounts . event ;"
      },
      {
        "id": 2,
        "label": "event . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "event . name = name ;"
      },
      {
        "id": 4,
        "label": "event . venue = venue ;"
      },
      {
        "id": 5,
        "label": "event . date = date ;"
      },
      {
        "id": 6,
        "label": "event . ticket_price = ticket_price ;"
      },
      {
        "id": 7,
        "label": "event . max_tickets = max_tickets ;"
      },
      {
        "id": 8,
        "label": "event . tickets_sold = 0 ;"
      },
      {
        "id": 9,
        "label": "event . is_active = true ;"
      },
      {
        "id": 10,
        "label": "event . bump = * ctx . bumps . get (\"event\") . unwrap () ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: event"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: event"
      }
    ]
  },
  {
    "name": "purchase_ticket",
    "inputs": [
      "ctx: Context < PurchaseTicket >",
      "quantity: u64"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let event = & mut ctx . accounts . event ;"
      },
      {
        "id": 14,
        "label": "let ticket = & mut ctx . accounts . ticket ;"
      },
      {
        "id": 15,
        "label": "require ! (event . is_active , TicketingError :: EventNotActive) ;"
      },
      {
        "id": 16,
        "label": "require ! (event . tickets_sold + quantity <= event . max_tickets , TicketingError :: NotEnoughTickets) ;"
      },
      {
        "id": 17,
        "label": "require ! (Clock :: get () ?. unix_timestamp < event . date , TicketingError :: EventPassed) ;"
      },
      {
        "id": 18,
        "label": "ticket . event = event . key () ;"
      },
      {
        "id": 19,
        "label": "ticket . owner = ctx . accounts . buyer . key () ;"
      },
      {
        "id": 20,
        "label": "ticket . quantity = quantity ;"
      },
      {
        "id": 21,
        "label": "ticket . purchased_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 22,
        "label": "ticket . is_used = false ;"
      },
      {
        "id": 23,
        "label": "ticket . bump = * ctx . bumps . get (\"ticket\") . unwrap () ;"
      },
      {
        "id": 24,
        "label": "event . tickets_sold += quantity ;"
      },
      {
        "id": 25,
        "label": "let total_cost = event . ticket_price * quantity ;"
      },
      {
        "id": 26,
        "label": "* * ctx . accounts . buyer . lamports . borrow_mut () -= total_cost ;"
      },
      {
        "id": 27,
        "label": "* * ctx . accounts . organizer . lamports . borrow_mut () += total_cost ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: event"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: ticket"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: ticket"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: event"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: ticket"
      },
      {
        "from": 14,
        "to": 20,
        "label": "data_dep: ticket"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: ticket"
      },
      {
        "from": 14,
        "to": 22,
        "label": "data_dep: ticket"
      },
      {
        "from": 14,
        "to": 23,
        "label": "data_dep: ticket"
      },
      {
        "from": 13,
        "to": 24,
        "label": "data_dep: event"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: total_cost"
      },
      {
        "from": 13,
        "to": 25,
        "label": "data_dep: event"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: total_cost"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: total_cost"
      }
    ]
  },
  {
    "name": "validate_ticket",
    "inputs": [
      "ctx: Context < ValidateTicket >"
    ],
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "let ticket = & mut ctx . accounts . ticket ;"
      },
      {
        "id": 31,
        "label": "let event = & ctx . accounts . event ;"
      },
      {
        "id": 32,
        "label": "require ! (! ticket . is_used , TicketingError :: TicketAlreadyUsed) ;"
      },
      {
        "id": 33,
        "label": "require ! (Clock :: get () ?. unix_timestamp >= event . date - 3600 , TicketingError :: TooEarlyForEntry) ;"
      },
      {
        "id": 34,
        "label": "require ! (Clock :: get () ?. unix_timestamp <= event . date + 86400 , TicketingError :: EventExpired) ;"
      },
      {
        "id": 35,
        "label": "ticket . is_used = true ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 30,
        "label": "def: ticket"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: event"
      },
      {
        "from": 30,
        "to": 35,
        "label": "data_dep: ticket"
      }
    ]
  }
]