[
  {
    "name": "initialize",
    "inputs": [
      "ctx: Context < Initialize >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = * ctx . bumps . get (\"lot\") . unwrap () ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . lot . 0 = b ;"
      },
      {
        "id": 3,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: b"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: b"
      }
    ]
  },
  {
    "name": "enter",
    "inputs": [
      "ctx: Context < Modify >",
      "vehicle: Pubkey"
    ],
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let list = & mut ctx . accounts . lot . 1 ;"
      },
      {
        "id": 6,
        "label": "if list . len () >= MAX_VEHICLES { return err ! (ErrorCode :: LotFull) ; }"
      },
      {
        "id": 7,
        "label": "return err ! (ErrorCode :: LotFull) ;"
      },
      {
        "id": 8,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 9,
        "label": "list . push ((vehicle , now)) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: list"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: list"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: now"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: list"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: now"
      }
    ]
  },
  {
    "name": "exit",
    "inputs": [
      "ctx: Context < Modify >",
      "vehicle: Pubkey"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let list = & mut ctx . accounts . lot . 1 ;"
      },
      {
        "id": 13,
        "label": "list . retain (| & (v , _) | { if v == vehicle { false } else { true } }) ;"
      },
      {
        "id": 14,
        "label": "if v == vehicle { false } else { true }"
      },
      {
        "id": 15,
        "label": "false"
      },
      {
        "id": 16,
        "label": "true"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: list"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: list"
      }
    ]
  },
  {
    "name": "count_cars",
    "inputs": [
      "ctx: Context < Modify >"
    ],
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let cnt = ctx . accounts . lot . 1 . len () as u64 ;"
      },
      {
        "id": 20,
        "label": "msg ! (\"Current parked vehicles: {}\" , cnt) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 19,
        "label": "def: cnt"
      }
    ]
  }
]