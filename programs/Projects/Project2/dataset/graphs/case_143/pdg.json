[
  {
    "name": "init_list",
    "inputs": [
      "ctx: Context < InitList >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 2,
        "label": "list . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "list . entries . clear () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: list"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: list"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: list"
      }
    ]
  },
  {
    "name": "add_entry",
    "inputs": [
      "ctx: Context < ModifyList >",
      "description: String"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 7,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 8,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 9,
        "label": "require ! (list . entries . len () < 30 , ErrorCode :: ListFull) ;"
      },
      {
        "id": 10,
        "label": "require ! (description . len () <= 64 , ErrorCode :: TooLong) ;"
      },
      {
        "id": 11,
        "label": "let mut exists = false ;"
      },
      {
        "id": 12,
        "label": "for entry in list . entries . iter () { if entry . description == description { exists = true ; break ; } }"
      },
      {
        "id": 13,
        "label": "if entry . description == description { exists = true ; break ; }"
      },
      {
        "id": 14,
        "label": "exists = true ;"
      },
      {
        "id": 15,
        "label": "break ;"
      },
      {
        "id": 16,
        "label": "require ! (! exists , ErrorCode :: Duplicate) ;"
      },
      {
        "id": 17,
        "label": "list . entries . push (WishEntry { description , added_at : now , purchased : false , purchased_at : 0 , }) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: list"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: now"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: exists"
      },
      {
        "from": 6,
        "to": 12,
        "label": "data_dep: list"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: exists"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: exists"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: exists"
      },
      {
        "from": 6,
        "to": 17,
        "label": "data_dep: list"
      },
      {
        "from": 7,
        "to": 17,
        "label": "data_dep: now"
      }
    ]
  },
  {
    "name": "purchase",
    "inputs": [
      "ctx: Context < ModifyList >",
      "index: u32"
    ],
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 21,
        "label": "let idx = index as usize ;"
      },
      {
        "id": 22,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 23,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 24,
        "label": "require ! (idx < list . entries . len () , ErrorCode :: IndexOutOfBounds) ;"
      },
      {
        "id": 25,
        "label": "require ! (! list . entries [idx] . purchased , ErrorCode :: AlreadyPurchased) ;"
      },
      {
        "id": 26,
        "label": "let item = & mut list . entries [idx] ;"
      },
      {
        "id": 27,
        "label": "item . purchased = true ;"
      },
      {
        "id": 28,
        "label": "item . purchased_at = now ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 20,
        "label": "def: list"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: idx"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: now"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: item"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: list"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: idx"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: item"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: item"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: now"
      }
    ]
  },
  {
    "name": "remove_entry",
    "inputs": [
      "ctx: Context < ModifyList >",
      "index: u32"
    ],
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 32,
        "label": "let idx = index as usize ;"
      },
      {
        "id": 33,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 34,
        "label": "require ! (idx < list . entries . len () , ErrorCode :: IndexOutOfBounds) ;"
      },
      {
        "id": 35,
        "label": "list . entries . remove (idx) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 31,
        "label": "def: list"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: idx"
      },
      {
        "from": 31,
        "to": 35,
        "label": "data_dep: list"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: idx"
      }
    ]
  }
]