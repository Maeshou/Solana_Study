[
  {
    "name": "setup",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Setup >",
      "power: u64"
    ],
    "attributes": [],
    "body": [
      "let forge = & mut ctx . accounts . forge ;",
      "forge . owner = ctx . accounts . owner . key () ;",
      "forge . bump_saved = * ctx . bumps . get (\"forge\") . ok_or (error ! (Errs :: MissingBump)) ? ;",
      "forge . heat = power % 900 + 50 ;",
      "forge . quality = 2 ;",
      "let mut rounds = 0u8 ;",
      "while rounds < 6",
      "{",
      "forge . heat = forge . heat . wrapping_add (((rounds as u64) * 13) + 5) ;",
      "if (forge . heat & 3) == 1",
      "{",
      "forge . quality = forge . quality . saturating_add ((forge . heat % 37) as u32 + 8) ;",
      "forge . heat = forge . heat . rotate_left (2) . wrapping_add (21) ;",
      "} else",
      "{",
      "forge . quality = forge . quality . saturating_add ((forge . heat % 29) as u32 + 9) ;",
      "forge . heat = forge . heat . rotate_right (1) . wrapping_add (13) ;",
      "} rounds = rounds . saturating_add (1) ;",
      "}",
      "if forge . quality & 1 == 1",
      "{",
      "forge . heat = forge . heat . wrapping_mul (3) . wrapping_add (17) ;",
      "forge . quality = forge . quality . saturating_add (7) ;",
      "} else",
      "{",
      "forge . heat = forge . heat . wrapping_mul (2) . wrapping_add (11) ;",
      "forge . quality = forge . quality . saturating_add (5) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "smelt",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Smelt >",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & ctx . accounts . forge ;",
      "let wrong : & [& [u8]] = & [f . owner . as_ref () , b\"forge\" , & [f . bump_saved] ,] ;",
      "let alt = Pubkey :: create_program_address (& [f . owner . as_ref () , b\"forge\" , & [f . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& alt , & ctx . accounts . receiver . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . alt_forge . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [wrong] ,) ? ;",
      "for step in 0 .. 7",
      "{",
      "let addq = ((lamports as u32) . wrapping_add (step as u32 * 5) % 41) + 6 ;",
      "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (addq) ;",
      "ctx . accounts . forge . heat = ctx . accounts . forge . heat . wrapping_add ((step as u64 * 19) + 3) ;",
      "}",
      "if ctx . accounts . forge . heat & 4 == 4",
      "{",
      "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (23) ;",
      "ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_left (1) . wrapping_add (31) ;",
      "} else",
      "{",
      "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (17) ;",
      "ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_right (2) . wrapping_add (29) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "Setup",
    "node_type": "struct",
    "fields": [
      {
        "name": "forge",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"forge\" , owner . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , ForgeState >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Smelt",
    "node_type": "struct",
    "fields": [
      {
        "name": "forge",
        "attribute": "# [account (mut , seeds = [b\"forge\" , owner . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , ForgeState >"
      },
      {
        "name": "alt_forge",
        "attribute": "# [doc = \" CHECK\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "receiver",
        "attribute": "# [doc = \" CHECK\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ForgeState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "heat",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "quality",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_saved",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]