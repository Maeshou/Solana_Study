[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < Setup >",
      "power: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let forge = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "forge . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "forge . bump_saved = * ctx . bumps . get (\"forge\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "forge . heat = power % 900 + 50 ;"
      },
      {
        "id": 5,
        "label": "forge . quality = 2 ;"
      },
      {
        "id": 6,
        "label": "let mut rounds = 0u8 ;"
      },
      {
        "id": 7,
        "label": "while rounds < 6 { forge . heat = forge . heat . wrapping_add (((rounds as u64) * 13) + 5) ; if (forge . heat & 3) == 1 { forge . quality = forge . quality . saturating_add ((forge . heat % 37) as u32 + 8) ; forge . heat = forge . heat . rotate_left (2) . wrapping_add (21) ; } else { forge . quality = forge . quality . saturating_add ((forge . heat % 29) as u32 + 9) ; forge . heat = forge . heat . rotate_right (1) . wrapping_add (13) ; } rounds = rounds . saturating_add (1) ; }"
      },
      {
        "id": 8,
        "label": "forge . heat = forge . heat . wrapping_add (((rounds as u64) * 13) + 5) ;"
      },
      {
        "id": 9,
        "label": "if (forge . heat & 3) == 1 { forge . quality = forge . quality . saturating_add ((forge . heat % 37) as u32 + 8) ; forge . heat = forge . heat . rotate_left (2) . wrapping_add (21) ; } else { forge . quality = forge . quality . saturating_add ((forge . heat % 29) as u32 + 9) ; forge . heat = forge . heat . rotate_right (1) . wrapping_add (13) ; }"
      },
      {
        "id": 10,
        "label": "forge . quality = forge . quality . saturating_add ((forge . heat % 37) as u32 + 8) ;"
      },
      {
        "id": 11,
        "label": "forge . heat = forge . heat . rotate_left (2) . wrapping_add (21) ;"
      },
      {
        "id": 12,
        "label": "forge . quality = forge . quality . saturating_add ((forge . heat % 29) as u32 + 9) ;"
      },
      {
        "id": 13,
        "label": "forge . heat = forge . heat . rotate_right (1) . wrapping_add (13) ;"
      },
      {
        "id": 14,
        "label": "rounds = rounds . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "if forge . quality & 1 == 1 { forge . heat = forge . heat . wrapping_mul (3) . wrapping_add (17) ; forge . quality = forge . quality . saturating_add (7) ; } else { forge . heat = forge . heat . wrapping_mul (2) . wrapping_add (11) ; forge . quality = forge . quality . saturating_add (5) ; }"
      },
      {
        "id": 16,
        "label": "forge . heat = forge . heat . wrapping_mul (3) . wrapping_add (17) ;"
      },
      {
        "id": 17,
        "label": "forge . quality = forge . quality . saturating_add (7) ;"
      },
      {
        "id": 18,
        "label": "forge . heat = forge . heat . wrapping_mul (2) . wrapping_add (11) ;"
      },
      {
        "id": 19,
        "label": "forge . quality = forge . quality . saturating_add (5) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: forge"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: forge"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: rounds"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: rounds"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: rounds"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: rounds"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: rounds"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: forge"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: rounds"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: forge"
      },
      {
        "from": 6,
        "to": 14,
        "label": "data_dep: rounds"
      },
      {
        "from": 6,
        "to": 14,
        "label": "data_dep: rounds"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 19,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 19,
        "label": "data_dep: forge"
      }
    ]
  },
  {
    "name": "smelt",
    "inputs": [
      "ctx: Context < Smelt >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let f = & ctx . accounts . forge ;"
      },
      {
        "id": 23,
        "label": "let wrong : & [& [u8]] = & [f . owner . as_ref () , b\"forge\" , & [f . bump_saved] ,] ;"
      },
      {
        "id": 24,
        "label": "let alt = Pubkey :: create_program_address (& [f . owner . as_ref () , b\"forge\" , & [f . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 25,
        "label": "let ix = system_instruction :: transfer (& alt , & ctx . accounts . receiver . key () , lamports) ;"
      },
      {
        "id": 26,
        "label": "invoke_signed (& ix , & [ctx . accounts . alt_forge . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [wrong] ,) ? ;"
      },
      {
        "id": 27,
        "label": "for step in 0 .. 7 { let addq = ((lamports as u32) . wrapping_add (step as u32 * 5) % 41) + 6 ; ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (addq) ; ctx . accounts . forge . heat = ctx . accounts . forge . heat . wrapping_add ((step as u64 * 19) + 3) ; }"
      },
      {
        "id": 28,
        "label": "let addq = ((lamports as u32) . wrapping_add (step as u32 * 5) % 41) + 6 ;"
      },
      {
        "id": 29,
        "label": "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (addq) ;"
      },
      {
        "id": 30,
        "label": "ctx . accounts . forge . heat = ctx . accounts . forge . heat . wrapping_add ((step as u64 * 19) + 3) ;"
      },
      {
        "id": 31,
        "label": "if ctx . accounts . forge . heat & 4 == 4 { ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (23) ; ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_left (1) . wrapping_add (31) ; } else { ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (17) ; ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_right (2) . wrapping_add (29) ; }"
      },
      {
        "id": 32,
        "label": "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (23) ;"
      },
      {
        "id": 33,
        "label": "ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_left (1) . wrapping_add (31) ;"
      },
      {
        "id": 34,
        "label": "ctx . accounts . forge . quality = ctx . accounts . forge . quality . saturating_add (17) ;"
      },
      {
        "id": 35,
        "label": "ctx . accounts . forge . heat = ctx . accounts . forge . heat . rotate_right (2) . wrapping_add (29) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 22,
        "label": "def: f"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: alt"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: f"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: f"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: ix"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: alt"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: ix"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: addq"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: addq"
      }
    ]
  }
]