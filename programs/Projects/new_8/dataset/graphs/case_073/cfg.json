[
  {
    "name": "init_escrow",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 2,
        "label": "e . merchant = ctx . accounts . merchant . key () ;"
      },
      {
        "id": 3,
        "label": "e . bump_main = * ctx . bumps . get (\"escrow\") . ok_or (error ! (E :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "e . stock = base % 5_000 + 500 ;"
      },
      {
        "id": 5,
        "label": "e . score = 0 ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "e . stock & 3 == 1"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "e . stock = e . stock . rotate_left (1) . wrapping_add (37) ;"
      },
      {
        "id": 11,
        "label": "e . score = e . score . saturating_add (((e . stock % 29) as u32) + 7) ;"
      },
      {
        "id": 12,
        "label": "e . stock = e . stock . wrapping_mul (2) . wrapping_add (19) ;"
      },
      {
        "id": 13,
        "label": "e . score = e . score . saturating_add (5) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "e . stock = e . stock . rotate_right (2) . wrapping_add (41) ;"
      },
      {
        "id": 16,
        "label": "e . score = e . score . saturating_add (((e . stock % 23) as u32) + 11) ;"
      },
      {
        "id": 17,
        "label": "e . stock = e . stock . wrapping_add (77) ;"
      },
      {
        "id": 18,
        "label": "e . score = e . score . saturating_add (3) ;"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let mut r = 0u8 ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "e . stock = e . stock . wrapping_add (13 + r as u64 * 9) ;"
      },
      {
        "id": 23,
        "label": "e . score = e . score . saturating_add (((e . stock % 17) as u32) + r as u32 + 4) ;"
      },
      {
        "id": 24,
        "label": "e . stock = e . stock . rotate_left (2) . wrapping_add (15 + r as u64) ;"
      },
      {
        "id": 25,
        "label": "e . score = e . score . saturating_add (2) ;"
      },
      {
        "id": 26,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "Loop End"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "e . stock = e . stock . wrapping_mul (2) . wrapping_add (21 + i as u64) ;"
      },
      {
        "id": 30,
        "label": "e . score = e . score . saturating_add (((e . stock % 31) as u32) + 8) ;"
      },
      {
        "id": 31,
        "label": "e . stock = e . stock . rotate_right (1) . wrapping_add (25) ;"
      },
      {
        "id": 32,
        "label": "e . score = e . score . saturating_add (6) ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 6,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 21,
        "to": 27,
        "label": "while"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 28,
        "to": 33,
        "label": "for"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  },
  {
    "name": "redeem_coupon",
    "nodes": [
      {
        "id": 35,
        "label": "Entry"
      },
      {
        "id": 36,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 37,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 38,
        "label": "Loop Start"
      },
      {
        "id": 39,
        "label": "e . stock = e . stock . wrapping_add ((code [k as usize] as u64) + 17 + k as u64) ;"
      },
      {
        "id": 40,
        "label": "e . score = e . score . saturating_add (((lamports % 37) as u32) + 5 + k as u32) ;"
      },
      {
        "id": 41,
        "label": "e . stock = e . stock . rotate_left (1) . wrapping_add (11 + k as u64) ;"
      },
      {
        "id": 42,
        "label": "e . score = e . score . saturating_add (4) ;"
      },
      {
        "id": 43,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "e . score & 1 == 0"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "e . stock = e . stock . rotate_right (2) . wrapping_add (33) ;"
      },
      {
        "id": 50,
        "label": "e . score = e . score . saturating_add (9) ;"
      },
      {
        "id": 51,
        "label": "e . stock = e . stock . wrapping_mul (2) . wrapping_add (27) ;"
      },
      {
        "id": 52,
        "label": "e . score = e . score . saturating_add (7) ;"
      },
      {
        "id": 53,
        "label": "False body"
      },
      {
        "id": 54,
        "label": "e . stock = e . stock . rotate_left (2) . wrapping_add (29) ;"
      },
      {
        "id": 55,
        "label": "e . score = e . score . saturating_add (12) ;"
      },
      {
        "id": 56,
        "label": "e . stock = e . stock . wrapping_add (55) ;"
      },
      {
        "id": 57,
        "label": "e . score = e . score . saturating_add (5) ;"
      },
      {
        "id": 58,
        "label": "merge"
      },
      {
        "id": 59,
        "label": "Loop Start"
      },
      {
        "id": 60,
        "label": "e . stock = e . stock . wrapping_add (19 + t as u64 * 13) ;"
      },
      {
        "id": 61,
        "label": "e . score = e . score . saturating_add (((e . stock % 13) as u32) + 6) ;"
      },
      {
        "id": 62,
        "label": "e . stock = e . stock . rotate_right (1) . wrapping_add (9) ;"
      },
      {
        "id": 63,
        "label": "e . score = e . score . saturating_add (3) ;"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "let seeds = & [b\"coupon_vault\" . as_ref () , e . merchant . as_ref () , & code , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 66,
        "label": "let vault = Pubkey :: create_program_address (& [b\"coupon_vault\" , e . merchant . as_ref () , & code , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (E :: SeedCompute)) ? ;"
      },
      {
        "id": 67,
        "label": "let ix = system_instruction :: transfer (& vault , & ctx . accounts . redeemer . key () , lamports) ;"
      },
      {
        "id": 68,
        "label": "invoke_signed (& ix , & [ctx . accounts . coupon_vault_hint . to_account_info () , ctx . accounts . redeemer . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 69,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 38,
        "to": 44,
        "label": "while"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 45,
        "to": 53,
        "label": "false"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 52,
        "to": 58,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 59,
        "to": 64,
        "label": "for"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      }
    ]
  }
]