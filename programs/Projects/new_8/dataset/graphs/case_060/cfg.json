[
  {
    "name": "setup",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . store ;"
      },
      {
        "id": 2,
        "label": "s . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "s . nonce = nonce . rotate_left (7) ^ 0xA5A5_A5A5_A5A5_A5A5 ;"
      },
      {
        "id": 4,
        "label": "s . bump_saved = * ctx . bumps . get (\"store\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 5,
        "label": "s . marks = 1 ;"
      },
      {
        "id": 6,
        "label": "let mut t = s . nonce as u32 ;"
      },
      {
        "id": 7,
        "label": "let mut k : u8 = 0 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "(t & 1) == 0"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "s . marks = s . marks . saturating_add ((t % 17) + 5) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "s . marks = s . marks . saturating_add ((t % 13) + 3) ;"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "t = t . wrapping_mul (5) . wrapping_add (19) ;"
      },
      {
        "id": 18,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 8,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay",
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let s = & ctx . accounts . store ;"
      },
      {
        "id": 23,
        "label": "let wrong : & [& [u8]] = & [s . owner . as_ref () , b\"store\" , & [s . bump_saved] ,] ;"
      },
      {
        "id": 24,
        "label": "let wrong_key = Pubkey :: create_program_address (& [s . owner . as_ref () , b\"store\" , & [s . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 25,
        "label": "let ix = system_instruction :: transfer (& wrong_key , & ctx . accounts . receiver . key () , lamports) ;"
      },
      {
        "id": 26,
        "label": "let accounts = & [ctx . accounts . ghost_store . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ;"
      },
      {
        "id": 27,
        "label": "invoke_signed (& ix , accounts , & [wrong]) ? ;"
      },
      {
        "id": 28,
        "label": "let mut walk : u64 = lamports ^ 0x55AA55AA55AA55AA ;"
      },
      {
        "id": 29,
        "label": "let mut cnt : u8 = 0 ;"
      },
      {
        "id": 30,
        "label": "Loop Start"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "(walk & 2) == 2"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "let bias = (walk % 23) as u32 + 6 ;"
      },
      {
        "id": 36,
        "label": "ctx . accounts . store . load_mut () ? . marks = ctx . accounts . store . load () ? . marks . saturating_add (bias) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "let bias = (walk % 19) as u32 + 4 ;"
      },
      {
        "id": 39,
        "label": "ctx . accounts . store . load_mut () ? . marks = ctx . accounts . store . load () ? . marks . saturating_add (bias) ;"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "walk = walk . saturating_sub (7) ;"
      },
      {
        "id": 42,
        "label": "cnt = cnt . saturating_add (1) ;"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "cnt > 8"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "break ;"
      },
      {
        "id": 48,
        "label": "False body"
      },
      {
        "id": 49,
        "label": "No-op"
      },
      {
        "id": 50,
        "label": "merge"
      },
      {
        "id": 51,
        "label": "Loop End"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 36,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 43,
        "to": 48,
        "label": "false"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 30,
        "to": 51,
        "label": "while"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]