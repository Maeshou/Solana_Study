[
  {
    "name": "register_farm",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RegisterFarm >",
      "area: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . farm ;",
      "f . farmer = ctx . accounts . farmer . key () ;",
      "f . bump_main = * ctx . bumps . get (\"farm\") . ok_or (error ! (EE :: MissingBump)) ? ;",
      "f . yield_hint = area % 3_000 + 700 ;",
      "f . ticks = 1 ;",
      "for i in 0 .. 4",
      "{",
      "f . yield_hint = f . yield_hint . wrapping_add (23 + i as u64 * 17) ;",
      "f . ticks = f . ticks . saturating_add (((f . yield_hint % 37) as u32) + 5) ;",
      "f . yield_hint = f . yield_hint . rotate_right (1) . wrapping_add (31) ;",
      "f . ticks = f . ticks . saturating_add (2) ;",
      "}",
      "if f . ticks & 1 == 1",
      "{",
      "f . yield_hint = f . yield_hint . rotate_left (1) . wrapping_add (29) ;",
      "f . ticks = f . ticks . saturating_add (11) ;",
      "f . yield_hint = f . yield_hint . wrapping_mul (2) . wrapping_add (13) ;",
      "f . ticks = f . ticks . saturating_add (4) ;",
      "} else",
      "{",
      "f . yield_hint = f . yield_hint . rotate_right (2) . wrapping_add (17) ;",
      "f . ticks = f . ticks . saturating_add (7) ;",
      "f . yield_hint = f . yield_hint . wrapping_add (59) ;",
      "f . ticks = f . ticks . saturating_add (3) ;",
      "}",
      "let mut w = 0u8 ;",
      "while w < 3",
      "{",
      "f . yield_hint = f . yield_hint . wrapping_add (19 + w as u64 * 11) ;",
      "f . ticks = f . ticks . saturating_add (((f . yield_hint % 19) as u32) + 6) ;",
      "f . yield_hint = f . yield_hint . rotate_left (2) . wrapping_add (21) ;",
      "f . ticks = f . ticks . saturating_add (2) ;",
      "w = w . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "draw_from_plot",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < DrawFromPlot >",
      "plot_id: u64",
      "user_bump: u8",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . farm ;",
      "let mut k = 0u8 ;",
      "while k < 2",
      "{",
      "f . yield_hint = f . yield_hint . wrapping_add ((plot_id % 41) + 7 + k as u64) ;",
      "f . ticks = f . ticks . saturating_add (((lamports % 29) as u32) + 4 + k as u32) ;",
      "f . yield_hint = f . yield_hint . rotate_right (1) . wrapping_add (15) ;",
      "f . ticks = f . ticks . saturating_add (3) ;",
      "k = k . saturating_add (1) ;",
      "}",
      "for j in 0 .. 3",
      "{",
      "f . yield_hint = f . yield_hint . wrapping_mul (2) . wrapping_add (9 + j as u64) ;",
      "f . ticks = f . ticks . saturating_add (((f . yield_hint % 17) as u32) + 5) ;",
      "f . yield_hint = f . yield_hint . rotate_left (2) . wrapping_add (27) ;",
      "f . ticks = f . ticks . saturating_add (2) ;",
      "}",
      "if f . ticks & 2 == 2",
      "{",
      "f . yield_hint = f . yield_hint . rotate_right (2) . wrapping_add (33) ;",
      "f . ticks = f . ticks . saturating_add (10) ;",
      "f . yield_hint = f . yield_hint . wrapping_add (44) ;",
      "f . ticks = f . ticks . saturating_add (4) ;",
      "} else",
      "{",
      "f . yield_hint = f . yield_hint . rotate_left (1) . wrapping_add (25) ;",
      "f . ticks = f . ticks . saturating_add (8) ;",
      "f . yield_hint = f . yield_hint . wrapping_add (36) ;",
      "f . ticks = f . ticks . saturating_add (3) ;",
      "}",
      "let seeds = & [b\"plot_cell\" . as_ref () , f . farmer . as_ref () , & plot_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;",
      "let cell = Pubkey :: create_program_address (& [b\"plot_cell\" , f . farmer . as_ref () , & plot_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& cell , & ctx . accounts . collector . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . plot_cell_hint . to_account_info () , ctx . accounts . collector . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "RegisterFarm",
    "node_type": "struct",
    "fields": [
      {
        "name": "farm",
        "attribute": "# [account (init , payer = farmer , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"farm\" , farmer . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , FarmState >"
      },
      {
        "name": "farmer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "DrawFromPlot",
    "node_type": "struct",
    "fields": [
      {
        "name": "farm",
        "attribute": "# [account (mut , seeds = [b\"farm\" , farmer . key () . as_ref ()] , bump = farm . bump_main)]",
        "field_type": "Account < 'info , FarmState >"
      },
      {
        "name": "plot_cell_hint",
        "attribute": "# [doc = \" CHECK\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "collector",
        "attribute": "# [doc = \" CHECK\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "farmer",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "FarmState",
    "node_type": "struct",
    "fields": [
      {
        "name": "farmer",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "yield_hint",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "ticks",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_main",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]