[
  {
    "name": "start_arc",
    "inputs": [
      "ctx: Context < StartArc >",
      "name: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if n . len () > 18 { let remove = n . len () - 18 ; for r in 0 .. remove { let last = * n . last () . unwrap_or (& b'.') ; n . truncate (n . len () . saturating_sub (1)) ; if (last & 1) == 1 { msg ! (\"remove step={} val={}\" , r , last) ; } } }"
      },
      {
        "id": 3,
        "label": "let remove = n . len () - 18 ;"
      },
      {
        "id": 4,
        "label": "for r in 0 .. remove { let last = * n . last () . unwrap_or (& b'.') ; n . truncate (n . len () . saturating_sub (1)) ; if (last & 1) == 1 { msg ! (\"remove step={} val={}\" , r , last) ; } }"
      },
      {
        "id": 5,
        "label": "let last = * n . last () . unwrap_or (& b'.') ;"
      },
      {
        "id": 6,
        "label": "n . truncate (n . len () . saturating_sub (1)) ;"
      },
      {
        "id": 7,
        "label": "if (last & 1) == 1 { msg ! (\"remove step={} val={}\" , r , last) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"remove step={} val={}\" , r , last) ;"
      },
      {
        "id": 9,
        "label": "let mut code : u32 = 31 ;"
      },
      {
        "id": 10,
        "label": "for (i , b) in n . iter () . enumerate () { code = code . wrapping_mul (97) . wrapping_add ((* b as u32) . wrapping_add ((i as u32) * 2)) ; if * b == b'_' { code = code . wrapping_add (777) ; msg ! (\"underscore at {} code={}\" , i , code) ; } }"
      },
      {
        "id": 11,
        "label": "code = code . wrapping_mul (97) . wrapping_add ((* b as u32) . wrapping_add ((i as u32) * 2)) ;"
      },
      {
        "id": 12,
        "label": "if * b == b'_' { code = code . wrapping_add (777) ; msg ! (\"underscore at {} code={}\" , i , code) ; }"
      },
      {
        "id": 13,
        "label": "code = code . wrapping_add (777) ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"underscore at {} code={}\" , i , code) ;"
      },
      {
        "id": 15,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 16,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (QErr :: Cell)) ? ;"
      },
      {
        "id": 17,
        "label": "if addr != ctx . accounts . arc_cell . key () { msg ! (\"start mismatch\") ; return Err (error ! (QErr :: Cell)) ; }"
      },
      {
        "id": 18,
        "label": "msg ! (\"start mismatch\") ;"
      },
      {
        "id": 19,
        "label": "return Err (error ! (QErr :: Cell)) ;"
      },
      {
        "id": 20,
        "label": "let a = & mut ctx . accounts . arc ;"
      },
      {
        "id": 21,
        "label": "a . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 22,
        "label": "a . name = n ;"
      },
      {
        "id": 23,
        "label": "a . progress = 1 ;"
      },
      {
        "id": 24,
        "label": "a . hash = code ;"
      },
      {
        "id": 25,
        "label": "let mut warm = 0u32 ;"
      },
      {
        "id": 26,
        "label": "for turn in 0 .. 4 { warm = warm . wrapping_add ((turn + 3) * 11) ; msg ! (\"warm {}\" , warm) ; }"
      },
      {
        "id": 27,
        "label": "warm = warm . wrapping_add ((turn + 3) * 11) ;"
      },
      {
        "id": 28,
        "label": "msg ! (\"warm {}\" , warm) ;"
      },
      {
        "id": 29,
        "label": "a . hash = a . hash . wrapping_add (warm) ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: remove"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: n"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: remove"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: n"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: last"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: n"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: last"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: n"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: n"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: addr"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: seeds"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: addr"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: a"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: a"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: a"
      },
      {
        "from": 1,
        "to": 22,
        "label": "data_dep: n"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: a"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: a"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: warm"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: warm"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: warm"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: warm"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: warm"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: a"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: a"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: warm"
      }
    ]
  },
  {
    "name": "advance_arc",
    "inputs": [
      "ctx: Context < AdvanceArc >",
      "step: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let tag = ctx . accounts . arc . name . clone () ;"
      },
      {
        "id": 33,
        "label": "if tag . len () < 5 { msg ! (\"short name bonus path\") ; let mut probe = 0u32 ; for i in 0 .. tag . len () { probe = probe . wrapping_add ((tag [i] as u32) . wrapping_mul ((i as u32) + 1)) ; if (probe & 4) == 4 { msg ! (\"probe hit {}\" , probe) ; } } ctx . accounts . arc . hash = ctx . accounts . arc . hash . wrapping_add (probe) ; }"
      },
      {
        "id": 34,
        "label": "msg ! (\"short name bonus path\") ;"
      },
      {
        "id": 35,
        "label": "let mut probe = 0u32 ;"
      },
      {
        "id": 36,
        "label": "for i in 0 .. tag . len () { probe = probe . wrapping_add ((tag [i] as u32) . wrapping_mul ((i as u32) + 1)) ; if (probe & 4) == 4 { msg ! (\"probe hit {}\" , probe) ; } }"
      },
      {
        "id": 37,
        "label": "probe = probe . wrapping_add ((tag [i] as u32) . wrapping_mul ((i as u32) + 1)) ;"
      },
      {
        "id": 38,
        "label": "if (probe & 4) == 4 { msg ! (\"probe hit {}\" , probe) ; }"
      },
      {
        "id": 39,
        "label": "msg ! (\"probe hit {}\" , probe) ;"
      },
      {
        "id": 40,
        "label": "ctx . accounts . arc . hash = ctx . accounts . arc . hash . wrapping_add (probe) ;"
      },
      {
        "id": 41,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 42,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (QErr :: Cell)) ? ;"
      },
      {
        "id": 43,
        "label": "if addr != ctx . accounts . arc_cell . key () { msg ! (\"advance mismatch\") ; return Err (error ! (QErr :: Cell)) ; }"
      },
      {
        "id": 44,
        "label": "msg ! (\"advance mismatch\") ;"
      },
      {
        "id": 45,
        "label": "return Err (error ! (QErr :: Cell)) ;"
      },
      {
        "id": 46,
        "label": "let a = & mut ctx . accounts . arc ;"
      },
      {
        "id": 47,
        "label": "let mut s = step as u32 ;"
      },
      {
        "id": 48,
        "label": "if s > 5000 { let clip = s - 5000 ; s = 5000 ; a . hash = a . hash . wrapping_add (clip) ; }"
      },
      {
        "id": 49,
        "label": "let clip = s - 5000 ;"
      },
      {
        "id": 50,
        "label": "s = 5000 ;"
      },
      {
        "id": 51,
        "label": "a . hash = a . hash . wrapping_add (clip) ;"
      },
      {
        "id": 52,
        "label": "let mut i = 0u32 ;"
      },
      {
        "id": 53,
        "label": "while i < s . min (16) { a . progress = a . progress . saturating_add (1) ; if (a . progress & 7) == 0 { a . hash = a . hash . wrapping_add (19) ; msg ! (\"milestone {}\" , a . progress) ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 54,
        "label": "a . progress = a . progress . saturating_add (1) ;"
      },
      {
        "id": 55,
        "label": "if (a . progress & 7) == 0 { a . hash = a . hash . wrapping_add (19) ; msg ! (\"milestone {}\" , a . progress) ; }"
      },
      {
        "id": 56,
        "label": "a . hash = a . hash . wrapping_add (19) ;"
      },
      {
        "id": 57,
        "label": "msg ! (\"milestone {}\" , a . progress) ;"
      },
      {
        "id": 58,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 59,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 32,
        "to": 32,
        "label": "def: tag"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: tag"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: tag"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: tag"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: probe"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: tag"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: probe"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: probe"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: tag"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: probe"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: probe"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: probe"
      },
      {
        "from": 32,
        "to": 37,
        "label": "data_dep: tag"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: probe"
      },
      {
        "from": 35,
        "to": 40,
        "label": "data_dep: probe"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: seeds"
      },
      {
        "from": 32,
        "to": 41,
        "label": "data_dep: tag"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: addr"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: seeds"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: addr"
      },
      {
        "from": 46,
        "to": 46,
        "label": "def: a"
      },
      {
        "from": 47,
        "to": 47,
        "label": "def: s"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: s"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: s"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: s"
      },
      {
        "from": 46,
        "to": 48,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 48,
        "label": "data_dep: a"
      },
      {
        "from": 49,
        "to": 49,
        "label": "def: clip"
      },
      {
        "from": 47,
        "to": 49,
        "label": "data_dep: s"
      },
      {
        "from": 47,
        "to": 50,
        "label": "data_dep: s"
      },
      {
        "from": 46,
        "to": 51,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 51,
        "label": "data_dep: a"
      },
      {
        "from": 49,
        "to": 51,
        "label": "data_dep: clip"
      },
      {
        "from": 52,
        "to": 52,
        "label": "def: i"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: i"
      },
      {
        "from": 47,
        "to": 53,
        "label": "data_dep: s"
      },
      {
        "from": 46,
        "to": 53,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 53,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 53,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 53,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 53,
        "label": "data_dep: a"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: i"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: i"
      },
      {
        "from": 46,
        "to": 54,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 54,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 55,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 55,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 55,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 56,
        "label": "data_dep: a"
      },
      {
        "from": 46,
        "to": 56,
        "label": "data_dep: a"
      },
      {
        "from": 52,
        "to": 58,
        "label": "data_dep: i"
      },
      {
        "from": 52,
        "to": 58,
        "label": "data_dep: i"
      }
    ]
  }
]