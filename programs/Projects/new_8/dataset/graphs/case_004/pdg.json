[
  {
    "name": "record_step",
    "inputs": [
      "ctx: Context < RecordStep >",
      "session: [u8 ; 16]",
      "step: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut s = step ;"
      },
      {
        "id": 2,
        "label": "if s > 10_000 { s = 10_000 ; }"
      },
      {
        "id": 3,
        "label": "s = 10_000 ;"
      },
      {
        "id": 4,
        "label": "let mut spread : u64 = 1 ;"
      },
      {
        "id": 5,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 6,
        "label": "while i < session . len () as u8 { spread = spread . wrapping_mul (131) . wrapping_add (session [i as usize] as u64) ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 7,
        "label": "spread = spread . wrapping_mul (131) . wrapping_add (session [i as usize] as u64) ;"
      },
      {
        "id": 8,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 9,
        "label": "let seeds = [& ctx . accounts . operator . key () . to_bytes () [..] , & session [..]] ;"
      },
      {
        "id": 10,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (SessError :: Derive)) ? ;"
      },
      {
        "id": 11,
        "label": "if addr != ctx . accounts . session_cell . key () { return Err (error ! (SessError :: Derive)) ; }"
      },
      {
        "id": 12,
        "label": "return Err (error ! (SessError :: Derive)) ;"
      },
      {
        "id": 13,
        "label": "let rec = & mut ctx . accounts . record ;"
      },
      {
        "id": 14,
        "label": "rec . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 15,
        "label": "rec . session = session ;"
      },
      {
        "id": 16,
        "label": "rec . progress = s ;"
      },
      {
        "id": 17,
        "label": "rec . spread = rec . spread . wrapping_add (spread) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: seeds"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: addr"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: seeds"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: addr"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: rec"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: rec"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: rec"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: rec"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 17,
        "label": "data_dep: rec"
      },
      {
        "from": 13,
        "to": 17,
        "label": "data_dep: rec"
      }
    ]
  }
]