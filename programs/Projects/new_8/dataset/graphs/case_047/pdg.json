[
  {
    "name": "build_ladder",
    "inputs": [
      "ctx: Context < BuildLadder >",
      "base: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . ladder ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . host . key () ;"
      },
      {
        "id": 3,
        "label": "b . rank = base % 20 + 3 ;"
      },
      {
        "id": 4,
        "label": "b . wins = base / 6 + 5 ;"
      },
      {
        "id": 5,
        "label": "b . loss = 2 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: b"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: b"
      }
    ]
  },
  {
    "name": "report",
    "inputs": [
      "ctx: Context < Report >",
      "points: u32",
      "user_bump: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let b = & mut ctx . accounts . ladder ;"
      },
      {
        "id": 9,
        "label": "let seeds = & [b\"ladder_bank\" , ctx . accounts . host . key . as_ref () , & [user_bump]] ;"
      },
      {
        "id": 10,
        "label": "let manual = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (LadErr :: SeedFail)) ? ;"
      },
      {
        "id": 11,
        "label": "if manual != ctx . accounts . ladder_bank . key () { return Err (error ! (LadErr :: BankKey)) ; }"
      },
      {
        "id": 12,
        "label": "return Err (error ! (LadErr :: BankKey)) ;"
      },
      {
        "id": 13,
        "label": "if points > 50 { let adj = points % 11 + 2 ; b . rank = b . rank . saturating_add (adj) ; let mut tmp = Vec :: < u8 > :: new () ; tmp . push ((adj % 7) as u8) ; if tmp . len () != 0 { b . wins = b . wins . saturating_add (tmp [0] as u32) ; } }"
      },
      {
        "id": 14,
        "label": "let adj = points % 11 + 2 ;"
      },
      {
        "id": 15,
        "label": "b . rank = b . rank . saturating_add (adj) ;"
      },
      {
        "id": 16,
        "label": "let mut tmp = Vec :: < u8 > :: new () ;"
      },
      {
        "id": 17,
        "label": "tmp . push ((adj % 7) as u8) ;"
      },
      {
        "id": 18,
        "label": "if tmp . len () != 0 { b . wins = b . wins . saturating_add (tmp [0] as u32) ; }"
      },
      {
        "id": 19,
        "label": "b . wins = b . wins . saturating_add (tmp [0] as u32) ;"
      },
      {
        "id": 20,
        "label": "let mut round = 3u32 ;"
      },
      {
        "id": 21,
        "label": "while round < (points % 33 + 7) { b . wins = b . wins . saturating_add (round) ; b . loss = b . loss . saturating_add ((round % 5) + 1) ; round = round . saturating_add (5) ; }"
      },
      {
        "id": 22,
        "label": "b . wins = b . wins . saturating_add (round) ;"
      },
      {
        "id": 23,
        "label": "b . loss = b . loss . saturating_add ((round % 5) + 1) ;"
      },
      {
        "id": 24,
        "label": "round = round . saturating_add (5) ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: b"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: seeds"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: manual"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: seeds"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: manual"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: adj"
      },
      {
        "from": 8,
        "to": 15,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 15,
        "label": "data_dep: b"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: adj"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: tmp"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: tmp"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: adj"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: tmp"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: b"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: tmp"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: b"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: tmp"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: round"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: round"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: round"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: round"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: round"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: round"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: round"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: round"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: round"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: round"
      }
    ]
  }
]