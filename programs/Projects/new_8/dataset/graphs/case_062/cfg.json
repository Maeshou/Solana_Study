[
  {
    "name": "make_box",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . box_data ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "b . bump_saved = * ctx . bumps . get (\"box_data\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "b . count = count % 55 + 5 ;"
      },
      {
        "id": 5,
        "label": "b . tally = 0 ;"
      },
      {
        "id": 6,
        "label": "let mut rolling = b . count ^ (Clock :: get () ? . slot as u64) ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "if statement"
      },
      {
        "id": 9,
        "label": "predicate"
      },
      {
        "id": 10,
        "label": "step % 2 == 0"
      },
      {
        "id": 11,
        "label": "True body"
      },
      {
        "id": 12,
        "label": "b . tally = b . tally . saturating_add (((rolling as u32) ^ (step as u32)) . wrapping_add (13)) ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "No-op"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "rolling = rolling . rotate_left ((step + 3) as u32) . wrapping_add (step as u64) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "predicate"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "true"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 7,
        "to": 17,
        "label": "for"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "withdraw",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let meta = & ctx . accounts . box_data ;"
      },
      {
        "id": 21,
        "label": "let bump_variant = meta . bump_saved . wrapping_add (((lamports & 3) as u8) ^ 2) ;"
      },
      {
        "id": 22,
        "label": "let seeds_primary : & [& [u8]] = & [b\"box_shadow\" , meta . owner . as_ref () , & [bump_variant] ,] ;"
      },
      {
        "id": 23,
        "label": "let pda_primary = Pubkey :: create_program_address (& [b\"box_shadow\" , meta . owner . as_ref () , & [bump_variant]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 24,
        "label": "let ix1 = system_instruction :: transfer (& pda_primary , & ctx . accounts . target . key () , lamports . saturating_add (97) ,) ;"
      },
      {
        "id": 25,
        "label": "let infos1 = & [ctx . accounts . alt_box . to_account_info () , ctx . accounts . target . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ;"
      },
      {
        "id": 26,
        "label": "invoke_signed (& ix1 , infos1 , & [seeds_primary]) ? ;"
      },
      {
        "id": 27,
        "label": "let bump_swapped = bump_variant . wrapping_add (1) ;"
      },
      {
        "id": 28,
        "label": "let seeds_swapped : & [& [u8]] = & [meta . owner . as_ref () , b\"box_shadow\" , & [bump_swapped] ,] ;"
      },
      {
        "id": 29,
        "label": "let _maybe_swapped = Pubkey :: create_program_address (& [meta . owner . as_ref () , b\"box_shadow\" , & [bump_swapped]] , ctx . program_id ,) . unwrap_or (meta . owner) ;"
      },
      {
        "id": 30,
        "label": "let ix2 = system_instruction :: transfer (& ctx . accounts . alt_box . key () , & ctx . accounts . target . key () , (lamports ^ 41) . saturating_add (11) ,) ;"
      },
      {
        "id": 31,
        "label": "let infos2 = & [ctx . accounts . alt_box . to_account_info () , ctx . accounts . target . to_account_info () , ctx . accounts . system_program . to_account_info () ,] ;"
      },
      {
        "id": 32,
        "label": "invoke_signed (& ix2 , infos2 , & [seeds_swapped]) ? ;"
      },
      {
        "id": 33,
        "label": "let mut remain = lamports . wrapping_add ((Clock :: get () ? . unix_timestamp as u64) & 127) ;"
      },
      {
        "id": 34,
        "label": "let mut loop_guard = 0u8 ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "let mix = (remain % 29) as u32 ;"
      },
      {
        "id": 37,
        "label": "ctx . accounts . box_data . tally = ctx . accounts . box_data . tally . wrapping_add (mix . rotate_left ((loop_guard + 3) as u32)) . wrapping_add (17) ;"
      },
      {
        "id": 38,
        "label": "remain = remain . rotate_right (2) . wrapping_add (5) ;"
      },
      {
        "id": 39,
        "label": "loop_guard = loop_guard . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "(remain & 1) == 1"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let mut spice = 3u32 ;"
      },
      {
        "id": 46,
        "label": "Loop Start"
      },
      {
        "id": 47,
        "label": "spice = spice . rotate_left (k + 2) . wrapping_mul (7) . wrapping_add (k as u32) ;"
      },
      {
        "id": 48,
        "label": "Loop End"
      },
      {
        "id": 49,
        "label": "ctx . accounts . box_data . tally = ctx . accounts . box_data . tally . wrapping_add (spice) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "No-op"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 48,
        "label": "for"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 41,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]