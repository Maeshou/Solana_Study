[
  {
    "name": "submit_score",
    "inputs": [
      "ctx: Context < SubmitScore >",
      "tag: Vec < u8 >",
      "points: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut t = tag . clone () ;"
      },
      {
        "id": 2,
        "label": "if t . len () > 16 { let cut = t . len () - 16 ; for i in 0 .. cut { let v = * t . last () . unwrap_or (& b'0') ; t . truncate (t . len () . saturating_sub (1)) ; if (v & 1) == 1 { msg ! (\"trim {} val={}\" , i , v) ; } } }"
      },
      {
        "id": 3,
        "label": "let cut = t . len () - 16 ;"
      },
      {
        "id": 4,
        "label": "for i in 0 .. cut { let v = * t . last () . unwrap_or (& b'0') ; t . truncate (t . len () . saturating_sub (1)) ; if (v & 1) == 1 { msg ! (\"trim {} val={}\" , i , v) ; } }"
      },
      {
        "id": 5,
        "label": "let v = * t . last () . unwrap_or (& b'0') ;"
      },
      {
        "id": 6,
        "label": "t . truncate (t . len () . saturating_sub (1)) ;"
      },
      {
        "id": 7,
        "label": "if (v & 1) == 1 { msg ! (\"trim {} val={}\" , i , v) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"trim {} val={}\" , i , v) ;"
      },
      {
        "id": 9,
        "label": "let mut salt : u32 = 73 ;"
      },
      {
        "id": 10,
        "label": "for (i , b) in t . iter () . enumerate () { salt = salt . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 5)) ; if * b == b'!' { salt = salt . wrapping_add (333) ; } }"
      },
      {
        "id": 11,
        "label": "salt = salt . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 5)) ;"
      },
      {
        "id": 12,
        "label": "if * b == b'!' { salt = salt . wrapping_add (333) ; }"
      },
      {
        "id": 13,
        "label": "salt = salt . wrapping_add (333) ;"
      },
      {
        "id": 14,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 15,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (ARkErr :: Cell)) ? ;"
      },
      {
        "id": 16,
        "label": "if addr != ctx . accounts . rank_cell . key () { msg ! (\"submit mismatch\") ; return Err (error ! (ARkErr :: Cell)) ; }"
      },
      {
        "id": 17,
        "label": "msg ! (\"submit mismatch\") ;"
      },
      {
        "id": 18,
        "label": "return Err (error ! (ARkErr :: Cell)) ;"
      },
      {
        "id": 19,
        "label": "let r = & mut ctx . accounts . rank ;"
      },
      {
        "id": 20,
        "label": "r . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 21,
        "label": "r . tag = t ;"
      },
      {
        "id": 22,
        "label": "let mut p = points ;"
      },
      {
        "id": 23,
        "label": "if p > 100_000 { let over = p - 100_000 ; p = 100_000 ; r . salt = r . salt . wrapping_add (over) ; }"
      },
      {
        "id": 24,
        "label": "let over = p - 100_000 ;"
      },
      {
        "id": 25,
        "label": "p = 100_000 ;"
      },
      {
        "id": 26,
        "label": "r . salt = r . salt . wrapping_add (over) ;"
      },
      {
        "id": 27,
        "label": "let mut loopc = 0u32 ;"
      },
      {
        "id": 28,
        "label": "while loopc < p . min (512) { r . score = r . score . saturating_add (1) ; if (r . score & 63) == 0 { r . salt = r . salt . wrapping_add (1) ; } loopc = loopc . saturating_add (8) ; }"
      },
      {
        "id": 29,
        "label": "r . score = r . score . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "if (r . score & 63) == 0 { r . salt = r . salt . wrapping_add (1) ; }"
      },
      {
        "id": 31,
        "label": "r . salt = r . salt . wrapping_add (1) ;"
      },
      {
        "id": 32,
        "label": "loopc = loopc . saturating_add (8) ;"
      },
      {
        "id": 33,
        "label": "r . score = r . score . saturating_add (p) ;"
      },
      {
        "id": 34,
        "label": "r . salt = r . salt . wrapping_add (salt) ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: cut"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: cut"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: t"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: v"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: t"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: t"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: t"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: addr"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: seeds"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: addr"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: r"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: t"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: p"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: p"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: p"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: over"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: over"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: loopc"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: loopc"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: loopc"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: loopc"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: loopc"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: loopc"
      },
      {
        "from": 19,
        "to": 33,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 33,
        "label": "data_dep: r"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 34,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 34,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "decay_score",
    "inputs": [
      "ctx: Context < DecayScore >",
      "factor: u8",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 36,
        "label": "Entry"
      },
      {
        "id": 37,
        "label": "let tag = ctx . accounts . rank . tag . clone () ;"
      },
      {
        "id": 38,
        "label": "if tag . first () . copied () . unwrap_or (b'?') == b'X' { let mut soft = 0u32 ; for i in 0 .. 6 { soft = soft . wrapping_add ((i + 2) * 7) ; } ctx . accounts . rank . salt = ctx . accounts . rank . salt . wrapping_add (soft) ; }"
      },
      {
        "id": 39,
        "label": "let mut soft = 0u32 ;"
      },
      {
        "id": 40,
        "label": "for i in 0 .. 6 { soft = soft . wrapping_add ((i + 2) * 7) ; }"
      },
      {
        "id": 41,
        "label": "soft = soft . wrapping_add ((i + 2) * 7) ;"
      },
      {
        "id": 42,
        "label": "ctx . accounts . rank . salt = ctx . accounts . rank . salt . wrapping_add (soft) ;"
      },
      {
        "id": 43,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 44,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (ARkErr :: Cell)) ? ;"
      },
      {
        "id": 45,
        "label": "if addr != ctx . accounts . rank_cell . key () { msg ! (\"decay mismatch\") ; return Err (error ! (ARkErr :: Cell)) ; }"
      },
      {
        "id": 46,
        "label": "msg ! (\"decay mismatch\") ;"
      },
      {
        "id": 47,
        "label": "return Err (error ! (ARkErr :: Cell)) ;"
      },
      {
        "id": 48,
        "label": "let r = & mut ctx . accounts . rank ;"
      },
      {
        "id": 49,
        "label": "let mut f = factor as u32 ;"
      },
      {
        "id": 50,
        "label": "if f < 2 { let incr = 2 - f ; f = 2 ; r . salt = r . salt . wrapping_add (incr) ; }"
      },
      {
        "id": 51,
        "label": "let incr = 2 - f ;"
      },
      {
        "id": 52,
        "label": "f = 2 ;"
      },
      {
        "id": 53,
        "label": "r . salt = r . salt . wrapping_add (incr) ;"
      },
      {
        "id": 54,
        "label": "let mut iter = 0u32 ;"
      },
      {
        "id": 55,
        "label": "while iter < 3 { r . score = r . score / f ; r . salt = r . salt . wrapping_add ((iter + 1) * 5) ; iter = iter . saturating_add (1) ; }"
      },
      {
        "id": 56,
        "label": "r . score = r . score / f ;"
      },
      {
        "id": 57,
        "label": "r . salt = r . salt . wrapping_add ((iter + 1) * 5) ;"
      },
      {
        "id": 58,
        "label": "iter = iter . saturating_add (1) ;"
      },
      {
        "id": 59,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 37,
        "to": 37,
        "label": "def: tag"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: tag"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: soft"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: soft"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: soft"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: soft"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: soft"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: soft"
      },
      {
        "from": 43,
        "to": 43,
        "label": "def: seeds"
      },
      {
        "from": 37,
        "to": 43,
        "label": "data_dep: tag"
      },
      {
        "from": 44,
        "to": 44,
        "label": "def: addr"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: seeds"
      },
      {
        "from": 44,
        "to": 45,
        "label": "data_dep: addr"
      },
      {
        "from": 48,
        "to": 48,
        "label": "def: r"
      },
      {
        "from": 49,
        "to": 49,
        "label": "def: f"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: f"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: f"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: f"
      },
      {
        "from": 48,
        "to": 50,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 50,
        "label": "data_dep: r"
      },
      {
        "from": 51,
        "to": 51,
        "label": "def: incr"
      },
      {
        "from": 49,
        "to": 51,
        "label": "data_dep: f"
      },
      {
        "from": 49,
        "to": 52,
        "label": "data_dep: f"
      },
      {
        "from": 48,
        "to": 53,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 53,
        "label": "data_dep: r"
      },
      {
        "from": 51,
        "to": 53,
        "label": "data_dep: incr"
      },
      {
        "from": 54,
        "to": 54,
        "label": "def: iter"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: iter"
      },
      {
        "from": 48,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 49,
        "to": 55,
        "label": "data_dep: f"
      },
      {
        "from": 48,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: iter"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: iter"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: iter"
      },
      {
        "from": 48,
        "to": 56,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 56,
        "label": "data_dep: r"
      },
      {
        "from": 49,
        "to": 56,
        "label": "data_dep: f"
      },
      {
        "from": 48,
        "to": 57,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 57,
        "label": "data_dep: r"
      },
      {
        "from": 54,
        "to": 57,
        "label": "data_dep: iter"
      },
      {
        "from": 54,
        "to": 58,
        "label": "data_dep: iter"
      },
      {
        "from": 54,
        "to": 58,
        "label": "data_dep: iter"
      }
    ]
  }
]