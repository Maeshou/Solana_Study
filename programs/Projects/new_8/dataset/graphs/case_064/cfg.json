[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault = & mut ctx . accounts . vault ;"
      },
      {
        "id": 2,
        "label": "vault . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "vault . bump_saved = * ctx . bumps . get (\"vault\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "vault . energy_total = seed % 500 + 200 ;"
      },
      {
        "id": 5,
        "label": "vault . bonus_index = 0 ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "vault . energy_total & 1 == 1"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "vault . bonus_index = vault . bonus_index . saturating_add (vault . energy_total as u32 % 17 + 4) ;"
      },
      {
        "id": 11,
        "label": "vault . energy_total = vault . energy_total . wrapping_add (9) ;"
      },
      {
        "id": 12,
        "label": "False body"
      },
      {
        "id": 13,
        "label": "vault . bonus_index = vault . bonus_index . saturating_add (vault . energy_total as u32 % 11 + 6) ;"
      },
      {
        "id": 14,
        "label": "vault . energy_total = vault . energy_total . wrapping_mul (2) . wrapping_add (3) ;"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "vault . bonus_index = vault . bonus_index . saturating_add (((vault . energy_total as u32) . wrapping_mul (i + 3)) % 29) ;"
      },
      {
        "id": 18,
        "label": "vault . energy_total = vault . energy_total . wrapping_add ((i as u64) * 7) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 6,
        "to": 12,
        "label": "false"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 11,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "for"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  },
  {
    "name": "payout",
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let v = & ctx . accounts . vault ;"
      },
      {
        "id": 23,
        "label": "let wrong : & [& [u8]] = & [b\"treasure_alt\" , v . owner . as_ref () , & [v . bump_saved] ,] ;"
      },
      {
        "id": 24,
        "label": "let wrong_key = Pubkey :: create_program_address (& [b\"treasure_alt\" , v . owner . as_ref () , & [v . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 25,
        "label": "let ix = system_instruction :: transfer (& wrong_key , & ctx . accounts . receiver . key () , lamports) ;"
      },
      {
        "id": 26,
        "label": "invoke_signed (& ix , & [ctx . accounts . alt_vault . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [wrong] ,) ? ;"
      },
      {
        "id": 27,
        "label": "let mut remain = lamports ^ 0x55AA55AA55AA55AA ;"
      },
      {
        "id": 28,
        "label": "let mut lap : u8 = 0 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "ctx . accounts . vault . bonus_index = ctx . accounts . vault . bonus_index . saturating_add ((remain % 23) as u32 + 7) ;"
      },
      {
        "id": 31,
        "label": "ctx . accounts . vault . energy_total = ctx . accounts . vault . energy_total . wrapping_add (remain % 13) ;"
      },
      {
        "id": 32,
        "label": "remain = remain . saturating_sub (8) ;"
      },
      {
        "id": 33,
        "label": "lap = lap . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "lap > 9"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "break ;"
      },
      {
        "id": 39,
        "label": "False body"
      },
      {
        "id": 40,
        "label": "No-op"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "Loop End"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "ctx . accounts . vault . energy_total & 2 == 2"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "ctx . accounts . vault . bonus_index = ctx . accounts . vault . bonus_index . saturating_add (31) ;"
      },
      {
        "id": 48,
        "label": "ctx . accounts . vault . energy_total = ctx . accounts . vault . energy_total . rotate_left (3) . wrapping_add (17) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "ctx . accounts . vault . bonus_index = ctx . accounts . vault . bonus_index . saturating_add (19) ;"
      },
      {
        "id": 51,
        "label": "ctx . accounts . vault . energy_total = ctx . accounts . vault . energy_total . rotate_right (2) . wrapping_add (11) ;"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 34,
        "to": 39,
        "label": "false"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 29,
        "to": 42,
        "label": "while"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 43,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 48,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]