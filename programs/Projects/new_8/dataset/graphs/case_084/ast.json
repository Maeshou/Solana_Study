[
  {
    "name": "init_arena",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitArena >",
      "crowd: u64"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . arena ;",
      "a . owner = ctx . accounts . host . key () ;",
      "a . bump_mem = * ctx . bumps . get (\"arena\") . ok_or (error ! (EAB :: NoBump)) ? ;",
      "a . hype = crowd . rotate_left (2) . wrapping_add (63) ;",
      "a . round = 3 ;",
      "if a . hype > 350",
      "{",
      "let base = a . hype . rotate_right (1) . wrapping_add (27) ;",
      "a . hype = a . hype . wrapping_add (base) . wrapping_mul (2) ;",
      "a . round = a . round . saturating_add (((a . hype % 17) as u32) + 2) ;",
      "} else",
      "{",
      "let mutate = a . hype . rotate_left (1) . wrapping_add (15) ;",
      "a . hype = a . hype . wrapping_add (mutate) . wrapping_mul (3) ;",
      "a . round = a . round . saturating_add (((a . hype % 19) as u32) + 2) ;",
      "}",
      "for w in 1 .. 4",
      "{",
      "let burst = (a . hype ^ (w as u64 * 23)) . rotate_left (1) ;",
      "a . hype = a . hype . wrapping_add (burst) . wrapping_mul (2) . wrapping_add (13 + w as u64) ;",
      "a . round = a . round . saturating_add (((a . hype % 31) as u32) + 4) ;",
      "}",
      "let mut r = 1u8 ;",
      "while r < 3",
      "{",
      "let j = (a . hype ^ (r as u64 * 11)) . rotate_right (1) ;",
      "a . hype = a . hype . wrapping_add (j) . wrapping_mul (2) . wrapping_add (21 + r as u64) ;",
      "a . round = a . round . saturating_add (((a . hype % 27) as u32) + 4) ;",
      "r = r . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "payout_prize",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < PayoutPrize >",
      "match_id: u64",
      "bump_input: u8",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . arena ;",
      "if lamports > 420",
      "{",
      "for i in 1 .. 5",
      "{",
      "let add = (lamports ^ (i as u64 * 37)) . rotate_left (1) ;",
      "a . hype = a . hype . wrapping_add (add) . wrapping_mul (3) . wrapping_add (5 + i as u64) ;",
      "a . round = a . round . saturating_add (((a . hype % 28) as u32) + 5) ;",
      "} } else",
      "{",
      "let mut p = 1u8 ;",
      "let mut stash = lamports . rotate_right (2) ;",
      "while p < 4",
      "{",
      "let k = (stash ^ (p as u64 * 14)) . rotate_left (p as u32) ;",
      "stash = stash . wrapping_add (k) ;",
      "a . hype = a . hype . wrapping_add (k) . wrapping_mul (2) . wrapping_add (17 + p as u64) ;",
      "a . round = a . round . saturating_add (((a . hype % 24) as u32) + 4) ;",
      "p = p . saturating_add (1) ;",
      "}",
      "}",
      "let seeds = & [b\"arena_prize\" . as_ref () , a . owner . as_ref () , & match_id . to_le_bytes () , core :: slice :: from_ref (& bump_input) ,] ;",
      "let vault = Pubkey :: create_program_address (& [b\"arena_prize\" , a . owner . as_ref () , & match_id . to_le_bytes () , & [bump_input]] , ctx . program_id ,) . map_err (| _ | error ! (EAB :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& vault , & ctx . accounts . champion . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . prize_hint . to_account_info () , ctx . accounts . champion . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitArena",
    "node_type": "struct",
    "fields": [
      {
        "name": "arena",
        "attribute": "# [account (init , payer = host , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"arena\" , host . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , ArenaState >"
      },
      {
        "name": "host",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "PayoutPrize",
    "node_type": "struct",
    "fields": [
      {
        "name": "arena",
        "attribute": "# [account (mut , seeds = [b\"arena\" , host . key () . as_ref ()] , bump = arena . bump_mem)]",
        "field_type": "Account < 'info , ArenaState >"
      },
      {
        "name": "prize_hint",
        "attribute": "# [doc = \" CHECK\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "champion",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "host",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ArenaState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "hype",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "round",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_mem",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]