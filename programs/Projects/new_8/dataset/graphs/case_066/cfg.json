[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let chest = & mut ctx . accounts . chest ;"
      },
      {
        "id": 2,
        "label": "chest . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "chest . bump_saved = * ctx . bumps . get (\"chest\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "chest . score = seed_tweak . rotate_left (3) . wrapping_add (77) ;"
      },
      {
        "id": 5,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "chest . score = chest . score . wrapping_mul (3) . wrapping_add (i as u64 + 11) ;"
      },
      {
        "id": 8,
        "label": "if statement"
      },
      {
        "id": 9,
        "label": "predicate"
      },
      {
        "id": 10,
        "label": "chest . score % 2 == 1"
      },
      {
        "id": 11,
        "label": "True body"
      },
      {
        "id": 12,
        "label": "chest . score = chest . score . rotate_right (2) . wrapping_add (19) ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "chest . score = chest . score . rotate_left (1) . wrapping_add (23) ;"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "predicate"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "true"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 6,
        "to": 17,
        "label": "while"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "payout",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let c = & ctx . accounts . chest ;"
      },
      {
        "id": 21,
        "label": "let wrong_seeds : & [& [u8]] = & [c . owner . as_ref () , b\"chest\" , & [c . bump_saved]] ;"
      },
      {
        "id": 22,
        "label": "let derived = Pubkey :: create_program_address (& [c . owner . as_ref () , b\"chest\" , & [c . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 23,
        "label": "let ix = system_instruction :: transfer (& derived , & ctx . accounts . receiver . key () , lamports) ;"
      },
      {
        "id": 24,
        "label": "invoke_signed (& ix , & [ctx . accounts . derived_info . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [wrong_seeds] ,) ? ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      }
    ]
  }
]