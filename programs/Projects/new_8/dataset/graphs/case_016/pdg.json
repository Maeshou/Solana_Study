[
  {
    "name": "start_arc",
    "inputs": [
      "ctx: Context < StartArc >",
      "name: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if n . len () > 18 { n . truncate (18) ; }"
      },
      {
        "id": 3,
        "label": "n . truncate (18) ;"
      },
      {
        "id": 4,
        "label": "let mut code : u32 = 31 ;"
      },
      {
        "id": 5,
        "label": "for b in n . iter () { code = code . wrapping_mul (97) . wrapping_add (* b as u32) ; }"
      },
      {
        "id": 6,
        "label": "code = code . wrapping_mul (97) . wrapping_add (* b as u32) ;"
      },
      {
        "id": 7,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 8,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (QErr :: Cell)) ? ;"
      },
      {
        "id": 9,
        "label": "if addr != ctx . accounts . arc_cell . key () { return Err (error ! (QErr :: Cell)) ; }"
      },
      {
        "id": 10,
        "label": "return Err (error ! (QErr :: Cell)) ;"
      },
      {
        "id": 11,
        "label": "let a = & mut ctx . accounts . arc ;"
      },
      {
        "id": 12,
        "label": "a . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 13,
        "label": "a . name = n ;"
      },
      {
        "id": 14,
        "label": "a . progress = 1 ;"
      },
      {
        "id": 15,
        "label": "a . hash = code ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: n"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: n"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: addr"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: seeds"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: addr"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: a"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: a"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: a"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: n"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: a"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: a"
      }
    ]
  },
  {
    "name": "advance_arc",
    "inputs": [
      "ctx: Context < AdvanceArc >",
      "step: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let tag = ctx . accounts . arc . name . clone () ;"
      },
      {
        "id": 19,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 20,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (QErr :: Cell)) ? ;"
      },
      {
        "id": 21,
        "label": "if addr != ctx . accounts . arc_cell . key () { return Err (error ! (QErr :: Cell)) ; }"
      },
      {
        "id": 22,
        "label": "return Err (error ! (QErr :: Cell)) ;"
      },
      {
        "id": 23,
        "label": "let a = & mut ctx . accounts . arc ;"
      },
      {
        "id": 24,
        "label": "let mut s = step as u32 ;"
      },
      {
        "id": 25,
        "label": "if s > 5000 { s = 5000 ; }"
      },
      {
        "id": 26,
        "label": "s = 5000 ;"
      },
      {
        "id": 27,
        "label": "a . progress = a . progress . saturating_add (s) ;"
      },
      {
        "id": 28,
        "label": "a . hash = a . hash . wrapping_add (113) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: tag"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: seeds"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: tag"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: addr"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: seeds"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: addr"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: a"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: s"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: a"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: a"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: a"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: a"
      }
    ]
  }
]