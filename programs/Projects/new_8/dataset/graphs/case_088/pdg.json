[
  {
    "name": "init_dungeon",
    "inputs": [
      "ctx: Context < InitDungeon >",
      "key: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 2,
        "label": "d . owner = ctx . accounts . overseer . key () ;"
      },
      {
        "id": 3,
        "label": "d . bump_code = * ctx . bumps . get (\"dungeon\") . ok_or (error ! (EDN :: NoBump)) ? ;"
      },
      {
        "id": 4,
        "label": "d . energy = key . rotate_left (1) . wrapping_add (61) ;"
      },
      {
        "id": 5,
        "label": "d . steps = 2 ;"
      },
      {
        "id": 6,
        "label": "for i in 1 .. 4 { let inc = (d . energy ^ (i as u64 * 23)) . rotate_left (1) ; d . energy = d . energy . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (13 + i as u64) ; d . steps = d . steps . saturating_add (((d . energy % 21) as u32) + 3) ; }"
      },
      {
        "id": 7,
        "label": "let inc = (d . energy ^ (i as u64 * 23)) . rotate_left (1) ;"
      },
      {
        "id": 8,
        "label": "d . energy = d . energy . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (13 + i as u64) ;"
      },
      {
        "id": 9,
        "label": "d . steps = d . steps . saturating_add (((d . energy % 21) as u32) + 3) ;"
      },
      {
        "id": 10,
        "label": "let mut counter = 1u8 ;"
      },
      {
        "id": 11,
        "label": "while counter < 3 { let spark = (d . energy ^ (counter as u64 * 17)) . rotate_right (1) ; d . energy = d . energy . wrapping_add (spark) . wrapping_mul (3) . wrapping_add (9 + counter as u64) ; d . steps = d . steps . saturating_add (((d . energy % 27) as u32) + 4) ; counter = counter . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let spark = (d . energy ^ (counter as u64 * 17)) . rotate_right (1) ;"
      },
      {
        "id": 13,
        "label": "d . energy = d . energy . wrapping_add (spark) . wrapping_mul (3) . wrapping_add (9 + counter as u64) ;"
      },
      {
        "id": 14,
        "label": "d . steps = d . steps . saturating_add (((d . energy % 27) as u32) + 4) ;"
      },
      {
        "id": 15,
        "label": "counter = counter . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "if d . energy > key { d . energy = d . energy . rotate_left (2) . wrapping_add (25) ; d . steps = d . steps . saturating_add (((d . energy % 29) as u32) + 4) ; }"
      },
      {
        "id": 17,
        "label": "d . energy = d . energy . rotate_left (2) . wrapping_add (25) ;"
      },
      {
        "id": 18,
        "label": "d . steps = d . steps . saturating_add (((d . energy % 29) as u32) + 4) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: d"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: inc"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: inc"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: counter"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: counter"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: counter"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: spark"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: d"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: spark"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: d"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: counter"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: counter"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: d"
      }
    ]
  },
  {
    "name": "reward_clear",
    "inputs": [
      "ctx: Context < RewardClear >",
      "run_id: u64",
      "bump_input: u8",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let d = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 22,
        "label": "for r in 1 .. 3 { let mut p = 1u8 ; while p < 4 { let v = (d . energy ^ (r as u64 * p as u64 * 11)) . rotate_left (1) ; d . energy = d . energy . wrapping_add (v) . wrapping_mul (2) . wrapping_add (15 + r as u64) ; d . steps = d . steps . saturating_add (((d . energy % 25) as u32) + 4) ; p = p . saturating_add (1) ; } }"
      },
      {
        "id": 23,
        "label": "let mut p = 1u8 ;"
      },
      {
        "id": 24,
        "label": "while p < 4 { let v = (d . energy ^ (r as u64 * p as u64 * 11)) . rotate_left (1) ; d . energy = d . energy . wrapping_add (v) . wrapping_mul (2) . wrapping_add (15 + r as u64) ; d . steps = d . steps . saturating_add (((d . energy % 25) as u32) + 4) ; p = p . saturating_add (1) ; }"
      },
      {
        "id": 25,
        "label": "let v = (d . energy ^ (r as u64 * p as u64 * 11)) . rotate_left (1) ;"
      },
      {
        "id": 26,
        "label": "d . energy = d . energy . wrapping_add (v) . wrapping_mul (2) . wrapping_add (15 + r as u64) ;"
      },
      {
        "id": 27,
        "label": "d . steps = d . steps . saturating_add (((d . energy % 25) as u32) + 4) ;"
      },
      {
        "id": 28,
        "label": "p = p . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "let seeds = & [b\"run_bonus\" . as_ref () , d . owner . as_ref () , & run_id . to_le_bytes () , core :: slice :: from_ref (& bump_input) ,] ;"
      },
      {
        "id": 30,
        "label": "let chest = Pubkey :: create_program_address (& [b\"run_bonus\" , d . owner . as_ref () , & run_id . to_le_bytes () , & [bump_input]] , ctx . program_id ,) . map_err (| _ | error ! (EDN :: SeedCompute)) ? ;"
      },
      {
        "id": 31,
        "label": "let ix = system_instruction :: transfer (& chest , & ctx . accounts . runner . key () , lamports) ;"
      },
      {
        "id": 32,
        "label": "invoke_signed (& ix , & [ctx . accounts . bonus_hint . to_account_info () , ctx . accounts . runner . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 21,
        "label": "def: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: p"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: v"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: d"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: p"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: d"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: v"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: d"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: seeds"
      },
      {
        "from": 21,
        "to": 29,
        "label": "data_dep: d"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: chest"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: d"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: ix"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: chest"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: ix"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: seeds"
      }
    ]
  }
]