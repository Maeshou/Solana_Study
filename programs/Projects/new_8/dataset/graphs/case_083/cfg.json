[
  {
    "name": "init_hatchery",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hatchery ;"
      },
      {
        "id": 2,
        "label": "h . owner = ctx . accounts . keeper . key () ;"
      },
      {
        "id": 3,
        "label": "h . bump_saved = * ctx . bumps . get (\"hatchery\") . ok_or (error ! (EHB :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "h . energy = vigor . rotate_left (3) . wrapping_add (71) ;"
      },
      {
        "id": 5,
        "label": "h . ticks = 2 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "let mix = (h . energy . wrapping_mul (k * 13)) . rotate_right ((k % 3) as u32 + 1) ;"
      },
      {
        "id": 8,
        "label": "h . energy = h . energy . wrapping_add (mix) . wrapping_mul (2) . wrapping_add (9 + k as u64) ;"
      },
      {
        "id": 9,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 21) as u32) + 3) ;"
      },
      {
        "id": 10,
        "label": "Loop End"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "h . energy > 400"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "let mut bonus = vigor . rotate_right (1) ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "let adj = (bonus ^ (j as u64 * 19)) . rotate_left (1) ;"
      },
      {
        "id": 18,
        "label": "bonus = bonus . wrapping_add (adj) ;"
      },
      {
        "id": 19,
        "label": "h . energy = h . energy . wrapping_add (adj) . wrapping_mul (3) . wrapping_add (7 + j as u64) ;"
      },
      {
        "id": 20,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 29) as u32) + 4) ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "let seeds_local = [5u64 , 8 , 12] ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let g = (v . rotate_left (2) ^ h . energy) . wrapping_add (23) ;"
      },
      {
        "id": 26,
        "label": "h . energy = h . energy . wrapping_add (g) . rotate_left (1) . wrapping_mul (2) ;"
      },
      {
        "id": 27,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 26) as u32) + 4) ;"
      },
      {
        "id": 28,
        "label": "Loop End"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 6,
        "to": 10,
        "label": "for"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "for"
      },
      {
        "from": 11,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 24,
        "to": 28,
        "label": "for"
      },
      {
        "from": 21,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  },
  {
    "name": "spend_hatching",
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let h = & mut ctx . accounts . hatchery ;"
      },
      {
        "id": 33,
        "label": "Loop Start"
      },
      {
        "id": 34,
        "label": "let wave = (h . energy ^ (i as u64 * 31)) . rotate_left (i as u32) ;"
      },
      {
        "id": 35,
        "label": "h . energy = h . energy . wrapping_add (wave) . wrapping_mul (2) . wrapping_add (15 + i as u64) ;"
      },
      {
        "id": 36,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 33) as u32) + 3) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "lamports > 550"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "let mut acc = lamports . rotate_left (2) ;"
      },
      {
        "id": 43,
        "label": "let mut c = 1u8 ;"
      },
      {
        "id": 44,
        "label": "Loop Start"
      },
      {
        "id": 45,
        "label": "let m = (acc ^ (c as u64 * 17)) . rotate_right (1) ;"
      },
      {
        "id": 46,
        "label": "acc = acc . wrapping_add (m) ;"
      },
      {
        "id": 47,
        "label": "h . energy = h . energy . wrapping_add (m) . wrapping_mul (3) . wrapping_add (11 + c as u64) ;"
      },
      {
        "id": 48,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 27) as u32) + 5) ;"
      },
      {
        "id": 49,
        "label": "c = c . saturating_add (1) ;"
      },
      {
        "id": 50,
        "label": "Loop End"
      },
      {
        "id": 51,
        "label": "False body"
      },
      {
        "id": 52,
        "label": "let mut bag = 1u8 ;"
      },
      {
        "id": 53,
        "label": "let mut store = vigor_hint (h . energy) ;"
      },
      {
        "id": 54,
        "label": "Loop Start"
      },
      {
        "id": 55,
        "label": "let e = (store ^ (bag as u64 * 9)) . rotate_left (bag as u32) ;"
      },
      {
        "id": 56,
        "label": "store = store . wrapping_add (e) ;"
      },
      {
        "id": 57,
        "label": "h . energy = h . energy . wrapping_add (e) . wrapping_mul (2) . wrapping_add (19 + bag as u64) ;"
      },
      {
        "id": 58,
        "label": "h . ticks = h . ticks . saturating_add (((h . energy % 25) as u32) + 4) ;"
      },
      {
        "id": 59,
        "label": "bag = bag . saturating_add (1) ;"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "let seeds = & [b\"egg_pda\" . as_ref () , h . owner . as_ref () , & pet_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 63,
        "label": "let egg = Pubkey :: create_program_address (& [b\"egg_pda\" , h . owner . as_ref () , & pet_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EHB :: SeedCompute)) ? ;"
      },
      {
        "id": 64,
        "label": "let ix = system_instruction :: transfer (& egg , & ctx . accounts . player . key () , lamports) ;"
      },
      {
        "id": 65,
        "label": "invoke_signed (& ix , & [ctx . accounts . egg_hint . to_account_info () , ctx . accounts . player . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 66,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 33,
        "to": 37,
        "label": "for"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 44,
        "to": 50,
        "label": "while"
      },
      {
        "from": 38,
        "to": 51,
        "label": "false"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 54,
        "to": 60,
        "label": "while"
      },
      {
        "from": 50,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      }
    ]
  },
  {
    "name": "vigor_hint",
    "nodes": [
      {
        "id": 67,
        "label": "Entry"
      },
      {
        "id": 68,
        "label": "x . rotate_left (1) . wrapping_add (41)"
      }
    ],
    "edges": [
      {
        "from": 67,
        "to": 68,
        "label": "next"
      }
    ]
  }
]