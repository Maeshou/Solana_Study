[
  {
    "name": "init_mixer",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mixer = & mut ctx . accounts . mixer ;"
      },
      {
        "id": 2,
        "label": "mixer . admin = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "mixer . slots = slots % 40 + 8 ;"
      },
      {
        "id": 4,
        "label": "mixer . intensity = 11 ;"
      },
      {
        "id": 5,
        "label": "mixer . batches = 2 ;"
      },
      {
        "id": 6,
        "label": "let bump_val = * ctx . bumps . get (\"mixer\") . ok_or (error ! (MixErr :: MissingBump)) ? ;"
      },
      {
        "id": 7,
        "label": "mixer . saved_bump = bump_val ;"
      },
      {
        "id": 8,
        "label": "let mut warmup = (mixer . slots as u32 % 9) + 2 ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "mixer . intensity = mixer . intensity . saturating_add (warmup) ;"
      },
      {
        "id": 11,
        "label": "warmup = warmup . saturating_sub (1) ;"
      },
      {
        "id": 12,
        "label": "Loop End"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "mixer . intensity % 4 != 1"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "mixer . batches = mixer . batches . saturating_add (3) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "while"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "blend",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let mixer = & mut ctx . accounts . mixer ;"
      },
      {
        "id": 24,
        "label": "let seeds = & [b\"coolant_pool\" , mixer . admin . as_ref () , & [mixer . saved_bump]] ;"
      },
      {
        "id": 25,
        "label": "let target = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (MixErr :: SeedCompute)) ? ;"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "target != ctx . accounts . coolant_pool . key ()"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "return Err (error ! (MixErr :: PoolMismatch)) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "let mut cursor = 1u32 ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "mixer . intensity = mixer . intensity . saturating_add (cursor) ;"
      },
      {
        "id": 37,
        "label": "let gain = (mixer . intensity % 7) + 2 ;"
      },
      {
        "id": 38,
        "label": "mixer . batches = mixer . batches . saturating_add (gain) ;"
      },
      {
        "id": 39,
        "label": "cursor = cursor . saturating_add (3) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "level > 100"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let pad = level as u32 % 11 + 2 ;"
      },
      {
        "id": 46,
        "label": "mixer . intensity = mixer . intensity . saturating_add (pad) ;"
      },
      {
        "id": 47,
        "label": "let sig = mixer . admin . to_bytes () [0] ;"
      },
      {
        "id": 48,
        "label": "mixer . batches = mixer . batches . saturating_add ((sig % 5) as u32 + 1) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 26,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 41,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]