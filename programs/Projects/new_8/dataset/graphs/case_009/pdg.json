[
  {
    "name": "push_step",
    "inputs": [
      "ctx: Context < PushStep >",
      "chapter: u16",
      "notes: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = notes . clone () ;"
      },
      {
        "id": 2,
        "label": "if n . len () > 80 { n . truncate (80) ; }"
      },
      {
        "id": 3,
        "label": "n . truncate (80) ;"
      },
      {
        "id": 4,
        "label": "let mut chapter_id = chapter ;"
      },
      {
        "id": 5,
        "label": "if chapter_id < 1 { chapter_id = 1 ; }"
      },
      {
        "id": 6,
        "label": "chapter_id = 1 ;"
      },
      {
        "id": 7,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & chapter_id . to_le_bytes () [..]] ;"
      },
      {
        "id": 8,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (QuestErr :: Mismatch)) ? ;"
      },
      {
        "id": 9,
        "label": "if addr != ctx . accounts . route_cell . key () { return Err (error ! (QuestErr :: Mismatch)) ; }"
      },
      {
        "id": 10,
        "label": "return Err (error ! (QuestErr :: Mismatch)) ;"
      },
      {
        "id": 11,
        "label": "let q = & mut ctx . accounts . route ;"
      },
      {
        "id": 12,
        "label": "q . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 13,
        "label": "q . chapter = chapter_id ;"
      },
      {
        "id": 14,
        "label": "q . memo = n ;"
      },
      {
        "id": 15,
        "label": "q . steps = q . steps . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: n"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: chapter_id"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: chapter_id"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: chapter_id"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: chapter_id"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: seeds"
      },
      {
        "from": 4,
        "to": 7,
        "label": "data_dep: chapter_id"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: addr"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: seeds"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: addr"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: q"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: q"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: q"
      },
      {
        "from": 4,
        "to": 13,
        "label": "data_dep: chapter_id"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: q"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: n"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: q"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: q"
      }
    ]
  }
]