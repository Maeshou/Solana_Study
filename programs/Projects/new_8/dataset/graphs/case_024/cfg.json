[
  {
    "name": "add_canvas",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut t = tag ;"
      },
      {
        "id": 2,
        "label": "Loop Start"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "! t [i] . is_ascii_uppercase ()"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "let orig = t [i] ;"
      },
      {
        "id": 8,
        "label": "t [i] = b'A' + (i as u8 % 26) ;"
      },
      {
        "id": 9,
        "label": "let diff = (t [i] as i16) - (orig as i16) ;"
      },
      {
        "id": 10,
        "label": "msg ! (\"fix {} diff={}\" , i , diff) ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "let x = (t [i] as u32) ^ 0x41 ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "(x & 2) == 2"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "msg ! (\"flag {} x={}\" , i , x) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "Loop End"
      },
      {
        "id": 23,
        "label": "let mut s = size ;"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "s < 12"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "let gain = 12 - s ;"
      },
      {
        "id": 29,
        "label": "s = 12 ;"
      },
      {
        "id": 30,
        "label": "let mut pulse = 0u16 ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "pulse = pulse . wrapping_add ((k * 3) as u16) ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "msg ! (\"pulse {}\" , pulse) ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "let seeds = [& ctx . accounts . artist . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 39,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (CnvErr :: Cell)) ? ;"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "addr != ctx . accounts . canvas_cell . key ()"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "msg ! (\"add mismatch\") ;"
      },
      {
        "id": 45,
        "label": "return Err (error ! (CnvErr :: Cell)) ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let c = & mut ctx . accounts . canvas ;"
      },
      {
        "id": 50,
        "label": "c . artist = ctx . accounts . artist . key () ;"
      },
      {
        "id": 51,
        "label": "c . tag = t ;"
      },
      {
        "id": 52,
        "label": "c . size = s ;"
      },
      {
        "id": 53,
        "label": "let mut acc = 0u16 ;"
      },
      {
        "id": 54,
        "label": "Loop Start"
      },
      {
        "id": 55,
        "label": "acc = acc . saturating_add (1) ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "c . layers = c . layers . saturating_add (acc) ;"
      },
      {
        "id": 58,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 3,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 10,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 2,
        "to": 22,
        "label": "for"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 33,
        "label": "for"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 24,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 40,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 56,
        "label": "for"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      }
    ]
  },
  {
    "name": "draw_stroke",
    "nodes": [
      {
        "id": 59,
        "label": "Entry"
      },
      {
        "id": 60,
        "label": "let tag = ctx . accounts . canvas . tag ;"
      },
      {
        "id": 61,
        "label": "if statement"
      },
      {
        "id": 62,
        "label": "predicate"
      },
      {
        "id": 63,
        "label": "tag [0] == b'Z'"
      },
      {
        "id": 64,
        "label": "True body"
      },
      {
        "id": 65,
        "label": "msg ! (\"rare tag path\") ;"
      },
      {
        "id": 66,
        "label": "let mut zz = 0u32 ;"
      },
      {
        "id": 67,
        "label": "Loop Start"
      },
      {
        "id": 68,
        "label": "zz = zz . wrapping_add ((tag [j] as u32) . wrapping_mul ((j as u32) + 9)) ;"
      },
      {
        "id": 69,
        "label": "Loop End"
      },
      {
        "id": 70,
        "label": "ctx . accounts . canvas . painted = ctx . accounts . canvas . painted . wrapping_add (zz) ;"
      },
      {
        "id": 71,
        "label": "False body"
      },
      {
        "id": 72,
        "label": "No-op"
      },
      {
        "id": 73,
        "label": "merge"
      },
      {
        "id": 74,
        "label": "let seeds = [& ctx . accounts . artist . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 75,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (CnvErr :: Cell)) ? ;"
      },
      {
        "id": 76,
        "label": "if statement"
      },
      {
        "id": 77,
        "label": "predicate"
      },
      {
        "id": 78,
        "label": "addr != ctx . accounts . canvas_cell . key ()"
      },
      {
        "id": 79,
        "label": "True body"
      },
      {
        "id": 80,
        "label": "msg ! (\"draw mismatch\") ;"
      },
      {
        "id": 81,
        "label": "return Err (error ! (CnvErr :: Cell)) ;"
      },
      {
        "id": 82,
        "label": "False body"
      },
      {
        "id": 83,
        "label": "No-op"
      },
      {
        "id": 84,
        "label": "merge"
      },
      {
        "id": 85,
        "label": "let c = & mut ctx . accounts . canvas ;"
      },
      {
        "id": 86,
        "label": "let mut px = pixels ;"
      },
      {
        "id": 87,
        "label": "if statement"
      },
      {
        "id": 88,
        "label": "predicate"
      },
      {
        "id": 89,
        "label": "px > 200_000"
      },
      {
        "id": 90,
        "label": "True body"
      },
      {
        "id": 91,
        "label": "let cut = px - 200_000 ;"
      },
      {
        "id": 92,
        "label": "px = 200_000 ;"
      },
      {
        "id": 93,
        "label": "let mut leak = 0u32 ;"
      },
      {
        "id": 94,
        "label": "Loop Start"
      },
      {
        "id": 95,
        "label": "leak = leak . wrapping_add (cut . wrapping_mul ((r + 1) * 7)) ;"
      },
      {
        "id": 96,
        "label": "Loop End"
      },
      {
        "id": 97,
        "label": "c . painted = c . painted . wrapping_add (leak) ;"
      },
      {
        "id": 98,
        "label": "False body"
      },
      {
        "id": 99,
        "label": "No-op"
      },
      {
        "id": 100,
        "label": "merge"
      },
      {
        "id": 101,
        "label": "let mut step = 0u32 ;"
      },
      {
        "id": 102,
        "label": "Loop Start"
      },
      {
        "id": 103,
        "label": "c . strokes = c . strokes . saturating_add (1) ;"
      },
      {
        "id": 104,
        "label": "if statement"
      },
      {
        "id": 105,
        "label": "predicate"
      },
      {
        "id": 106,
        "label": "(c . strokes & 31) == 0"
      },
      {
        "id": 107,
        "label": "True body"
      },
      {
        "id": 108,
        "label": "msg ! (\"combo {}\" , c . strokes) ;"
      },
      {
        "id": 109,
        "label": "False body"
      },
      {
        "id": 110,
        "label": "No-op"
      },
      {
        "id": 111,
        "label": "merge"
      },
      {
        "id": 112,
        "label": "step = step . saturating_add (64) ;"
      },
      {
        "id": 113,
        "label": "Loop End"
      },
      {
        "id": 114,
        "label": "c . painted = c . painted . saturating_add (px) ;"
      },
      {
        "id": 115,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "predicate"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "true"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 67,
        "to": 69,
        "label": "for"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 61,
        "to": 71,
        "label": "false"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 70,
        "to": 73,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "predicate"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 76,
        "to": 79,
        "label": "true"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 76,
        "to": 82,
        "label": "false"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "predicate"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 87,
        "to": 90,
        "label": "true"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 94,
        "to": 96,
        "label": "for"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 87,
        "to": 98,
        "label": "false"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 97,
        "to": 100,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "predicate"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 104,
        "to": 107,
        "label": "true"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 104,
        "to": 109,
        "label": "false"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 108,
        "to": 111,
        "label": "next"
      },
      {
        "from": 110,
        "to": 111,
        "label": "next"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 102,
        "to": 113,
        "label": "while"
      },
      {
        "from": 113,
        "to": 114,
        "label": "next"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      }
    ]
  }
]