[
  {
    "name": "init_hall",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hall ;"
      },
      {
        "id": 2,
        "label": "h . owner = ctx . accounts . master . key () ;"
      },
      {
        "id": 3,
        "label": "h . bump_main = * ctx . bumps . get (\"hall\") . ok_or (error ! (EE :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "h . power = seed . rotate_left (2) . wrapping_add (733) ;"
      },
      {
        "id": 5,
        "label": "h . steps = 3 ;"
      },
      {
        "id": 6,
        "label": "let primes = [3u64 , 5 , 11 , 17 , 19 , 23] ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "let spin = ((i as u32) % 4) + 1 ;"
      },
      {
        "id": 9,
        "label": "h . power = h . power . rotate_left (spin) . wrapping_add (p . wrapping_mul (7)) ;"
      },
      {
        "id": 10,
        "label": "h . steps = h . steps . saturating_add (((h . power % 21) as u32) + 4) ;"
      },
      {
        "id": 11,
        "label": "let mut inner = 1u8 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let blend = (h . power ^ (* p + inner as u64)) . rotate_right (inner as u32) ;"
      },
      {
        "id": 14,
        "label": "h . power = h . power . wrapping_add (blend) . wrapping_mul (2) . wrapping_add (13) ;"
      },
      {
        "id": 15,
        "label": "h . steps = h . steps . saturating_add (((h . power % 17) as u32) + 3) ;"
      },
      {
        "id": 16,
        "label": "inner = inner . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "h . power > 900"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "let mut acc = 0u64 ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let fold = ((h . power ^ (k as u64 * 29)) . rotate_left (1)) . wrapping_add (37 + k as u64) ;"
      },
      {
        "id": 26,
        "label": "acc = acc . wrapping_add (fold) ;"
      },
      {
        "id": 27,
        "label": "h . power = h . power . rotate_right (((h . steps % 5) + 1) as u32) . wrapping_add (fold) ;"
      },
      {
        "id": 28,
        "label": "h . steps = h . steps . saturating_add (((h . power % 33) as u32) + 5) ;"
      },
      {
        "id": 29,
        "label": "Loop End"
      },
      {
        "id": 30,
        "label": "h . power = h . power . wrapping_add (acc) . wrapping_mul (2) . wrapping_add (101) ;"
      },
      {
        "id": 31,
        "label": "h . steps = h . steps . saturating_add (((acc % 27) as u32) + 6) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "let mut trail = h . power . rotate_left (2) . wrapping_add (47) ;"
      },
      {
        "id": 34,
        "label": "let mut i = 1u8 ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "let mix = (trail ^ (i as u64 * 13)) . rotate_right (i as u32) ;"
      },
      {
        "id": 37,
        "label": "h . power = h . power . wrapping_add (mix) . wrapping_mul (3) . wrapping_add (19 + i as u64) ;"
      },
      {
        "id": 38,
        "label": "h . steps = h . steps . saturating_add (((h . power % 25) as u32) + 4) ;"
      },
      {
        "id": 39,
        "label": "trail = trail . rotate_left (1) . wrapping_add (mix) ;"
      },
      {
        "id": 40,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 41,
        "label": "Loop End"
      },
      {
        "id": 42,
        "label": "h . power = h . power . rotate_left (1) . wrapping_add (trail) . wrapping_mul (2) ;"
      },
      {
        "id": 43,
        "label": "h . steps = h . steps . saturating_add (((trail % 19) as u32) + 3) ;"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "while"
      },
      {
        "from": 7,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 24,
        "to": 29,
        "label": "for"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 19,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 35,
        "to": 41,
        "label": "while"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 31,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      }
    ]
  },
  {
    "name": "payout_cell",
    "nodes": [
      {
        "id": 46,
        "label": "Entry"
      },
      {
        "id": 47,
        "label": "let h = & mut ctx . accounts . hall ;"
      },
      {
        "id": 48,
        "label": "let window = [7u64 , 12 , 18 , 27 , 44] ;"
      },
      {
        "id": 49,
        "label": "Loop Start"
      },
      {
        "id": 50,
        "label": "let delta = (member_slot ^ (w . rotate_left (((i as u32) % 3) + 1))) . wrapping_add (5 + i as u64) ;"
      },
      {
        "id": 51,
        "label": "h . power = h . power . wrapping_add (delta) . wrapping_mul (2) . rotate_right (1) ;"
      },
      {
        "id": 52,
        "label": "h . steps = h . steps . saturating_add (((h . power % 37) as u32) + 3) ;"
      },
      {
        "id": 53,
        "label": "Loop End"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "lamports > 650"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "let mut carry = lamports . rotate_left (2) ;"
      },
      {
        "id": 59,
        "label": "Loop Start"
      },
      {
        "id": 60,
        "label": "let bump = (carry ^ (r as u64 * 31)) . rotate_left (1) ;"
      },
      {
        "id": 61,
        "label": "h . power = h . power . wrapping_add (bump) . wrapping_mul (2) . wrapping_add (23 + r as u64) ;"
      },
      {
        "id": 62,
        "label": "h . steps = h . steps . saturating_add (((h . power % 29) as u32) + 4) ;"
      },
      {
        "id": 63,
        "label": "carry = carry . rotate_right (1) . wrapping_add (bump) ;"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "h . power = h . power . wrapping_add (carry) . rotate_left (((h . steps % 4) + 1) as u32) ;"
      },
      {
        "id": 66,
        "label": "h . steps = h . steps . saturating_add (((carry % 17) as u32) + 3) ;"
      },
      {
        "id": 67,
        "label": "False body"
      },
      {
        "id": 68,
        "label": "let mut scan = 1u8 ;"
      },
      {
        "id": 69,
        "label": "Loop Start"
      },
      {
        "id": 70,
        "label": "let inc = (member_slot + scan as u64 * 9) . rotate_right (scan as u32) ;"
      },
      {
        "id": 71,
        "label": "h . power = h . power . wrapping_add (inc) . wrapping_mul (3) . wrapping_add (37 + scan as u64) ;"
      },
      {
        "id": 72,
        "label": "h . steps = h . steps . saturating_add (((h . power % 23) as u32) + 5) ;"
      },
      {
        "id": 73,
        "label": "scan = scan . saturating_add (1) ;"
      },
      {
        "id": 74,
        "label": "Loop End"
      },
      {
        "id": 75,
        "label": "h . power = h . power . rotate_left (2) . wrapping_add (61) ;"
      },
      {
        "id": 76,
        "label": "h . steps = h . steps . saturating_add (6) ;"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "if statement"
      },
      {
        "id": 79,
        "label": "predicate"
      },
      {
        "id": 80,
        "label": "h . steps & 1 > 0"
      },
      {
        "id": 81,
        "label": "True body"
      },
      {
        "id": 82,
        "label": "let mut acc = 0u64 ;"
      },
      {
        "id": 83,
        "label": "Loop Start"
      },
      {
        "id": 84,
        "label": "let m = ((h . power ^ (t as u64 * 7)) . rotate_left (1)) . wrapping_add (17 + t as u64) ;"
      },
      {
        "id": 85,
        "label": "acc = acc . wrapping_add (m) ;"
      },
      {
        "id": 86,
        "label": "h . power = h . power . rotate_right (1) . wrapping_add (m) . wrapping_mul (2) ;"
      },
      {
        "id": 87,
        "label": "h . steps = h . steps . saturating_add (((h . power % 21) as u32) + 3) ;"
      },
      {
        "id": 88,
        "label": "Loop End"
      },
      {
        "id": 89,
        "label": "h . power = h . power . wrapping_add (acc) . rotate_left (1) ;"
      },
      {
        "id": 90,
        "label": "h . steps = h . steps . saturating_add (2) ;"
      },
      {
        "id": 91,
        "label": "False body"
      },
      {
        "id": 92,
        "label": "let mut chain = h . power ;"
      },
      {
        "id": 93,
        "label": "Loop Start"
      },
      {
        "id": 94,
        "label": "chain = chain . rotate_left (((t % 3) + 1) as u32) . wrapping_add (29 + t as u64) ;"
      },
      {
        "id": 95,
        "label": "h . power = h . power . wrapping_add (chain) . wrapping_mul (2) ;"
      },
      {
        "id": 96,
        "label": "h . steps = h . steps . saturating_add (((h . power % 31) as u32) + 4) ;"
      },
      {
        "id": 97,
        "label": "Loop End"
      },
      {
        "id": 98,
        "label": "merge"
      },
      {
        "id": 99,
        "label": "let seeds = & [b\"treasury_cell\" . as_ref () , h . owner . as_ref () , & member_slot . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 100,
        "label": "let cell = Pubkey :: create_program_address (& [b\"treasury_cell\" , h . owner . as_ref () , & member_slot . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;"
      },
      {
        "id": 101,
        "label": "let ix = system_instruction :: transfer (& cell , & ctx . accounts . receiver . key () , lamports) ;"
      },
      {
        "id": 102,
        "label": "invoke_signed (& ix , & [ctx . accounts . treasury_cell_hint . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 103,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 49,
        "to": 53,
        "label": "for"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 59,
        "to": 64,
        "label": "for"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 54,
        "to": 67,
        "label": "false"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 69,
        "to": 74,
        "label": "while"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 66,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "predicate"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 78,
        "to": 81,
        "label": "true"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 83,
        "to": 88,
        "label": "for"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 78,
        "to": 91,
        "label": "false"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 93,
        "to": 97,
        "label": "for"
      },
      {
        "from": 90,
        "to": 98,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      }
    ]
  }
]