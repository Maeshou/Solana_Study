[
  {
    "name": "mint_badge",
    "inputs": [
      "ctx: Context < MintBadge >",
      "title: Vec < u8 >",
      "tier: u8",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut t = title . clone () ;"
      },
      {
        "id": 2,
        "label": "if t . len () > 24 { t . truncate (24) ; let mut padding = vec ! [b'#' ; 4] ; t . extend_from_slice (& padding) ; msg ! (\"Title too long, truncated and padded with #\") ; }"
      },
      {
        "id": 3,
        "label": "t . truncate (24) ;"
      },
      {
        "id": 4,
        "label": "let mut padding = vec ! [b'#' ; 4] ;"
      },
      {
        "id": 5,
        "label": "t . extend_from_slice (& padding) ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Title too long, truncated and padded with #\") ;"
      },
      {
        "id": 7,
        "label": "if t . len () < 3 { let filler = vec ! [b'*' ; 3 - t . len ()] ; t . extend_from_slice (& filler) ; msg ! (\"Title too short, filled with *\") ; let ascii_sum : u32 = t . iter () . map (| x | * x as u32) . sum () ; msg ! (\"Current ASCII sum of title: {}\" , ascii_sum) ; }"
      },
      {
        "id": 8,
        "label": "let filler = vec ! [b'*' ; 3 - t . len ()] ;"
      },
      {
        "id": 9,
        "label": "t . extend_from_slice (& filler) ;"
      },
      {
        "id": 10,
        "label": "msg ! (\"Title too short, filled with *\") ;"
      },
      {
        "id": 11,
        "label": "let ascii_sum : u32 = t . iter () . map (| x | * x as u32) . sum () ;"
      },
      {
        "id": 12,
        "label": "msg ! (\"Current ASCII sum of title: {}\" , ascii_sum) ;"
      },
      {
        "id": 13,
        "label": "let mut weight : u32 = 7 ;"
      },
      {
        "id": 14,
        "label": "for (i , b) in t . iter () . enumerate () { weight = weight . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_add (i as u32 + 11)) ; if * b == b'!' { msg ! (\"Special character ! found at index {}\" , i) ; weight = weight . saturating_add (500) ; msg ! (\"Weight boosted due to special character\") ; } }"
      },
      {
        "id": 15,
        "label": "weight = weight . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_add (i as u32 + 11)) ;"
      },
      {
        "id": 16,
        "label": "if * b == b'!' { msg ! (\"Special character ! found at index {}\" , i) ; weight = weight . saturating_add (500) ; msg ! (\"Weight boosted due to special character\") ; }"
      },
      {
        "id": 17,
        "label": "msg ! (\"Special character ! found at index {}\" , i) ;"
      },
      {
        "id": 18,
        "label": "weight = weight . saturating_add (500) ;"
      },
      {
        "id": 19,
        "label": "msg ! (\"Weight boosted due to special character\") ;"
      },
      {
        "id": 20,
        "label": "let seeds = [& ctx . accounts . member . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 21,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GErr :: Cell)) ? ;"
      },
      {
        "id": 22,
        "label": "if addr != ctx . accounts . badge_cell . key () { msg ! (\"PDA mismatch detected: expected {} but got {}\" , ctx . accounts . badge_cell . key () , addr) ; return Err (error ! (GErr :: Cell)) ; }"
      },
      {
        "id": 23,
        "label": "msg ! (\"PDA mismatch detected: expected {} but got {}\" , ctx . accounts . badge_cell . key () , addr) ;"
      },
      {
        "id": 24,
        "label": "return Err (error ! (GErr :: Cell)) ;"
      },
      {
        "id": 25,
        "label": "let b = & mut ctx . accounts . badge ;"
      },
      {
        "id": 26,
        "label": "b . member = ctx . accounts . member . key () ;"
      },
      {
        "id": 27,
        "label": "b . title = t ;"
      },
      {
        "id": 28,
        "label": "if tier > 9 { b . tier = 9 ; msg ! (\"Tier capped to 9\") ; } else { b . tier = tier ; msg ! (\"Tier set to {}\" , tier) ; }"
      },
      {
        "id": 29,
        "label": "b . tier = 9 ;"
      },
      {
        "id": 30,
        "label": "msg ! (\"Tier capped to 9\") ;"
      },
      {
        "id": 31,
        "label": "b . tier = tier ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Tier set to {}\" , tier) ;"
      },
      {
        "id": 33,
        "label": "b . value = b . value . wrapping_add (weight) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: padding"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: t"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: padding"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: t"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: filler"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: t"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: filler"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: t"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 20,
        "label": "data_dep: t"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: addr"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: seeds"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: addr"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: b"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 27,
        "label": "data_dep: t"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 33,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 33,
        "label": "data_dep: b"
      }
    ]
  },
  {
    "name": "rename_badge",
    "inputs": [
      "ctx: Context < RenameBadge >",
      "new_title: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 35,
        "label": "Entry"
      },
      {
        "id": 36,
        "label": "let mut t = new_title . clone () ;"
      },
      {
        "id": 37,
        "label": "if t . len () < 3 { msg ! (\"New title too short, adding filler symbols...\") ; t . extend_from_slice (b\"@@\") ; let mut total : u32 = 0 ; for ch in t . iter () { total = total . wrapping_add (* ch as u32) ; if * ch == b'@' { msg ! (\"Found filler symbol @, total so far {}\" , total) ; } } msg ! (\"Final ASCII sum of new title: {}\" , total) ; }"
      },
      {
        "id": 38,
        "label": "msg ! (\"New title too short, adding filler symbols...\") ;"
      },
      {
        "id": 39,
        "label": "t . extend_from_slice (b\"@@\") ;"
      },
      {
        "id": 40,
        "label": "let mut total : u32 = 0 ;"
      },
      {
        "id": 41,
        "label": "for ch in t . iter () { total = total . wrapping_add (* ch as u32) ; if * ch == b'@' { msg ! (\"Found filler symbol @, total so far {}\" , total) ; } }"
      },
      {
        "id": 42,
        "label": "total = total . wrapping_add (* ch as u32) ;"
      },
      {
        "id": 43,
        "label": "if * ch == b'@' { msg ! (\"Found filler symbol @, total so far {}\" , total) ; }"
      },
      {
        "id": 44,
        "label": "msg ! (\"Found filler symbol @, total so far {}\" , total) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"Final ASCII sum of new title: {}\" , total) ;"
      },
      {
        "id": 46,
        "label": "if t . len () > 20 { msg ! (\"New title too long, trimming...\") ; let dropped : usize = t . len () - 20 ; t . truncate (20) ; msg ! (\"{} characters dropped from the new title\" , dropped) ; }"
      },
      {
        "id": 47,
        "label": "msg ! (\"New title too long, trimming...\") ;"
      },
      {
        "id": 48,
        "label": "let dropped : usize = t . len () - 20 ;"
      },
      {
        "id": 49,
        "label": "t . truncate (20) ;"
      },
      {
        "id": 50,
        "label": "msg ! (\"{} characters dropped from the new title\" , dropped) ;"
      },
      {
        "id": 51,
        "label": "let seeds = [& ctx . accounts . member . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 52,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GErr :: Cell)) ? ;"
      },
      {
        "id": 53,
        "label": "if addr != ctx . accounts . badge_cell . key () { msg ! (\"Badge rename PDA mismatch\") ; return Err (error ! (GErr :: Cell)) ; }"
      },
      {
        "id": 54,
        "label": "msg ! (\"Badge rename PDA mismatch\") ;"
      },
      {
        "id": 55,
        "label": "return Err (error ! (GErr :: Cell)) ;"
      },
      {
        "id": 56,
        "label": "let b = & mut ctx . accounts . badge ;"
      },
      {
        "id": 57,
        "label": "b . title = t ;"
      },
      {
        "id": 58,
        "label": "let mut bonus = 0u32 ;"
      },
      {
        "id": 59,
        "label": "for (i , _) in b . title . iter () . enumerate () { bonus = bonus . wrapping_add ((i * 3) as u32) ; msg ! (\"Bonus accumulation step {} => {}\" , i , bonus) ; }"
      },
      {
        "id": 60,
        "label": "bonus = bonus . wrapping_add ((i * 3) as u32) ;"
      },
      {
        "id": 61,
        "label": "msg ! (\"Bonus accumulation step {} => {}\" , i , bonus) ;"
      },
      {
        "id": 62,
        "label": "b . value = b . value . wrapping_add (bonus) ;"
      },
      {
        "id": 63,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 36,
        "to": 36,
        "label": "def: t"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 39,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 41,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 46,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 46,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 46,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 48,
        "label": "data_dep: t"
      },
      {
        "from": 36,
        "to": 49,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 51,
        "label": "def: seeds"
      },
      {
        "from": 36,
        "to": 51,
        "label": "data_dep: t"
      },
      {
        "from": 52,
        "to": 52,
        "label": "def: addr"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: seeds"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: addr"
      },
      {
        "from": 56,
        "to": 56,
        "label": "def: b"
      },
      {
        "from": 56,
        "to": 57,
        "label": "data_dep: b"
      },
      {
        "from": 36,
        "to": 57,
        "label": "data_dep: t"
      },
      {
        "from": 58,
        "to": 58,
        "label": "def: bonus"
      },
      {
        "from": 56,
        "to": 59,
        "label": "data_dep: b"
      },
      {
        "from": 58,
        "to": 59,
        "label": "data_dep: bonus"
      },
      {
        "from": 58,
        "to": 59,
        "label": "data_dep: bonus"
      },
      {
        "from": 58,
        "to": 60,
        "label": "data_dep: bonus"
      },
      {
        "from": 58,
        "to": 60,
        "label": "data_dep: bonus"
      },
      {
        "from": 56,
        "to": 62,
        "label": "data_dep: b"
      },
      {
        "from": 56,
        "to": 62,
        "label": "data_dep: b"
      },
      {
        "from": 58,
        "to": 62,
        "label": "data_dep: bonus"
      }
    ]
  }
]