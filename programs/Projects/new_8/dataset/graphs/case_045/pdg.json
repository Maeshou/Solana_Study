[
  {
    "name": "setup_ledger",
    "inputs": [
      "ctx: Context < SetupLedger >",
      "cap: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let g = & mut ctx . accounts . ledger ;"
      },
      {
        "id": 2,
        "label": "g . owner = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "g . capacity = cap % 300 + 50 ;"
      },
      {
        "id": 4,
        "label": "g . entries = 5 ;"
      },
      {
        "id": 5,
        "label": "g . bonus = 3 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: g"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: g"
      }
    ]
  },
  {
    "name": "write_entry",
    "inputs": [
      "ctx: Context < WriteEntry >",
      "weight: u16",
      "user_bump: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let g = & mut ctx . accounts . ledger ;"
      },
      {
        "id": 9,
        "label": "if weight > 20 { let mut pad = Vec :: new () ; pad . push ((weight % 97) as u8) ; g . bonus = g . bonus . saturating_add (weight as u32 / 4 + 1) ; if pad . len () != 0 { g . entries = g . entries . saturating_add (pad [0] as u32) ; } }"
      },
      {
        "id": 10,
        "label": "let mut pad = Vec :: new () ;"
      },
      {
        "id": 11,
        "label": "pad . push ((weight % 97) as u8) ;"
      },
      {
        "id": 12,
        "label": "g . bonus = g . bonus . saturating_add (weight as u32 / 4 + 1) ;"
      },
      {
        "id": 13,
        "label": "if pad . len () != 0 { g . entries = g . entries . saturating_add (pad [0] as u32) ; }"
      },
      {
        "id": 14,
        "label": "g . entries = g . entries . saturating_add (pad [0] as u32) ;"
      },
      {
        "id": 15,
        "label": "let seeds = & [b\"reward_buffer\" , ctx . accounts . leader . key . as_ref () , & [user_bump]] ;"
      },
      {
        "id": 16,
        "label": "let manual = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (LedErr :: SeedIssue)) ? ;"
      },
      {
        "id": 17,
        "label": "if manual != ctx . accounts . reward_buffer . key () { return Err (error ! (LedErr :: BufferMismatch)) ; }"
      },
      {
        "id": 18,
        "label": "return Err (error ! (LedErr :: BufferMismatch)) ;"
      },
      {
        "id": 19,
        "label": "let mut i = 2u32 ;"
      },
      {
        "id": 20,
        "label": "while i < (weight as u32 % 25 + 6) { g . entries = g . entries . saturating_add (i) ; let adjust = (i * 3) % 11 + 2 ; g . capacity = g . capacity . saturating_add (adjust) ; i = i . saturating_add (4) ; }"
      },
      {
        "id": 21,
        "label": "g . entries = g . entries . saturating_add (i) ;"
      },
      {
        "id": 22,
        "label": "let adjust = (i * 3) % 11 + 2 ;"
      },
      {
        "id": 23,
        "label": "g . capacity = g . capacity . saturating_add (adjust) ;"
      },
      {
        "id": 24,
        "label": "i = i . saturating_add (4) ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: g"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: g"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: pad"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: pad"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: g"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: pad"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: g"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: pad"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: g"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: pad"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: seeds"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: manual"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: seeds"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: manual"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: i"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: g"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: g"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: g"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: i"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: adjust"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: g"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: g"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: adjust"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: i"
      }
    ]
  }
]