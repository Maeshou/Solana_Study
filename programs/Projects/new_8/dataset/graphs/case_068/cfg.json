[
  {
    "name": "init_treasury",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let t = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 2,
        "label": "t . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "t . bump_main = * ctx . bumps . get (\"treasury\") . ok_or (error ! (E :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "t . energy = seed_power % 800 + 200 ;"
      },
      {
        "id": 5,
        "label": "t . rank = 1 ;"
      },
      {
        "id": 6,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "t . energy = t . energy . rotate_left (1) . wrapping_add ((i as u64) * 17 + 9) ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "(t . energy & 1) == 1"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "t . rank = t . rank . saturating_add (((t . energy % 23) as u32) + 5) ;"
      },
      {
        "id": 14,
        "label": "t . energy = t . energy . wrapping_mul (2) . wrapping_add (13) ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "t . rank = t . rank . saturating_add (((t . energy % 19) as u32) + 7) ;"
      },
      {
        "id": 17,
        "label": "t . energy = t . energy . rotate_right (2) . wrapping_add (11) ;"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "Loop End"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "t . rank % 2 == 0"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "t . energy = t . energy . wrapping_mul (3) . wrapping_add (29) ;"
      },
      {
        "id": 26,
        "label": "t . rank = t . rank . saturating_add (6) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "t . energy = t . energy . wrapping_mul (2) . wrapping_add (31) ;"
      },
      {
        "id": 29,
        "label": "t . rank = t . rank . saturating_add (9) ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 9,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 14,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 7,
        "to": 20,
        "label": "while"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 21,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 26,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay_from_side_pot",
    "nodes": [
      {
        "id": 32,
        "label": "Entry"
      },
      {
        "id": 33,
        "label": "let t = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 34,
        "label": "require ! (label . as_bytes () . len () <= 32 , E :: LabelTooLong) ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "t . energy = t . energy . wrapping_add ((k as u64) * 21 + 5) ;"
      },
      {
        "id": 37,
        "label": "t . rank = t . rank . saturating_add (((lamports % 17) as u32) + k as u32 + 4) ;"
      },
      {
        "id": 38,
        "label": "Loop End"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "t . energy & 4 == 4"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "t . rank = t . rank . saturating_add (11) ;"
      },
      {
        "id": 44,
        "label": "t . energy = t . energy . rotate_left (1) . wrapping_add (17) ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "t . rank = t . rank . saturating_add (15) ;"
      },
      {
        "id": 47,
        "label": "t . energy = t . energy . rotate_right (2) . wrapping_add (23) ;"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let seeds = & [b\"side_pot\" . as_ref () , t . manager . as_ref () , label . as_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 50,
        "label": "let pda = Pubkey :: create_program_address (& [b\"side_pot\" , t . manager . as_ref () , label . as_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (E :: SeedCompute)) ? ;"
      },
      {
        "id": 51,
        "label": "let ix = system_instruction :: transfer (& pda , & ctx . accounts . recipient . key () , lamports) ;"
      },
      {
        "id": 52,
        "label": "invoke_signed (& ix , & [ctx . accounts . side_pot_hint . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "for"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 39,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 44,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]