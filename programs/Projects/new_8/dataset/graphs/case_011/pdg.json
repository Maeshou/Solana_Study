[
  {
    "name": "update_profile",
    "inputs": [
      "ctx: Context < UpdateProfile >",
      "name: Vec < u8 >",
      "level: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if n . len () > 32 { n . truncate (32) ; }"
      },
      {
        "id": 3,
        "label": "n . truncate (32) ;"
      },
      {
        "id": 4,
        "label": "let mut score : u32 = 0 ;"
      },
      {
        "id": 5,
        "label": "for (i , b) in n . iter () . enumerate () { score = score . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 7)) ; }"
      },
      {
        "id": 6,
        "label": "score = score . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 7)) ;"
      },
      {
        "id": 7,
        "label": "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 8,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 9,
        "label": "if addr != ctx . accounts . profile_cell . key () { return Err (error ! (MultiErr :: BadPda)) ; }"
      },
      {
        "id": 10,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 11,
        "label": "let p = & mut ctx . accounts . profile ;"
      },
      {
        "id": 12,
        "label": "p . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 13,
        "label": "p . name = n ;"
      },
      {
        "id": 14,
        "label": "p . level = level ;"
      },
      {
        "id": 15,
        "label": "p . rep = p . rep . wrapping_add (score) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: n"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: n"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: addr"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: seeds"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: addr"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: p"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: p"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: n"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "purchase_item",
    "inputs": [
      "ctx: Context < PurchaseItem >",
      "item_code: [u8 ; 6]",
      "qty: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let mut code = item_code ;"
      },
      {
        "id": 19,
        "label": "for i in 0 .. code . len () { if ! code [i] . is_ascii_alphanumeric () { code [i] = b'X' ; } }"
      },
      {
        "id": 20,
        "label": "if ! code [i] . is_ascii_alphanumeric () { code [i] = b'X' ; }"
      },
      {
        "id": 21,
        "label": "code [i] = b'X' ;"
      },
      {
        "id": 22,
        "label": "let mut cost = 0u32 ;"
      },
      {
        "id": 23,
        "label": "for c in code . iter () { cost = cost . wrapping_add (* c as u32) ; }"
      },
      {
        "id": 24,
        "label": "cost = cost . wrapping_add (* c as u32) ;"
      },
      {
        "id": 25,
        "label": "let mut quantity = qty ;"
      },
      {
        "id": 26,
        "label": "if quantity > 999 { quantity = 999 ; }"
      },
      {
        "id": 27,
        "label": "quantity = 999 ;"
      },
      {
        "id": 28,
        "label": "let seeds = [& ctx . accounts . buyer . key () . to_bytes () [..] , & code [..]] ;"
      },
      {
        "id": 29,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 30,
        "label": "if addr != ctx . accounts . item_cell . key () { return Err (error ! (MultiErr :: BadPda)) ; }"
      },
      {
        "id": 31,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 32,
        "label": "let i = & mut ctx . accounts . item_log ;"
      },
      {
        "id": 33,
        "label": "i . buyer = ctx . accounts . buyer . key () ;"
      },
      {
        "id": 34,
        "label": "i . code = code ;"
      },
      {
        "id": 35,
        "label": "i . total_qty = i . total_qty . saturating_add (quantity as u32) ;"
      },
      {
        "id": 36,
        "label": "i . spent = i . spent . wrapping_add (cost as u64) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: code"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: code"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: code"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: code"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: code"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: code"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: code"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: cost"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: code"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: cost"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: cost"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: cost"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: cost"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: quantity"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: quantity"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: quantity"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: quantity"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: seeds"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: code"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: addr"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: seeds"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: addr"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: i"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: i"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: i"
      },
      {
        "from": 18,
        "to": 34,
        "label": "data_dep: code"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: i"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: i"
      },
      {
        "from": 25,
        "to": 35,
        "label": "data_dep: quantity"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: i"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: i"
      },
      {
        "from": 22,
        "to": 36,
        "label": "data_dep: cost"
      }
    ]
  },
  {
    "name": "advance_quest",
    "inputs": [
      "ctx: Context < AdvanceQuest >",
      "stage: u32",
      "notes: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 38,
        "label": "Entry"
      },
      {
        "id": 39,
        "label": "let mut s = stage ;"
      },
      {
        "id": 40,
        "label": "if s > 50 { s = 50 ; }"
      },
      {
        "id": 41,
        "label": "s = 50 ;"
      },
      {
        "id": 42,
        "label": "let mut n = notes . clone () ;"
      },
      {
        "id": 43,
        "label": "if n . len () > 64 { n . truncate (64) ; }"
      },
      {
        "id": 44,
        "label": "n . truncate (64) ;"
      },
      {
        "id": 45,
        "label": "let mut hash : u64 = 1469598103934665603 ;"
      },
      {
        "id": 46,
        "label": "for b in n . iter () { hash ^= * b as u64 ; hash = hash . wrapping_mul (1099511628211) ; }"
      },
      {
        "id": 47,
        "label": "hash ^= * b as u64 ;"
      },
      {
        "id": 48,
        "label": "hash = hash . wrapping_mul (1099511628211) ;"
      },
      {
        "id": 49,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & s . to_le_bytes () [..]] ;"
      },
      {
        "id": 50,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 51,
        "label": "if addr != ctx . accounts . quest_cell . key () { return Err (error ! (MultiErr :: BadPda)) ; }"
      },
      {
        "id": 52,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 53,
        "label": "let q = & mut ctx . accounts . quest ;"
      },
      {
        "id": 54,
        "label": "q . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 55,
        "label": "q . stage = s ;"
      },
      {
        "id": 56,
        "label": "q . notes = n ;"
      },
      {
        "id": 57,
        "label": "q . progress_hash = q . progress_hash . wrapping_add (hash) ;"
      },
      {
        "id": 58,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 39,
        "label": "def: s"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: s"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: n"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: n"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: n"
      },
      {
        "from": 42,
        "to": 44,
        "label": "data_dep: n"
      },
      {
        "from": 42,
        "to": 46,
        "label": "data_dep: n"
      },
      {
        "from": 49,
        "to": 49,
        "label": "def: seeds"
      },
      {
        "from": 39,
        "to": 49,
        "label": "data_dep: s"
      },
      {
        "from": 50,
        "to": 50,
        "label": "def: addr"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: seeds"
      },
      {
        "from": 50,
        "to": 51,
        "label": "data_dep: addr"
      },
      {
        "from": 53,
        "to": 53,
        "label": "def: q"
      },
      {
        "from": 53,
        "to": 54,
        "label": "data_dep: q"
      },
      {
        "from": 53,
        "to": 55,
        "label": "data_dep: q"
      },
      {
        "from": 39,
        "to": 55,
        "label": "data_dep: s"
      },
      {
        "from": 53,
        "to": 56,
        "label": "data_dep: q"
      },
      {
        "from": 42,
        "to": 56,
        "label": "data_dep: n"
      },
      {
        "from": 53,
        "to": 57,
        "label": "data_dep: q"
      },
      {
        "from": 53,
        "to": 57,
        "label": "data_dep: q"
      }
    ]
  }
]