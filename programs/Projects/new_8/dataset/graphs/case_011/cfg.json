[
  {
    "name": "update_profile",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if statement"
      },
      {
        "id": 3,
        "label": "predicate"
      },
      {
        "id": 4,
        "label": "n . len () > 32"
      },
      {
        "id": 5,
        "label": "True body"
      },
      {
        "id": 6,
        "label": "n . truncate (32) ;"
      },
      {
        "id": 7,
        "label": "False body"
      },
      {
        "id": 8,
        "label": "No-op"
      },
      {
        "id": 9,
        "label": "merge"
      },
      {
        "id": 10,
        "label": "let mut score : u32 = 0 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "score = score . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 7)) ;"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 15,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "addr != ctx . accounts . profile_cell . key ()"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "let p = & mut ctx . accounts . profile ;"
      },
      {
        "id": 25,
        "label": "p . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 26,
        "label": "p . name = n ;"
      },
      {
        "id": 27,
        "label": "p . level = level ;"
      },
      {
        "id": 28,
        "label": "p . rep = p . rep . wrapping_add (score) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "predicate"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 2,
        "to": 5,
        "label": "true"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 2,
        "to": 7,
        "label": "false"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 13,
        "label": "for"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  },
  {
    "name": "purchase_item",
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "let mut code = item_code ;"
      },
      {
        "id": 32,
        "label": "Loop Start"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "! code [i] . is_ascii_alphanumeric ()"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "code [i] = b'X' ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "No-op"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "Loop End"
      },
      {
        "id": 42,
        "label": "let mut cost = 0u32 ;"
      },
      {
        "id": 43,
        "label": "Loop Start"
      },
      {
        "id": 44,
        "label": "cost = cost . wrapping_add (* c as u32) ;"
      },
      {
        "id": 45,
        "label": "Loop End"
      },
      {
        "id": 46,
        "label": "let mut quantity = qty ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "quantity > 999"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "quantity = 999 ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "let seeds = [& ctx . accounts . buyer . key () . to_bytes () [..] , & code [..]] ;"
      },
      {
        "id": 56,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "addr != ctx . accounts . item_cell . key ()"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 62,
        "label": "False body"
      },
      {
        "id": 63,
        "label": "No-op"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "let i = & mut ctx . accounts . item_log ;"
      },
      {
        "id": 66,
        "label": "i . buyer = ctx . accounts . buyer . key () ;"
      },
      {
        "id": 67,
        "label": "i . code = code ;"
      },
      {
        "id": 68,
        "label": "i . total_qty = i . total_qty . saturating_add (quantity as u32) ;"
      },
      {
        "id": 69,
        "label": "i . spent = i . spent . wrapping_add (cost as u64) ;"
      },
      {
        "id": 70,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 33,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 32,
        "to": 41,
        "label": "for"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 45,
        "label": "for"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 57,
        "to": 62,
        "label": "false"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      }
    ]
  },
  {
    "name": "advance_quest",
    "nodes": [
      {
        "id": 71,
        "label": "Entry"
      },
      {
        "id": 72,
        "label": "let mut s = stage ;"
      },
      {
        "id": 73,
        "label": "if statement"
      },
      {
        "id": 74,
        "label": "predicate"
      },
      {
        "id": 75,
        "label": "s > 50"
      },
      {
        "id": 76,
        "label": "True body"
      },
      {
        "id": 77,
        "label": "s = 50 ;"
      },
      {
        "id": 78,
        "label": "False body"
      },
      {
        "id": 79,
        "label": "No-op"
      },
      {
        "id": 80,
        "label": "merge"
      },
      {
        "id": 81,
        "label": "let mut n = notes . clone () ;"
      },
      {
        "id": 82,
        "label": "if statement"
      },
      {
        "id": 83,
        "label": "predicate"
      },
      {
        "id": 84,
        "label": "n . len () > 64"
      },
      {
        "id": 85,
        "label": "True body"
      },
      {
        "id": 86,
        "label": "n . truncate (64) ;"
      },
      {
        "id": 87,
        "label": "False body"
      },
      {
        "id": 88,
        "label": "No-op"
      },
      {
        "id": 89,
        "label": "merge"
      },
      {
        "id": 90,
        "label": "let mut hash : u64 = 1469598103934665603 ;"
      },
      {
        "id": 91,
        "label": "Loop Start"
      },
      {
        "id": 92,
        "label": "hash ^= * b as u64 ;"
      },
      {
        "id": 93,
        "label": "hash = hash . wrapping_mul (1099511628211) ;"
      },
      {
        "id": 94,
        "label": "Loop End"
      },
      {
        "id": 95,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & s . to_le_bytes () [..]] ;"
      },
      {
        "id": 96,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MultiErr :: BadPda)) ? ;"
      },
      {
        "id": 97,
        "label": "if statement"
      },
      {
        "id": 98,
        "label": "predicate"
      },
      {
        "id": 99,
        "label": "addr != ctx . accounts . quest_cell . key ()"
      },
      {
        "id": 100,
        "label": "True body"
      },
      {
        "id": 101,
        "label": "return Err (error ! (MultiErr :: BadPda)) ;"
      },
      {
        "id": 102,
        "label": "False body"
      },
      {
        "id": 103,
        "label": "No-op"
      },
      {
        "id": 104,
        "label": "merge"
      },
      {
        "id": 105,
        "label": "let q = & mut ctx . accounts . quest ;"
      },
      {
        "id": 106,
        "label": "q . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 107,
        "label": "q . stage = s ;"
      },
      {
        "id": 108,
        "label": "q . notes = n ;"
      },
      {
        "id": 109,
        "label": "q . progress_hash = q . progress_hash . wrapping_add (hash) ;"
      },
      {
        "id": 110,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "predicate"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 73,
        "to": 76,
        "label": "true"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 73,
        "to": 78,
        "label": "false"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 77,
        "to": 80,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "predicate"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "true"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 82,
        "to": 87,
        "label": "false"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "for"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "predicate"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 97,
        "to": 100,
        "label": "true"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 97,
        "to": 102,
        "label": "false"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 101,
        "to": 104,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      }
    ]
  }
]