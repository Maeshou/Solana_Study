[
  {
    "name": "infuse_crystal",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InfuseCrystal >",
      "label: Vec < u8 >",
      "amount: u64",
      "bump: u8"
    ],
    "attributes": [],
    "body": [
      "let mut l = label . clone () ;",
      "if l . is_empty ()",
      "{",
      "l . extend_from_slice (b\"seed\") ;",
      "}",
      "if l . len () > 28",
      "{",
      "l . truncate (28) ;",
      "}",
      "let mut hash : u64 = 1 ;",
      "for c in l . iter ()",
      "{",
      "hash = hash . wrapping_mul (257) . wrapping_add (* c as u64) ;",
      "}",
      "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & l [..]] ;",
      "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (FErr :: Cell)) ? ;",
      "if addr != ctx . accounts . crystal_cell . key ()",
      "{",
      "return Err (error ! (FErr :: Cell)) ;",
      "}",
      "let mut a = amount ;",
      "if a > 80_000",
      "{",
      "a = 80_000 ;",
      "}",
      "let c = & mut ctx . accounts . crystal ;",
      "c . owner = ctx . accounts . owner . key () ;",
      "c . label = l ;",
      "c . energy = c . energy . saturating_add (a) ;",
      "c . trace = c . trace . wrapping_add (hash) ;",
      "Ok (())"
    ]
  },
  {
    "name": "consume_crystal",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ConsumeCrystal >",
      "cost: u32",
      "bump: u8"
    ],
    "attributes": [],
    "body": [
      "let tag = ctx . accounts . crystal . label . clone () ;",
      "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & tag [..]] ;",
      "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (FErr :: Cell)) ? ;",
      "if addr != ctx . accounts . crystal_cell . key ()",
      "{",
      "return Err (error ! (FErr :: Cell)) ;",
      "}",
      "let c = & mut ctx . accounts . crystal ;",
      "let mut used = cost as u64 ;",
      "if used > c . energy",
      "{",
      "used = c . energy ;",
      "}",
      "c . energy = c . energy . saturating_sub (used) ;",
      "c . trace = c . trace . wrapping_add (13) ;",
      "Ok (())"
    ]
  },
  {
    "name": "InfuseCrystal",
    "node_type": "struct",
    "fields": [
      {
        "name": "crystal",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Crystal >"
      },
      {
        "name": "crystal_cell",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ConsumeCrystal",
    "node_type": "struct",
    "fields": [
      {
        "name": "crystal",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Crystal >"
      },
      {
        "name": "crystal_cell",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Crystal",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "label",
        "attribute": null,
        "field_type": "Vec < u8 >"
      },
      {
        "name": "energy",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "trace",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]