[
  {
    "name": "infuse_crystal",
    "inputs": [
      "ctx: Context < InfuseCrystal >",
      "label: Vec < u8 >",
      "amount: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut l = label . clone () ;"
      },
      {
        "id": 2,
        "label": "if l . is_empty () { l . extend_from_slice (b\"seed\") ; }"
      },
      {
        "id": 3,
        "label": "l . extend_from_slice (b\"seed\") ;"
      },
      {
        "id": 4,
        "label": "if l . len () > 28 { l . truncate (28) ; }"
      },
      {
        "id": 5,
        "label": "l . truncate (28) ;"
      },
      {
        "id": 6,
        "label": "let mut hash : u64 = 1 ;"
      },
      {
        "id": 7,
        "label": "for c in l . iter () { hash = hash . wrapping_mul (257) . wrapping_add (* c as u64) ; }"
      },
      {
        "id": 8,
        "label": "hash = hash . wrapping_mul (257) . wrapping_add (* c as u64) ;"
      },
      {
        "id": 9,
        "label": "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & l [..]] ;"
      },
      {
        "id": 10,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (FErr :: Cell)) ? ;"
      },
      {
        "id": 11,
        "label": "if addr != ctx . accounts . crystal_cell . key () { return Err (error ! (FErr :: Cell)) ; }"
      },
      {
        "id": 12,
        "label": "return Err (error ! (FErr :: Cell)) ;"
      },
      {
        "id": 13,
        "label": "let mut a = amount ;"
      },
      {
        "id": 14,
        "label": "if a > 80_000 { a = 80_000 ; }"
      },
      {
        "id": 15,
        "label": "a = 80_000 ;"
      },
      {
        "id": 16,
        "label": "let c = & mut ctx . accounts . crystal ;"
      },
      {
        "id": 17,
        "label": "c . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 18,
        "label": "c . label = l ;"
      },
      {
        "id": 19,
        "label": "c . energy = c . energy . saturating_add (a) ;"
      },
      {
        "id": 20,
        "label": "c . trace = c . trace . wrapping_add (hash) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: l"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: l"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: addr"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: seeds"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: addr"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: a"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: a"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: a"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: a"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: c"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: c"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: l"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: c"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: c"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: a"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: c"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "consume_crystal",
    "inputs": [
      "ctx: Context < ConsumeCrystal >",
      "cost: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let tag = ctx . accounts . crystal . label . clone () ;"
      },
      {
        "id": 24,
        "label": "let seeds = [& ctx . accounts . owner . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 25,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (FErr :: Cell)) ? ;"
      },
      {
        "id": 26,
        "label": "if addr != ctx . accounts . crystal_cell . key () { return Err (error ! (FErr :: Cell)) ; }"
      },
      {
        "id": 27,
        "label": "return Err (error ! (FErr :: Cell)) ;"
      },
      {
        "id": 28,
        "label": "let c = & mut ctx . accounts . crystal ;"
      },
      {
        "id": 29,
        "label": "let mut used = cost as u64 ;"
      },
      {
        "id": 30,
        "label": "if used > c . energy { used = c . energy ; }"
      },
      {
        "id": 31,
        "label": "used = c . energy ;"
      },
      {
        "id": 32,
        "label": "c . energy = c . energy . saturating_sub (used) ;"
      },
      {
        "id": 33,
        "label": "c . trace = c . trace . wrapping_add (13) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 23,
        "to": 23,
        "label": "def: tag"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: seeds"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: tag"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: addr"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: seeds"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: addr"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: c"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: used"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: used"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: used"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: used"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: c"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: c"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: used"
      },
      {
        "from": 28,
        "to": 33,
        "label": "data_dep: c"
      },
      {
        "from": 28,
        "to": 33,
        "label": "data_dep: c"
      }
    ]
  }
]