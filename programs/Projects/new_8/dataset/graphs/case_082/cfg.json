[
  {
    "name": "init_treasury",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let tre = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 2,
        "label": "tre . owner = ctx . accounts . guild_master . key () ;"
      },
      {
        "id": 3,
        "label": "tre . bump_store = * ctx . bumps . get (\"treasury\") . unwrap () ;"
      },
      {
        "id": 4,
        "label": "tre . power = seed_power . rotate_left (3) . wrapping_add (77) ;"
      },
      {
        "id": 5,
        "label": "tre . turns = 2 ;"
      },
      {
        "id": 6,
        "label": "let mut temp_values : Vec < u64 > = Vec :: new () ;"
      },
      {
        "id": 7,
        "label": "let mut idx : u64 = 1 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let calc = (tre . power . wrapping_mul (idx * 11)) . rotate_right ((idx % 3) as u32 + 1) ;"
      },
      {
        "id": 10,
        "label": "temp_values . push (calc . wrapping_add (idx * 17)) ;"
      },
      {
        "id": 11,
        "label": "tre . turns = tre . turns . saturating_add (((calc % 25) as u32) + 2) ;"
      },
      {
        "id": 12,
        "label": "idx = idx . saturating_add (1) ;"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "let adj = (tre . power ^ v) . wrapping_add (19) ;"
      },
      {
        "id": 16,
        "label": "tre . power = tre . power . wrapping_add (adj) . wrapping_mul (2) ;"
      },
      {
        "id": 17,
        "label": "tre . turns = tre . turns . saturating_add (((tre . power % 21) as u32) + 3) ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "while"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 14,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "spend_gold",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let tre = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 22,
        "label": "let mut factor = lamports . rotate_left (2) . wrapping_add (raid_id) ;"
      },
      {
        "id": 23,
        "label": "let mut round : u8 = 1 ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let boost = (factor ^ (round as u64 * 27)) . rotate_left (round as u32) ;"
      },
      {
        "id": 26,
        "label": "tre . power = tre . power . wrapping_add (boost) . wrapping_mul (3) . wrapping_add (5 + round as u64) ;"
      },
      {
        "id": 27,
        "label": "tre . turns = tre . turns . saturating_add (((tre . power % 29) as u32) + 4) ;"
      },
      {
        "id": 28,
        "label": "factor = factor . wrapping_add (boost) . rotate_right (1) ;"
      },
      {
        "id": 29,
        "label": "round = round . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let seeds = & [b\"raid_fund\" . as_ref () , tre . owner . as_ref () , & raid_id . to_le_bytes () , core :: slice :: from_ref (& input_bump) ,] ;"
      },
      {
        "id": 32,
        "label": "let target = Pubkey :: create_program_address (& [b\"raid_fund\" , tre . owner . as_ref () , & raid_id . to_le_bytes () , & [input_bump]] , ctx . program_id ,) . unwrap () ;"
      },
      {
        "id": 33,
        "label": "let ix = system_instruction :: transfer (& target , & ctx . accounts . hunter . key () , lamports) ;"
      },
      {
        "id": 34,
        "label": "invoke_signed (& ix , & [ctx . accounts . raid_hint . to_account_info () , ctx . accounts . hunter . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "while"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]