[
  {
    "name": "list_item",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut s = sku ;"
      },
      {
        "id": 2,
        "label": "Loop Start"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "! s [i] . is_ascii_alphanumeric ()"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "s [i] = b'0' + (i as u8 % 10) ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"normalize {} -> {}\" , i , s [i]) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "let probe = (s [i] as u32) . wrapping_mul ((i as u32) + 2) ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "(probe & 3) == 0"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "msg ! (\"probe hit {}\" , probe) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "Loop End"
      },
      {
        "id": 21,
        "label": "let mut p = price ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "p > 12_000_000_000"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "let delta = p - 12_000_000_000 ;"
      },
      {
        "id": 27,
        "label": "p = 12_000_000_000 ;"
      },
      {
        "id": 28,
        "label": "let mut adj = 0u64 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "adj = adj . wrapping_add ((delta as u64) . wrapping_mul ((step + 1) as u64)) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "msg ! (\"price cap adj={}\" , adj) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 37,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "addr != ctx . accounts . book_cell . key ()"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "msg ! (\"list mismatch\") ;"
      },
      {
        "id": 43,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 48,
        "label": "b . merchant = ctx . accounts . merchant . key () ;"
      },
      {
        "id": 49,
        "label": "b . sku = s ;"
      },
      {
        "id": 50,
        "label": "b . price = p ;"
      },
      {
        "id": 51,
        "label": "let mut add = 0 ;"
      },
      {
        "id": 52,
        "label": "Loop Start"
      },
      {
        "id": 53,
        "label": "add = add . saturating_add (1) ;"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "b . volume = b . volume . saturating_add (add) ;"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 3,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 8,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 2,
        "to": 20,
        "label": "for"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 22,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 38,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 52,
        "to": 54,
        "label": "for"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_sale",
    "nodes": [
      {
        "id": 57,
        "label": "Entry"
      },
      {
        "id": 58,
        "label": "let mut s = sku ;"
      },
      {
        "id": 59,
        "label": "Loop Start"
      },
      {
        "id": 60,
        "label": "if statement"
      },
      {
        "id": 61,
        "label": "predicate"
      },
      {
        "id": 62,
        "label": "s [i] . is_ascii_lowercase ()"
      },
      {
        "id": 63,
        "label": "True body"
      },
      {
        "id": 64,
        "label": "let before = s [i] ;"
      },
      {
        "id": 65,
        "label": "s [i] = s [i] - 32 ;"
      },
      {
        "id": 66,
        "label": "msg ! (\"lower->upper {}->{}\" , before , s [i]) ;"
      },
      {
        "id": 67,
        "label": "False body"
      },
      {
        "id": 68,
        "label": "let temp = ((s [i] as u32) ^ 0x55) & 0x7F ;"
      },
      {
        "id": 69,
        "label": "if statement"
      },
      {
        "id": 70,
        "label": "predicate"
      },
      {
        "id": 71,
        "label": "(temp & 5) == 5"
      },
      {
        "id": 72,
        "label": "True body"
      },
      {
        "id": 73,
        "label": "msg ! (\"temp flag at {}\" , i) ;"
      },
      {
        "id": 74,
        "label": "False body"
      },
      {
        "id": 75,
        "label": "No-op"
      },
      {
        "id": 76,
        "label": "merge"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "Loop End"
      },
      {
        "id": 79,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 80,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 81,
        "label": "if statement"
      },
      {
        "id": 82,
        "label": "predicate"
      },
      {
        "id": 83,
        "label": "addr != ctx . accounts . book_cell . key ()"
      },
      {
        "id": 84,
        "label": "True body"
      },
      {
        "id": 85,
        "label": "msg ! (\"sale mismatch\") ;"
      },
      {
        "id": 86,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 87,
        "label": "False body"
      },
      {
        "id": 88,
        "label": "No-op"
      },
      {
        "id": 89,
        "label": "merge"
      },
      {
        "id": 90,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 91,
        "label": "let mut q = qty as u32 ;"
      },
      {
        "id": 92,
        "label": "if statement"
      },
      {
        "id": 93,
        "label": "predicate"
      },
      {
        "id": 94,
        "label": "q > 10_000"
      },
      {
        "id": 95,
        "label": "True body"
      },
      {
        "id": 96,
        "label": "let over = q - 10_000 ;"
      },
      {
        "id": 97,
        "label": "q = 10_000 ;"
      },
      {
        "id": 98,
        "label": "b . fees = b . fees . wrapping_add ((over as u64) . wrapping_mul (3)) ;"
      },
      {
        "id": 99,
        "label": "False body"
      },
      {
        "id": 100,
        "label": "No-op"
      },
      {
        "id": 101,
        "label": "merge"
      },
      {
        "id": 102,
        "label": "let mut k = 0u64 ;"
      },
      {
        "id": 103,
        "label": "Loop Start"
      },
      {
        "id": 104,
        "label": "k = k . wrapping_add ((i as u64 + 1) * 17) ;"
      },
      {
        "id": 105,
        "label": "Loop End"
      },
      {
        "id": 106,
        "label": "b . volume = b . volume . saturating_add (q) ;"
      },
      {
        "id": 107,
        "label": "b . fees = b . fees . wrapping_add (k) ;"
      },
      {
        "id": 108,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "predicate"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 60,
        "to": 63,
        "label": "true"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 60,
        "to": 67,
        "label": "false"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "predicate"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 69,
        "to": 72,
        "label": "true"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 69,
        "to": 74,
        "label": "false"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 73,
        "to": 76,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 66,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 59,
        "to": 78,
        "label": "for"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "predicate"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "true"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 81,
        "to": 87,
        "label": "false"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "predicate"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 92,
        "to": 95,
        "label": "true"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 92,
        "to": 99,
        "label": "false"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 103,
        "to": 105,
        "label": "for"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      }
    ]
  }
]