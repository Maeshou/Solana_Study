[
  {
    "name": "list_item",
    "inputs": [
      "ctx: Context < ListItem >",
      "sku: [u8 ; 8]",
      "price: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut s = sku ;"
      },
      {
        "id": 2,
        "label": "for i in 0 .. s . len () { if ! s [i] . is_ascii_alphanumeric () { s [i] = b'0' + (i as u8 % 10) ; msg ! (\"normalize {} -> {}\" , i , s [i]) ; } else { let probe = (s [i] as u32) . wrapping_mul ((i as u32) + 2) ; if (probe & 3) == 0 { msg ! (\"probe hit {}\" , probe) ; } } }"
      },
      {
        "id": 3,
        "label": "if ! s [i] . is_ascii_alphanumeric () { s [i] = b'0' + (i as u8 % 10) ; msg ! (\"normalize {} -> {}\" , i , s [i]) ; } else { let probe = (s [i] as u32) . wrapping_mul ((i as u32) + 2) ; if (probe & 3) == 0 { msg ! (\"probe hit {}\" , probe) ; } }"
      },
      {
        "id": 4,
        "label": "s [i] = b'0' + (i as u8 % 10) ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"normalize {} -> {}\" , i , s [i]) ;"
      },
      {
        "id": 6,
        "label": "let probe = (s [i] as u32) . wrapping_mul ((i as u32) + 2) ;"
      },
      {
        "id": 7,
        "label": "if (probe & 3) == 0 { msg ! (\"probe hit {}\" , probe) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"probe hit {}\" , probe) ;"
      },
      {
        "id": 9,
        "label": "let mut p = price ;"
      },
      {
        "id": 10,
        "label": "if p > 12_000_000_000 { let delta = p - 12_000_000_000 ; p = 12_000_000_000 ; let mut adj = 0u64 ; for step in 0 .. 5 { adj = adj . wrapping_add ((delta as u64) . wrapping_mul ((step + 1) as u64)) ; } msg ! (\"price cap adj={}\" , adj) ; }"
      },
      {
        "id": 11,
        "label": "let delta = p - 12_000_000_000 ;"
      },
      {
        "id": 12,
        "label": "p = 12_000_000_000 ;"
      },
      {
        "id": 13,
        "label": "let mut adj = 0u64 ;"
      },
      {
        "id": 14,
        "label": "for step in 0 .. 5 { adj = adj . wrapping_add ((delta as u64) . wrapping_mul ((step + 1) as u64)) ; }"
      },
      {
        "id": 15,
        "label": "adj = adj . wrapping_add ((delta as u64) . wrapping_mul ((step + 1) as u64)) ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"price cap adj={}\" , adj) ;"
      },
      {
        "id": 17,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 18,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 19,
        "label": "if addr != ctx . accounts . book_cell . key () { msg ! (\"list mismatch\") ; return Err (error ! (MErr :: Cell)) ; }"
      },
      {
        "id": 20,
        "label": "msg ! (\"list mismatch\") ;"
      },
      {
        "id": 21,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 22,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 23,
        "label": "b . merchant = ctx . accounts . merchant . key () ;"
      },
      {
        "id": 24,
        "label": "b . sku = s ;"
      },
      {
        "id": 25,
        "label": "b . price = p ;"
      },
      {
        "id": 26,
        "label": "let mut add = 0 ;"
      },
      {
        "id": 27,
        "label": "for _ in 0 .. 3 { add = add . saturating_add (1) ; }"
      },
      {
        "id": 28,
        "label": "add = add . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "b . volume = b . volume . saturating_add (add) ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: probe"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: probe"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: p"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: p"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: delta"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: p"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: adj"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: adj"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: adj"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: delta"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: adj"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: adj"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: delta"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: addr"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: seeds"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: addr"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: b"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: b"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: p"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: add"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: add"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: add"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: add"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: add"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: b"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: add"
      }
    ]
  },
  {
    "name": "record_sale",
    "inputs": [
      "ctx: Context < RecordSale >",
      "sku: [u8 ; 8]",
      "qty: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let mut s = sku ;"
      },
      {
        "id": 33,
        "label": "for i in 0 .. s . len () { if s [i] . is_ascii_lowercase () { let before = s [i] ; s [i] = s [i] - 32 ; msg ! (\"lower->upper {}->{}\" , before , s [i]) ; } else { let temp = ((s [i] as u32) ^ 0x55) & 0x7F ; if (temp & 5) == 5 { msg ! (\"temp flag at {}\" , i) ; } } }"
      },
      {
        "id": 34,
        "label": "if s [i] . is_ascii_lowercase () { let before = s [i] ; s [i] = s [i] - 32 ; msg ! (\"lower->upper {}->{}\" , before , s [i]) ; } else { let temp = ((s [i] as u32) ^ 0x55) & 0x7F ; if (temp & 5) == 5 { msg ! (\"temp flag at {}\" , i) ; } }"
      },
      {
        "id": 35,
        "label": "let before = s [i] ;"
      },
      {
        "id": 36,
        "label": "s [i] = s [i] - 32 ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"lower->upper {}->{}\" , before , s [i]) ;"
      },
      {
        "id": 38,
        "label": "let temp = ((s [i] as u32) ^ 0x55) & 0x7F ;"
      },
      {
        "id": 39,
        "label": "if (temp & 5) == 5 { msg ! (\"temp flag at {}\" , i) ; }"
      },
      {
        "id": 40,
        "label": "msg ! (\"temp flag at {}\" , i) ;"
      },
      {
        "id": 41,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 42,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 43,
        "label": "if addr != ctx . accounts . book_cell . key () { msg ! (\"sale mismatch\") ; return Err (error ! (MErr :: Cell)) ; }"
      },
      {
        "id": 44,
        "label": "msg ! (\"sale mismatch\") ;"
      },
      {
        "id": 45,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 46,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 47,
        "label": "let mut q = qty as u32 ;"
      },
      {
        "id": 48,
        "label": "if q > 10_000 { let over = q - 10_000 ; q = 10_000 ; b . fees = b . fees . wrapping_add ((over as u64) . wrapping_mul (3)) ; }"
      },
      {
        "id": 49,
        "label": "let over = q - 10_000 ;"
      },
      {
        "id": 50,
        "label": "q = 10_000 ;"
      },
      {
        "id": 51,
        "label": "b . fees = b . fees . wrapping_add ((over as u64) . wrapping_mul (3)) ;"
      },
      {
        "id": 52,
        "label": "let mut k = 0u64 ;"
      },
      {
        "id": 53,
        "label": "for i in 0 .. (q . min (16)) { k = k . wrapping_add ((i as u64 + 1) * 17) ; }"
      },
      {
        "id": 54,
        "label": "k = k . wrapping_add ((i as u64 + 1) * 17) ;"
      },
      {
        "id": 55,
        "label": "b . volume = b . volume . saturating_add (q) ;"
      },
      {
        "id": 56,
        "label": "b . fees = b . fees . wrapping_add (k) ;"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 32,
        "to": 32,
        "label": "def: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: before"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: temp"
      },
      {
        "from": 32,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: temp"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: seeds"
      },
      {
        "from": 32,
        "to": 41,
        "label": "data_dep: s"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: addr"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: seeds"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: addr"
      },
      {
        "from": 46,
        "to": 46,
        "label": "def: b"
      },
      {
        "from": 47,
        "to": 47,
        "label": "def: q"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: q"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: q"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: q"
      },
      {
        "from": 46,
        "to": 48,
        "label": "data_dep: b"
      },
      {
        "from": 46,
        "to": 48,
        "label": "data_dep: b"
      },
      {
        "from": 49,
        "to": 49,
        "label": "def: over"
      },
      {
        "from": 47,
        "to": 49,
        "label": "data_dep: q"
      },
      {
        "from": 47,
        "to": 50,
        "label": "data_dep: q"
      },
      {
        "from": 46,
        "to": 51,
        "label": "data_dep: b"
      },
      {
        "from": 46,
        "to": 51,
        "label": "data_dep: b"
      },
      {
        "from": 49,
        "to": 51,
        "label": "data_dep: over"
      },
      {
        "from": 52,
        "to": 52,
        "label": "def: k"
      },
      {
        "from": 47,
        "to": 53,
        "label": "data_dep: q"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: k"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: k"
      },
      {
        "from": 52,
        "to": 54,
        "label": "data_dep: k"
      },
      {
        "from": 52,
        "to": 54,
        "label": "data_dep: k"
      },
      {
        "from": 46,
        "to": 55,
        "label": "data_dep: b"
      },
      {
        "from": 46,
        "to": 55,
        "label": "data_dep: b"
      },
      {
        "from": 47,
        "to": 55,
        "label": "data_dep: q"
      },
      {
        "from": 46,
        "to": 56,
        "label": "data_dep: b"
      },
      {
        "from": 46,
        "to": 56,
        "label": "data_dep: b"
      },
      {
        "from": 52,
        "to": 56,
        "label": "data_dep: k"
      }
    ]
  }
]