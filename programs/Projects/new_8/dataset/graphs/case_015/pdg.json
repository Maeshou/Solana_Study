[
  {
    "name": "list_item",
    "inputs": [
      "ctx: Context < ListItem >",
      "sku: [u8 ; 8]",
      "price: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut s = sku ;"
      },
      {
        "id": 2,
        "label": "for i in 0 .. s . len () { if ! s [i] . is_ascii_alphanumeric () { s [i] = b'0' + (i as u8 % 10) ; } }"
      },
      {
        "id": 3,
        "label": "if ! s [i] . is_ascii_alphanumeric () { s [i] = b'0' + (i as u8 % 10) ; }"
      },
      {
        "id": 4,
        "label": "s [i] = b'0' + (i as u8 % 10) ;"
      },
      {
        "id": 5,
        "label": "let mut p = price ;"
      },
      {
        "id": 6,
        "label": "if p > 12_000_000_000 { p = 12_000_000_000 ; }"
      },
      {
        "id": 7,
        "label": "p = 12_000_000_000 ;"
      },
      {
        "id": 8,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 9,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 10,
        "label": "if addr != ctx . accounts . book_cell . key () { return Err (error ! (MErr :: Cell)) ; }"
      },
      {
        "id": 11,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 12,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 13,
        "label": "b . merchant = ctx . accounts . merchant . key () ;"
      },
      {
        "id": 14,
        "label": "b . sku = s ;"
      },
      {
        "id": 15,
        "label": "b . price = p ;"
      },
      {
        "id": 16,
        "label": "b . volume = b . volume . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: p"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: addr"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: seeds"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: addr"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: b"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: b"
      },
      {
        "from": 5,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: b"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: b"
      }
    ]
  },
  {
    "name": "record_sale",
    "inputs": [
      "ctx: Context < RecordSale >",
      "sku: [u8 ; 8]",
      "qty: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let mut s = sku ;"
      },
      {
        "id": 20,
        "label": "for i in 0 .. s . len () { if s [i] . is_ascii_lowercase () { s [i] = s [i] - 32 ; } }"
      },
      {
        "id": 21,
        "label": "if s [i] . is_ascii_lowercase () { s [i] = s [i] - 32 ; }"
      },
      {
        "id": 22,
        "label": "s [i] = s [i] - 32 ;"
      },
      {
        "id": 23,
        "label": "let seeds = [& ctx . accounts . merchant . key () . to_bytes () [..] , & s [..]] ;"
      },
      {
        "id": 24,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (MErr :: Cell)) ? ;"
      },
      {
        "id": 25,
        "label": "if addr != ctx . accounts . book_cell . key () { return Err (error ! (MErr :: Cell)) ; }"
      },
      {
        "id": 26,
        "label": "return Err (error ! (MErr :: Cell)) ;"
      },
      {
        "id": 27,
        "label": "let b = & mut ctx . accounts . book ;"
      },
      {
        "id": 28,
        "label": "let mut q = qty as u32 ;"
      },
      {
        "id": 29,
        "label": "if q > 10_000 { q = 10_000 ; }"
      },
      {
        "id": 30,
        "label": "q = 10_000 ;"
      },
      {
        "id": 31,
        "label": "b . volume = b . volume . saturating_add (q) ;"
      },
      {
        "id": 32,
        "label": "b . fees = b . fees . wrapping_add ((q as u64) . wrapping_mul (17)) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 19,
        "label": "def: s"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: seeds"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: addr"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: seeds"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: addr"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: b"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: q"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: q"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: q"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: q"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: b"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: b"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: q"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: b"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: b"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: q"
      }
    ]
  }
]