[
  {
    "name": "init_coupon",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let coupon = & mut ctx . accounts . coupon ;"
      },
      {
        "id": 2,
        "label": "coupon . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "coupon . base = base % 900 + 50 ;"
      },
      {
        "id": 4,
        "label": "coupon . issued = 1 ;"
      },
      {
        "id": 5,
        "label": "coupon . audit = 2 ;"
      },
      {
        "id": 6,
        "label": "let bump = * ctx . bumps . get (\"coupon\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 7,
        "label": "coupon . saved_bump = bump ;"
      },
      {
        "id": 8,
        "label": "let mut rolling = coupon . base ;"
      },
      {
        "id": 9,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "rolling = rolling . wrapping_mul (7) . wrapping_add (i as u32 + 3) ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "rolling % 5 != 2"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "coupon . issued = coupon . issued . saturating_add ((rolling % 7) + 1) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 10,
        "to": 21,
        "label": "while"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      }
    ]
  },
  {
    "name": "redeem",
    "nodes": [
      {
        "id": 23,
        "label": "Entry"
      },
      {
        "id": 24,
        "label": "let coupon = & mut ctx . accounts . coupon ;"
      },
      {
        "id": 25,
        "label": "let sink_seeds = & [b\"coupon_sink\" , coupon . owner . as_ref () , & [coupon . saved_bump]] ;"
      },
      {
        "id": 26,
        "label": "let expect = Pubkey :: create_program_address (& [b\"coupon_sink\" , coupon . owner . as_ref () , & [coupon . saved_bump]] , ctx . program_id) . map_err (| _ | error ! (Errs :: SeedCompute)) ? ;"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "expect != ctx . accounts . coupon_sink . key ()"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "return Err (error ! (Errs :: DerivedMismatch)) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "let ix = Instruction { program_id : * ctx . program_id , accounts : vec ! [AccountMeta :: new (coupon . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , true) ,] , data : qty . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 36,
        "label": "invoke_signed (& ix , & [coupon . to_account_info () , ctx . accounts . user . to_account_info ()] , & [sink_seeds] ,) ? ;"
      },
      {
        "id": 37,
        "label": "let mut steps = 3u32 ;"
      },
      {
        "id": 38,
        "label": "Loop Start"
      },
      {
        "id": 39,
        "label": "coupon . issued = coupon . issued . saturating_add (steps) ;"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "qty % (steps as u64) != 1"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "coupon . audit = coupon . audit . saturating_add ((qty as u32 % 11) + 2) ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "steps = steps . saturating_add (2) ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "qty > 500"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "let drift = ((qty % 17) as u32) + 4 ;"
      },
      {
        "id": 55,
        "label": "coupon . base = coupon . base . saturating_add (drift) ;"
      },
      {
        "id": 56,
        "label": "False body"
      },
      {
        "id": 57,
        "label": "No-op"
      },
      {
        "id": 58,
        "label": "merge"
      },
      {
        "id": 59,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 40,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 38,
        "to": 49,
        "label": "while"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 50,
        "to": 56,
        "label": "false"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      }
    ]
  }
]