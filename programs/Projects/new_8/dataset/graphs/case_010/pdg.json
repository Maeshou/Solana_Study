[
  {
    "name": "save_swatch",
    "inputs": [
      "ctx: Context < SaveSwatch >",
      "rgb: [u8 ; 3]",
      "tag: [u8 ; 6]",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let lum = (rgb [0] as u16 * 30 + rgb [1] as u16 * 59 + rgb [2] as u16 * 11) as u16 ;"
      },
      {
        "id": 2,
        "label": "let mut t = tag ;"
      },
      {
        "id": 3,
        "label": "for i in 0 .. t . len () { if ! t [i] . is_ascii_alphanumeric () { t [i] = b'-' ; } }"
      },
      {
        "id": 4,
        "label": "if ! t [i] . is_ascii_alphanumeric () { t [i] = b'-' ; }"
      },
      {
        "id": 5,
        "label": "t [i] = b'-' ;"
      },
      {
        "id": 6,
        "label": "let seeds = [& ctx . accounts . artist . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 7,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (PaletteErr :: Pda)) ? ;"
      },
      {
        "id": 8,
        "label": "if addr != ctx . accounts . swatch_cell . key () { return Err (error ! (PaletteErr :: Pda)) ; }"
      },
      {
        "id": 9,
        "label": "return Err (error ! (PaletteErr :: Pda)) ;"
      },
      {
        "id": 10,
        "label": "let s = & mut ctx . accounts . swatch ;"
      },
      {
        "id": 11,
        "label": "s . artist = ctx . accounts . artist . key () ;"
      },
      {
        "id": 12,
        "label": "s . rgb = rgb ;"
      },
      {
        "id": 13,
        "label": "s . tag = t ;"
      },
      {
        "id": 14,
        "label": "s . luma = lum ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: lum"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: t"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: t"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: seeds"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: t"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: addr"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: seeds"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: addr"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: s"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: t"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: lum"
      }
    ]
  }
]