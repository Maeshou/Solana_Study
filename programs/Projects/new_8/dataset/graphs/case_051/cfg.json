[
  {
    "name": "start_fest",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . fest ;"
      },
      {
        "id": 2,
        "label": "f . owner = ctx . accounts . host . key () ;"
      },
      {
        "id": 3,
        "label": "f . plots = plots % 90 + 9 ;"
      },
      {
        "id": 4,
        "label": "f . crates = 5 ;"
      },
      {
        "id": 5,
        "label": "f . guests = 2 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "gather",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let f = & mut ctx . accounts . fest ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "amount > 25"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "let gain = (amount % 11) as u32 + 3 ;"
      },
      {
        "id": 14,
        "label": "f . crates = f . crates . saturating_add (gain) ;"
      },
      {
        "id": 15,
        "label": "let head = f . owner . to_bytes () [2] ;"
      },
      {
        "id": 16,
        "label": "f . guests = f . guests . saturating_add (head as u32 % 5 + 1) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let seeds = & [b\"storage_bin\" , ctx . accounts . host . key . as_ref () , & [user_bump]] ;"
      },
      {
        "id": 21,
        "label": "let s = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (FestErr :: SeedIssue)) ? ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "s != ctx . accounts . storage_bin . key ()"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "return Err (error ! (FestErr :: StorageKey)) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let mut loopc = 1u32 ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "f . plots = f . plots . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "f . crates = f . crates . saturating_add (loopc) ;"
      },
      {
        "id": 34,
        "label": "let push = (f . crates % 7) + 2 ;"
      },
      {
        "id": 35,
        "label": "f . guests = f . guests . saturating_add (push) ;"
      },
      {
        "id": 36,
        "label": "loopc = loopc . saturating_add (5) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 9,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "while"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  }
]