[
  {
    "name": "initialize_store",
    "inputs": [
      "ctx: Context < InitializeStore >",
      "mint: Pubkey",
      "base: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . store ;"
      },
      {
        "id": 2,
        "label": "s . owner = ctx . accounts . merchant . key () ;"
      },
      {
        "id": 3,
        "label": "s . mint = mint ;"
      },
      {
        "id": 4,
        "label": "s . bump_saved = * ctx . bumps . get (\"store\") . ok_or (error ! (StoreErr :: MissingBump)) ? ;"
      },
      {
        "id": 5,
        "label": "s . power = base . rotate_left (3) . wrapping_add (63) ;"
      },
      {
        "id": 6,
        "label": "s . rounds = 1 ;"
      },
      {
        "id": 7,
        "label": "for j in 1u8 .. 4u8 { let v = (s . power ^ (j as u64 * 19)) . rotate_left (1) ; s . power = s . power . wrapping_add (v) . wrapping_mul (2) . wrapping_add (11 + j as u64) ; s . rounds = s . rounds . saturating_add (((s . power % 23) as u32) + 3) ; }"
      },
      {
        "id": 8,
        "label": "let v = (s . power ^ (j as u64 * 19)) . rotate_left (1) ;"
      },
      {
        "id": 9,
        "label": "s . power = s . power . wrapping_add (v) . wrapping_mul (2) . wrapping_add (11 + j as u64) ;"
      },
      {
        "id": 10,
        "label": "s . rounds = s . rounds . saturating_add (((s . power % 23) as u32) + 3) ;"
      },
      {
        "id": 11,
        "label": "if (s . power & 1) > 0 { let extra = s . power . rotate_right (2) . wrapping_add (29) ; s . power = s . power . wrapping_add (extra) . wrapping_mul (2) ; s . rounds = s . rounds . saturating_add (((s . power % 29) as u32) + 4) ; }"
      },
      {
        "id": 12,
        "label": "let extra = s . power . rotate_right (2) . wrapping_add (29) ;"
      },
      {
        "id": 13,
        "label": "s . power = s . power . wrapping_add (extra) . wrapping_mul (2) ;"
      },
      {
        "id": 14,
        "label": "s . rounds = s . rounds . saturating_add (((s . power % 29) as u32) + 4) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: v"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: extra"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: extra"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "issue_coupon_payout",
    "inputs": [
      "ctx: Context < IssueCouponPayout >",
      "coupon_id: u64",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let s = & ctx . accounts . store ;"
      },
      {
        "id": 18,
        "label": "let seeds = & [b\"coupon\" . as_ref () , s . owner . as_ref () , & coupon_id . to_le_bytes () , core :: slice :: from_ref (& s . bump_saved) ,] ;"
      },
      {
        "id": 19,
        "label": "let coupon_pda = Pubkey :: create_program_address (& [b\"coupon\" , s . owner . as_ref () , & coupon_id . to_le_bytes () , & [s . bump_saved]] , ctx . program_id ,) . map_err (| _ | error ! (StoreErr :: SeedCompute)) ? ;"
      },
      {
        "id": 20,
        "label": "let ix = system_instruction :: transfer (& coupon_pda , & ctx . accounts . beneficiary . key () , lamports) ;"
      },
      {
        "id": 21,
        "label": "invoke_signed (& ix , & [ctx . accounts . coupon_hint . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 22,
        "label": "if lamports > 700 { let mut k = 1u8 ; let mut acc = lamports . rotate_left (1) ; while k < 3 { let u = (acc ^ (k as u64 * 13)) . rotate_right (1) ; acc = acc . wrapping_add (u) ; k = k . saturating_add (1) ; } }"
      },
      {
        "id": 23,
        "label": "let mut k = 1u8 ;"
      },
      {
        "id": 24,
        "label": "let mut acc = lamports . rotate_left (1) ;"
      },
      {
        "id": 25,
        "label": "while k < 3 { let u = (acc ^ (k as u64 * 13)) . rotate_right (1) ; acc = acc . wrapping_add (u) ; k = k . saturating_add (1) ; }"
      },
      {
        "id": 26,
        "label": "let u = (acc ^ (k as u64 * 13)) . rotate_right (1) ;"
      },
      {
        "id": 27,
        "label": "acc = acc . wrapping_add (u) ;"
      },
      {
        "id": 28,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: s"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: seeds"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: coupon_pda"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: ix"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: coupon_pda"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: ix"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: seeds"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: k"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: acc"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: k"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: acc"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: k"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: acc"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: acc"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: k"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: k"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: u"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: acc"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: k"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: acc"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: acc"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: u"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: k"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: k"
      }
    ]
  }
]