[
  {
    "name": "init_workshop",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 2,
        "label": "w . owner = ctx . accounts . scribe . key () ;"
      },
      {
        "id": 3,
        "label": "w . bump_pin = * ctx . bumps . get (\"workshop\") . ok_or (error ! (ERW :: NoBump)) ? ;"
      },
      {
        "id": 4,
        "label": "w . ink = seed . rotate_left (2) . wrapping_add (67) ;"
      },
      {
        "id": 5,
        "label": "w . ticks = 2 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "let v = (w . ink ^ (i as u64 * 21)) . rotate_left (1) ;"
      },
      {
        "id": 8,
        "label": "w . ink = w . ink . wrapping_add (v) . wrapping_mul (2) . wrapping_add (11 + i as u64) ;"
      },
      {
        "id": 9,
        "label": "w . ticks = w . ticks . saturating_add (((w . ink % 23) as u32) + 3) ;"
      },
      {
        "id": 10,
        "label": "Loop End"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "w . ink > seed"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "let mut extra = w . ink . rotate_right (1) ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "let p = (extra ^ (j as u64 * 25)) . rotate_left (1) ;"
      },
      {
        "id": 18,
        "label": "extra = extra . wrapping_add (p) ;"
      },
      {
        "id": 19,
        "label": "w . ink = w . ink . wrapping_add (p) . wrapping_mul (3) . wrapping_add (9 + j as u64) ;"
      },
      {
        "id": 20,
        "label": "w . ticks = w . ticks . saturating_add (((w . ink % 27) as u32) + 4) ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 6,
        "to": 10,
        "label": "for"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "for"
      },
      {
        "from": 11,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      }
    ]
  },
  {
    "name": "spend_inscribe",
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 28,
        "label": "let mut r = 1u8 ;"
      },
      {
        "id": 29,
        "label": "let mut acc = lamports . rotate_right (1) ;"
      },
      {
        "id": 30,
        "label": "Loop Start"
      },
      {
        "id": 31,
        "label": "let z = (acc ^ (r as u64 * 16)) . rotate_left (1) ;"
      },
      {
        "id": 32,
        "label": "acc = acc . wrapping_add (z) ;"
      },
      {
        "id": 33,
        "label": "w . ink = w . ink . wrapping_add (z) . wrapping_mul (2) . wrapping_add (13 + r as u64) ;"
      },
      {
        "id": 34,
        "label": "w . ticks = w . ticks . saturating_add (((w . ink % 25) as u32) + 5) ;"
      },
      {
        "id": 35,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "w . ink > lamports"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "w . ink = w . ink . rotate_left (2) . wrapping_add (31) ;"
      },
      {
        "id": 42,
        "label": "w . ticks = w . ticks . saturating_add (((w . ink % 29) as u32) + 4) ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let seeds = & [b\"rune_cell\" . as_ref () , w . owner . as_ref () , & rune_id . to_le_bytes () , core :: slice :: from_ref (& bump_in) ,] ;"
      },
      {
        "id": 47,
        "label": "let cell = Pubkey :: create_program_address (& [b\"rune_cell\" , w . owner . as_ref () , & rune_id . to_le_bytes () , & [bump_in]] , ctx . program_id ,) . map_err (| _ | error ! (ERW :: SeedCompute)) ? ;"
      },
      {
        "id": 48,
        "label": "let ix = system_instruction :: transfer (& cell , & ctx . accounts . calligrapher . key () , lamports) ;"
      },
      {
        "id": 49,
        "label": "invoke_signed (& ix , & [ctx . accounts . rune_hint . to_account_info () , ctx . accounts . calligrapher . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 30,
        "to": 36,
        "label": "while"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]