[
  {
    "name": "create_avatar",
    "inputs": [
      "ctx: Context < CreateAvatar >",
      "name: Vec < u8 >",
      "genes: [u8 ; 8]",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if n . len () > 24 { n . truncate (24) ; }"
      },
      {
        "id": 3,
        "label": "n . truncate (24) ;"
      },
      {
        "id": 4,
        "label": "let mut entropy : u32 = 1 ;"
      },
      {
        "id": 5,
        "label": "for (i , b) in n . iter () . enumerate () { entropy = entropy . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 5)) ; }"
      },
      {
        "id": 6,
        "label": "entropy = entropy . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 5)) ;"
      },
      {
        "id": 7,
        "label": "let mut dna = genes ;"
      },
      {
        "id": 8,
        "label": "for k in 0 .. dna . len () { if ! dna [k] . is_ascii_alphanumeric () { dna [k] = b'0' + (k as u8 % 10) ; } }"
      },
      {
        "id": 9,
        "label": "if ! dna [k] . is_ascii_alphanumeric () { dna [k] = b'0' + (k as u8 % 10) ; }"
      },
      {
        "id": 10,
        "label": "dna [k] = b'0' + (k as u8 % 10) ;"
      },
      {
        "id": 11,
        "label": "let seeds = [& ctx . accounts . creator . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 12,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 13,
        "label": "if addr != ctx . accounts . avatar_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 14,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 15,
        "label": "let rec = & mut ctx . accounts . avatar ;"
      },
      {
        "id": 16,
        "label": "rec . owner = ctx . accounts . creator . key () ;"
      },
      {
        "id": 17,
        "label": "rec . name = n ;"
      },
      {
        "id": 18,
        "label": "rec . genes = dna ;"
      },
      {
        "id": 19,
        "label": "rec . power = rec . power . wrapping_add (entropy as u64) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: n"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: n"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: dna"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: dna"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: dna"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: dna"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: dna"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: dna"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: dna"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: n"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: addr"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: seeds"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: addr"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: rec"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: rec"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: rec"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: n"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: rec"
      },
      {
        "from": 7,
        "to": 18,
        "label": "data_dep: dna"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: rec"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: rec"
      }
    ]
  },
  {
    "name": "upgrade_gear",
    "inputs": [
      "ctx: Context < UpgradeGear >",
      "code: [u8 ; 6]",
      "shard: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let mut c = code ;"
      },
      {
        "id": 23,
        "label": "for i in 0 .. c . len () { if c [i] . is_ascii_lowercase () { c [i] = c [i] - 32 ; } }"
      },
      {
        "id": 24,
        "label": "if c [i] . is_ascii_lowercase () { c [i] = c [i] - 32 ; }"
      },
      {
        "id": 25,
        "label": "c [i] = c [i] - 32 ;"
      },
      {
        "id": 26,
        "label": "let mut shards = shard ;"
      },
      {
        "id": 27,
        "label": "if shards > 500 { shards = 500 ; }"
      },
      {
        "id": 28,
        "label": "shards = 500 ;"
      },
      {
        "id": 29,
        "label": "let mut cost : u32 = 0 ;"
      },
      {
        "id": 30,
        "label": "for x in c . iter () { cost = cost . wrapping_add (* x as u32) ; }"
      },
      {
        "id": 31,
        "label": "cost = cost . wrapping_add (* x as u32) ;"
      },
      {
        "id": 32,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & c [..]] ;"
      },
      {
        "id": 33,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 34,
        "label": "if addr != ctx . accounts . gear_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 35,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 36,
        "label": "let g = & mut ctx . accounts . gear ;"
      },
      {
        "id": 37,
        "label": "g . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 38,
        "label": "g . code = c ;"
      },
      {
        "id": 39,
        "label": "g . level = g . level . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "g . shards_used = g . shards_used . saturating_add (shards as u32) ;"
      },
      {
        "id": 41,
        "label": "g . total_cost = g . total_cost . wrapping_add (cost as u64) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 22,
        "label": "def: c"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: c"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: c"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: shards"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: shards"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: shards"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: shards"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: seeds"
      },
      {
        "from": 22,
        "to": 32,
        "label": "data_dep: c"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: addr"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: seeds"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: addr"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: g"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: g"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: g"
      },
      {
        "from": 22,
        "to": 38,
        "label": "data_dep: c"
      },
      {
        "from": 36,
        "to": 39,
        "label": "data_dep: g"
      },
      {
        "from": 36,
        "to": 39,
        "label": "data_dep: g"
      },
      {
        "from": 36,
        "to": 40,
        "label": "data_dep: g"
      },
      {
        "from": 36,
        "to": 40,
        "label": "data_dep: g"
      },
      {
        "from": 26,
        "to": 40,
        "label": "data_dep: shards"
      },
      {
        "from": 36,
        "to": 41,
        "label": "data_dep: g"
      },
      {
        "from": 36,
        "to": 41,
        "label": "data_dep: g"
      }
    ]
  },
  {
    "name": "log_raid",
    "inputs": [
      "ctx: Context < LogRaid >",
      "boss_id: [u8 ; 4]",
      "damage: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 43,
        "label": "Entry"
      },
      {
        "id": 44,
        "label": "let mut bid = boss_id ;"
      },
      {
        "id": 45,
        "label": "for j in 0 .. bid . len () { if ! bid [j] . is_ascii_digit () { bid [j] = b'1' + (j as u8 % 7) ; } }"
      },
      {
        "id": 46,
        "label": "if ! bid [j] . is_ascii_digit () { bid [j] = b'1' + (j as u8 % 7) ; }"
      },
      {
        "id": 47,
        "label": "bid [j] = b'1' + (j as u8 % 7) ;"
      },
      {
        "id": 48,
        "label": "let mut dealt = damage ;"
      },
      {
        "id": 49,
        "label": "if dealt > 50_000_000 { dealt = 50_000_000 ; }"
      },
      {
        "id": 50,
        "label": "dealt = 50_000_000 ;"
      },
      {
        "id": 51,
        "label": "let mut checksum : u32 = 5381 ;"
      },
      {
        "id": 52,
        "label": "for b in bid . iter () { checksum = ((checksum << 5) . wrapping_add (checksum)) ^ (* b as u32) ; }"
      },
      {
        "id": 53,
        "label": "checksum = ((checksum << 5) . wrapping_add (checksum)) ^ (* b as u32) ;"
      },
      {
        "id": 54,
        "label": "let seeds = [& ctx . accounts . attacker . key () . to_bytes () [..] , & bid [..]] ;"
      },
      {
        "id": 55,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 56,
        "label": "if addr != ctx . accounts . raid_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 57,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 58,
        "label": "let r = & mut ctx . accounts . raid ;"
      },
      {
        "id": 59,
        "label": "r . attacker = ctx . accounts . attacker . key () ;"
      },
      {
        "id": 60,
        "label": "r . boss = bid ;"
      },
      {
        "id": 61,
        "label": "r . total_damage = r . total_damage . saturating_add (dealt) ;"
      },
      {
        "id": 62,
        "label": "r . checksum = r . checksum . wrapping_add (checksum) ;"
      },
      {
        "id": 63,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 44,
        "to": 44,
        "label": "def: bid"
      },
      {
        "from": 44,
        "to": 45,
        "label": "data_dep: bid"
      },
      {
        "from": 44,
        "to": 45,
        "label": "data_dep: bid"
      },
      {
        "from": 44,
        "to": 45,
        "label": "data_dep: bid"
      },
      {
        "from": 44,
        "to": 46,
        "label": "data_dep: bid"
      },
      {
        "from": 44,
        "to": 46,
        "label": "data_dep: bid"
      },
      {
        "from": 44,
        "to": 47,
        "label": "data_dep: bid"
      },
      {
        "from": 48,
        "to": 48,
        "label": "def: dealt"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: dealt"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: dealt"
      },
      {
        "from": 48,
        "to": 50,
        "label": "data_dep: dealt"
      },
      {
        "from": 44,
        "to": 52,
        "label": "data_dep: bid"
      },
      {
        "from": 54,
        "to": 54,
        "label": "def: seeds"
      },
      {
        "from": 44,
        "to": 54,
        "label": "data_dep: bid"
      },
      {
        "from": 55,
        "to": 55,
        "label": "def: addr"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: seeds"
      },
      {
        "from": 55,
        "to": 56,
        "label": "data_dep: addr"
      },
      {
        "from": 58,
        "to": 58,
        "label": "def: r"
      },
      {
        "from": 58,
        "to": 59,
        "label": "data_dep: r"
      },
      {
        "from": 58,
        "to": 60,
        "label": "data_dep: r"
      },
      {
        "from": 44,
        "to": 60,
        "label": "data_dep: bid"
      },
      {
        "from": 58,
        "to": 61,
        "label": "data_dep: r"
      },
      {
        "from": 58,
        "to": 61,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 61,
        "label": "data_dep: dealt"
      },
      {
        "from": 58,
        "to": 62,
        "label": "data_dep: r"
      },
      {
        "from": 58,
        "to": 62,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "grant_energy",
    "inputs": [
      "ctx: Context < GrantEnergy >",
      "track: Vec < u8 >",
      "amount: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 64,
        "label": "Entry"
      },
      {
        "id": 65,
        "label": "let mut t = track . clone () ;"
      },
      {
        "id": 66,
        "label": "if t . is_empty () { t . extend_from_slice (b\"default\") ; }"
      },
      {
        "id": 67,
        "label": "t . extend_from_slice (b\"default\") ;"
      },
      {
        "id": 68,
        "label": "if t . len () > 32 { t . truncate (32) ; }"
      },
      {
        "id": 69,
        "label": "t . truncate (32) ;"
      },
      {
        "id": 70,
        "label": "let mut eval : u64 = 1 ;"
      },
      {
        "id": 71,
        "label": "for b in t . iter () { eval = eval . wrapping_mul (257) . wrapping_add (* b as u64) ; }"
      },
      {
        "id": 72,
        "label": "eval = eval . wrapping_mul (257) . wrapping_add (* b as u64) ;"
      },
      {
        "id": 73,
        "label": "let seeds = [& ctx . accounts . user . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 74,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 75,
        "label": "if addr != ctx . accounts . energy_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 76,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 77,
        "label": "let mut add = amount ;"
      },
      {
        "id": 78,
        "label": "if add > 20000 { add = 20000 ; }"
      },
      {
        "id": 79,
        "label": "add = 20000 ;"
      },
      {
        "id": 80,
        "label": "let e = & mut ctx . accounts . energy ;"
      },
      {
        "id": 81,
        "label": "e . user = ctx . accounts . user . key () ;"
      },
      {
        "id": 82,
        "label": "e . track = t ;"
      },
      {
        "id": 83,
        "label": "e . value = e . value . saturating_add (add) ;"
      },
      {
        "id": 84,
        "label": "e . metric = e . metric . wrapping_add (eval) ;"
      },
      {
        "id": 85,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 65,
        "to": 65,
        "label": "def: t"
      },
      {
        "from": 65,
        "to": 66,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 66,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 67,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 68,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 68,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 69,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 71,
        "label": "data_dep: t"
      },
      {
        "from": 73,
        "to": 73,
        "label": "def: seeds"
      },
      {
        "from": 65,
        "to": 73,
        "label": "data_dep: t"
      },
      {
        "from": 74,
        "to": 74,
        "label": "def: addr"
      },
      {
        "from": 73,
        "to": 74,
        "label": "data_dep: seeds"
      },
      {
        "from": 74,
        "to": 75,
        "label": "data_dep: addr"
      },
      {
        "from": 77,
        "to": 77,
        "label": "def: add"
      },
      {
        "from": 77,
        "to": 78,
        "label": "data_dep: add"
      },
      {
        "from": 77,
        "to": 78,
        "label": "data_dep: add"
      },
      {
        "from": 77,
        "to": 79,
        "label": "data_dep: add"
      },
      {
        "from": 80,
        "to": 80,
        "label": "def: e"
      },
      {
        "from": 80,
        "to": 81,
        "label": "data_dep: e"
      },
      {
        "from": 80,
        "to": 82,
        "label": "data_dep: e"
      },
      {
        "from": 65,
        "to": 82,
        "label": "data_dep: t"
      },
      {
        "from": 80,
        "to": 83,
        "label": "data_dep: e"
      },
      {
        "from": 80,
        "to": 83,
        "label": "data_dep: e"
      },
      {
        "from": 77,
        "to": 83,
        "label": "data_dep: add"
      },
      {
        "from": 80,
        "to": 84,
        "label": "data_dep: e"
      },
      {
        "from": 80,
        "to": 84,
        "label": "data_dep: e"
      }
    ]
  },
  {
    "name": "craft_rune",
    "inputs": [
      "ctx: Context < CraftRune >",
      "pattern: [u8 ; 12]",
      "fuel: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 86,
        "label": "Entry"
      },
      {
        "id": 87,
        "label": "let mut p = pattern ;"
      },
      {
        "id": 88,
        "label": "let mut bias : u32 = 0 ;"
      },
      {
        "id": 89,
        "label": "for i in 0 .. p . len () { if ! (p [i] . is_ascii_alphanumeric ()) { p [i] = b'*' ; } bias = bias . wrapping_add ((p [i] as u32) . wrapping_mul (i as u32 + 3)) ; }"
      },
      {
        "id": 90,
        "label": "if ! (p [i] . is_ascii_alphanumeric ()) { p [i] = b'*' ; }"
      },
      {
        "id": 91,
        "label": "p [i] = b'*' ;"
      },
      {
        "id": 92,
        "label": "bias = bias . wrapping_add ((p [i] as u32) . wrapping_mul (i as u32 + 3)) ;"
      },
      {
        "id": 93,
        "label": "let mut f = fuel ;"
      },
      {
        "id": 94,
        "label": "if f > bias { f = bias ; }"
      },
      {
        "id": 95,
        "label": "f = bias ;"
      },
      {
        "id": 96,
        "label": "let seeds = [& ctx . accounts . alchemist . key () . to_bytes () [..] , & p [..]] ;"
      },
      {
        "id": 97,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 98,
        "label": "if addr != ctx . accounts . rune_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 99,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 100,
        "label": "let r = & mut ctx . accounts . rune ;"
      },
      {
        "id": 101,
        "label": "r . alchemist = ctx . accounts . alchemist . key () ;"
      },
      {
        "id": 102,
        "label": "r . pattern = p ;"
      },
      {
        "id": 103,
        "label": "r . charge = r . charge . saturating_add (f) ;"
      },
      {
        "id": 104,
        "label": "r . bias = r . bias . wrapping_add (bias) ;"
      },
      {
        "id": 105,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 87,
        "to": 87,
        "label": "def: p"
      },
      {
        "from": 87,
        "to": 89,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 89,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 89,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 89,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 90,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 90,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 91,
        "label": "data_dep: p"
      },
      {
        "from": 87,
        "to": 92,
        "label": "data_dep: p"
      },
      {
        "from": 93,
        "to": 93,
        "label": "def: f"
      },
      {
        "from": 93,
        "to": 94,
        "label": "data_dep: f"
      },
      {
        "from": 93,
        "to": 94,
        "label": "data_dep: f"
      },
      {
        "from": 93,
        "to": 95,
        "label": "data_dep: f"
      },
      {
        "from": 96,
        "to": 96,
        "label": "def: seeds"
      },
      {
        "from": 87,
        "to": 96,
        "label": "data_dep: p"
      },
      {
        "from": 97,
        "to": 97,
        "label": "def: addr"
      },
      {
        "from": 96,
        "to": 97,
        "label": "data_dep: seeds"
      },
      {
        "from": 97,
        "to": 98,
        "label": "data_dep: addr"
      },
      {
        "from": 100,
        "to": 100,
        "label": "def: r"
      },
      {
        "from": 100,
        "to": 101,
        "label": "data_dep: r"
      },
      {
        "from": 100,
        "to": 102,
        "label": "data_dep: r"
      },
      {
        "from": 87,
        "to": 102,
        "label": "data_dep: p"
      },
      {
        "from": 100,
        "to": 103,
        "label": "data_dep: r"
      },
      {
        "from": 100,
        "to": 103,
        "label": "data_dep: r"
      },
      {
        "from": 93,
        "to": 103,
        "label": "data_dep: f"
      },
      {
        "from": 100,
        "to": 104,
        "label": "data_dep: r"
      },
      {
        "from": 100,
        "to": 104,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "feed_pet",
    "inputs": [
      "ctx: Context < FeedPet >",
      "pet_tag: [u8 ; 6]",
      "food: u16",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 106,
        "label": "Entry"
      },
      {
        "id": 107,
        "label": "let mut tag = pet_tag ;"
      },
      {
        "id": 108,
        "label": "for i in 0 .. tag . len () { if ! tag [i] . is_ascii_uppercase () { tag [i] = b'A' + (i as u8 % 26) ; } }"
      },
      {
        "id": 109,
        "label": "if ! tag [i] . is_ascii_uppercase () { tag [i] = b'A' + (i as u8 % 26) ; }"
      },
      {
        "id": 110,
        "label": "tag [i] = b'A' + (i as u8 % 26) ;"
      },
      {
        "id": 111,
        "label": "let mut calories = food as u32 ;"
      },
      {
        "id": 112,
        "label": "if calories > 1000 { calories = 1000 ; }"
      },
      {
        "id": 113,
        "label": "calories = 1000 ;"
      },
      {
        "id": 114,
        "label": "let seeds = [& ctx . accounts . caretaker . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 115,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 116,
        "label": "if addr != ctx . accounts . pet_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 117,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 118,
        "label": "let p = & mut ctx . accounts . pet ;"
      },
      {
        "id": 119,
        "label": "p . caretaker = ctx . accounts . caretaker . key () ;"
      },
      {
        "id": 120,
        "label": "p . tag = tag ;"
      },
      {
        "id": 121,
        "label": "p . growth = p . growth . saturating_add (calories) ;"
      },
      {
        "id": 122,
        "label": "p . mood = p . mood . wrapping_add ((calories as u16) . saturating_add (7)) ;"
      },
      {
        "id": 123,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 107,
        "to": 107,
        "label": "def: tag"
      },
      {
        "from": 107,
        "to": 108,
        "label": "data_dep: tag"
      },
      {
        "from": 107,
        "to": 108,
        "label": "data_dep: tag"
      },
      {
        "from": 107,
        "to": 108,
        "label": "data_dep: tag"
      },
      {
        "from": 107,
        "to": 109,
        "label": "data_dep: tag"
      },
      {
        "from": 107,
        "to": 109,
        "label": "data_dep: tag"
      },
      {
        "from": 107,
        "to": 110,
        "label": "data_dep: tag"
      },
      {
        "from": 111,
        "to": 111,
        "label": "def: calories"
      },
      {
        "from": 111,
        "to": 112,
        "label": "data_dep: calories"
      },
      {
        "from": 111,
        "to": 112,
        "label": "data_dep: calories"
      },
      {
        "from": 111,
        "to": 113,
        "label": "data_dep: calories"
      },
      {
        "from": 114,
        "to": 114,
        "label": "def: seeds"
      },
      {
        "from": 107,
        "to": 114,
        "label": "data_dep: tag"
      },
      {
        "from": 115,
        "to": 115,
        "label": "def: addr"
      },
      {
        "from": 114,
        "to": 115,
        "label": "data_dep: seeds"
      },
      {
        "from": 115,
        "to": 116,
        "label": "data_dep: addr"
      },
      {
        "from": 118,
        "to": 118,
        "label": "def: p"
      },
      {
        "from": 118,
        "to": 119,
        "label": "data_dep: p"
      },
      {
        "from": 118,
        "to": 120,
        "label": "data_dep: p"
      },
      {
        "from": 107,
        "to": 120,
        "label": "data_dep: tag"
      },
      {
        "from": 118,
        "to": 121,
        "label": "data_dep: p"
      },
      {
        "from": 118,
        "to": 121,
        "label": "data_dep: p"
      },
      {
        "from": 111,
        "to": 121,
        "label": "data_dep: calories"
      },
      {
        "from": 118,
        "to": 122,
        "label": "data_dep: p"
      },
      {
        "from": 118,
        "to": 122,
        "label": "data_dep: p"
      },
      {
        "from": 111,
        "to": 122,
        "label": "data_dep: calories"
      }
    ]
  },
  {
    "name": "record_lot",
    "inputs": [
      "ctx: Context < RecordLot >",
      "lot_id: [u8 ; 8]",
      "price: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 124,
        "label": "Entry"
      },
      {
        "id": 125,
        "label": "let mut id = lot_id ;"
      },
      {
        "id": 126,
        "label": "let mut code : u32 = 1469598103 ;"
      },
      {
        "id": 127,
        "label": "for b in id . iter () { code = code ^ (* b as u32) ; code = code . wrapping_mul (1099511) ; }"
      },
      {
        "id": 128,
        "label": "code = code ^ (* b as u32) ;"
      },
      {
        "id": 129,
        "label": "code = code . wrapping_mul (1099511) ;"
      },
      {
        "id": 130,
        "label": "let mut px = price ;"
      },
      {
        "id": 131,
        "label": "if px > 9_000_000_000 { px = 9_000_000_000 ; }"
      },
      {
        "id": 132,
        "label": "px = 9_000_000_000 ;"
      },
      {
        "id": 133,
        "label": "let seeds = [& ctx . accounts . trader . key () . to_bytes () [..] , & id [..]] ;"
      },
      {
        "id": 134,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 135,
        "label": "if addr != ctx . accounts . lot_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 136,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 137,
        "label": "let l = & mut ctx . accounts . lot ;"
      },
      {
        "id": 138,
        "label": "l . trader = ctx . accounts . trader . key () ;"
      },
      {
        "id": 139,
        "label": "l . id = id ;"
      },
      {
        "id": 140,
        "label": "l . price_acc = l . price_acc . wrapping_add (px) ;"
      },
      {
        "id": 141,
        "label": "l . code = l . code . wrapping_add (code) ;"
      },
      {
        "id": 142,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 125,
        "to": 125,
        "label": "def: id"
      },
      {
        "from": 125,
        "to": 127,
        "label": "data_dep: id"
      },
      {
        "from": 130,
        "to": 130,
        "label": "def: px"
      },
      {
        "from": 130,
        "to": 131,
        "label": "data_dep: px"
      },
      {
        "from": 130,
        "to": 131,
        "label": "data_dep: px"
      },
      {
        "from": 130,
        "to": 132,
        "label": "data_dep: px"
      },
      {
        "from": 133,
        "to": 133,
        "label": "def: seeds"
      },
      {
        "from": 125,
        "to": 133,
        "label": "data_dep: id"
      },
      {
        "from": 134,
        "to": 134,
        "label": "def: addr"
      },
      {
        "from": 133,
        "to": 134,
        "label": "data_dep: seeds"
      },
      {
        "from": 134,
        "to": 135,
        "label": "data_dep: addr"
      },
      {
        "from": 137,
        "to": 137,
        "label": "def: l"
      },
      {
        "from": 137,
        "to": 138,
        "label": "data_dep: l"
      },
      {
        "from": 137,
        "to": 139,
        "label": "data_dep: l"
      },
      {
        "from": 125,
        "to": 139,
        "label": "data_dep: id"
      },
      {
        "from": 137,
        "to": 140,
        "label": "data_dep: l"
      },
      {
        "from": 137,
        "to": 140,
        "label": "data_dep: l"
      },
      {
        "from": 130,
        "to": 140,
        "label": "data_dep: px"
      },
      {
        "from": 137,
        "to": 141,
        "label": "data_dep: l"
      },
      {
        "from": 137,
        "to": 141,
        "label": "data_dep: l"
      }
    ]
  },
  {
    "name": "progress_season",
    "inputs": [
      "ctx: Context < ProgressSeason >",
      "label: Vec < u8 >",
      "delta: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 143,
        "label": "Entry"
      },
      {
        "id": 144,
        "label": "let mut lab = label . clone () ;"
      },
      {
        "id": 145,
        "label": "if lab . len () > 20 { lab . truncate (20) ; }"
      },
      {
        "id": 146,
        "label": "lab . truncate (20) ;"
      },
      {
        "id": 147,
        "label": "for x in lab . iter_mut () { if * x == b' ' { * x = b'_' ; } }"
      },
      {
        "id": 148,
        "label": "if * x == b' ' { * x = b'_' ; }"
      },
      {
        "id": 149,
        "label": "* x = b'_' ;"
      },
      {
        "id": 150,
        "label": "let mut d = delta ;"
      },
      {
        "id": 151,
        "label": "if d > 10000 { d = 10000 ; }"
      },
      {
        "id": 152,
        "label": "d = 10000 ;"
      },
      {
        "id": 153,
        "label": "let seeds = [& ctx . accounts . organizer . key () . to_bytes () [..] , & lab [..]] ;"
      },
      {
        "id": 154,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 155,
        "label": "if addr != ctx . accounts . season_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 156,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 157,
        "label": "let s = & mut ctx . accounts . season ;"
      },
      {
        "id": 158,
        "label": "s . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 159,
        "label": "s . label = lab ;"
      },
      {
        "id": 160,
        "label": "s . progress = s . progress . saturating_add (d) ;"
      },
      {
        "id": 161,
        "label": "s . flags = s . flags . wrapping_add (1) ;"
      },
      {
        "id": 162,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 144,
        "to": 144,
        "label": "def: lab"
      },
      {
        "from": 144,
        "to": 145,
        "label": "data_dep: lab"
      },
      {
        "from": 144,
        "to": 145,
        "label": "data_dep: lab"
      },
      {
        "from": 144,
        "to": 146,
        "label": "data_dep: lab"
      },
      {
        "from": 144,
        "to": 147,
        "label": "data_dep: lab"
      },
      {
        "from": 150,
        "to": 150,
        "label": "def: d"
      },
      {
        "from": 150,
        "to": 151,
        "label": "data_dep: d"
      },
      {
        "from": 150,
        "to": 151,
        "label": "data_dep: d"
      },
      {
        "from": 150,
        "to": 152,
        "label": "data_dep: d"
      },
      {
        "from": 153,
        "to": 153,
        "label": "def: seeds"
      },
      {
        "from": 144,
        "to": 153,
        "label": "data_dep: lab"
      },
      {
        "from": 154,
        "to": 154,
        "label": "def: addr"
      },
      {
        "from": 153,
        "to": 154,
        "label": "data_dep: seeds"
      },
      {
        "from": 154,
        "to": 155,
        "label": "data_dep: addr"
      },
      {
        "from": 157,
        "to": 157,
        "label": "def: s"
      },
      {
        "from": 157,
        "to": 158,
        "label": "data_dep: s"
      },
      {
        "from": 157,
        "to": 159,
        "label": "data_dep: s"
      },
      {
        "from": 144,
        "to": 159,
        "label": "data_dep: lab"
      },
      {
        "from": 157,
        "to": 160,
        "label": "data_dep: s"
      },
      {
        "from": 157,
        "to": 160,
        "label": "data_dep: s"
      },
      {
        "from": 150,
        "to": 160,
        "label": "data_dep: d"
      },
      {
        "from": 157,
        "to": 161,
        "label": "data_dep: s"
      },
      {
        "from": 157,
        "to": 161,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "open_chest",
    "inputs": [
      "ctx: Context < OpenChest >",
      "chest: [u8 ; 5]",
      "seed: u32",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 163,
        "label": "Entry"
      },
      {
        "id": 164,
        "label": "let mut c = chest ;"
      },
      {
        "id": 165,
        "label": "let mut rng = seed . wrapping_mul (48271) . wrapping_add (1) ;"
      },
      {
        "id": 166,
        "label": "for i in 0 .. c . len () { if ! c [i] . is_ascii_alphanumeric () { c [i] = b'Z' - (i as u8) ; } rng = rng . rotate_left ((i as u32) + 3) . wrapping_add (c [i] as u32) ; }"
      },
      {
        "id": 167,
        "label": "if ! c [i] . is_ascii_alphanumeric () { c [i] = b'Z' - (i as u8) ; }"
      },
      {
        "id": 168,
        "label": "c [i] = b'Z' - (i as u8) ;"
      },
      {
        "id": 169,
        "label": "rng = rng . rotate_left ((i as u32) + 3) . wrapping_add (c [i] as u32) ;"
      },
      {
        "id": 170,
        "label": "let roll = (rng & 1023) as u16 ;"
      },
      {
        "id": 171,
        "label": "let seeds = [& ctx . accounts . hunter . key () . to_bytes () [..] , & c [..]] ;"
      },
      {
        "id": 172,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 173,
        "label": "if addr != ctx . accounts . chest_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 174,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 175,
        "label": "let o = & mut ctx . accounts . opened ;"
      },
      {
        "id": 176,
        "label": "o . hunter = ctx . accounts . hunter . key () ;"
      },
      {
        "id": 177,
        "label": "o . chest = c ;"
      },
      {
        "id": 178,
        "label": "o . rolls = o . rolls . saturating_add (1) ;"
      },
      {
        "id": 179,
        "label": "o . score = o . score . wrapping_add (roll as u32) ;"
      },
      {
        "id": 180,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 164,
        "to": 164,
        "label": "def: c"
      },
      {
        "from": 165,
        "to": 165,
        "label": "def: rng"
      },
      {
        "from": 164,
        "to": 166,
        "label": "data_dep: c"
      },
      {
        "from": 164,
        "to": 166,
        "label": "data_dep: c"
      },
      {
        "from": 164,
        "to": 166,
        "label": "data_dep: c"
      },
      {
        "from": 165,
        "to": 166,
        "label": "data_dep: rng"
      },
      {
        "from": 165,
        "to": 166,
        "label": "data_dep: rng"
      },
      {
        "from": 164,
        "to": 166,
        "label": "data_dep: c"
      },
      {
        "from": 164,
        "to": 167,
        "label": "data_dep: c"
      },
      {
        "from": 164,
        "to": 167,
        "label": "data_dep: c"
      },
      {
        "from": 164,
        "to": 168,
        "label": "data_dep: c"
      },
      {
        "from": 165,
        "to": 169,
        "label": "data_dep: rng"
      },
      {
        "from": 165,
        "to": 169,
        "label": "data_dep: rng"
      },
      {
        "from": 164,
        "to": 169,
        "label": "data_dep: c"
      },
      {
        "from": 170,
        "to": 170,
        "label": "def: roll"
      },
      {
        "from": 165,
        "to": 170,
        "label": "data_dep: rng"
      },
      {
        "from": 171,
        "to": 171,
        "label": "def: seeds"
      },
      {
        "from": 164,
        "to": 171,
        "label": "data_dep: c"
      },
      {
        "from": 172,
        "to": 172,
        "label": "def: addr"
      },
      {
        "from": 171,
        "to": 172,
        "label": "data_dep: seeds"
      },
      {
        "from": 172,
        "to": 173,
        "label": "data_dep: addr"
      },
      {
        "from": 175,
        "to": 175,
        "label": "def: o"
      },
      {
        "from": 175,
        "to": 176,
        "label": "data_dep: o"
      },
      {
        "from": 175,
        "to": 177,
        "label": "data_dep: o"
      },
      {
        "from": 164,
        "to": 177,
        "label": "data_dep: c"
      },
      {
        "from": 175,
        "to": 178,
        "label": "data_dep: o"
      },
      {
        "from": 175,
        "to": 178,
        "label": "data_dep: o"
      },
      {
        "from": 175,
        "to": 179,
        "label": "data_dep: o"
      },
      {
        "from": 175,
        "to": 179,
        "label": "data_dep: o"
      },
      {
        "from": 170,
        "to": 179,
        "label": "data_dep: roll"
      }
    ]
  },
  {
    "name": "set_skin",
    "inputs": [
      "ctx: Context < SetSkin >",
      "avatar_key: [u8 ; 4]",
      "tone: [u8 ; 3]",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 181,
        "label": "Entry"
      },
      {
        "id": 182,
        "label": "let mut key = avatar_key ;"
      },
      {
        "id": 183,
        "label": "for i in 0 .. key . len () { if ! key [i] . is_ascii_digit () { key [i] = b'3' ; } }"
      },
      {
        "id": 184,
        "label": "if ! key [i] . is_ascii_digit () { key [i] = b'3' ; }"
      },
      {
        "id": 185,
        "label": "key [i] = b'3' ;"
      },
      {
        "id": 186,
        "label": "let lum = (tone [0] as u16 * 30 + tone [1] as u16 * 59 + tone [2] as u16 * 11) as u16 ;"
      },
      {
        "id": 187,
        "label": "let seeds = [& ctx . accounts . stylist . key () . to_bytes () [..] , & key [..]] ;"
      },
      {
        "id": 188,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 189,
        "label": "if addr != ctx . accounts . skin_cell . key () { return Err (error ! (GameErr :: PdaMismatch)) ; }"
      },
      {
        "id": 190,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 191,
        "label": "let s = & mut ctx . accounts . skin ;"
      },
      {
        "id": 192,
        "label": "s . stylist = ctx . accounts . stylist . key () ;"
      },
      {
        "id": 193,
        "label": "s . avatar_key = key ;"
      },
      {
        "id": 194,
        "label": "s . tone = tone ;"
      },
      {
        "id": 195,
        "label": "s . luma = lum ;"
      },
      {
        "id": 196,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 182,
        "to": 182,
        "label": "def: key"
      },
      {
        "from": 182,
        "to": 183,
        "label": "data_dep: key"
      },
      {
        "from": 182,
        "to": 183,
        "label": "data_dep: key"
      },
      {
        "from": 182,
        "to": 183,
        "label": "data_dep: key"
      },
      {
        "from": 182,
        "to": 184,
        "label": "data_dep: key"
      },
      {
        "from": 182,
        "to": 184,
        "label": "data_dep: key"
      },
      {
        "from": 182,
        "to": 185,
        "label": "data_dep: key"
      },
      {
        "from": 186,
        "to": 186,
        "label": "def: lum"
      },
      {
        "from": 187,
        "to": 187,
        "label": "def: seeds"
      },
      {
        "from": 182,
        "to": 187,
        "label": "data_dep: key"
      },
      {
        "from": 188,
        "to": 188,
        "label": "def: addr"
      },
      {
        "from": 187,
        "to": 188,
        "label": "data_dep: seeds"
      },
      {
        "from": 188,
        "to": 189,
        "label": "data_dep: addr"
      },
      {
        "from": 191,
        "to": 191,
        "label": "def: s"
      },
      {
        "from": 191,
        "to": 192,
        "label": "data_dep: s"
      },
      {
        "from": 191,
        "to": 193,
        "label": "data_dep: s"
      },
      {
        "from": 182,
        "to": 193,
        "label": "data_dep: key"
      },
      {
        "from": 191,
        "to": 194,
        "label": "data_dep: s"
      },
      {
        "from": 191,
        "to": 195,
        "label": "data_dep: s"
      },
      {
        "from": 186,
        "to": 195,
        "label": "data_dep: lum"
      }
    ]
  }
]