[
  {
    "name": "create_avatar",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut n = name . clone () ;"
      },
      {
        "id": 2,
        "label": "if statement"
      },
      {
        "id": 3,
        "label": "predicate"
      },
      {
        "id": 4,
        "label": "n . len () > 24"
      },
      {
        "id": 5,
        "label": "True body"
      },
      {
        "id": 6,
        "label": "n . truncate (24) ;"
      },
      {
        "id": 7,
        "label": "False body"
      },
      {
        "id": 8,
        "label": "No-op"
      },
      {
        "id": 9,
        "label": "merge"
      },
      {
        "id": 10,
        "label": "let mut entropy : u32 = 1 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "entropy = entropy . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_mul (i as u32 + 5)) ;"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "let mut dna = genes ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "! dna [k] . is_ascii_alphanumeric ()"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "dna [k] = b'0' + (k as u8 % 10) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "Loop End"
      },
      {
        "id": 25,
        "label": "let seeds = [& ctx . accounts . creator . key () . to_bytes () [..] , & n [..]] ;"
      },
      {
        "id": 26,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "addr != ctx . accounts . avatar_cell . key ()"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "let rec = & mut ctx . accounts . avatar ;"
      },
      {
        "id": 36,
        "label": "rec . owner = ctx . accounts . creator . key () ;"
      },
      {
        "id": 37,
        "label": "rec . name = n ;"
      },
      {
        "id": 38,
        "label": "rec . genes = dna ;"
      },
      {
        "id": 39,
        "label": "rec . power = rec . power . wrapping_add (entropy as u64) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "predicate"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 2,
        "to": 5,
        "label": "true"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 2,
        "to": 7,
        "label": "false"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 13,
        "label": "for"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 15,
        "to": 24,
        "label": "for"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  },
  {
    "name": "upgrade_gear",
    "nodes": [
      {
        "id": 41,
        "label": "Entry"
      },
      {
        "id": 42,
        "label": "let mut c = code ;"
      },
      {
        "id": 43,
        "label": "Loop Start"
      },
      {
        "id": 44,
        "label": "if statement"
      },
      {
        "id": 45,
        "label": "predicate"
      },
      {
        "id": 46,
        "label": "c [i] . is_ascii_lowercase ()"
      },
      {
        "id": 47,
        "label": "True body"
      },
      {
        "id": 48,
        "label": "c [i] = c [i] - 32 ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "Loop End"
      },
      {
        "id": 53,
        "label": "let mut shards = shard ;"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "shards > 500"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "shards = 500 ;"
      },
      {
        "id": 59,
        "label": "False body"
      },
      {
        "id": 60,
        "label": "No-op"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "let mut cost : u32 = 0 ;"
      },
      {
        "id": 63,
        "label": "Loop Start"
      },
      {
        "id": 64,
        "label": "cost = cost . wrapping_add (* x as u32) ;"
      },
      {
        "id": 65,
        "label": "Loop End"
      },
      {
        "id": 66,
        "label": "let seeds = [& ctx . accounts . player . key () . to_bytes () [..] , & c [..]] ;"
      },
      {
        "id": 67,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 68,
        "label": "if statement"
      },
      {
        "id": 69,
        "label": "predicate"
      },
      {
        "id": 70,
        "label": "addr != ctx . accounts . gear_cell . key ()"
      },
      {
        "id": 71,
        "label": "True body"
      },
      {
        "id": 72,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 73,
        "label": "False body"
      },
      {
        "id": 74,
        "label": "No-op"
      },
      {
        "id": 75,
        "label": "merge"
      },
      {
        "id": 76,
        "label": "let g = & mut ctx . accounts . gear ;"
      },
      {
        "id": 77,
        "label": "g . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 78,
        "label": "g . code = c ;"
      },
      {
        "id": 79,
        "label": "g . level = g . level . saturating_add (1) ;"
      },
      {
        "id": 80,
        "label": "g . shards_used = g . shards_used . saturating_add (shards as u32) ;"
      },
      {
        "id": 81,
        "label": "g . total_cost = g . total_cost . wrapping_add (cost as u64) ;"
      },
      {
        "id": 82,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "predicate"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "true"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 44,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 43,
        "to": 52,
        "label": "for"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 54,
        "to": 59,
        "label": "false"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 65,
        "label": "for"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "predicate"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "true"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 68,
        "to": 73,
        "label": "false"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 72,
        "to": 75,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      }
    ]
  },
  {
    "name": "log_raid",
    "nodes": [
      {
        "id": 83,
        "label": "Entry"
      },
      {
        "id": 84,
        "label": "let mut bid = boss_id ;"
      },
      {
        "id": 85,
        "label": "Loop Start"
      },
      {
        "id": 86,
        "label": "if statement"
      },
      {
        "id": 87,
        "label": "predicate"
      },
      {
        "id": 88,
        "label": "! bid [j] . is_ascii_digit ()"
      },
      {
        "id": 89,
        "label": "True body"
      },
      {
        "id": 90,
        "label": "bid [j] = b'1' + (j as u8 % 7) ;"
      },
      {
        "id": 91,
        "label": "False body"
      },
      {
        "id": 92,
        "label": "No-op"
      },
      {
        "id": 93,
        "label": "merge"
      },
      {
        "id": 94,
        "label": "Loop End"
      },
      {
        "id": 95,
        "label": "let mut dealt = damage ;"
      },
      {
        "id": 96,
        "label": "if statement"
      },
      {
        "id": 97,
        "label": "predicate"
      },
      {
        "id": 98,
        "label": "dealt > 50_000_000"
      },
      {
        "id": 99,
        "label": "True body"
      },
      {
        "id": 100,
        "label": "dealt = 50_000_000 ;"
      },
      {
        "id": 101,
        "label": "False body"
      },
      {
        "id": 102,
        "label": "No-op"
      },
      {
        "id": 103,
        "label": "merge"
      },
      {
        "id": 104,
        "label": "let mut checksum : u32 = 5381 ;"
      },
      {
        "id": 105,
        "label": "Loop Start"
      },
      {
        "id": 106,
        "label": "checksum = ((checksum << 5) . wrapping_add (checksum)) ^ (* b as u32) ;"
      },
      {
        "id": 107,
        "label": "Loop End"
      },
      {
        "id": 108,
        "label": "let seeds = [& ctx . accounts . attacker . key () . to_bytes () [..] , & bid [..]] ;"
      },
      {
        "id": 109,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 110,
        "label": "if statement"
      },
      {
        "id": 111,
        "label": "predicate"
      },
      {
        "id": 112,
        "label": "addr != ctx . accounts . raid_cell . key ()"
      },
      {
        "id": 113,
        "label": "True body"
      },
      {
        "id": 114,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 115,
        "label": "False body"
      },
      {
        "id": 116,
        "label": "No-op"
      },
      {
        "id": 117,
        "label": "merge"
      },
      {
        "id": 118,
        "label": "let r = & mut ctx . accounts . raid ;"
      },
      {
        "id": 119,
        "label": "r . attacker = ctx . accounts . attacker . key () ;"
      },
      {
        "id": 120,
        "label": "r . boss = bid ;"
      },
      {
        "id": 121,
        "label": "r . total_damage = r . total_damage . saturating_add (dealt) ;"
      },
      {
        "id": 122,
        "label": "r . checksum = r . checksum . wrapping_add (checksum) ;"
      },
      {
        "id": 123,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "predicate"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "true"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 86,
        "to": 91,
        "label": "false"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 90,
        "to": 93,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 85,
        "to": 94,
        "label": "for"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "predicate"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 96,
        "to": 99,
        "label": "true"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 96,
        "to": 101,
        "label": "false"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 100,
        "to": 103,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 105,
        "to": 107,
        "label": "for"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 110,
        "to": 111,
        "label": "predicate"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 110,
        "to": 113,
        "label": "true"
      },
      {
        "from": 113,
        "to": 114,
        "label": "next"
      },
      {
        "from": 110,
        "to": 115,
        "label": "false"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 114,
        "to": 117,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "next"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 118,
        "to": 119,
        "label": "next"
      },
      {
        "from": 119,
        "to": 120,
        "label": "next"
      },
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 121,
        "to": 122,
        "label": "next"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      }
    ]
  },
  {
    "name": "grant_energy",
    "nodes": [
      {
        "id": 124,
        "label": "Entry"
      },
      {
        "id": 125,
        "label": "let mut t = track . clone () ;"
      },
      {
        "id": 126,
        "label": "if statement"
      },
      {
        "id": 127,
        "label": "predicate"
      },
      {
        "id": 128,
        "label": "t . is_empty ()"
      },
      {
        "id": 129,
        "label": "True body"
      },
      {
        "id": 130,
        "label": "t . extend_from_slice (b\"default\") ;"
      },
      {
        "id": 131,
        "label": "False body"
      },
      {
        "id": 132,
        "label": "No-op"
      },
      {
        "id": 133,
        "label": "merge"
      },
      {
        "id": 134,
        "label": "if statement"
      },
      {
        "id": 135,
        "label": "predicate"
      },
      {
        "id": 136,
        "label": "t . len () > 32"
      },
      {
        "id": 137,
        "label": "True body"
      },
      {
        "id": 138,
        "label": "t . truncate (32) ;"
      },
      {
        "id": 139,
        "label": "False body"
      },
      {
        "id": 140,
        "label": "No-op"
      },
      {
        "id": 141,
        "label": "merge"
      },
      {
        "id": 142,
        "label": "let mut eval : u64 = 1 ;"
      },
      {
        "id": 143,
        "label": "Loop Start"
      },
      {
        "id": 144,
        "label": "eval = eval . wrapping_mul (257) . wrapping_add (* b as u64) ;"
      },
      {
        "id": 145,
        "label": "Loop End"
      },
      {
        "id": 146,
        "label": "let seeds = [& ctx . accounts . user . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 147,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 148,
        "label": "if statement"
      },
      {
        "id": 149,
        "label": "predicate"
      },
      {
        "id": 150,
        "label": "addr != ctx . accounts . energy_cell . key ()"
      },
      {
        "id": 151,
        "label": "True body"
      },
      {
        "id": 152,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 153,
        "label": "False body"
      },
      {
        "id": 154,
        "label": "No-op"
      },
      {
        "id": 155,
        "label": "merge"
      },
      {
        "id": 156,
        "label": "let mut add = amount ;"
      },
      {
        "id": 157,
        "label": "if statement"
      },
      {
        "id": 158,
        "label": "predicate"
      },
      {
        "id": 159,
        "label": "add > 20000"
      },
      {
        "id": 160,
        "label": "True body"
      },
      {
        "id": 161,
        "label": "add = 20000 ;"
      },
      {
        "id": 162,
        "label": "False body"
      },
      {
        "id": 163,
        "label": "No-op"
      },
      {
        "id": 164,
        "label": "merge"
      },
      {
        "id": 165,
        "label": "let e = & mut ctx . accounts . energy ;"
      },
      {
        "id": 166,
        "label": "e . user = ctx . accounts . user . key () ;"
      },
      {
        "id": 167,
        "label": "e . track = t ;"
      },
      {
        "id": 168,
        "label": "e . value = e . value . saturating_add (add) ;"
      },
      {
        "id": 169,
        "label": "e . metric = e . metric . wrapping_add (eval) ;"
      },
      {
        "id": 170,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 124,
        "to": 125,
        "label": "next"
      },
      {
        "from": 125,
        "to": 126,
        "label": "next"
      },
      {
        "from": 126,
        "to": 127,
        "label": "predicate"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      },
      {
        "from": 126,
        "to": 129,
        "label": "true"
      },
      {
        "from": 129,
        "to": 130,
        "label": "next"
      },
      {
        "from": 126,
        "to": 131,
        "label": "false"
      },
      {
        "from": 131,
        "to": 132,
        "label": "next"
      },
      {
        "from": 130,
        "to": 133,
        "label": "next"
      },
      {
        "from": 132,
        "to": 133,
        "label": "next"
      },
      {
        "from": 133,
        "to": 134,
        "label": "next"
      },
      {
        "from": 134,
        "to": 135,
        "label": "predicate"
      },
      {
        "from": 135,
        "to": 136,
        "label": "next"
      },
      {
        "from": 134,
        "to": 137,
        "label": "true"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 134,
        "to": 139,
        "label": "false"
      },
      {
        "from": 139,
        "to": 140,
        "label": "next"
      },
      {
        "from": 138,
        "to": 141,
        "label": "next"
      },
      {
        "from": 140,
        "to": 141,
        "label": "next"
      },
      {
        "from": 141,
        "to": 142,
        "label": "next"
      },
      {
        "from": 142,
        "to": 143,
        "label": "next"
      },
      {
        "from": 143,
        "to": 144,
        "label": "next"
      },
      {
        "from": 143,
        "to": 145,
        "label": "for"
      },
      {
        "from": 145,
        "to": 146,
        "label": "next"
      },
      {
        "from": 146,
        "to": 147,
        "label": "next"
      },
      {
        "from": 147,
        "to": 148,
        "label": "next"
      },
      {
        "from": 148,
        "to": 149,
        "label": "predicate"
      },
      {
        "from": 149,
        "to": 150,
        "label": "next"
      },
      {
        "from": 148,
        "to": 151,
        "label": "true"
      },
      {
        "from": 151,
        "to": 152,
        "label": "next"
      },
      {
        "from": 148,
        "to": 153,
        "label": "false"
      },
      {
        "from": 153,
        "to": 154,
        "label": "next"
      },
      {
        "from": 152,
        "to": 155,
        "label": "next"
      },
      {
        "from": 154,
        "to": 155,
        "label": "next"
      },
      {
        "from": 155,
        "to": 156,
        "label": "next"
      },
      {
        "from": 156,
        "to": 157,
        "label": "next"
      },
      {
        "from": 157,
        "to": 158,
        "label": "predicate"
      },
      {
        "from": 158,
        "to": 159,
        "label": "next"
      },
      {
        "from": 157,
        "to": 160,
        "label": "true"
      },
      {
        "from": 160,
        "to": 161,
        "label": "next"
      },
      {
        "from": 157,
        "to": 162,
        "label": "false"
      },
      {
        "from": 162,
        "to": 163,
        "label": "next"
      },
      {
        "from": 161,
        "to": 164,
        "label": "next"
      },
      {
        "from": 163,
        "to": 164,
        "label": "next"
      },
      {
        "from": 164,
        "to": 165,
        "label": "next"
      },
      {
        "from": 165,
        "to": 166,
        "label": "next"
      },
      {
        "from": 166,
        "to": 167,
        "label": "next"
      },
      {
        "from": 167,
        "to": 168,
        "label": "next"
      },
      {
        "from": 168,
        "to": 169,
        "label": "next"
      },
      {
        "from": 169,
        "to": 170,
        "label": "next"
      }
    ]
  },
  {
    "name": "craft_rune",
    "nodes": [
      {
        "id": 171,
        "label": "Entry"
      },
      {
        "id": 172,
        "label": "let mut p = pattern ;"
      },
      {
        "id": 173,
        "label": "let mut bias : u32 = 0 ;"
      },
      {
        "id": 174,
        "label": "Loop Start"
      },
      {
        "id": 175,
        "label": "if statement"
      },
      {
        "id": 176,
        "label": "predicate"
      },
      {
        "id": 177,
        "label": "! (p [i] . is_ascii_alphanumeric ())"
      },
      {
        "id": 178,
        "label": "True body"
      },
      {
        "id": 179,
        "label": "p [i] = b'*' ;"
      },
      {
        "id": 180,
        "label": "False body"
      },
      {
        "id": 181,
        "label": "No-op"
      },
      {
        "id": 182,
        "label": "merge"
      },
      {
        "id": 183,
        "label": "bias = bias . wrapping_add ((p [i] as u32) . wrapping_mul (i as u32 + 3)) ;"
      },
      {
        "id": 184,
        "label": "Loop End"
      },
      {
        "id": 185,
        "label": "let mut f = fuel ;"
      },
      {
        "id": 186,
        "label": "if statement"
      },
      {
        "id": 187,
        "label": "predicate"
      },
      {
        "id": 188,
        "label": "f > bias"
      },
      {
        "id": 189,
        "label": "True body"
      },
      {
        "id": 190,
        "label": "f = bias ;"
      },
      {
        "id": 191,
        "label": "False body"
      },
      {
        "id": 192,
        "label": "No-op"
      },
      {
        "id": 193,
        "label": "merge"
      },
      {
        "id": 194,
        "label": "let seeds = [& ctx . accounts . alchemist . key () . to_bytes () [..] , & p [..]] ;"
      },
      {
        "id": 195,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 196,
        "label": "if statement"
      },
      {
        "id": 197,
        "label": "predicate"
      },
      {
        "id": 198,
        "label": "addr != ctx . accounts . rune_cell . key ()"
      },
      {
        "id": 199,
        "label": "True body"
      },
      {
        "id": 200,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 201,
        "label": "False body"
      },
      {
        "id": 202,
        "label": "No-op"
      },
      {
        "id": 203,
        "label": "merge"
      },
      {
        "id": 204,
        "label": "let r = & mut ctx . accounts . rune ;"
      },
      {
        "id": 205,
        "label": "r . alchemist = ctx . accounts . alchemist . key () ;"
      },
      {
        "id": 206,
        "label": "r . pattern = p ;"
      },
      {
        "id": 207,
        "label": "r . charge = r . charge . saturating_add (f) ;"
      },
      {
        "id": 208,
        "label": "r . bias = r . bias . wrapping_add (bias) ;"
      },
      {
        "id": 209,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 171,
        "to": 172,
        "label": "next"
      },
      {
        "from": 172,
        "to": 173,
        "label": "next"
      },
      {
        "from": 173,
        "to": 174,
        "label": "next"
      },
      {
        "from": 174,
        "to": 175,
        "label": "next"
      },
      {
        "from": 175,
        "to": 176,
        "label": "predicate"
      },
      {
        "from": 176,
        "to": 177,
        "label": "next"
      },
      {
        "from": 175,
        "to": 178,
        "label": "true"
      },
      {
        "from": 178,
        "to": 179,
        "label": "next"
      },
      {
        "from": 175,
        "to": 180,
        "label": "false"
      },
      {
        "from": 180,
        "to": 181,
        "label": "next"
      },
      {
        "from": 179,
        "to": 182,
        "label": "next"
      },
      {
        "from": 181,
        "to": 182,
        "label": "next"
      },
      {
        "from": 182,
        "to": 183,
        "label": "next"
      },
      {
        "from": 174,
        "to": 184,
        "label": "for"
      },
      {
        "from": 184,
        "to": 185,
        "label": "next"
      },
      {
        "from": 185,
        "to": 186,
        "label": "next"
      },
      {
        "from": 186,
        "to": 187,
        "label": "predicate"
      },
      {
        "from": 187,
        "to": 188,
        "label": "next"
      },
      {
        "from": 186,
        "to": 189,
        "label": "true"
      },
      {
        "from": 189,
        "to": 190,
        "label": "next"
      },
      {
        "from": 186,
        "to": 191,
        "label": "false"
      },
      {
        "from": 191,
        "to": 192,
        "label": "next"
      },
      {
        "from": 190,
        "to": 193,
        "label": "next"
      },
      {
        "from": 192,
        "to": 193,
        "label": "next"
      },
      {
        "from": 193,
        "to": 194,
        "label": "next"
      },
      {
        "from": 194,
        "to": 195,
        "label": "next"
      },
      {
        "from": 195,
        "to": 196,
        "label": "next"
      },
      {
        "from": 196,
        "to": 197,
        "label": "predicate"
      },
      {
        "from": 197,
        "to": 198,
        "label": "next"
      },
      {
        "from": 196,
        "to": 199,
        "label": "true"
      },
      {
        "from": 199,
        "to": 200,
        "label": "next"
      },
      {
        "from": 196,
        "to": 201,
        "label": "false"
      },
      {
        "from": 201,
        "to": 202,
        "label": "next"
      },
      {
        "from": 200,
        "to": 203,
        "label": "next"
      },
      {
        "from": 202,
        "to": 203,
        "label": "next"
      },
      {
        "from": 203,
        "to": 204,
        "label": "next"
      },
      {
        "from": 204,
        "to": 205,
        "label": "next"
      },
      {
        "from": 205,
        "to": 206,
        "label": "next"
      },
      {
        "from": 206,
        "to": 207,
        "label": "next"
      },
      {
        "from": 207,
        "to": 208,
        "label": "next"
      },
      {
        "from": 208,
        "to": 209,
        "label": "next"
      }
    ]
  },
  {
    "name": "feed_pet",
    "nodes": [
      {
        "id": 210,
        "label": "Entry"
      },
      {
        "id": 211,
        "label": "let mut tag = pet_tag ;"
      },
      {
        "id": 212,
        "label": "Loop Start"
      },
      {
        "id": 213,
        "label": "if statement"
      },
      {
        "id": 214,
        "label": "predicate"
      },
      {
        "id": 215,
        "label": "! tag [i] . is_ascii_uppercase ()"
      },
      {
        "id": 216,
        "label": "True body"
      },
      {
        "id": 217,
        "label": "tag [i] = b'A' + (i as u8 % 26) ;"
      },
      {
        "id": 218,
        "label": "False body"
      },
      {
        "id": 219,
        "label": "No-op"
      },
      {
        "id": 220,
        "label": "merge"
      },
      {
        "id": 221,
        "label": "Loop End"
      },
      {
        "id": 222,
        "label": "let mut calories = food as u32 ;"
      },
      {
        "id": 223,
        "label": "if statement"
      },
      {
        "id": 224,
        "label": "predicate"
      },
      {
        "id": 225,
        "label": "calories > 1000"
      },
      {
        "id": 226,
        "label": "True body"
      },
      {
        "id": 227,
        "label": "calories = 1000 ;"
      },
      {
        "id": 228,
        "label": "False body"
      },
      {
        "id": 229,
        "label": "No-op"
      },
      {
        "id": 230,
        "label": "merge"
      },
      {
        "id": 231,
        "label": "let seeds = [& ctx . accounts . caretaker . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 232,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 233,
        "label": "if statement"
      },
      {
        "id": 234,
        "label": "predicate"
      },
      {
        "id": 235,
        "label": "addr != ctx . accounts . pet_cell . key ()"
      },
      {
        "id": 236,
        "label": "True body"
      },
      {
        "id": 237,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 238,
        "label": "False body"
      },
      {
        "id": 239,
        "label": "No-op"
      },
      {
        "id": 240,
        "label": "merge"
      },
      {
        "id": 241,
        "label": "let p = & mut ctx . accounts . pet ;"
      },
      {
        "id": 242,
        "label": "p . caretaker = ctx . accounts . caretaker . key () ;"
      },
      {
        "id": 243,
        "label": "p . tag = tag ;"
      },
      {
        "id": 244,
        "label": "p . growth = p . growth . saturating_add (calories) ;"
      },
      {
        "id": 245,
        "label": "p . mood = p . mood . wrapping_add ((calories as u16) . saturating_add (7)) ;"
      },
      {
        "id": 246,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 210,
        "to": 211,
        "label": "next"
      },
      {
        "from": 211,
        "to": 212,
        "label": "next"
      },
      {
        "from": 212,
        "to": 213,
        "label": "next"
      },
      {
        "from": 213,
        "to": 214,
        "label": "predicate"
      },
      {
        "from": 214,
        "to": 215,
        "label": "next"
      },
      {
        "from": 213,
        "to": 216,
        "label": "true"
      },
      {
        "from": 216,
        "to": 217,
        "label": "next"
      },
      {
        "from": 213,
        "to": 218,
        "label": "false"
      },
      {
        "from": 218,
        "to": 219,
        "label": "next"
      },
      {
        "from": 217,
        "to": 220,
        "label": "next"
      },
      {
        "from": 219,
        "to": 220,
        "label": "next"
      },
      {
        "from": 212,
        "to": 221,
        "label": "for"
      },
      {
        "from": 221,
        "to": 222,
        "label": "next"
      },
      {
        "from": 222,
        "to": 223,
        "label": "next"
      },
      {
        "from": 223,
        "to": 224,
        "label": "predicate"
      },
      {
        "from": 224,
        "to": 225,
        "label": "next"
      },
      {
        "from": 223,
        "to": 226,
        "label": "true"
      },
      {
        "from": 226,
        "to": 227,
        "label": "next"
      },
      {
        "from": 223,
        "to": 228,
        "label": "false"
      },
      {
        "from": 228,
        "to": 229,
        "label": "next"
      },
      {
        "from": 227,
        "to": 230,
        "label": "next"
      },
      {
        "from": 229,
        "to": 230,
        "label": "next"
      },
      {
        "from": 230,
        "to": 231,
        "label": "next"
      },
      {
        "from": 231,
        "to": 232,
        "label": "next"
      },
      {
        "from": 232,
        "to": 233,
        "label": "next"
      },
      {
        "from": 233,
        "to": 234,
        "label": "predicate"
      },
      {
        "from": 234,
        "to": 235,
        "label": "next"
      },
      {
        "from": 233,
        "to": 236,
        "label": "true"
      },
      {
        "from": 236,
        "to": 237,
        "label": "next"
      },
      {
        "from": 233,
        "to": 238,
        "label": "false"
      },
      {
        "from": 238,
        "to": 239,
        "label": "next"
      },
      {
        "from": 237,
        "to": 240,
        "label": "next"
      },
      {
        "from": 239,
        "to": 240,
        "label": "next"
      },
      {
        "from": 240,
        "to": 241,
        "label": "next"
      },
      {
        "from": 241,
        "to": 242,
        "label": "next"
      },
      {
        "from": 242,
        "to": 243,
        "label": "next"
      },
      {
        "from": 243,
        "to": 244,
        "label": "next"
      },
      {
        "from": 244,
        "to": 245,
        "label": "next"
      },
      {
        "from": 245,
        "to": 246,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_lot",
    "nodes": [
      {
        "id": 247,
        "label": "Entry"
      },
      {
        "id": 248,
        "label": "let mut id = lot_id ;"
      },
      {
        "id": 249,
        "label": "let mut code : u32 = 1469598103 ;"
      },
      {
        "id": 250,
        "label": "Loop Start"
      },
      {
        "id": 251,
        "label": "code = code ^ (* b as u32) ;"
      },
      {
        "id": 252,
        "label": "code = code . wrapping_mul (1099511) ;"
      },
      {
        "id": 253,
        "label": "Loop End"
      },
      {
        "id": 254,
        "label": "let mut px = price ;"
      },
      {
        "id": 255,
        "label": "if statement"
      },
      {
        "id": 256,
        "label": "predicate"
      },
      {
        "id": 257,
        "label": "px > 9_000_000_000"
      },
      {
        "id": 258,
        "label": "True body"
      },
      {
        "id": 259,
        "label": "px = 9_000_000_000 ;"
      },
      {
        "id": 260,
        "label": "False body"
      },
      {
        "id": 261,
        "label": "No-op"
      },
      {
        "id": 262,
        "label": "merge"
      },
      {
        "id": 263,
        "label": "let seeds = [& ctx . accounts . trader . key () . to_bytes () [..] , & id [..]] ;"
      },
      {
        "id": 264,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 265,
        "label": "if statement"
      },
      {
        "id": 266,
        "label": "predicate"
      },
      {
        "id": 267,
        "label": "addr != ctx . accounts . lot_cell . key ()"
      },
      {
        "id": 268,
        "label": "True body"
      },
      {
        "id": 269,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 270,
        "label": "False body"
      },
      {
        "id": 271,
        "label": "No-op"
      },
      {
        "id": 272,
        "label": "merge"
      },
      {
        "id": 273,
        "label": "let l = & mut ctx . accounts . lot ;"
      },
      {
        "id": 274,
        "label": "l . trader = ctx . accounts . trader . key () ;"
      },
      {
        "id": 275,
        "label": "l . id = id ;"
      },
      {
        "id": 276,
        "label": "l . price_acc = l . price_acc . wrapping_add (px) ;"
      },
      {
        "id": 277,
        "label": "l . code = l . code . wrapping_add (code) ;"
      },
      {
        "id": 278,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 247,
        "to": 248,
        "label": "next"
      },
      {
        "from": 248,
        "to": 249,
        "label": "next"
      },
      {
        "from": 249,
        "to": 250,
        "label": "next"
      },
      {
        "from": 250,
        "to": 251,
        "label": "next"
      },
      {
        "from": 251,
        "to": 252,
        "label": "next"
      },
      {
        "from": 250,
        "to": 253,
        "label": "for"
      },
      {
        "from": 253,
        "to": 254,
        "label": "next"
      },
      {
        "from": 254,
        "to": 255,
        "label": "next"
      },
      {
        "from": 255,
        "to": 256,
        "label": "predicate"
      },
      {
        "from": 256,
        "to": 257,
        "label": "next"
      },
      {
        "from": 255,
        "to": 258,
        "label": "true"
      },
      {
        "from": 258,
        "to": 259,
        "label": "next"
      },
      {
        "from": 255,
        "to": 260,
        "label": "false"
      },
      {
        "from": 260,
        "to": 261,
        "label": "next"
      },
      {
        "from": 259,
        "to": 262,
        "label": "next"
      },
      {
        "from": 261,
        "to": 262,
        "label": "next"
      },
      {
        "from": 262,
        "to": 263,
        "label": "next"
      },
      {
        "from": 263,
        "to": 264,
        "label": "next"
      },
      {
        "from": 264,
        "to": 265,
        "label": "next"
      },
      {
        "from": 265,
        "to": 266,
        "label": "predicate"
      },
      {
        "from": 266,
        "to": 267,
        "label": "next"
      },
      {
        "from": 265,
        "to": 268,
        "label": "true"
      },
      {
        "from": 268,
        "to": 269,
        "label": "next"
      },
      {
        "from": 265,
        "to": 270,
        "label": "false"
      },
      {
        "from": 270,
        "to": 271,
        "label": "next"
      },
      {
        "from": 269,
        "to": 272,
        "label": "next"
      },
      {
        "from": 271,
        "to": 272,
        "label": "next"
      },
      {
        "from": 272,
        "to": 273,
        "label": "next"
      },
      {
        "from": 273,
        "to": 274,
        "label": "next"
      },
      {
        "from": 274,
        "to": 275,
        "label": "next"
      },
      {
        "from": 275,
        "to": 276,
        "label": "next"
      },
      {
        "from": 276,
        "to": 277,
        "label": "next"
      },
      {
        "from": 277,
        "to": 278,
        "label": "next"
      }
    ]
  },
  {
    "name": "progress_season",
    "nodes": [
      {
        "id": 279,
        "label": "Entry"
      },
      {
        "id": 280,
        "label": "let mut lab = label . clone () ;"
      },
      {
        "id": 281,
        "label": "if statement"
      },
      {
        "id": 282,
        "label": "predicate"
      },
      {
        "id": 283,
        "label": "lab . len () > 20"
      },
      {
        "id": 284,
        "label": "True body"
      },
      {
        "id": 285,
        "label": "lab . truncate (20) ;"
      },
      {
        "id": 286,
        "label": "False body"
      },
      {
        "id": 287,
        "label": "No-op"
      },
      {
        "id": 288,
        "label": "merge"
      },
      {
        "id": 289,
        "label": "Loop Start"
      },
      {
        "id": 290,
        "label": "if statement"
      },
      {
        "id": 291,
        "label": "predicate"
      },
      {
        "id": 292,
        "label": "* x == b' '"
      },
      {
        "id": 293,
        "label": "True body"
      },
      {
        "id": 294,
        "label": "* x = b'_' ;"
      },
      {
        "id": 295,
        "label": "False body"
      },
      {
        "id": 296,
        "label": "No-op"
      },
      {
        "id": 297,
        "label": "merge"
      },
      {
        "id": 298,
        "label": "Loop End"
      },
      {
        "id": 299,
        "label": "let mut d = delta ;"
      },
      {
        "id": 300,
        "label": "if statement"
      },
      {
        "id": 301,
        "label": "predicate"
      },
      {
        "id": 302,
        "label": "d > 10000"
      },
      {
        "id": 303,
        "label": "True body"
      },
      {
        "id": 304,
        "label": "d = 10000 ;"
      },
      {
        "id": 305,
        "label": "False body"
      },
      {
        "id": 306,
        "label": "No-op"
      },
      {
        "id": 307,
        "label": "merge"
      },
      {
        "id": 308,
        "label": "let seeds = [& ctx . accounts . organizer . key () . to_bytes () [..] , & lab [..]] ;"
      },
      {
        "id": 309,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 310,
        "label": "if statement"
      },
      {
        "id": 311,
        "label": "predicate"
      },
      {
        "id": 312,
        "label": "addr != ctx . accounts . season_cell . key ()"
      },
      {
        "id": 313,
        "label": "True body"
      },
      {
        "id": 314,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 315,
        "label": "False body"
      },
      {
        "id": 316,
        "label": "No-op"
      },
      {
        "id": 317,
        "label": "merge"
      },
      {
        "id": 318,
        "label": "let s = & mut ctx . accounts . season ;"
      },
      {
        "id": 319,
        "label": "s . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 320,
        "label": "s . label = lab ;"
      },
      {
        "id": 321,
        "label": "s . progress = s . progress . saturating_add (d) ;"
      },
      {
        "id": 322,
        "label": "s . flags = s . flags . wrapping_add (1) ;"
      },
      {
        "id": 323,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 279,
        "to": 280,
        "label": "next"
      },
      {
        "from": 280,
        "to": 281,
        "label": "next"
      },
      {
        "from": 281,
        "to": 282,
        "label": "predicate"
      },
      {
        "from": 282,
        "to": 283,
        "label": "next"
      },
      {
        "from": 281,
        "to": 284,
        "label": "true"
      },
      {
        "from": 284,
        "to": 285,
        "label": "next"
      },
      {
        "from": 281,
        "to": 286,
        "label": "false"
      },
      {
        "from": 286,
        "to": 287,
        "label": "next"
      },
      {
        "from": 285,
        "to": 288,
        "label": "next"
      },
      {
        "from": 287,
        "to": 288,
        "label": "next"
      },
      {
        "from": 288,
        "to": 289,
        "label": "next"
      },
      {
        "from": 289,
        "to": 290,
        "label": "next"
      },
      {
        "from": 290,
        "to": 291,
        "label": "predicate"
      },
      {
        "from": 291,
        "to": 292,
        "label": "next"
      },
      {
        "from": 290,
        "to": 293,
        "label": "true"
      },
      {
        "from": 293,
        "to": 294,
        "label": "next"
      },
      {
        "from": 290,
        "to": 295,
        "label": "false"
      },
      {
        "from": 295,
        "to": 296,
        "label": "next"
      },
      {
        "from": 294,
        "to": 297,
        "label": "next"
      },
      {
        "from": 296,
        "to": 297,
        "label": "next"
      },
      {
        "from": 289,
        "to": 298,
        "label": "for"
      },
      {
        "from": 298,
        "to": 299,
        "label": "next"
      },
      {
        "from": 299,
        "to": 300,
        "label": "next"
      },
      {
        "from": 300,
        "to": 301,
        "label": "predicate"
      },
      {
        "from": 301,
        "to": 302,
        "label": "next"
      },
      {
        "from": 300,
        "to": 303,
        "label": "true"
      },
      {
        "from": 303,
        "to": 304,
        "label": "next"
      },
      {
        "from": 300,
        "to": 305,
        "label": "false"
      },
      {
        "from": 305,
        "to": 306,
        "label": "next"
      },
      {
        "from": 304,
        "to": 307,
        "label": "next"
      },
      {
        "from": 306,
        "to": 307,
        "label": "next"
      },
      {
        "from": 307,
        "to": 308,
        "label": "next"
      },
      {
        "from": 308,
        "to": 309,
        "label": "next"
      },
      {
        "from": 309,
        "to": 310,
        "label": "next"
      },
      {
        "from": 310,
        "to": 311,
        "label": "predicate"
      },
      {
        "from": 311,
        "to": 312,
        "label": "next"
      },
      {
        "from": 310,
        "to": 313,
        "label": "true"
      },
      {
        "from": 313,
        "to": 314,
        "label": "next"
      },
      {
        "from": 310,
        "to": 315,
        "label": "false"
      },
      {
        "from": 315,
        "to": 316,
        "label": "next"
      },
      {
        "from": 314,
        "to": 317,
        "label": "next"
      },
      {
        "from": 316,
        "to": 317,
        "label": "next"
      },
      {
        "from": 317,
        "to": 318,
        "label": "next"
      },
      {
        "from": 318,
        "to": 319,
        "label": "next"
      },
      {
        "from": 319,
        "to": 320,
        "label": "next"
      },
      {
        "from": 320,
        "to": 321,
        "label": "next"
      },
      {
        "from": 321,
        "to": 322,
        "label": "next"
      },
      {
        "from": 322,
        "to": 323,
        "label": "next"
      }
    ]
  },
  {
    "name": "open_chest",
    "nodes": [
      {
        "id": 324,
        "label": "Entry"
      },
      {
        "id": 325,
        "label": "let mut c = chest ;"
      },
      {
        "id": 326,
        "label": "let mut rng = seed . wrapping_mul (48271) . wrapping_add (1) ;"
      },
      {
        "id": 327,
        "label": "Loop Start"
      },
      {
        "id": 328,
        "label": "if statement"
      },
      {
        "id": 329,
        "label": "predicate"
      },
      {
        "id": 330,
        "label": "! c [i] . is_ascii_alphanumeric ()"
      },
      {
        "id": 331,
        "label": "True body"
      },
      {
        "id": 332,
        "label": "c [i] = b'Z' - (i as u8) ;"
      },
      {
        "id": 333,
        "label": "False body"
      },
      {
        "id": 334,
        "label": "No-op"
      },
      {
        "id": 335,
        "label": "merge"
      },
      {
        "id": 336,
        "label": "rng = rng . rotate_left ((i as u32) + 3) . wrapping_add (c [i] as u32) ;"
      },
      {
        "id": 337,
        "label": "Loop End"
      },
      {
        "id": 338,
        "label": "let roll = (rng & 1023) as u16 ;"
      },
      {
        "id": 339,
        "label": "let seeds = [& ctx . accounts . hunter . key () . to_bytes () [..] , & c [..]] ;"
      },
      {
        "id": 340,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 341,
        "label": "if statement"
      },
      {
        "id": 342,
        "label": "predicate"
      },
      {
        "id": 343,
        "label": "addr != ctx . accounts . chest_cell . key ()"
      },
      {
        "id": 344,
        "label": "True body"
      },
      {
        "id": 345,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 346,
        "label": "False body"
      },
      {
        "id": 347,
        "label": "No-op"
      },
      {
        "id": 348,
        "label": "merge"
      },
      {
        "id": 349,
        "label": "let o = & mut ctx . accounts . opened ;"
      },
      {
        "id": 350,
        "label": "o . hunter = ctx . accounts . hunter . key () ;"
      },
      {
        "id": 351,
        "label": "o . chest = c ;"
      },
      {
        "id": 352,
        "label": "o . rolls = o . rolls . saturating_add (1) ;"
      },
      {
        "id": 353,
        "label": "o . score = o . score . wrapping_add (roll as u32) ;"
      },
      {
        "id": 354,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 324,
        "to": 325,
        "label": "next"
      },
      {
        "from": 325,
        "to": 326,
        "label": "next"
      },
      {
        "from": 326,
        "to": 327,
        "label": "next"
      },
      {
        "from": 327,
        "to": 328,
        "label": "next"
      },
      {
        "from": 328,
        "to": 329,
        "label": "predicate"
      },
      {
        "from": 329,
        "to": 330,
        "label": "next"
      },
      {
        "from": 328,
        "to": 331,
        "label": "true"
      },
      {
        "from": 331,
        "to": 332,
        "label": "next"
      },
      {
        "from": 328,
        "to": 333,
        "label": "false"
      },
      {
        "from": 333,
        "to": 334,
        "label": "next"
      },
      {
        "from": 332,
        "to": 335,
        "label": "next"
      },
      {
        "from": 334,
        "to": 335,
        "label": "next"
      },
      {
        "from": 335,
        "to": 336,
        "label": "next"
      },
      {
        "from": 327,
        "to": 337,
        "label": "for"
      },
      {
        "from": 337,
        "to": 338,
        "label": "next"
      },
      {
        "from": 338,
        "to": 339,
        "label": "next"
      },
      {
        "from": 339,
        "to": 340,
        "label": "next"
      },
      {
        "from": 340,
        "to": 341,
        "label": "next"
      },
      {
        "from": 341,
        "to": 342,
        "label": "predicate"
      },
      {
        "from": 342,
        "to": 343,
        "label": "next"
      },
      {
        "from": 341,
        "to": 344,
        "label": "true"
      },
      {
        "from": 344,
        "to": 345,
        "label": "next"
      },
      {
        "from": 341,
        "to": 346,
        "label": "false"
      },
      {
        "from": 346,
        "to": 347,
        "label": "next"
      },
      {
        "from": 345,
        "to": 348,
        "label": "next"
      },
      {
        "from": 347,
        "to": 348,
        "label": "next"
      },
      {
        "from": 348,
        "to": 349,
        "label": "next"
      },
      {
        "from": 349,
        "to": 350,
        "label": "next"
      },
      {
        "from": 350,
        "to": 351,
        "label": "next"
      },
      {
        "from": 351,
        "to": 352,
        "label": "next"
      },
      {
        "from": 352,
        "to": 353,
        "label": "next"
      },
      {
        "from": 353,
        "to": 354,
        "label": "next"
      }
    ]
  },
  {
    "name": "set_skin",
    "nodes": [
      {
        "id": 355,
        "label": "Entry"
      },
      {
        "id": 356,
        "label": "let mut key = avatar_key ;"
      },
      {
        "id": 357,
        "label": "Loop Start"
      },
      {
        "id": 358,
        "label": "if statement"
      },
      {
        "id": 359,
        "label": "predicate"
      },
      {
        "id": 360,
        "label": "! key [i] . is_ascii_digit ()"
      },
      {
        "id": 361,
        "label": "True body"
      },
      {
        "id": 362,
        "label": "key [i] = b'3' ;"
      },
      {
        "id": 363,
        "label": "False body"
      },
      {
        "id": 364,
        "label": "No-op"
      },
      {
        "id": 365,
        "label": "merge"
      },
      {
        "id": 366,
        "label": "Loop End"
      },
      {
        "id": 367,
        "label": "let lum = (tone [0] as u16 * 30 + tone [1] as u16 * 59 + tone [2] as u16 * 11) as u16 ;"
      },
      {
        "id": 368,
        "label": "let seeds = [& ctx . accounts . stylist . key () . to_bytes () [..] , & key [..]] ;"
      },
      {
        "id": 369,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GameErr :: PdaMismatch)) ? ;"
      },
      {
        "id": 370,
        "label": "if statement"
      },
      {
        "id": 371,
        "label": "predicate"
      },
      {
        "id": 372,
        "label": "addr != ctx . accounts . skin_cell . key ()"
      },
      {
        "id": 373,
        "label": "True body"
      },
      {
        "id": 374,
        "label": "return Err (error ! (GameErr :: PdaMismatch)) ;"
      },
      {
        "id": 375,
        "label": "False body"
      },
      {
        "id": 376,
        "label": "No-op"
      },
      {
        "id": 377,
        "label": "merge"
      },
      {
        "id": 378,
        "label": "let s = & mut ctx . accounts . skin ;"
      },
      {
        "id": 379,
        "label": "s . stylist = ctx . accounts . stylist . key () ;"
      },
      {
        "id": 380,
        "label": "s . avatar_key = key ;"
      },
      {
        "id": 381,
        "label": "s . tone = tone ;"
      },
      {
        "id": 382,
        "label": "s . luma = lum ;"
      },
      {
        "id": 383,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 355,
        "to": 356,
        "label": "next"
      },
      {
        "from": 356,
        "to": 357,
        "label": "next"
      },
      {
        "from": 357,
        "to": 358,
        "label": "next"
      },
      {
        "from": 358,
        "to": 359,
        "label": "predicate"
      },
      {
        "from": 359,
        "to": 360,
        "label": "next"
      },
      {
        "from": 358,
        "to": 361,
        "label": "true"
      },
      {
        "from": 361,
        "to": 362,
        "label": "next"
      },
      {
        "from": 358,
        "to": 363,
        "label": "false"
      },
      {
        "from": 363,
        "to": 364,
        "label": "next"
      },
      {
        "from": 362,
        "to": 365,
        "label": "next"
      },
      {
        "from": 364,
        "to": 365,
        "label": "next"
      },
      {
        "from": 357,
        "to": 366,
        "label": "for"
      },
      {
        "from": 366,
        "to": 367,
        "label": "next"
      },
      {
        "from": 367,
        "to": 368,
        "label": "next"
      },
      {
        "from": 368,
        "to": 369,
        "label": "next"
      },
      {
        "from": 369,
        "to": 370,
        "label": "next"
      },
      {
        "from": 370,
        "to": 371,
        "label": "predicate"
      },
      {
        "from": 371,
        "to": 372,
        "label": "next"
      },
      {
        "from": 370,
        "to": 373,
        "label": "true"
      },
      {
        "from": 373,
        "to": 374,
        "label": "next"
      },
      {
        "from": 370,
        "to": 375,
        "label": "false"
      },
      {
        "from": 375,
        "to": 376,
        "label": "next"
      },
      {
        "from": 374,
        "to": 377,
        "label": "next"
      },
      {
        "from": 376,
        "to": 377,
        "label": "next"
      },
      {
        "from": 377,
        "to": 378,
        "label": "next"
      },
      {
        "from": 378,
        "to": 379,
        "label": "next"
      },
      {
        "from": 379,
        "to": 380,
        "label": "next"
      },
      {
        "from": 380,
        "to": 381,
        "label": "next"
      },
      {
        "from": 381,
        "to": 382,
        "label": "next"
      },
      {
        "from": 382,
        "to": 383,
        "label": "next"
      }
    ]
  }
]