[
  {
    "name": "init_workshop",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 2,
        "label": "w . owner = ctx . accounts . designer . key () ;"
      },
      {
        "id": 3,
        "label": "w . bump_main = * ctx . bumps . get (\"workshop\") . ok_or (error ! (EE :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "w . heat = base . rotate_left (3) . wrapping_add (701) ;"
      },
      {
        "id": 5,
        "label": "w . steps = 2 ;"
      },
      {
        "id": 6,
        "label": "let setup = [13u64 , 21 , 34 , 55 , 89] ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "let twist = (idx as u32 % 5) + 1 ;"
      },
      {
        "id": 9,
        "label": "w . heat = w . heat . wrapping_add (v . rotate_left (twist)) . wrapping_add (17 + idx as u64) ;"
      },
      {
        "id": 10,
        "label": "w . steps = w . steps . saturating_add (((w . heat % 23) as u32) + 4) ;"
      },
      {
        "id": 11,
        "label": "let mut inner = 1u8 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "w . heat = w . heat . rotate_right (inner as u32) . wrapping_mul (2) . wrapping_add (29 + inner as u64) ;"
      },
      {
        "id": 14,
        "label": "w . steps = w . steps . saturating_add (((w . heat % 19) as u32) + 3) ;"
      },
      {
        "id": 15,
        "label": "inner = inner . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "w . steps & 1 == 1"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "w . heat = w . heat . wrapping_mul (3) . wrapping_add (111) . rotate_left ((w . steps % 5) + 1) ;"
      },
      {
        "id": 23,
        "label": "w . steps = w . steps . saturating_add (7) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "w . heat = w . heat . rotate_right (2) . wrapping_add (47) . wrapping_mul (2) ;"
      },
      {
        "id": 26,
        "label": "w . steps = w . steps . saturating_add (5) ;"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "w . heat > 900"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "w . heat = w . heat . rotate_left (2) . wrapping_add (53) ;"
      },
      {
        "id": 33,
        "label": "w . steps = w . steps . saturating_add (5) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "w . heat = w . heat . wrapping_add (31) . rotate_right (1) ;"
      },
      {
        "id": 36,
        "label": "w . steps = w . steps . saturating_add (4) ;"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 12,
        "to": 16,
        "label": "while"
      },
      {
        "from": 7,
        "to": 17,
        "label": "for"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 18,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 23,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 28,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 33,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  },
  {
    "name": "mint_from_slot",
    "nodes": [
      {
        "id": 39,
        "label": "Entry"
      },
      {
        "id": 40,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 41,
        "label": "let phases = [7u64 , 9 , 15 , 26] ;"
      },
      {
        "id": 42,
        "label": "Loop Start"
      },
      {
        "id": 43,
        "label": "let bias = (slot_id ^ p) . rotate_left (((w . steps % 3) + 1) as u32) ;"
      },
      {
        "id": 44,
        "label": "w . heat = w . heat . wrapping_add (bias) . wrapping_mul (2) . wrapping_add (lamports % 97) ;"
      },
      {
        "id": 45,
        "label": "w . steps = w . steps . saturating_add (((w . heat % 37) as u32) + 2) ;"
      },
      {
        "id": 46,
        "label": "Loop End"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "lamports > 600"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "w . heat = w . heat . rotate_left (2) . wrapping_add (63) ;"
      },
      {
        "id": 52,
        "label": "w . steps = w . steps . saturating_add (8) ;"
      },
      {
        "id": 53,
        "label": "False body"
      },
      {
        "id": 54,
        "label": "w . heat = w . heat . rotate_right (1) . wrapping_add (27) . wrapping_mul (3) ;"
      },
      {
        "id": 55,
        "label": "w . steps = w . steps . saturating_add (5) ;"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "w . steps & 2 == 2"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "w . heat = w . heat . wrapping_add (41) . rotate_left (1) ;"
      },
      {
        "id": 62,
        "label": "w . steps = w . steps . saturating_add (3) ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "w . heat = w . heat . wrapping_mul (2) . wrapping_add (19) . rotate_right (2) ;"
      },
      {
        "id": 65,
        "label": "w . steps = w . steps . saturating_add (2) ;"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "let seeds = & [b\"avatar_cell\" . as_ref () , w . owner . as_ref () , & slot_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 68,
        "label": "let cell = Pubkey :: create_program_address (& [b\"avatar_cell\" , w . owner . as_ref () , & slot_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;"
      },
      {
        "id": 69,
        "label": "let ix = system_instruction :: transfer (& cell , & ctx . accounts . beneficiary . key () , lamports) ;"
      },
      {
        "id": 70,
        "label": "invoke_signed (& ix , & [ctx . accounts . avatar_cell_hint . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 71,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 42,
        "to": 46,
        "label": "for"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 47,
        "to": 53,
        "label": "false"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 52,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 57,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 62,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      }
    ]
  }
]