[
  {
    "name": "init_workshop",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitWorkshop >",
      "base: u64"
    ],
    "attributes": [],
    "body": [
      "let w = & mut ctx . accounts . workshop ;",
      "w . owner = ctx . accounts . designer . key () ;",
      "w . bump_main = * ctx . bumps . get (\"workshop\") . ok_or (error ! (EE :: MissingBump)) ? ;",
      "w . heat = base . rotate_left (3) . wrapping_add (701) ;",
      "w . steps = 2 ;",
      "let setup = [13u64 , 21 , 34 , 55 , 89] ;",
      "for (idx , v) in setup . iter () . enumerate ()",
      "{",
      "let twist = (idx as u32 % 5) + 1 ;",
      "w . heat = w . heat . wrapping_add (v . rotate_left (twist)) . wrapping_add (17 + idx as u64) ;",
      "w . steps = w . steps . saturating_add (((w . heat % 23) as u32) + 4) ;",
      "let mut inner = 1u8 ;",
      "while inner < 3",
      "{",
      "w . heat = w . heat . rotate_right (inner as u32) . wrapping_mul (2) . wrapping_add (29 + inner as u64) ;",
      "w . steps = w . steps . saturating_add (((w . heat % 19) as u32) + 3) ;",
      "inner = inner . saturating_add (1) ;",
      "}",
      "}",
      "if w . steps & 1 == 1",
      "{",
      "w . heat = w . heat . wrapping_mul (3) . wrapping_add (111) . rotate_left ((w . steps % 5) + 1) ;",
      "w . steps = w . steps . saturating_add (7) ;",
      "} else",
      "{",
      "w . heat = w . heat . rotate_right (2) . wrapping_add (47) . wrapping_mul (2) ;",
      "w . steps = w . steps . saturating_add (5) ;",
      "}",
      "if w . heat > 900",
      "{",
      "w . heat = w . heat . rotate_left (2) . wrapping_add (53) ;",
      "w . steps = w . steps . saturating_add (5) ;",
      "} else",
      "{",
      "w . heat = w . heat . wrapping_add (31) . rotate_right (1) ;",
      "w . steps = w . steps . saturating_add (4) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "mint_from_slot",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < MintFromSlot >",
      "slot_id: u64",
      "user_bump: u8",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let w = & mut ctx . accounts . workshop ;",
      "let phases = [7u64 , 9 , 15 , 26] ;",
      "for p in phases",
      "{",
      "let bias = (slot_id ^ p) . rotate_left (((w . steps % 3) + 1) as u32) ;",
      "w . heat = w . heat . wrapping_add (bias) . wrapping_mul (2) . wrapping_add (lamports % 97) ;",
      "w . steps = w . steps . saturating_add (((w . heat % 37) as u32) + 2) ;",
      "}",
      "if lamports > 600",
      "{",
      "w . heat = w . heat . rotate_left (2) . wrapping_add (63) ;",
      "w . steps = w . steps . saturating_add (8) ;",
      "} else",
      "{",
      "w . heat = w . heat . rotate_right (1) . wrapping_add (27) . wrapping_mul (3) ;",
      "w . steps = w . steps . saturating_add (5) ;",
      "}",
      "if w . steps & 2 == 2",
      "{",
      "w . heat = w . heat . wrapping_add (41) . rotate_left (1) ;",
      "w . steps = w . steps . saturating_add (3) ;",
      "} else",
      "{",
      "w . heat = w . heat . wrapping_mul (2) . wrapping_add (19) . rotate_right (2) ;",
      "w . steps = w . steps . saturating_add (2) ;",
      "}",
      "let seeds = & [b\"avatar_cell\" . as_ref () , w . owner . as_ref () , & slot_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;",
      "let cell = Pubkey :: create_program_address (& [b\"avatar_cell\" , w . owner . as_ref () , & slot_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& cell , & ctx . accounts . beneficiary . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . avatar_cell_hint . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitWorkshop",
    "node_type": "struct",
    "fields": [
      {
        "name": "workshop",
        "attribute": "# [account (init , payer = designer , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"workshop\" , designer . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , WorkshopState >"
      },
      {
        "name": "designer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MintFromSlot",
    "node_type": "struct",
    "fields": [
      {
        "name": "workshop",
        "attribute": "# [account (mut , seeds = [b\"workshop\" , designer . key () . as_ref ()] , bump = workshop . bump_main)]",
        "field_type": "Account < 'info , WorkshopState >"
      },
      {
        "name": "avatar_cell_hint",
        "attribute": "# [doc = \" CHECK 未検証\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "beneficiary",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "designer",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "WorkshopState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "heat",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "steps",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_main",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]