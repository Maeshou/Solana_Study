[
  {
    "name": "mint_badge",
    "inputs": [
      "ctx: Context < MintBadge >",
      "title: Vec < u8 >",
      "tier: u8",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut t = title . clone () ;"
      },
      {
        "id": 2,
        "label": "if t . len () > 24 { t . truncate (24) ; let mut pad = vec ! [b'#' ; 4] ; for idx in 0 .. pad . len () { pad [idx] = pad [idx] . wrapping_add (idx as u8) ; } t . extend_from_slice (& pad) ; let mut s : u32 = 0 ; for ch in t . iter () { s = s . wrapping_add (* ch as u32) ; } msg ! (\"Truncated and padded; ascii_sum={}\" , s) ; }"
      },
      {
        "id": 3,
        "label": "t . truncate (24) ;"
      },
      {
        "id": 4,
        "label": "let mut pad = vec ! [b'#' ; 4] ;"
      },
      {
        "id": 5,
        "label": "for idx in 0 .. pad . len () { pad [idx] = pad [idx] . wrapping_add (idx as u8) ; }"
      },
      {
        "id": 6,
        "label": "pad [idx] = pad [idx] . wrapping_add (idx as u8) ;"
      },
      {
        "id": 7,
        "label": "t . extend_from_slice (& pad) ;"
      },
      {
        "id": 8,
        "label": "let mut s : u32 = 0 ;"
      },
      {
        "id": 9,
        "label": "for ch in t . iter () { s = s . wrapping_add (* ch as u32) ; }"
      },
      {
        "id": 10,
        "label": "s = s . wrapping_add (* ch as u32) ;"
      },
      {
        "id": 11,
        "label": "msg ! (\"Truncated and padded; ascii_sum={}\" , s) ;"
      },
      {
        "id": 12,
        "label": "if t . len () < 3 { let fill_len = 3 - t . len () ; let mut filler = vec ! [b'*' ; fill_len] ; for k in 0 .. filler . len () { filler [k] = filler [k] . wrapping_add ((k as u8) & 1) ; } t . extend_from_slice (& filler) ; let mut c = 0 ; for (i , b) in t . iter () . enumerate () { if * b == b'*' { c = c . saturating_add ((i as u32) + 1) ; msg ! (\"Filled at {} -> {}\" , i , c) ; } } }"
      },
      {
        "id": 13,
        "label": "let fill_len = 3 - t . len () ;"
      },
      {
        "id": 14,
        "label": "let mut filler = vec ! [b'*' ; fill_len] ;"
      },
      {
        "id": 15,
        "label": "for k in 0 .. filler . len () { filler [k] = filler [k] . wrapping_add ((k as u8) & 1) ; }"
      },
      {
        "id": 16,
        "label": "filler [k] = filler [k] . wrapping_add ((k as u8) & 1) ;"
      },
      {
        "id": 17,
        "label": "t . extend_from_slice (& filler) ;"
      },
      {
        "id": 18,
        "label": "let mut c = 0 ;"
      },
      {
        "id": 19,
        "label": "for (i , b) in t . iter () . enumerate () { if * b == b'*' { c = c . saturating_add ((i as u32) + 1) ; msg ! (\"Filled at {} -> {}\" , i , c) ; } }"
      },
      {
        "id": 20,
        "label": "if * b == b'*' { c = c . saturating_add ((i as u32) + 1) ; msg ! (\"Filled at {} -> {}\" , i , c) ; }"
      },
      {
        "id": 21,
        "label": "c = c . saturating_add ((i as u32) + 1) ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Filled at {} -> {}\" , i , c) ;"
      },
      {
        "id": 23,
        "label": "let mut weight : u32 = 7 ;"
      },
      {
        "id": 24,
        "label": "for (i , b) in t . iter () . enumerate () { weight = weight . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_add (i as u32 + 11)) ; if * b == b'!' { weight = weight . saturating_add (500) ; let probe = (* b as u32) . wrapping_mul (3) ; msg ! (\"Boost at {} probe={}\" , i , probe) ; } }"
      },
      {
        "id": 25,
        "label": "weight = weight . wrapping_mul (131) . wrapping_add ((* b as u32) . wrapping_add (i as u32 + 11)) ;"
      },
      {
        "id": 26,
        "label": "if * b == b'!' { weight = weight . saturating_add (500) ; let probe = (* b as u32) . wrapping_mul (3) ; msg ! (\"Boost at {} probe={}\" , i , probe) ; }"
      },
      {
        "id": 27,
        "label": "weight = weight . saturating_add (500) ;"
      },
      {
        "id": 28,
        "label": "let probe = (* b as u32) . wrapping_mul (3) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"Boost at {} probe={}\" , i , probe) ;"
      },
      {
        "id": 30,
        "label": "let seeds = [& ctx . accounts . member . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 31,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GErr :: Cell)) ? ;"
      },
      {
        "id": 32,
        "label": "if addr != ctx . accounts . badge_cell . key () { msg ! (\"PDA mismatch expected={} got={}\" , ctx . accounts . badge_cell . key () , addr) ; return Err (error ! (GErr :: Cell)) ; }"
      },
      {
        "id": 33,
        "label": "msg ! (\"PDA mismatch expected={} got={}\" , ctx . accounts . badge_cell . key () , addr) ;"
      },
      {
        "id": 34,
        "label": "return Err (error ! (GErr :: Cell)) ;"
      },
      {
        "id": 35,
        "label": "let b = & mut ctx . accounts . badge ;"
      },
      {
        "id": 36,
        "label": "b . member = ctx . accounts . member . key () ;"
      },
      {
        "id": 37,
        "label": "b . title = t ;"
      },
      {
        "id": 38,
        "label": "if tier > 9 { b . tier = 9 ; let mut trace = 0u32 ; for z in 0 .. 5 { trace = trace . wrapping_add ((z * 7) as u32) ; } b . value = b . value . wrapping_add (trace) ; } else { b . tier = tier ; let mut inc = 0 ; for _ in 0 .. (tier as usize) { inc = inc . wrapping_add (13) ; } b . value = b . value . wrapping_add (inc) ; }"
      },
      {
        "id": 39,
        "label": "b . tier = 9 ;"
      },
      {
        "id": 40,
        "label": "let mut trace = 0u32 ;"
      },
      {
        "id": 41,
        "label": "for z in 0 .. 5 { trace = trace . wrapping_add ((z * 7) as u32) ; }"
      },
      {
        "id": 42,
        "label": "trace = trace . wrapping_add ((z * 7) as u32) ;"
      },
      {
        "id": 43,
        "label": "b . value = b . value . wrapping_add (trace) ;"
      },
      {
        "id": 44,
        "label": "b . tier = tier ;"
      },
      {
        "id": 45,
        "label": "let mut inc = 0 ;"
      },
      {
        "id": 46,
        "label": "for _ in 0 .. (tier as usize) { inc = inc . wrapping_add (13) ; }"
      },
      {
        "id": 47,
        "label": "inc = inc . wrapping_add (13) ;"
      },
      {
        "id": 48,
        "label": "b . value = b . value . wrapping_add (inc) ;"
      },
      {
        "id": 49,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: t"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: pad"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: pad"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: pad"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: pad"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: pad"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: pad"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: t"
      },
      {
        "from": 4,
        "to": 7,
        "label": "data_dep: pad"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: fill_len"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: t"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: filler"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: filler"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: filler"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: filler"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: filler"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: filler"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: t"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: filler"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: c"
      },
      {
        "from": 1,
        "to": 19,
        "label": "data_dep: t"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 24,
        "label": "data_dep: t"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: probe"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 30,
        "label": "data_dep: t"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: addr"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: seeds"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: addr"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: b"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 37,
        "label": "data_dep: t"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 39,
        "label": "data_dep: b"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: trace"
      },
      {
        "from": 40,
        "to": 41,
        "label": "data_dep: trace"
      },
      {
        "from": 40,
        "to": 41,
        "label": "data_dep: trace"
      },
      {
        "from": 40,
        "to": 42,
        "label": "data_dep: trace"
      },
      {
        "from": 40,
        "to": 42,
        "label": "data_dep: trace"
      },
      {
        "from": 35,
        "to": 43,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 43,
        "label": "data_dep: b"
      },
      {
        "from": 40,
        "to": 43,
        "label": "data_dep: trace"
      },
      {
        "from": 35,
        "to": 44,
        "label": "data_dep: b"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: inc"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: inc"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: inc"
      },
      {
        "from": 45,
        "to": 47,
        "label": "data_dep: inc"
      },
      {
        "from": 45,
        "to": 47,
        "label": "data_dep: inc"
      },
      {
        "from": 35,
        "to": 48,
        "label": "data_dep: b"
      },
      {
        "from": 35,
        "to": 48,
        "label": "data_dep: b"
      },
      {
        "from": 45,
        "to": 48,
        "label": "data_dep: inc"
      }
    ]
  },
  {
    "name": "rename_badge",
    "inputs": [
      "ctx: Context < RenameBadge >",
      "new_title: Vec < u8 >",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 50,
        "label": "Entry"
      },
      {
        "id": 51,
        "label": "let mut t = new_title . clone () ;"
      },
      {
        "id": 52,
        "label": "if t . len () < 3 { let need = 3 - t . len () ; t . extend_from_slice (& vec ! [b'@' ; need]) ; let mut total : u32 = 0 ; for (i , ch) in t . iter () . enumerate () { total = total . wrapping_add ((* ch as u32) . wrapping_add ((i as u32) * 2)) ; if * ch == b'@' { let ping = (i as u32) . wrapping_mul (5) ; msg ! (\"@ at {} ping={}\" , i , ping) ; } } msg ! (\"ascii_total={}\" , total) ; }"
      },
      {
        "id": 53,
        "label": "let need = 3 - t . len () ;"
      },
      {
        "id": 54,
        "label": "t . extend_from_slice (& vec ! [b'@' ; need]) ;"
      },
      {
        "id": 55,
        "label": "let mut total : u32 = 0 ;"
      },
      {
        "id": 56,
        "label": "for (i , ch) in t . iter () . enumerate () { total = total . wrapping_add ((* ch as u32) . wrapping_add ((i as u32) * 2)) ; if * ch == b'@' { let ping = (i as u32) . wrapping_mul (5) ; msg ! (\"@ at {} ping={}\" , i , ping) ; } }"
      },
      {
        "id": 57,
        "label": "total = total . wrapping_add ((* ch as u32) . wrapping_add ((i as u32) * 2)) ;"
      },
      {
        "id": 58,
        "label": "if * ch == b'@' { let ping = (i as u32) . wrapping_mul (5) ; msg ! (\"@ at {} ping={}\" , i , ping) ; }"
      },
      {
        "id": 59,
        "label": "let ping = (i as u32) . wrapping_mul (5) ;"
      },
      {
        "id": 60,
        "label": "msg ! (\"@ at {} ping={}\" , i , ping) ;"
      },
      {
        "id": 61,
        "label": "msg ! (\"ascii_total={}\" , total) ;"
      },
      {
        "id": 62,
        "label": "if t . len () > 20 { let drop_n = t . len () - 20 ; for step in 0 .. drop_n { let idx = t . len () . saturating_sub (1) ; let val = t [idx] ; t . truncate (idx) ; if (val & 1) == 1 { msg ! (\"drop idx={} val={}\" , idx , val) ; } if step % 3 == 0 { msg ! (\"step {}\" , step) ; } } }"
      },
      {
        "id": 63,
        "label": "let drop_n = t . len () - 20 ;"
      },
      {
        "id": 64,
        "label": "for step in 0 .. drop_n { let idx = t . len () . saturating_sub (1) ; let val = t [idx] ; t . truncate (idx) ; if (val & 1) == 1 { msg ! (\"drop idx={} val={}\" , idx , val) ; } if step % 3 == 0 { msg ! (\"step {}\" , step) ; } }"
      },
      {
        "id": 65,
        "label": "let idx = t . len () . saturating_sub (1) ;"
      },
      {
        "id": 66,
        "label": "let val = t [idx] ;"
      },
      {
        "id": 67,
        "label": "t . truncate (idx) ;"
      },
      {
        "id": 68,
        "label": "if (val & 1) == 1 { msg ! (\"drop idx={} val={}\" , idx , val) ; }"
      },
      {
        "id": 69,
        "label": "msg ! (\"drop idx={} val={}\" , idx , val) ;"
      },
      {
        "id": 70,
        "label": "if step % 3 == 0 { msg ! (\"step {}\" , step) ; }"
      },
      {
        "id": 71,
        "label": "msg ! (\"step {}\" , step) ;"
      },
      {
        "id": 72,
        "label": "let seeds = [& ctx . accounts . member . key () . to_bytes () [..] , & t [..]] ;"
      },
      {
        "id": 73,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (GErr :: Cell)) ? ;"
      },
      {
        "id": 74,
        "label": "if addr != ctx . accounts . badge_cell . key () { msg ! (\"rename mismatch\") ; return Err (error ! (GErr :: Cell)) ; }"
      },
      {
        "id": 75,
        "label": "msg ! (\"rename mismatch\") ;"
      },
      {
        "id": 76,
        "label": "return Err (error ! (GErr :: Cell)) ;"
      },
      {
        "id": 77,
        "label": "let b = & mut ctx . accounts . badge ;"
      },
      {
        "id": 78,
        "label": "b . title = t ;"
      },
      {
        "id": 79,
        "label": "let mut bonus = 0u32 ;"
      },
      {
        "id": 80,
        "label": "for (i , v) in b . title . iter () . enumerate () { let adj = ((* v as u32) & 15) . wrapping_add ((i as u32) * 3) ; bonus = bonus . wrapping_add (adj) ; if i % 2 == 0 { let spin = bonus . rotate_left (1) ; msg ! (\"i={} adj={} spin={}\" , i , adj , spin) ; } }"
      },
      {
        "id": 81,
        "label": "let adj = ((* v as u32) & 15) . wrapping_add ((i as u32) * 3) ;"
      },
      {
        "id": 82,
        "label": "bonus = bonus . wrapping_add (adj) ;"
      },
      {
        "id": 83,
        "label": "if i % 2 == 0 { let spin = bonus . rotate_left (1) ; msg ! (\"i={} adj={} spin={}\" , i , adj , spin) ; }"
      },
      {
        "id": 84,
        "label": "let spin = bonus . rotate_left (1) ;"
      },
      {
        "id": 85,
        "label": "msg ! (\"i={} adj={} spin={}\" , i , adj , spin) ;"
      },
      {
        "id": 86,
        "label": "b . value = b . value . wrapping_add (bonus) ;"
      },
      {
        "id": 87,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 51,
        "to": 51,
        "label": "def: t"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: t"
      },
      {
        "from": 53,
        "to": 53,
        "label": "def: need"
      },
      {
        "from": 51,
        "to": 53,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 54,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 56,
        "label": "data_dep: t"
      },
      {
        "from": 59,
        "to": 59,
        "label": "def: ping"
      },
      {
        "from": 51,
        "to": 62,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 62,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 62,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 62,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 62,
        "label": "data_dep: t"
      },
      {
        "from": 63,
        "to": 63,
        "label": "def: drop_n"
      },
      {
        "from": 51,
        "to": 63,
        "label": "data_dep: t"
      },
      {
        "from": 63,
        "to": 64,
        "label": "data_dep: drop_n"
      },
      {
        "from": 51,
        "to": 64,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 64,
        "label": "data_dep: t"
      },
      {
        "from": 51,
        "to": 64,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 65,
        "label": "def: idx"
      },
      {
        "from": 51,
        "to": 65,
        "label": "data_dep: t"
      },
      {
        "from": 66,
        "to": 66,
        "label": "def: val"
      },
      {
        "from": 51,
        "to": 66,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 66,
        "label": "data_dep: idx"
      },
      {
        "from": 51,
        "to": 67,
        "label": "data_dep: t"
      },
      {
        "from": 65,
        "to": 67,
        "label": "data_dep: idx"
      },
      {
        "from": 66,
        "to": 68,
        "label": "data_dep: val"
      },
      {
        "from": 72,
        "to": 72,
        "label": "def: seeds"
      },
      {
        "from": 51,
        "to": 72,
        "label": "data_dep: t"
      },
      {
        "from": 73,
        "to": 73,
        "label": "def: addr"
      },
      {
        "from": 72,
        "to": 73,
        "label": "data_dep: seeds"
      },
      {
        "from": 73,
        "to": 74,
        "label": "data_dep: addr"
      },
      {
        "from": 77,
        "to": 77,
        "label": "def: b"
      },
      {
        "from": 77,
        "to": 78,
        "label": "data_dep: b"
      },
      {
        "from": 51,
        "to": 78,
        "label": "data_dep: t"
      },
      {
        "from": 79,
        "to": 79,
        "label": "def: bonus"
      },
      {
        "from": 77,
        "to": 80,
        "label": "data_dep: b"
      },
      {
        "from": 79,
        "to": 80,
        "label": "data_dep: bonus"
      },
      {
        "from": 79,
        "to": 80,
        "label": "data_dep: bonus"
      },
      {
        "from": 79,
        "to": 80,
        "label": "data_dep: bonus"
      },
      {
        "from": 81,
        "to": 81,
        "label": "def: adj"
      },
      {
        "from": 79,
        "to": 82,
        "label": "data_dep: bonus"
      },
      {
        "from": 79,
        "to": 82,
        "label": "data_dep: bonus"
      },
      {
        "from": 81,
        "to": 82,
        "label": "data_dep: adj"
      },
      {
        "from": 79,
        "to": 83,
        "label": "data_dep: bonus"
      },
      {
        "from": 84,
        "to": 84,
        "label": "def: spin"
      },
      {
        "from": 79,
        "to": 84,
        "label": "data_dep: bonus"
      },
      {
        "from": 77,
        "to": 86,
        "label": "data_dep: b"
      },
      {
        "from": 77,
        "to": 86,
        "label": "data_dep: b"
      },
      {
        "from": 79,
        "to": 86,
        "label": "data_dep: bonus"
      }
    ]
  }
]