[
  {
    "name": "build_station",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "s . owner = ctx . accounts . maker . key () ;"
      },
      {
        "id": 3,
        "label": "s . bump_main = * ctx . bumps . get (\"station\") . ok_or (error ! (EE :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "s . charge = hint . rotate_left (1) . wrapping_add (605) ;"
      },
      {
        "id": 5,
        "label": "s . turn = 3 ;"
      },
      {
        "id": 6,
        "label": "let mats = [2u64 , 3 , 5 , 8 , 13 , 21] ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "let a = m . rotate_left (((i as u32) % 3) + 1) ;"
      },
      {
        "id": 9,
        "label": "s . charge = s . charge . wrapping_add (a) . wrapping_mul (2) ;"
      },
      {
        "id": 10,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 24) as u32) + 3) ;"
      },
      {
        "id": 11,
        "label": "let mut heat = 1u8 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let melt = (s . charge ^ (* m + heat as u64)) . rotate_right (1) ;"
      },
      {
        "id": 14,
        "label": "s . charge = s . charge . wrapping_add (melt) . wrapping_mul (3) . wrapping_add (17 + heat as u64) ;"
      },
      {
        "id": 15,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 17) as u32) + 2) ;"
      },
      {
        "id": 16,
        "label": "heat = heat . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "s . charge > 820"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "let mut p = 1u8 ;"
      },
      {
        "id": 24,
        "label": "let mut carry = 0u64 ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let polish = (s . charge ^ (p as u64 * 19)) . rotate_left (p as u32) ;"
      },
      {
        "id": 27,
        "label": "carry = carry . wrapping_add (polish) ;"
      },
      {
        "id": 28,
        "label": "s . charge = s . charge . wrapping_add (polish) . wrapping_mul (2) ;"
      },
      {
        "id": 29,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 29) as u32) + 4) ;"
      },
      {
        "id": 30,
        "label": "p = p . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "s . charge = s . charge . rotate_right (1) . wrapping_add (carry) ;"
      },
      {
        "id": 33,
        "label": "s . turn = s . turn . saturating_add (((carry % 23) as u32) + 3) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "let coarse = [11u64 , 14 , 15] ;"
      },
      {
        "id": 36,
        "label": "Loop Start"
      },
      {
        "id": 37,
        "label": "let grind = (c . rotate_left (2) ^ s . charge) . wrapping_add (31) ;"
      },
      {
        "id": 38,
        "label": "s . charge = s . charge . wrapping_add (grind) . wrapping_mul (2) . rotate_left (1) ;"
      },
      {
        "id": 39,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 26) as u32) + 4) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "while"
      },
      {
        "from": 7,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 19,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 36,
        "to": 40,
        "label": "for"
      },
      {
        "from": 33,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  },
  {
    "name": "spend_queue",
    "nodes": [
      {
        "id": 43,
        "label": "Entry"
      },
      {
        "id": 44,
        "label": "let s = & mut ctx . accounts . station ;"
      },
      {
        "id": 45,
        "label": "Loop Start"
      },
      {
        "id": 46,
        "label": "let q = (queue_id . rotate_left (n) ^ s . charge) . wrapping_add (7 + n as u64) ;"
      },
      {
        "id": 47,
        "label": "s . charge = s . charge . wrapping_add (q) . rotate_right (1) . wrapping_mul (2) ;"
      },
      {
        "id": 48,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 33) as u32) + 3) ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "lamports > 560"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "let mut acc = lamports . rotate_left (2) ;"
      },
      {
        "id": 55,
        "label": "Loop Start"
      },
      {
        "id": 56,
        "label": "let d = (acc ^ (j as u64 * 37)) . rotate_left (1) ;"
      },
      {
        "id": 57,
        "label": "s . charge = s . charge . wrapping_add (d) . wrapping_mul (3) . wrapping_add (23 + j as u64) ;"
      },
      {
        "id": 58,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 28) as u32) + 5) ;"
      },
      {
        "id": 59,
        "label": "acc = acc . rotate_right (1) . wrapping_add (d) ;"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "s . charge = s . charge . rotate_left (2) . wrapping_add (acc) ;"
      },
      {
        "id": 62,
        "label": "s . turn = s . turn . saturating_add (((acc % 17) as u32) + 4) ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "let mut r = 1u8 ;"
      },
      {
        "id": 65,
        "label": "let mut bag = 0u64 ;"
      },
      {
        "id": 66,
        "label": "Loop Start"
      },
      {
        "id": 67,
        "label": "let e = (s . charge ^ (r as u64 * 9)) . rotate_right (1) ;"
      },
      {
        "id": 68,
        "label": "bag = bag . wrapping_add (e) ;"
      },
      {
        "id": 69,
        "label": "s . charge = s . charge . wrapping_add (e) . wrapping_mul (2) . wrapping_add (29 + r as u64) ;"
      },
      {
        "id": 70,
        "label": "s . turn = s . turn . saturating_add (((s . charge % 21) as u32) + 5) ;"
      },
      {
        "id": 71,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 72,
        "label": "Loop End"
      },
      {
        "id": 73,
        "label": "s . charge = s . charge . rotate_left (1) . wrapping_add (bag) ;"
      },
      {
        "id": 74,
        "label": "s . turn = s . turn . saturating_add (((bag % 19) as u32) + 3) ;"
      },
      {
        "id": 75,
        "label": "merge"
      },
      {
        "id": 76,
        "label": "let seeds = & [b\"queue_cell\" . as_ref () , s . owner . as_ref () , & queue_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 77,
        "label": "let cell = Pubkey :: create_program_address (& [b\"queue_cell\" , s . owner . as_ref () , & queue_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;"
      },
      {
        "id": 78,
        "label": "let ix = system_instruction :: transfer (& cell , & ctx . accounts . consumer . key () , lamports) ;"
      },
      {
        "id": 79,
        "label": "invoke_signed (& ix , & [ctx . accounts . queue_cell_hint . to_account_info () , ctx . accounts . consumer . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 80,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 45,
        "to": 49,
        "label": "for"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 55,
        "to": 60,
        "label": "for"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 50,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 66,
        "to": 72,
        "label": "while"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 62,
        "to": 75,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      }
    ]
  }
]