[
  {
    "name": "init_market",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mk = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "mk . owner = ctx . accounts . trader . key () ;"
      },
      {
        "id": 3,
        "label": "mk . bump_keep = * ctx . bumps . get (\"market\") . ok_or (error ! (EMK :: NoBump)) ? ;"
      },
      {
        "id": 4,
        "label": "mk . tokens = seed . rotate_left (3) . wrapping_add (77) ;"
      },
      {
        "id": 5,
        "label": "mk . turns = 3 ;"
      },
      {
        "id": 6,
        "label": "let base = mk . tokens . rotate_right (2) . wrapping_add (33) ;"
      },
      {
        "id": 7,
        "label": "let bonus = mk . tokens . rotate_left (1) . wrapping_add (19) ;"
      },
      {
        "id": 8,
        "label": "let mut idx = 1u8 ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "let adj = (base ^ bonus . wrapping_mul (idx as u64)) . rotate_right (1) ;"
      },
      {
        "id": 11,
        "label": "mk . tokens = mk . tokens . wrapping_add (adj) . wrapping_mul (2) . wrapping_add (11 + idx as u64) ;"
      },
      {
        "id": 12,
        "label": "mk . turns = mk . turns . saturating_add (((mk . tokens % 27) as u32) + 5) ;"
      },
      {
        "id": 13,
        "label": "idx = idx . saturating_add (1) ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "mk . tokens > seed"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "let mut gain = seed . rotate_left (2) ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "let step = (gain ^ (i as u64 * 29)) . rotate_left (1) ;"
      },
      {
        "id": 22,
        "label": "gain = gain . wrapping_add (step) ;"
      },
      {
        "id": 23,
        "label": "mk . tokens = mk . tokens . wrapping_add (step) . wrapping_mul (3) . wrapping_add (7 + i as u64) ;"
      },
      {
        "id": 24,
        "label": "mk . turns = mk . turns . saturating_add (((mk . tokens % 25) as u32) + 4) ;"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "while"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 20,
        "to": 25,
        "label": "for"
      },
      {
        "from": 15,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  },
  {
    "name": "settle_trade",
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "let mk = & mut ctx . accounts . market ;"
      },
      {
        "id": 32,
        "label": "Loop Start"
      },
      {
        "id": 33,
        "label": "let swing = (mk . tokens ^ (r as u64 * 31)) . rotate_left (1) ;"
      },
      {
        "id": 34,
        "label": "mk . tokens = mk . tokens . wrapping_add (swing) . wrapping_mul (2) . wrapping_add (13 + r as u64) ;"
      },
      {
        "id": 35,
        "label": "mk . turns = mk . turns . saturating_add (((mk . tokens % 31) as u32) + 4) ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "lamports > 450"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "let mut steps = lamports . rotate_left (2) ;"
      },
      {
        "id": 42,
        "label": "let mut u = 1u8 ;"
      },
      {
        "id": 43,
        "label": "Loop Start"
      },
      {
        "id": 44,
        "label": "let z = (steps ^ (u as u64 * 17)) . rotate_right (1) ;"
      },
      {
        "id": 45,
        "label": "steps = steps . wrapping_add (z) ;"
      },
      {
        "id": 46,
        "label": "mk . tokens = mk . tokens . wrapping_add (z) . wrapping_mul (3) . wrapping_add (9 + u as u64) ;"
      },
      {
        "id": 47,
        "label": "mk . turns = mk . turns . saturating_add (((mk . tokens % 28) as u32) + 4) ;"
      },
      {
        "id": 48,
        "label": "u = u . saturating_add (1) ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "No-op"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "let seeds = & [b\"order_purse\" . as_ref () , mk . owner . as_ref () , & order_id . to_le_bytes () , core :: slice :: from_ref (& external_bump) ,] ;"
      },
      {
        "id": 54,
        "label": "let target = Pubkey :: create_program_address (& [b\"order_purse\" , mk . owner . as_ref () , & order_id . to_le_bytes () , & [external_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EMK :: SeedCompute)) ? ;"
      },
      {
        "id": 55,
        "label": "let ix = system_instruction :: transfer (& target , & ctx . accounts . counterparty . key () , lamports) ;"
      },
      {
        "id": 56,
        "label": "invoke_signed (& ix , & [ctx . accounts . order_hint . to_account_info () , ctx . accounts . counterparty . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 32,
        "to": 36,
        "label": "for"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 43,
        "to": 49,
        "label": "while"
      },
      {
        "from": 37,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      }
    ]
  }
]