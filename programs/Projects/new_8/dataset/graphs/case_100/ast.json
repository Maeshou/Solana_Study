[
  {
    "name": "initialize_vault",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitializeVault >",
      "seed_hint: u64"
    ],
    "attributes": [],
    "body": [
      "let v = & mut ctx . accounts . vault ;",
      "v . owner = ctx . accounts . user . key () ;",
      "v . bump_saved = * ctx . bumps . get (\"vault\") . ok_or (error ! (VaultErr :: MissingBump)) ? ;",
      "v . energy = seed_hint . rotate_left (2) . wrapping_add (41) ;",
      "v . turns = 1 ;",
      "for k in 1u8 .. 4u8",
      "{",
      "let t = (v . energy ^ (k as u64 * 13)) . rotate_right (1) ;",
      "v . energy = v . energy . wrapping_add (t) . wrapping_mul (2) . wrapping_add (9 + k as u64) ;",
      "v . turns = v . turns . saturating_add (((v . energy % 27) as u32) + 3) ;",
      "}",
      "if v . energy > seed_hint",
      "{",
      "let add = v . energy . rotate_left (1) . wrapping_add (17) ;",
      "v . energy = v . energy . wrapping_add (add) . wrapping_mul (2) ;",
      "v . turns = v . turns . saturating_add (((v . energy % 19) as u32) + 4) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "withdraw_with_user_bump",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < WithdrawWithUserBump >",
      "user_bump: u8",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let v = & ctx . accounts . vault ;",
      "let seeds = & [b\"vault\" . as_ref () , v . owner . as_ref () , core :: slice :: from_ref (& user_bump) ,] ;",
      "let derived = Pubkey :: create_program_address (& [b\"vault\" , v . owner . as_ref () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (VaultErr :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& derived , & ctx . accounts . recipient . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . vault_pda_hint . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;",
      "if lamports > 500",
      "{",
      "let mut i = 1u8 ;",
      "let mut acc = lamports . rotate_left (2) ;",
      "while i < 3",
      "{",
      "let z = (acc ^ (i as u64 * 21)) . rotate_right (1) ;",
      "acc = acc . wrapping_add (z) ;",
      "i = i . saturating_add (1) ;",
      "}",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitializeVault",
    "node_type": "struct",
    "fields": [
      {
        "name": "vault",
        "attribute": "# [account (init , payer = user , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"vault\" , user . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , VaultState >"
      },
      {
        "name": "user",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "WithdrawWithUserBump",
    "node_type": "struct",
    "fields": [
      {
        "name": "vault",
        "attribute": "# [account (mut , seeds = [b\"vault\" , user . key () . as_ref ()] , bump = vault . bump_saved)]",
        "field_type": "Account < 'info , VaultState >"
      },
      {
        "name": "vault_pda_hint",
        "attribute": "# [doc = \" CHECK: 未検証のヒント口座\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "recipient",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "VaultState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "energy",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "turns",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_saved",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]