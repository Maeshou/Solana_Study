[
  {
    "name": "enroll_relic",
    "inputs": [
      "ctx: Context < EnrollRelic >",
      "label: Vec < u8 >",
      "value: u64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut l = label . clone () ;"
      },
      {
        "id": 2,
        "label": "if l . len () > 22 { let over = l . len () - 22 ; for i in 0 .. over { let last = * l . last () . unwrap_or (& b' ') ; l . truncate (l . len () . saturating_sub (1)) ; if (last & 1) == 1 { msg ! (\"drop {} val={}\" , i , last) ; } } }"
      },
      {
        "id": 3,
        "label": "let over = l . len () - 22 ;"
      },
      {
        "id": 4,
        "label": "for i in 0 .. over { let last = * l . last () . unwrap_or (& b' ') ; l . truncate (l . len () . saturating_sub (1)) ; if (last & 1) == 1 { msg ! (\"drop {} val={}\" , i , last) ; } }"
      },
      {
        "id": 5,
        "label": "let last = * l . last () . unwrap_or (& b' ') ;"
      },
      {
        "id": 6,
        "label": "l . truncate (l . len () . saturating_sub (1)) ;"
      },
      {
        "id": 7,
        "label": "if (last & 1) == 1 { msg ! (\"drop {} val={}\" , i , last) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"drop {} val={}\" , i , last) ;"
      },
      {
        "id": 9,
        "label": "let mut sig : u64 = 97 ;"
      },
      {
        "id": 10,
        "label": "for (i , b) in l . iter () . enumerate () { sig = sig . wrapping_mul (313) . wrapping_add ((* b as u64) . wrapping_add (i as u64)) ; if * b == b'#' { sig = sig . wrapping_add (1111) ; } }"
      },
      {
        "id": 11,
        "label": "sig = sig . wrapping_mul (313) . wrapping_add ((* b as u64) . wrapping_add (i as u64)) ;"
      },
      {
        "id": 12,
        "label": "if * b == b'#' { sig = sig . wrapping_add (1111) ; }"
      },
      {
        "id": 13,
        "label": "sig = sig . wrapping_add (1111) ;"
      },
      {
        "id": 14,
        "label": "let seeds = [& ctx . accounts . curator . key () . to_bytes () [..] , & l [..]] ;"
      },
      {
        "id": 15,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (RelErr :: Cell)) ? ;"
      },
      {
        "id": 16,
        "label": "if addr != ctx . accounts . relic_cell . key () { msg ! (\"enroll mismatch\") ; return Err (error ! (RelErr :: Cell)) ; }"
      },
      {
        "id": 17,
        "label": "msg ! (\"enroll mismatch\") ;"
      },
      {
        "id": 18,
        "label": "return Err (error ! (RelErr :: Cell)) ;"
      },
      {
        "id": 19,
        "label": "let r = & mut ctx . accounts . relic ;"
      },
      {
        "id": 20,
        "label": "r . curator = ctx . accounts . curator . key () ;"
      },
      {
        "id": 21,
        "label": "r . label = l ;"
      },
      {
        "id": 22,
        "label": "let mut v = value ;"
      },
      {
        "id": 23,
        "label": "if v > 5_000_000_000 { let d = v - 5_000_000_000 ; v = 5_000_000_000 ; r . signature = r . signature . wrapping_add (d) ; }"
      },
      {
        "id": 24,
        "label": "let d = v - 5_000_000_000 ;"
      },
      {
        "id": 25,
        "label": "v = 5_000_000_000 ;"
      },
      {
        "id": 26,
        "label": "r . signature = r . signature . wrapping_add (d) ;"
      },
      {
        "id": 27,
        "label": "let mut burst = 0u64 ;"
      },
      {
        "id": 28,
        "label": "for k in 0 .. 4 { burst = burst . wrapping_add (((k + 5) * 17) as u64) ; }"
      },
      {
        "id": 29,
        "label": "burst = burst . wrapping_add (((k + 5) * 17) as u64) ;"
      },
      {
        "id": 30,
        "label": "r . value = r . value . saturating_add (v) ;"
      },
      {
        "id": 31,
        "label": "r . signature = r . signature . wrapping_add (sig) . wrapping_add (burst) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: over"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: l"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: over"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: l"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: last"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: l"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: last"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: l"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: seeds"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: l"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: addr"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: seeds"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: addr"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: r"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: l"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: v"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: v"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: v"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: v"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: d"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: v"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: v"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: d"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: burst"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: burst"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: burst"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: burst"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: burst"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: v"
      },
      {
        "from": 19,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: burst"
      }
    ]
  },
  {
    "name": "adjust_value",
    "inputs": [
      "ctx: Context < AdjustValue >",
      "diff: i64",
      "bump: u8"
    ],
    "nodes": [
      {
        "id": 33,
        "label": "Entry"
      },
      {
        "id": 34,
        "label": "let tag = ctx . accounts . relic . label . clone () ;"
      },
      {
        "id": 35,
        "label": "if tag . first () . copied () . unwrap_or (b'?') == b'!' { let mut fx = 0u64 ; for i in 0 .. tag . len () { fx = fx . wrapping_add ((tag [i] as u64) . wrapping_add (i as u64)) ; } ctx . accounts . relic . signature = ctx . accounts . relic . signature . wrapping_add (fx) ; }"
      },
      {
        "id": 36,
        "label": "let mut fx = 0u64 ;"
      },
      {
        "id": 37,
        "label": "for i in 0 .. tag . len () { fx = fx . wrapping_add ((tag [i] as u64) . wrapping_add (i as u64)) ; }"
      },
      {
        "id": 38,
        "label": "fx = fx . wrapping_add ((tag [i] as u64) . wrapping_add (i as u64)) ;"
      },
      {
        "id": 39,
        "label": "ctx . accounts . relic . signature = ctx . accounts . relic . signature . wrapping_add (fx) ;"
      },
      {
        "id": 40,
        "label": "let seeds = [& ctx . accounts . curator . key () . to_bytes () [..] , & tag [..]] ;"
      },
      {
        "id": 41,
        "label": "let addr = Pubkey :: create_program_address (& seeds , & ctx . program_id , & [bump]) . map_err (| _ | error ! (RelErr :: Cell)) ? ;"
      },
      {
        "id": 42,
        "label": "if addr != ctx . accounts . relic_cell . key () { msg ! (\"adjust mismatch\") ; return Err (error ! (RelErr :: Cell)) ; }"
      },
      {
        "id": 43,
        "label": "msg ! (\"adjust mismatch\") ;"
      },
      {
        "id": 44,
        "label": "return Err (error ! (RelErr :: Cell)) ;"
      },
      {
        "id": 45,
        "label": "let r = & mut ctx . accounts . relic ;"
      },
      {
        "id": 46,
        "label": "if diff >= 0 { let add = diff as u64 ; let mut steps = 0 ; while steps < 3 { r . value = r . value . saturating_add (add / 3) ; r . signature = r . signature . wrapping_add ((steps + 1) as u64) ; steps = steps . saturating_add (1) ; } } else { let dec = (diff . abs ()) as u64 ; let mut t = 0 ; while t < 2 { let bite = (dec / 2) . max (1) ; r . value = r . value . saturating_sub (bite) ; r . signature = r . signature . wrapping_add (9) ; t = t . saturating_add (1) ; } }"
      },
      {
        "id": 47,
        "label": "let add = diff as u64 ;"
      },
      {
        "id": 48,
        "label": "let mut steps = 0 ;"
      },
      {
        "id": 49,
        "label": "while steps < 3 { r . value = r . value . saturating_add (add / 3) ; r . signature = r . signature . wrapping_add ((steps + 1) as u64) ; steps = steps . saturating_add (1) ; }"
      },
      {
        "id": 50,
        "label": "r . value = r . value . saturating_add (add / 3) ;"
      },
      {
        "id": 51,
        "label": "r . signature = r . signature . wrapping_add ((steps + 1) as u64) ;"
      },
      {
        "id": 52,
        "label": "steps = steps . saturating_add (1) ;"
      },
      {
        "id": 53,
        "label": "let dec = (diff . abs ()) as u64 ;"
      },
      {
        "id": 54,
        "label": "let mut t = 0 ;"
      },
      {
        "id": 55,
        "label": "while t < 2 { let bite = (dec / 2) . max (1) ; r . value = r . value . saturating_sub (bite) ; r . signature = r . signature . wrapping_add (9) ; t = t . saturating_add (1) ; }"
      },
      {
        "id": 56,
        "label": "let bite = (dec / 2) . max (1) ;"
      },
      {
        "id": 57,
        "label": "r . value = r . value . saturating_sub (bite) ;"
      },
      {
        "id": 58,
        "label": "r . signature = r . signature . wrapping_add (9) ;"
      },
      {
        "id": 59,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 60,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 34,
        "to": 34,
        "label": "def: tag"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: tag"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: tag"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: tag"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: fx"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: tag"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: fx"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: fx"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: tag"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: fx"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: fx"
      },
      {
        "from": 34,
        "to": 38,
        "label": "data_dep: tag"
      },
      {
        "from": 36,
        "to": 39,
        "label": "data_dep: fx"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: seeds"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: tag"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: addr"
      },
      {
        "from": 40,
        "to": 41,
        "label": "data_dep: seeds"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: addr"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: r"
      },
      {
        "from": 47,
        "to": 47,
        "label": "def: add"
      },
      {
        "from": 48,
        "to": 48,
        "label": "def: steps"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: steps"
      },
      {
        "from": 45,
        "to": 49,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 49,
        "label": "data_dep: r"
      },
      {
        "from": 47,
        "to": 49,
        "label": "data_dep: add"
      },
      {
        "from": 45,
        "to": 49,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 49,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: steps"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: steps"
      },
      {
        "from": 48,
        "to": 49,
        "label": "data_dep: steps"
      },
      {
        "from": 45,
        "to": 50,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 50,
        "label": "data_dep: r"
      },
      {
        "from": 47,
        "to": 50,
        "label": "data_dep: add"
      },
      {
        "from": 45,
        "to": 51,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 51,
        "label": "data_dep: r"
      },
      {
        "from": 48,
        "to": 51,
        "label": "data_dep: steps"
      },
      {
        "from": 48,
        "to": 52,
        "label": "data_dep: steps"
      },
      {
        "from": 48,
        "to": 52,
        "label": "data_dep: steps"
      },
      {
        "from": 53,
        "to": 53,
        "label": "def: dec"
      },
      {
        "from": 54,
        "to": 54,
        "label": "def: t"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: t"
      },
      {
        "from": 53,
        "to": 55,
        "label": "data_dep: dec"
      },
      {
        "from": 45,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 55,
        "label": "data_dep: r"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: t"
      },
      {
        "from": 54,
        "to": 55,
        "label": "data_dep: t"
      },
      {
        "from": 56,
        "to": 56,
        "label": "def: bite"
      },
      {
        "from": 53,
        "to": 56,
        "label": "data_dep: dec"
      },
      {
        "from": 45,
        "to": 57,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 57,
        "label": "data_dep: r"
      },
      {
        "from": 56,
        "to": 57,
        "label": "data_dep: bite"
      },
      {
        "from": 45,
        "to": 58,
        "label": "data_dep: r"
      },
      {
        "from": 45,
        "to": 58,
        "label": "data_dep: r"
      },
      {
        "from": 54,
        "to": 59,
        "label": "data_dep: t"
      },
      {
        "from": 54,
        "to": 59,
        "label": "data_dep: t"
      }
    ]
  }
]