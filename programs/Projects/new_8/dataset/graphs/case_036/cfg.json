[
  {
    "name": "init_workshop",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ws = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 2,
        "label": "ws . curator = ctx . accounts . curator . key () ;"
      },
      {
        "id": 3,
        "label": "ws . capacity = capacity % 64 + 8 ;"
      },
      {
        "id": 4,
        "label": "ws . queue_len = capacity as u32 / 2 + 3 ;"
      },
      {
        "id": 5,
        "label": "ws . tokens_issued = 11 ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "ws . queue_len < 2"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "ws . queue_len = 2 ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "No-op"
      },
      {
        "id": 13,
        "label": "merge"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 6,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "print_token",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let ws = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 17,
        "label": "let seeds = & [b\"print_sink\" , ctx . accounts . curator . key . as_ref () , & [user_bump]] ;"
      },
      {
        "id": 18,
        "label": "let expect = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (CraftErr :: SeedBad)) ? ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "expect != ctx . accounts . print_sink . key ()"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "return Err (error ! (CraftErr :: SinkMismatch)) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "let mut cycles = series as u32 % 17 + 5 ;"
      },
      {
        "id": 28,
        "label": "let mut wave = 2u32 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "ws . tokens_issued = ws . tokens_issued . saturating_add (wave) ;"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "ws . tokens_issued % 3 != 1"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "ws . queue_len = ws . queue_len . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "No-op"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "wave = wave . saturating_add (4) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 31,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 29,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      }
    ]
  }
]