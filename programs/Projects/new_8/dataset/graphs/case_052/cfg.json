[
  {
    "name": "init_profile",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let profile = & mut ctx . accounts . profile ;"
      },
      {
        "id": 2,
        "label": "profile . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "profile . quota = quota % 500 + 40 ;"
      },
      {
        "id": 4,
        "label": "profile . credits = 7 ;"
      },
      {
        "id": 5,
        "label": "profile . audit = 3 ;"
      },
      {
        "id": 6,
        "label": "let canonical_bump = * ctx . bumps . get (\"profile\") . ok_or (error ! (ProfileErr :: MissingBump)) ? ;"
      },
      {
        "id": 7,
        "label": "profile . saved_bump = canonical_bump ;"
      },
      {
        "id": 8,
        "label": "let mut seed_hash = profile . owner . to_bytes () [0] as u32 ;"
      },
      {
        "id": 9,
        "label": "seed_hash = seed_hash . saturating_add ((profile . quota % 9) + 1) ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "seed_hash % 3 != 1"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "profile . audit = profile . audit . saturating_add (seed_hash % 7 + 2) ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "No-op"
      },
      {
        "id": 17,
        "label": "merge"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "charge",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let profile = & mut ctx . accounts . profile ;"
      },
      {
        "id": 21,
        "label": "let seeds = & [b\"fee_sink\" , profile . owner . as_ref () , & [profile . saved_bump]] ;"
      },
      {
        "id": 22,
        "label": "let derived = Pubkey :: create_program_address (seeds , ctx . program_id) . map_err (| _ | error ! (ProfileErr :: SeedCompute)) ? ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "derived != ctx . accounts . fee_sink . key ()"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "return Err (error ! (ProfileErr :: FeeSinkMismatch)) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "let ix = Instruction { program_id : * ctx . program_id , accounts : vec ! [AccountMeta :: new (profile . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , true) ,] , data : amount . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 32,
        "label": "let signer = & [b\"fee_sink\" , profile . owner . as_ref () , & [profile . saved_bump]] ;"
      },
      {
        "id": 33,
        "label": "invoke_signed (& ix , & [profile . to_account_info () , ctx . accounts . user . to_account_info ()] , & [signer] ,) ? ;"
      },
      {
        "id": 34,
        "label": "let mut step = 2u32 ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "profile . credits = profile . credits . saturating_add (step) ;"
      },
      {
        "id": 37,
        "label": "let modv = (profile . credits % 5) + 2 ;"
      },
      {
        "id": 38,
        "label": "profile . quota = profile . quota . saturating_add (modv) ;"
      },
      {
        "id": 39,
        "label": "step = step . saturating_add (2) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "amount > 1000"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let adj = (amount % 13) as u32 + 3 ;"
      },
      {
        "id": 46,
        "label": "profile . audit = profile . audit . saturating_add (adj) ;"
      },
      {
        "id": 47,
        "label": "let marker = profile . owner . to_bytes () [1] ;"
      },
      {
        "id": 48,
        "label": "profile . credits = profile . credits . saturating_add ((marker % 7) as u32 + 1) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 41,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]