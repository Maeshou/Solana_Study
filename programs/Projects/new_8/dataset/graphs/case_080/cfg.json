[
  {
    "name": "setup_forge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "f . owner = ctx . accounts . smith . key () ;"
      },
      {
        "id": 3,
        "label": "f . bump_core = * ctx . bumps . get (\"forge\") . ok_or (error ! (EE :: MissingBump)) ? ;"
      },
      {
        "id": 4,
        "label": "f . heat = salt . rotate_right (3) . wrapping_add (811) ;"
      },
      {
        "id": 5,
        "label": "f . phase = 2 ;"
      },
      {
        "id": 6,
        "label": "let window = [4u64 , 7 , 9 , 16 , 25] ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "let tw = w . rotate_left (((i as u32) % 4) + 1) ;"
      },
      {
        "id": 9,
        "label": "f . heat = f . heat . wrapping_add (tw) . wrapping_mul (2) . rotate_right (1) ;"
      },
      {
        "id": 10,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 22) as u32) + 4) ;"
      },
      {
        "id": 11,
        "label": "let mut spin = 1u8 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let c = (f . heat ^ (* w + spin as u64)) . rotate_left (spin as u32) ;"
      },
      {
        "id": 14,
        "label": "f . heat = f . heat . wrapping_add (c) . wrapping_mul (3) . wrapping_add (17 + spin as u64) ;"
      },
      {
        "id": 15,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 19) as u32) + 3) ;"
      },
      {
        "id": 16,
        "label": "spin = spin . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "f . phase > 8"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "let mut t = 1u8 ;"
      },
      {
        "id": 24,
        "label": "let mut memo = 0u64 ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let e = (f . heat ^ (t as u64 * 11)) . rotate_right (1) ;"
      },
      {
        "id": 27,
        "label": "memo = memo . wrapping_add (e) ;"
      },
      {
        "id": 28,
        "label": "f . heat = f . heat . rotate_left (((f . phase % 3) + 1) as u32) . wrapping_add (e) ;"
      },
      {
        "id": 29,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 31) as u32) + 5) ;"
      },
      {
        "id": 30,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "f . heat = f . heat . wrapping_add (memo) . wrapping_mul (2) ;"
      },
      {
        "id": 33,
        "label": "f . phase = f . phase . saturating_add (((memo % 23) as u32) + 4) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "let bag = [6u64 , 10 , 14 , 18] ;"
      },
      {
        "id": 36,
        "label": "Loop Start"
      },
      {
        "id": 37,
        "label": "let m = (b . rotate_left (1) ^ f . heat) . wrapping_add (29) ;"
      },
      {
        "id": 38,
        "label": "f . heat = f . heat . rotate_right (2) . wrapping_add (m) . wrapping_mul (2) ;"
      },
      {
        "id": 39,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 27) as u32) + 4) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "while"
      },
      {
        "from": 7,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 19,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 36,
        "to": 40,
        "label": "for"
      },
      {
        "from": 33,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  },
  {
    "name": "siphon_energy",
    "nodes": [
      {
        "id": 43,
        "label": "Entry"
      },
      {
        "id": 44,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 45,
        "label": "Loop Start"
      },
      {
        "id": 46,
        "label": "let arc = (shard_id ^ (k as u64 * 13)) . rotate_left (((f . phase % 4) + 1) as u32) ;"
      },
      {
        "id": 47,
        "label": "f . heat = f . heat . wrapping_add (arc) . wrapping_mul (2) . wrapping_add (11 + k as u64) ;"
      },
      {
        "id": 48,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 33) as u32) + 3) ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "lamports > 500"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "let mut carry = lamports . rotate_left (2) ;"
      },
      {
        "id": 55,
        "label": "Loop Start"
      },
      {
        "id": 56,
        "label": "let d = (carry ^ (j as u64 * 41)) . rotate_left (1) ;"
      },
      {
        "id": 57,
        "label": "f . heat = f . heat . wrapping_add (d) . wrapping_mul (3) . wrapping_add (23 + j as u64) ;"
      },
      {
        "id": 58,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 29) as u32) + 5) ;"
      },
      {
        "id": 59,
        "label": "carry = carry . rotate_right (1) . wrapping_add (d) ;"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "f . heat = f . heat . rotate_left (1) . wrapping_add (carry) . wrapping_mul (2) ;"
      },
      {
        "id": 62,
        "label": "f . phase = f . phase . saturating_add (((carry % 17) as u32) + 4) ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "let deck = [9u64 , 12 , 15] ;"
      },
      {
        "id": 65,
        "label": "let mut acc = 0u64 ;"
      },
      {
        "id": 66,
        "label": "Loop Start"
      },
      {
        "id": 67,
        "label": "let m = (f . heat ^ v . rotate_left (2)) . wrapping_add (31) ;"
      },
      {
        "id": 68,
        "label": "acc = acc . wrapping_add (m) ;"
      },
      {
        "id": 69,
        "label": "f . heat = f . heat . rotate_right (2) . wrapping_add (m) . wrapping_mul (2) ;"
      },
      {
        "id": 70,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 25) as u32) + 4) ;"
      },
      {
        "id": 71,
        "label": "Loop End"
      },
      {
        "id": 72,
        "label": "f . heat = f . heat . wrapping_add (acc) . rotate_left (2) ;"
      },
      {
        "id": 73,
        "label": "f . phase = f . phase . saturating_add (((acc % 19) as u32) + 3) ;"
      },
      {
        "id": 74,
        "label": "merge"
      },
      {
        "id": 75,
        "label": "if statement"
      },
      {
        "id": 76,
        "label": "predicate"
      },
      {
        "id": 77,
        "label": "f . phase & 1 > 0"
      },
      {
        "id": 78,
        "label": "True body"
      },
      {
        "id": 79,
        "label": "let mut trail = f . heat ;"
      },
      {
        "id": 80,
        "label": "Loop Start"
      },
      {
        "id": 81,
        "label": "trail = trail . rotate_left (((t % 3) + 1) as u32) . wrapping_add (27 + t as u64) ;"
      },
      {
        "id": 82,
        "label": "f . heat = f . heat . wrapping_add (trail) . wrapping_mul (2) ;"
      },
      {
        "id": 83,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 31) as u32) + 4) ;"
      },
      {
        "id": 84,
        "label": "Loop End"
      },
      {
        "id": 85,
        "label": "False body"
      },
      {
        "id": 86,
        "label": "let mut z = 1u8 ;"
      },
      {
        "id": 87,
        "label": "let mut mix = 0u64 ;"
      },
      {
        "id": 88,
        "label": "Loop Start"
      },
      {
        "id": 89,
        "label": "let e = (f . heat ^ (z as u64 * 7)) . rotate_right (1) ;"
      },
      {
        "id": 90,
        "label": "mix = mix . wrapping_add (e) ;"
      },
      {
        "id": 91,
        "label": "f . heat = f . heat . wrapping_add (e) . wrapping_mul (3) . wrapping_add (19 + z as u64) ;"
      },
      {
        "id": 92,
        "label": "f . phase = f . phase . saturating_add (((f . heat % 23) as u32) + 5) ;"
      },
      {
        "id": 93,
        "label": "z = z . saturating_add (1) ;"
      },
      {
        "id": 94,
        "label": "Loop End"
      },
      {
        "id": 95,
        "label": "f . heat = f . heat . rotate_left (1) . wrapping_add (mix) ;"
      },
      {
        "id": 96,
        "label": "f . phase = f . phase . saturating_add (((mix % 17) as u32) + 3) ;"
      },
      {
        "id": 97,
        "label": "merge"
      },
      {
        "id": 98,
        "label": "let seeds = & [b\"energy_cell\" . as_ref () , f . owner . as_ref () , & shard_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 99,
        "label": "let cell = Pubkey :: create_program_address (& [b\"energy_cell\" , f . owner . as_ref () , & shard_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;"
      },
      {
        "id": 100,
        "label": "let ix = system_instruction :: transfer (& cell , & ctx . accounts . drain_to . key () , lamports) ;"
      },
      {
        "id": 101,
        "label": "invoke_signed (& ix , & [ctx . accounts . energy_cell_hint . to_account_info () , ctx . accounts . drain_to . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 102,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 45,
        "to": 49,
        "label": "for"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 55,
        "to": 60,
        "label": "for"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 50,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 66,
        "to": 71,
        "label": "for"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 62,
        "to": 74,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "predicate"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "true"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 80,
        "to": 84,
        "label": "for"
      },
      {
        "from": 75,
        "to": 85,
        "label": "false"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 88,
        "to": 94,
        "label": "while"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 84,
        "to": 97,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      }
    ]
  }
]