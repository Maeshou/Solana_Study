[
  {
    "name": "setup_forge",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetupForge >",
      "salt: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . forge ;",
      "f . owner = ctx . accounts . smith . key () ;",
      "f . bump_core = * ctx . bumps . get (\"forge\") . ok_or (error ! (EE :: MissingBump)) ? ;",
      "f . heat = salt . rotate_right (3) . wrapping_add (811) ;",
      "f . phase = 2 ;",
      "let window = [4u64 , 7 , 9 , 16 , 25] ;",
      "for (i , w) in window . iter () . enumerate ()",
      "{",
      "let tw = w . rotate_left (((i as u32) % 4) + 1) ;",
      "f . heat = f . heat . wrapping_add (tw) . wrapping_mul (2) . rotate_right (1) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 22) as u32) + 4) ;",
      "let mut spin = 1u8 ;",
      "while spin < 4",
      "{",
      "let c = (f . heat ^ (* w + spin as u64)) . rotate_left (spin as u32) ;",
      "f . heat = f . heat . wrapping_add (c) . wrapping_mul (3) . wrapping_add (17 + spin as u64) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 19) as u32) + 3) ;",
      "spin = spin . saturating_add (1) ;",
      "}",
      "}",
      "if f . phase > 8",
      "{",
      "let mut t = 1u8 ;",
      "let mut memo = 0u64 ;",
      "while t < 5",
      "{",
      "let e = (f . heat ^ (t as u64 * 11)) . rotate_right (1) ;",
      "memo = memo . wrapping_add (e) ;",
      "f . heat = f . heat . rotate_left (((f . phase % 3) + 1) as u32) . wrapping_add (e) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 31) as u32) + 5) ;",
      "t = t . saturating_add (1) ;",
      "} f . heat = f . heat . wrapping_add (memo) . wrapping_mul (2) ;",
      "f . phase = f . phase . saturating_add (((memo % 23) as u32) + 4) ;",
      "} else",
      "{",
      "let bag = [6u64 , 10 , 14 , 18] ;",
      "for b in bag",
      "{",
      "let m = (b . rotate_left (1) ^ f . heat) . wrapping_add (29) ;",
      "f . heat = f . heat . rotate_right (2) . wrapping_add (m) . wrapping_mul (2) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 27) as u32) + 4) ;",
      "}",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "siphon_energy",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SiphonEnergy >",
      "shard_id: u64",
      "user_bump: u8",
      "lamports: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . forge ;",
      "for k in 0 .. 5",
      "{",
      "let arc = (shard_id ^ (k as u64 * 13)) . rotate_left (((f . phase % 4) + 1) as u32) ;",
      "f . heat = f . heat . wrapping_add (arc) . wrapping_mul (2) . wrapping_add (11 + k as u64) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 33) as u32) + 3) ;",
      "}",
      "if lamports > 500",
      "{",
      "let mut carry = lamports . rotate_left (2) ;",
      "for j in 0 .. 3",
      "{",
      "let d = (carry ^ (j as u64 * 41)) . rotate_left (1) ;",
      "f . heat = f . heat . wrapping_add (d) . wrapping_mul (3) . wrapping_add (23 + j as u64) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 29) as u32) + 5) ;",
      "carry = carry . rotate_right (1) . wrapping_add (d) ;",
      "} f . heat = f . heat . rotate_left (1) . wrapping_add (carry) . wrapping_mul (2) ;",
      "f . phase = f . phase . saturating_add (((carry % 17) as u32) + 4) ;",
      "} else",
      "{",
      "let deck = [9u64 , 12 , 15] ;",
      "let mut acc = 0u64 ;",
      "for v in deck",
      "{",
      "let m = (f . heat ^ v . rotate_left (2)) . wrapping_add (31) ;",
      "acc = acc . wrapping_add (m) ;",
      "f . heat = f . heat . rotate_right (2) . wrapping_add (m) . wrapping_mul (2) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 25) as u32) + 4) ;",
      "} f . heat = f . heat . wrapping_add (acc) . rotate_left (2) ;",
      "f . phase = f . phase . saturating_add (((acc % 19) as u32) + 3) ;",
      "}",
      "if f . phase & 1 > 0",
      "{",
      "let mut trail = f . heat ;",
      "for t in 0 .. 4",
      "{",
      "trail = trail . rotate_left (((t % 3) + 1) as u32) . wrapping_add (27 + t as u64) ;",
      "f . heat = f . heat . wrapping_add (trail) . wrapping_mul (2) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 31) as u32) + 4) ;",
      "} } else",
      "{",
      "let mut z = 1u8 ;",
      "let mut mix = 0u64 ;",
      "while z < 4",
      "{",
      "let e = (f . heat ^ (z as u64 * 7)) . rotate_right (1) ;",
      "mix = mix . wrapping_add (e) ;",
      "f . heat = f . heat . wrapping_add (e) . wrapping_mul (3) . wrapping_add (19 + z as u64) ;",
      "f . phase = f . phase . saturating_add (((f . heat % 23) as u32) + 5) ;",
      "z = z . saturating_add (1) ;",
      "} f . heat = f . heat . rotate_left (1) . wrapping_add (mix) ;",
      "f . phase = f . phase . saturating_add (((mix % 17) as u32) + 3) ;",
      "}",
      "let seeds = & [b\"energy_cell\" . as_ref () , f . owner . as_ref () , & shard_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;",
      "let cell = Pubkey :: create_program_address (& [b\"energy_cell\" , f . owner . as_ref () , & shard_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EE :: SeedCompute)) ? ;",
      "let ix = system_instruction :: transfer (& cell , & ctx . accounts . drain_to . key () , lamports) ;",
      "invoke_signed (& ix , & [ctx . accounts . energy_cell_hint . to_account_info () , ctx . accounts . drain_to . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "SetupForge",
    "node_type": "struct",
    "fields": [
      {
        "name": "forge",
        "attribute": "# [account (init , payer = smith , space = 8 + 32 + 8 + 4 + 1 , seeds = [b\"forge\" , smith . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , ForgeState >"
      },
      {
        "name": "smith",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SiphonEnergy",
    "node_type": "struct",
    "fields": [
      {
        "name": "forge",
        "attribute": "# [account (mut , seeds = [b\"forge\" , smith . key () . as_ref ()] , bump = forge . bump_core)]",
        "field_type": "Account < 'info , ForgeState >"
      },
      {
        "name": "energy_cell_hint",
        "attribute": "# [doc = \" CHECK 未検証\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "drain_to",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "smith",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ForgeState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "heat",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "phase",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "bump_core",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]