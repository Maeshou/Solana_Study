[
  {
    "name": "init_alchemy",
    "inputs": [
      "ctx: Context < InitAlchemy >",
      "mana_seed: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . alchemy ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . mage . key () ;"
      },
      {
        "id": 3,
        "label": "st . bump_saved = * ctx . bumps . get (\"alchemy\") . ok_or (error ! (EA :: NoBump)) ? ;"
      },
      {
        "id": 4,
        "label": "st . mana = mana_seed . rotate_left (2) . wrapping_add (101) ;"
      },
      {
        "id": 5,
        "label": "st . steps = 2 ;"
      },
      {
        "id": 6,
        "label": "if st . mana > 200 { let mut values = Vec :: new () ; for i in 1 .. 4 { let v = (st . mana . wrapping_mul (i * 17)) . rotate_right (1) . wrapping_add (9 + i as u64) ; values . push (v) ; st . steps = st . steps . saturating_add (((v % 23) as u32) + 2) ; } for v in values { st . mana = st . mana . wrapping_add (v) . wrapping_mul (2) . wrapping_add (13) ; st . steps = st . steps . saturating_add (((st . mana % 29) as u32) + 3) ; } } else { let mut phase = 1u8 ; let mut acc = st . mana . rotate_right (1) . wrapping_add (33) ; while phase < 4 { let mix = (acc ^ (phase as u64 * 23)) . rotate_left (1) ; acc = acc . wrapping_add (mix) ; st . mana = st . mana . wrapping_add (mix) . wrapping_mul (3) . wrapping_add (7 + phase as u64) ; st . steps = st . steps . saturating_add (((st . mana % 31) as u32) + 4) ; phase = phase . saturating_add (1) ; } }"
      },
      {
        "id": 7,
        "label": "let mut values = Vec :: new () ;"
      },
      {
        "id": 8,
        "label": "for i in 1 .. 4 { let v = (st . mana . wrapping_mul (i * 17)) . rotate_right (1) . wrapping_add (9 + i as u64) ; values . push (v) ; st . steps = st . steps . saturating_add (((v % 23) as u32) + 2) ; }"
      },
      {
        "id": 9,
        "label": "let v = (st . mana . wrapping_mul (i * 17)) . rotate_right (1) . wrapping_add (9 + i as u64) ;"
      },
      {
        "id": 10,
        "label": "values . push (v) ;"
      },
      {
        "id": 11,
        "label": "st . steps = st . steps . saturating_add (((v % 23) as u32) + 2) ;"
      },
      {
        "id": 12,
        "label": "for v in values { st . mana = st . mana . wrapping_add (v) . wrapping_mul (2) . wrapping_add (13) ; st . steps = st . steps . saturating_add (((st . mana % 29) as u32) + 3) ; }"
      },
      {
        "id": 13,
        "label": "st . mana = st . mana . wrapping_add (v) . wrapping_mul (2) . wrapping_add (13) ;"
      },
      {
        "id": 14,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 29) as u32) + 3) ;"
      },
      {
        "id": 15,
        "label": "let mut phase = 1u8 ;"
      },
      {
        "id": 16,
        "label": "let mut acc = st . mana . rotate_right (1) . wrapping_add (33) ;"
      },
      {
        "id": 17,
        "label": "while phase < 4 { let mix = (acc ^ (phase as u64 * 23)) . rotate_left (1) ; acc = acc . wrapping_add (mix) ; st . mana = st . mana . wrapping_add (mix) . wrapping_mul (3) . wrapping_add (7 + phase as u64) ; st . steps = st . steps . saturating_add (((st . mana % 31) as u32) + 4) ; phase = phase . saturating_add (1) ; }"
      },
      {
        "id": 18,
        "label": "let mix = (acc ^ (phase as u64 * 23)) . rotate_left (1) ;"
      },
      {
        "id": 19,
        "label": "acc = acc . wrapping_add (mix) ;"
      },
      {
        "id": 20,
        "label": "st . mana = st . mana . wrapping_add (mix) . wrapping_mul (3) . wrapping_add (7 + phase as u64) ;"
      },
      {
        "id": 21,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 31) as u32) + 4) ;"
      },
      {
        "id": 22,
        "label": "phase = phase . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: values"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: values"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: v"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: values"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: v"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: values"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: phase"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: acc"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: phase"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: acc"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: phase"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: acc"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: acc"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: phase"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: phase"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: phase"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: mix"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: acc"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: phase"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: acc"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: acc"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: mix"
      },
      {
        "from": 1,
        "to": 20,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 20,
        "label": "data_dep: st"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: mix"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: phase"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: phase"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: phase"
      }
    ]
  },
  {
    "name": "spend_elixir",
    "inputs": [
      "ctx: Context < SpendElixir >",
      "recipe_id: u64",
      "user_bump: u8",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let st = & mut ctx . accounts . alchemy ;"
      },
      {
        "id": 26,
        "label": "let sources : Vec < u64 > = (1 .. 5) . map (| i | st . mana . wrapping_mul (i * 9)) . collect () ;"
      },
      {
        "id": 27,
        "label": "let total = sources . iter () . fold (0u64 , | acc , v | acc . wrapping_add (* v)) ;"
      },
      {
        "id": 28,
        "label": "if total > st . mana { for j in 1 .. 4 { let inc = (total ^ (j as u64 * 19)) . rotate_left (1) ; st . mana = st . mana . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (15 + j as u64) ; st . steps = st . steps . saturating_add (((st . mana % 27) as u32) + 5) ; } }"
      },
      {
        "id": 29,
        "label": "for j in 1 .. 4 { let inc = (total ^ (j as u64 * 19)) . rotate_left (1) ; st . mana = st . mana . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (15 + j as u64) ; st . steps = st . steps . saturating_add (((st . mana % 27) as u32) + 5) ; }"
      },
      {
        "id": 30,
        "label": "let inc = (total ^ (j as u64 * 19)) . rotate_left (1) ;"
      },
      {
        "id": 31,
        "label": "st . mana = st . mana . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (15 + j as u64) ;"
      },
      {
        "id": 32,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 27) as u32) + 5) ;"
      },
      {
        "id": 33,
        "label": "let seeds = & [b\"elixir_cell\" . as_ref () , st . owner . as_ref () , & recipe_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 34,
        "label": "let pda = Pubkey :: create_program_address (& [b\"elixir_cell\" , st . owner . as_ref () , & recipe_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EA :: SeedCompute)) ? ;"
      },
      {
        "id": 35,
        "label": "let ix = system_instruction :: transfer (& pda , & ctx . accounts . alchemist . key () , lamports) ;"
      },
      {
        "id": 36,
        "label": "invoke_signed (& ix , & [ctx . accounts . elixir_hint . to_account_info () , ctx . accounts . alchemist . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 25,
        "label": "def: st"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: st"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: total"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: total"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: total"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: total"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: inc"
      },
      {
        "from": 27,
        "to": 30,
        "label": "data_dep: total"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: inc"
      },
      {
        "from": 25,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 25,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: seeds"
      },
      {
        "from": 25,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: pda"
      },
      {
        "from": 25,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: ix"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: pda"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: ix"
      },
      {
        "from": 33,
        "to": 36,
        "label": "data_dep: seeds"
      }
    ]
  }
]