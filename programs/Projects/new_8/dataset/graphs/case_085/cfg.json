[
  {
    "name": "init_alchemy",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . alchemy ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . mage . key () ;"
      },
      {
        "id": 3,
        "label": "st . bump_saved = * ctx . bumps . get (\"alchemy\") . ok_or (error ! (EA :: NoBump)) ? ;"
      },
      {
        "id": 4,
        "label": "st . mana = mana_seed . rotate_left (2) . wrapping_add (101) ;"
      },
      {
        "id": 5,
        "label": "st . steps = 2 ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "st . mana > 200"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "let mut values = Vec :: new () ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let v = (st . mana . wrapping_mul (i * 17)) . rotate_right (1) . wrapping_add (9 + i as u64) ;"
      },
      {
        "id": 13,
        "label": "values . push (v) ;"
      },
      {
        "id": 14,
        "label": "st . steps = st . steps . saturating_add (((v % 23) as u32) + 2) ;"
      },
      {
        "id": 15,
        "label": "Loop End"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "st . mana = st . mana . wrapping_add (v) . wrapping_mul (2) . wrapping_add (13) ;"
      },
      {
        "id": 18,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 29) as u32) + 3) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "let mut phase = 1u8 ;"
      },
      {
        "id": 22,
        "label": "let mut acc = st . mana . rotate_right (1) . wrapping_add (33) ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "let mix = (acc ^ (phase as u64 * 23)) . rotate_left (1) ;"
      },
      {
        "id": 25,
        "label": "acc = acc . wrapping_add (mix) ;"
      },
      {
        "id": 26,
        "label": "st . mana = st . mana . wrapping_add (mix) . wrapping_mul (3) . wrapping_add (7 + phase as u64) ;"
      },
      {
        "id": 27,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 31) as u32) + 4) ;"
      },
      {
        "id": 28,
        "label": "phase = phase . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "Loop End"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 11,
        "to": 15,
        "label": "for"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "for"
      },
      {
        "from": 6,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 23,
        "to": 29,
        "label": "while"
      },
      {
        "from": 19,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  },
  {
    "name": "spend_elixir",
    "nodes": [
      {
        "id": 32,
        "label": "Entry"
      },
      {
        "id": 33,
        "label": "let st = & mut ctx . accounts . alchemy ;"
      },
      {
        "id": 34,
        "label": "let sources : Vec < u64 > = (1 .. 5) . map (| i | st . mana . wrapping_mul (i * 9)) . collect () ;"
      },
      {
        "id": 35,
        "label": "let total = sources . iter () . fold (0u64 , | acc , v | acc . wrapping_add (* v)) ;"
      },
      {
        "id": 36,
        "label": "if statement"
      },
      {
        "id": 37,
        "label": "predicate"
      },
      {
        "id": 38,
        "label": "total > st . mana"
      },
      {
        "id": 39,
        "label": "True body"
      },
      {
        "id": 40,
        "label": "Loop Start"
      },
      {
        "id": 41,
        "label": "let inc = (total ^ (j as u64 * 19)) . rotate_left (1) ;"
      },
      {
        "id": 42,
        "label": "st . mana = st . mana . wrapping_add (inc) . wrapping_mul (2) . wrapping_add (15 + j as u64) ;"
      },
      {
        "id": 43,
        "label": "st . steps = st . steps . saturating_add (((st . mana % 27) as u32) + 5) ;"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "let seeds = & [b\"elixir_cell\" . as_ref () , st . owner . as_ref () , & recipe_id . to_le_bytes () , core :: slice :: from_ref (& user_bump) ,] ;"
      },
      {
        "id": 49,
        "label": "let pda = Pubkey :: create_program_address (& [b\"elixir_cell\" , st . owner . as_ref () , & recipe_id . to_le_bytes () , & [user_bump]] , ctx . program_id ,) . map_err (| _ | error ! (EA :: SeedCompute)) ? ;"
      },
      {
        "id": 50,
        "label": "let ix = system_instruction :: transfer (& pda , & ctx . accounts . alchemist . key () , lamports) ;"
      },
      {
        "id": 51,
        "label": "invoke_signed (& ix , & [ctx . accounts . elixir_hint . to_account_info () , ctx . accounts . alchemist . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "predicate"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "true"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 40,
        "to": 44,
        "label": "for"
      },
      {
        "from": 36,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]