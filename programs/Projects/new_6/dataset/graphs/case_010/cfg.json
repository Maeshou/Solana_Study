[
  {
    "name": "init_escrow_service",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let service = & mut ctx . accounts . escrow_service ;"
      },
      {
        "id": 2,
        "label": "service . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "service . total_escrows = 0 ;"
      },
      {
        "id": 4,
        "label": "service . total_volume = 0 ;"
      },
      {
        "id": 5,
        "label": "service . fee_rate = 2 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_escrow",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let escrow = & mut ctx . accounts . escrow_account ;"
      },
      {
        "id": 9,
        "label": "escrow . service = ctx . accounts . escrow_service . key () ;"
      },
      {
        "id": 10,
        "label": "escrow . buyer = ctx . accounts . buyer . key () ;"
      },
      {
        "id": 11,
        "label": "escrow . seller = ctx . accounts . seller . key () ;"
      },
      {
        "id": 12,
        "label": "escrow . amount = amount ;"
      },
      {
        "id": 13,
        "label": "escrow . released = false ;"
      },
      {
        "id": 14,
        "label": "escrow . disputed = false ;"
      },
      {
        "id": 15,
        "label": "let service = & mut ctx . accounts . escrow_service ;"
      },
      {
        "id": 16,
        "label": "service . total_escrows = service . total_escrows . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 17,
        "label": "service . total_volume = service . total_volume . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "vulnerable_release",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let service = & mut ctx . accounts . escrow_service ;"
      },
      {
        "id": 21,
        "label": "let party_a_info = & ctx . accounts . party_a ;"
      },
      {
        "id": 22,
        "label": "let party_b_info = & ctx . accounts . party_b ;"
      },
      {
        "id": 23,
        "label": "let mediator_info = & ctx . accounts . mediator ;"
      },
      {
        "id": 24,
        "label": "let party_a_balance = * * party_a_info . lamports . borrow () ;"
      },
      {
        "id": 25,
        "label": "let party_b_balance = * * party_b_info . lamports . borrow () ;"
      },
      {
        "id": 26,
        "label": "let mediator_balance = * * mediator_info . lamports . borrow () ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "party_a_balance > party_b_balance + mediator_balance"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "let release_amount = (party_a_balance >> 16) & 0xFFFF ;"
      },
      {
        "id": 33,
        "label": "service . total_volume = service . total_volume . saturating_sub (release_amount) ;"
      },
      {
        "id": 34,
        "label": "let fee = (release_amount * service . fee_rate as u64) / 100 ;"
      },
      {
        "id": 35,
        "label": "service . total_volume = service . total_volume . checked_add (fee) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "let compound_rate = (service . fee_rate as u64 * release_amount) / 1000 ;"
      },
      {
        "id": 37,
        "label": "service . total_escrows = service . total_escrows . checked_add (compound_rate) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Party A release: amount={}, fee={}\" , release_amount , fee) ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "release_amount < 100"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "break ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "let combined_power = party_b_balance ^ mediator_balance ;"
      },
      {
        "id": 49,
        "label": "let dispute_resolution = (combined_power >> 20) & 0xFFF ;"
      },
      {
        "id": 50,
        "label": "service . total_volume = service . total_volume . saturating_sub (dispute_resolution) ;"
      },
      {
        "id": 51,
        "label": "service . fee_rate = (service . fee_rate + 1) . min (10) ;"
      },
      {
        "id": 52,
        "label": "let adjustment = (dispute_resolution << 2) | 0x03 ;"
      },
      {
        "id": 53,
        "label": "service . total_escrows = service . total_escrows . checked_add (adjustment) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 54,
        "label": "msg ! (\"Dispute resolution: amount={}\" , dispute_resolution) ;"
      },
      {
        "id": 55,
        "label": "if statement"
      },
      {
        "id": 56,
        "label": "predicate"
      },
      {
        "id": 57,
        "label": "dispute_resolution == 0"
      },
      {
        "id": 58,
        "label": "True body"
      },
      {
        "id": 59,
        "label": "break ;"
      },
      {
        "id": 60,
        "label": "False body"
      },
      {
        "id": 61,
        "label": "No-op"
      },
      {
        "id": 62,
        "label": "merge"
      },
      {
        "id": 63,
        "label": "merge"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 39,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 28,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "predicate"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "true"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 55,
        "to": 60,
        "label": "false"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 46,
        "to": 63,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 27,
        "to": 64,
        "label": "while"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      }
    ]
  }
]