[
  {
    "name": "init_staking_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 2,
        "label": "pool . validator = ctx . accounts . validator . key () ;"
      },
      {
        "id": 3,
        "label": "pool . commission_rate = commission_rate ;"
      },
      {
        "id": 4,
        "label": "pool . minimum_stake = min_stake ;"
      },
      {
        "id": 5,
        "label": "pool . total_staked = 0 ;"
      },
      {
        "id": 6,
        "label": "pool . total_rewards = 0 ;"
      },
      {
        "id": 7,
        "label": "pool . delegator_count = 0 ;"
      },
      {
        "id": 8,
        "label": "pool . epoch_rewards = [0 ; 10] ;"
      },
      {
        "id": 9,
        "label": "pool . is_active = true ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "distribute_rewards",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 13,
        "label": "let distributor = & ctx . accounts . distributor ;"
      },
      {
        "id": 14,
        "label": "pool . total_rewards += epoch_reward ;"
      },
      {
        "id": 15,
        "label": "let validator_commission = (epoch_reward * pool . commission_rate as u64) / 10000 ;"
      },
      {
        "id": 16,
        "label": "let delegator_rewards = epoch_reward - validator_commission ;"
      },
      {
        "id": 17,
        "label": "Loop Start"
      },
      {
        "id": 18,
        "label": "pool . epoch_rewards [i - 1] = pool . epoch_rewards [i] ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "pool . epoch_rewards [9] = epoch_reward ;"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "pool . delegator_count > 0 && pool . total_staked > 0"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "let reward_per_token = (delegator_rewards * 1_000_000) / pool . total_staked ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "let delegator_stake = pool . total_staked / pool . delegator_count as u64 ;"
      },
      {
        "id": 28,
        "label": "let delegator_reward = (delegator_stake * reward_per_token) / 1_000_000 ;"
      },
      {
        "id": 29,
        "label": "pool . pending_rewards += delegator_reward ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "pool . validator_earnings += validator_commission ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 19,
        "label": "for"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 26,
        "to": 30,
        "label": "for"
      },
      {
        "from": 21,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]