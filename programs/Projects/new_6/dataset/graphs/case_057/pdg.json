[
  {
    "name": "start_match",
    "inputs": [
      "ctx: Context < StartMatch >",
      "opponent: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if ctx . accounts . cfg . owner != crate :: ID { return Err (ProgramError :: IllegalOwner . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ProgramError :: IllegalOwner . into ()) ;"
      },
      {
        "id": 3,
        "label": "let manager = ArenaManager :: try_from_slice (& ctx . accounts . cfg . data . borrow ()) ? ;"
      },
      {
        "id": 4,
        "label": "require_keys_eq ! (manager . judge , ctx . accounts . signer . key () , ProgramError :: MissingRequiredSignature) ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"Starting match against {:?}\" , opponent) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: manager"
      }
    ]
  },
  {
    "name": "write_fighter",
    "inputs": [
      "ctx: Context < WriteFighter >",
      "key: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let fighter = FighterCard { fighter : key } ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . cfg . data . borrow_mut () [.. 32] . copy_from_slice (& fighter . try_to_vec () ?) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: fighter"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: fighter"
      }
    ]
  }
]