[
  {
    "name": "init_liquidity_pool",
    "inputs": [
      "ctx: Context < InitLiquidityPool >",
      "initial_ratio: u64",
      "fee_rate: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . liquidity_pool ;"
      },
      {
        "id": 2,
        "label": "pool . pool_manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "pool . token_a_reserve = 0 ;"
      },
      {
        "id": 4,
        "label": "pool . token_b_reserve = 0 ;"
      },
      {
        "id": 5,
        "label": "pool . total_liquidity_tokens = 0 ;"
      },
      {
        "id": 6,
        "label": "pool . exchange_ratio = initial_ratio ;"
      },
      {
        "id": 7,
        "label": "pool . trading_fee = fee_rate ;"
      },
      {
        "id": 8,
        "label": "pool . total_volume = 0 ;"
      },
      {
        "id": 9,
        "label": "pool . impermanent_loss_factor = 0 ;"
      },
      {
        "id": 10,
        "label": "pool . last_price_update = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: pool"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: pool"
      }
    ]
  },
  {
    "name": "rebalance_pool",
    "inputs": [
      "ctx: Context < RebalancePool >",
      "target_ratio: u64",
      "slippage_tolerance: u16"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let pool = & mut ctx . accounts . liquidity_pool ;"
      },
      {
        "id": 14,
        "label": "let rebalancer = & ctx . accounts . rebalancer ;"
      },
      {
        "id": 15,
        "label": "let current_ratio = if pool . token_b_reserve > 0 { (pool . token_a_reserve * 1000000) / pool . token_b_reserve } else { target_ratio } ;"
      },
      {
        "id": 16,
        "label": "(pool . token_a_reserve * 1000000) / pool . token_b_reserve"
      },
      {
        "id": 17,
        "label": "target_ratio"
      },
      {
        "id": 18,
        "label": "let ratio_difference = if current_ratio > target_ratio { current_ratio - target_ratio } else { target_ratio - current_ratio } ;"
      },
      {
        "id": 19,
        "label": "current_ratio - target_ratio"
      },
      {
        "id": 20,
        "label": "target_ratio - current_ratio"
      },
      {
        "id": 21,
        "label": "let max_allowed_difference = (target_ratio * slippage_tolerance as u64) / 10000 ;"
      },
      {
        "id": 22,
        "label": "if ratio_difference <= max_allowed_difference { let total_value = pool . token_a_reserve + (pool . token_b_reserve * target_ratio / 1000000) ; let new_token_a_reserve = total_value / 2 ; let new_token_b_reserve = (total_value / 2) * 1000000 / target_ratio ; let old_product = pool . token_a_reserve * pool . token_b_reserve ; let new_product = new_token_a_reserve * new_token_b_reserve ; if new_product < old_product { pool . impermanent_loss_factor += ((old_product - new_product) * 10000) / old_product ; } pool . token_a_reserve = new_token_a_reserve ; pool . token_b_reserve = new_token_b_reserve ; pool . exchange_ratio = target_ratio ; pool . last_price_update = Clock :: get () ? . unix_timestamp ; let rebalancing_volume = ratio_difference * pool . total_liquidity_tokens / 1000 ; let collected_fees = (rebalancing_volume * pool . trading_fee as u64) / 10000 ; pool . total_fees_collected += collected_fees ; pool . total_volume += rebalancing_volume ; for lp_index in 0 .. pool . active_lp_count . min (50) { let lp_share = pool . lp_token_balances [lp_index as usize] * 100 / pool . total_liquidity_tokens . max (1) ; pool . lp_fee_rewards [lp_index as usize] += (collected_fees * lp_share) / 100 ; } }"
      },
      {
        "id": 23,
        "label": "let total_value = pool . token_a_reserve + (pool . token_b_reserve * target_ratio / 1000000) ;"
      },
      {
        "id": 24,
        "label": "let new_token_a_reserve = total_value / 2 ;"
      },
      {
        "id": 25,
        "label": "let new_token_b_reserve = (total_value / 2) * 1000000 / target_ratio ;"
      },
      {
        "id": 26,
        "label": "let old_product = pool . token_a_reserve * pool . token_b_reserve ;"
      },
      {
        "id": 27,
        "label": "let new_product = new_token_a_reserve * new_token_b_reserve ;"
      },
      {
        "id": 28,
        "label": "if new_product < old_product { pool . impermanent_loss_factor += ((old_product - new_product) * 10000) / old_product ; }"
      },
      {
        "id": 29,
        "label": "pool . impermanent_loss_factor += ((old_product - new_product) * 10000) / old_product ;"
      },
      {
        "id": 30,
        "label": "pool . token_a_reserve = new_token_a_reserve ;"
      },
      {
        "id": 31,
        "label": "pool . token_b_reserve = new_token_b_reserve ;"
      },
      {
        "id": 32,
        "label": "pool . exchange_ratio = target_ratio ;"
      },
      {
        "id": 33,
        "label": "pool . last_price_update = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 34,
        "label": "let rebalancing_volume = ratio_difference * pool . total_liquidity_tokens / 1000 ;"
      },
      {
        "id": 35,
        "label": "let collected_fees = (rebalancing_volume * pool . trading_fee as u64) / 10000 ;"
      },
      {
        "id": 36,
        "label": "pool . total_fees_collected += collected_fees ;"
      },
      {
        "id": 37,
        "label": "pool . total_volume += rebalancing_volume ;"
      },
      {
        "id": 38,
        "label": "for lp_index in 0 .. pool . active_lp_count . min (50) { let lp_share = pool . lp_token_balances [lp_index as usize] * 100 / pool . total_liquidity_tokens . max (1) ; pool . lp_fee_rewards [lp_index as usize] += (collected_fees * lp_share) / 100 ; }"
      },
      {
        "id": 39,
        "label": "let lp_share = pool . lp_token_balances [lp_index as usize] * 100 / pool . total_liquidity_tokens . max (1) ;"
      },
      {
        "id": 40,
        "label": "pool . lp_fee_rewards [lp_index as usize] += (collected_fees * lp_share) / 100 ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: pool"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: rebalancer"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: current_ratio"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: pool"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: ratio_difference"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: current_ratio"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: current_ratio"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: current_ratio"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: current_ratio"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: current_ratio"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: max_allowed_difference"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: ratio_difference"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: max_allowed_difference"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: ratio_difference"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: total_value"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: pool"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: new_token_a_reserve"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: total_value"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: new_token_b_reserve"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: total_value"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: old_product"
      },
      {
        "from": 13,
        "to": 26,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 26,
        "label": "data_dep: pool"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: new_product"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: new_token_a_reserve"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: new_token_b_reserve"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: new_product"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: old_product"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: pool"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: old_product"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: new_product"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: old_product"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: pool"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: old_product"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: new_product"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: old_product"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: pool"
      },
      {
        "from": 24,
        "to": 30,
        "label": "data_dep: new_token_a_reserve"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: pool"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: new_token_b_reserve"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 33,
        "label": "data_dep: pool"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: rebalancing_volume"
      },
      {
        "from": 18,
        "to": 34,
        "label": "data_dep: ratio_difference"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: pool"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: collected_fees"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: rebalancing_volume"
      },
      {
        "from": 13,
        "to": 35,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 36,
        "label": "data_dep: pool"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: collected_fees"
      },
      {
        "from": 13,
        "to": 37,
        "label": "data_dep: pool"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: rebalancing_volume"
      },
      {
        "from": 13,
        "to": 38,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 38,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 38,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 38,
        "label": "data_dep: pool"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: collected_fees"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: lp_share"
      },
      {
        "from": 13,
        "to": 39,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 39,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 40,
        "label": "data_dep: pool"
      },
      {
        "from": 35,
        "to": 40,
        "label": "data_dep: collected_fees"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: lp_share"
      }
    ]
  }
]