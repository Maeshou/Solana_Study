[
  {
    "name": "init_staking_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "pool . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool . pool_name = pool_name ;"
      },
      {
        "id": 4,
        "label": "pool . reward_rate = reward_rate ;"
      },
      {
        "id": 5,
        "label": "pool . min_stake = min_stake ;"
      },
      {
        "id": 6,
        "label": "pool . total_staked = 0 ;"
      },
      {
        "id": 7,
        "label": "pool . total_rewards = 0 ;"
      },
      {
        "id": 8,
        "label": "pool . active_stakers = 0 ;"
      },
      {
        "id": 9,
        "label": "pool . is_active = true ;"
      },
      {
        "id": 10,
        "label": "pool . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 11,
        "label": "msg ! (\"Staking pool '{}' created with {}% reward rate\" , pool . pool_name , reward_rate) ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_stake_position",
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let position = & mut ctx . accounts . position ;"
      },
      {
        "id": 15,
        "label": "position . pool = ctx . accounts . pool . key () ;"
      },
      {
        "id": 16,
        "label": "position . staker = ctx . accounts . staker . key () ;"
      },
      {
        "id": 17,
        "label": "position . stake_amount = stake_amount ;"
      },
      {
        "id": 18,
        "label": "position . lock_period = lock_period ;"
      },
      {
        "id": 19,
        "label": "position . rewards_earned = 0 ;"
      },
      {
        "id": 20,
        "label": "position . last_claim = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 21,
        "label": "position . is_active = true ;"
      },
      {
        "id": 22,
        "label": "position . staked_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"Stake position created: {} tokens for {} days\" , stake_amount , lock_period) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_staking_rewards",
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 27,
        "label": "let mut cycle = 0 ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "pool . is_active"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "let base_reward = (pool . total_staked * pool . reward_rate as u64) / 10000 ;"
      },
      {
        "id": 34,
        "label": "let cycle_reward = base_reward . checked_add ((cycle as u64) * boost_factor) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "pool . total_rewards = pool . total_rewards . checked_add (cycle_reward) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "pool . total_staked = pool . total_staked . checked_add (cycle_reward / 100) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 37,
        "label": "let compound_bits = (cycle ^ 0xA) << 4 ;"
      },
      {
        "id": 38,
        "label": "let compound_reward = compound_bits as u64 * boost_factor / 1000 ;"
      },
      {
        "id": 39,
        "label": "pool . total_rewards = pool . total_rewards . checked_add (compound_reward) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Active reward cycle {}: distributed {}\" , cycle , cycle_reward) ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "let penalty = (cycle as u64) * 1000 ;"
      },
      {
        "id": 43,
        "label": "pool . total_rewards = pool . total_rewards . saturating_sub (penalty) ;"
      },
      {
        "id": 44,
        "label": "pool . total_staked = pool . total_staked . saturating_sub (penalty * 2) ;"
      },
      {
        "id": 45,
        "label": "let sqrt_staked = integer_sqrt (pool . total_staked) ;"
      },
      {
        "id": 46,
        "label": "pool . reward_rate = ((sqrt_staked % 500) + 100) as u32 ;"
      },
      {
        "id": 47,
        "label": "msg ! (\"Inactive penalty cycle {}: penalty {}\" , cycle , penalty) ;"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "cycle += 1 ;"
      },
      {
        "id": 50,
        "label": "Loop End"
      },
      {
        "id": 51,
        "label": "Loop Start"
      },
      {
        "id": 52,
        "label": "let staker_change = (adjustment + 1) as u32 ;"
      },
      {
        "id": 53,
        "label": "if statement"
      },
      {
        "id": 54,
        "label": "predicate"
      },
      {
        "id": 55,
        "label": "pool . total_staked > pool . min_stake * 100"
      },
      {
        "id": 56,
        "label": "True body"
      },
      {
        "id": 57,
        "label": "pool . active_stakers = pool . active_stakers . checked_add (staker_change) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "pool . active_stakers = pool . active_stakers . saturating_sub (staker_change) ;"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "let avg_stake = (pool . total_staked * 97 + pool . min_stake * pool . active_stakers as u64 * 3) / 100 ;"
      },
      {
        "id": 62,
        "label": "pool . total_staked = avg_stake ;"
      },
      {
        "id": 63,
        "label": "pool . reward_rate = pool . reward_rate ^ (adjustment % 8) ;"
      },
      {
        "id": 64,
        "label": "msg ! (\"Staker adjustment {}: active stakers {}\" , adjustment , pool . active_stakers) ;"
      },
      {
        "id": 65,
        "label": "Loop End"
      },
      {
        "id": 66,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 29,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 40,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 28,
        "to": 50,
        "label": "while"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "predicate"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "true"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 53,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 51,
        "to": 65,
        "label": "for"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      }
    ]
  }
]