[
  {
    "name": "init_auction_house",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let house = & mut ctx . accounts . auction_house ;"
      },
      {
        "id": 2,
        "label": "house . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "house . total_auctions = 0 ;"
      },
      {
        "id": 4,
        "label": "house . commission_rate = 10 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_auction",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let auction = & mut ctx . accounts . auction ;"
      },
      {
        "id": 8,
        "label": "auction . house = ctx . accounts . auction_house . key () ;"
      },
      {
        "id": 9,
        "label": "auction . seller = ctx . accounts . seller . key () ;"
      },
      {
        "id": 10,
        "label": "auction . starting_price = starting_price ;"
      },
      {
        "id": 11,
        "label": "auction . current_bid = starting_price ;"
      },
      {
        "id": 12,
        "label": "auction . highest_bidder = Pubkey :: default () ;"
      },
      {
        "id": 13,
        "label": "auction . active = true ;"
      },
      {
        "id": 14,
        "label": "let house = & mut ctx . accounts . auction_house ;"
      },
      {
        "id": 15,
        "label": "house . total_auctions = house . total_auctions . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "vulnerable_bid",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let house = & mut ctx . accounts . auction_house ;"
      },
      {
        "id": 19,
        "label": "let auction_info = & ctx . accounts . auction_account ;"
      },
      {
        "id": 20,
        "label": "let bidder_info = & ctx . accounts . bidder_account ;"
      },
      {
        "id": 21,
        "label": "let auction_data = auction_info . try_borrow_mut_data () ? ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "auction_data . len () >= 80"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "let mut current_bid_bytes = [0u8 ; 8] ;"
      },
      {
        "id": 27,
        "label": "current_bid_bytes . copy_from_slice (& auction_data [72 .. 80]) ;"
      },
      {
        "id": 28,
        "label": "let mut current_bid = u64 :: from_le_bytes (current_bid_bytes) ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "current_bid < 10000"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "let bid_increment = (bid_round + 1) as u64 * 100 ;"
      },
      {
        "id": 35,
        "label": "current_bid = current_bid . checked_add (bid_increment) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "let new_bid_bytes = current_bid . to_le_bytes () ;"
      },
      {
        "id": 37,
        "label": "auction_data [72 .. 80] . copy_from_slice (& new_bid_bytes) ;"
      },
      {
        "id": 38,
        "label": "house . commission_rate = (house . commission_rate + bid_round as u32) . min (25) ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"Bid round {}: new bid = {}\" , bid_round , current_bid) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "let commission = current_bid / 10 ;"
      },
      {
        "id": 42,
        "label": "house . total_auctions = house . total_auctions . checked_add (commission) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 43,
        "label": "current_bid = (current_bid >> 1) | 0x8000_0000_0000_0000 ;"
      },
      {
        "id": 44,
        "label": "let adjusted_bytes = current_bid . to_le_bytes () ;"
      },
      {
        "id": 45,
        "label": "auction_data [72 .. 80] . copy_from_slice (& adjusted_bytes) ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Commission collected: {}\" , commission) ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Loop End"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 30,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 39,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 29,
        "to": 48,
        "label": "for"
      },
      {
        "from": 22,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]