[
  {
    "name": "init_auction_house",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let auction_house = & mut ctx . accounts . auction_house ;"
      },
      {
        "id": 2,
        "label": "auction_house . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "auction_house . house_name = house_name ;"
      },
      {
        "id": 4,
        "label": "auction_house . commission_rate = commission_rate ;"
      },
      {
        "id": 5,
        "label": "auction_house . total_auctions = 0 ;"
      },
      {
        "id": 6,
        "label": "auction_house . total_volume = 0 ;"
      },
      {
        "id": 7,
        "label": "auction_house . is_operational = true ;"
      },
      {
        "id": 8,
        "label": "auction_house . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 9,
        "label": "msg ! (\"Auction house '{}' created\" , auction_house . house_name) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_art_listing",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let listing = & mut ctx . accounts . listing ;"
      },
      {
        "id": 13,
        "label": "listing . auction_house = ctx . accounts . auction_house . key () ;"
      },
      {
        "id": 14,
        "label": "listing . artist = ctx . accounts . artist . key () ;"
      },
      {
        "id": 15,
        "label": "listing . art_title = art_title ;"
      },
      {
        "id": 16,
        "label": "listing . starting_bid = starting_bid ;"
      },
      {
        "id": 17,
        "label": "listing . current_bid = starting_bid ;"
      },
      {
        "id": 18,
        "label": "listing . reserve_price = reserve_price ;"
      },
      {
        "id": 19,
        "label": "listing . bid_count = 0 ;"
      },
      {
        "id": 20,
        "label": "listing . status = AuctionStatus :: Open ;"
      },
      {
        "id": 21,
        "label": "listing . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Art '{}' listed with starting bid: {}\" , listing . art_title , starting_bid) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_auction_bidding",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let auction_house = & mut ctx . accounts . auction_house ;"
      },
      {
        "id": 26,
        "label": "let listing = & mut ctx . accounts . listing ;"
      },
      {
        "id": 27,
        "label": "let mut iteration = 0 ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "listing . status == AuctionStatus :: Open"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "let bid_increment = increment_base . checked_add ((iteration as u64) * 500) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 34,
        "label": "listing . current_bid = listing . current_bid . checked_add (bid_increment) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "listing . bid_count = listing . bid_count . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "let commission_bits = (iteration ^ 0x9) << 2 ;"
      },
      {
        "id": 37,
        "label": "let commission = (listing . current_bid * commission_bits as u64) / 10000 ;"
      },
      {
        "id": 38,
        "label": "auction_house . total_volume = auction_house . total_volume . checked_add (commission) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"Bid iteration {}: new bid {}\" , iteration , listing . current_bid) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "listing . current_bid = listing . current_bid . checked_add (increment_base / 10) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 42,
        "label": "let final_commission = (listing . current_bid * auction_house . commission_rate as u64) / 10000 ;"
      },
      {
        "id": 43,
        "label": "auction_house . total_volume = auction_house . total_volume . checked_add (final_commission) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 44,
        "label": "let price_sqrt = integer_sqrt (listing . current_bid) ;"
      },
      {
        "id": 45,
        "label": "listing . reserve_price = listing . reserve_price . max (price_sqrt) . min (listing . current_bid) ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Closed auction iteration {}: final adjustments\" , iteration) ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "iteration += 1 ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "Loop Start"
      },
      {
        "id": 51,
        "label": "auction_house . total_auctions = auction_house . total_auctions . checked_add (stats_round as u64 + 1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 52,
        "label": "let avg_volume = (auction_house . total_volume * 98 + listing . current_bid * 2) / 100 ;"
      },
      {
        "id": 53,
        "label": "auction_house . total_volume = avg_volume ;"
      },
      {
        "id": 54,
        "label": "listing . bid_count = listing . bid_count ^ (stats_round % 16) ;"
      },
      {
        "id": 55,
        "label": "msg ! (\"Statistics round {}: total auctions {}\" , stats_round , auction_house . total_auctions) ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 29,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 39,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 28,
        "to": 49,
        "label": "while"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 50,
        "to": 56,
        "label": "for"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      }
    ]
  }
]