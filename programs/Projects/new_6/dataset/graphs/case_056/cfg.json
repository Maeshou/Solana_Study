[
  {
    "name": "init_auction",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let auction = & mut ctx . accounts . auction ;"
      },
      {
        "id": 2,
        "label": "auction . auctioneer = ctx . accounts . auctioneer . key () ;"
      },
      {
        "id": 3,
        "label": "auction . item_id = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 4,
        "label": "auction . starting_bid = starting_bid ;"
      },
      {
        "id": 5,
        "label": "auction . current_bid = starting_bid ;"
      },
      {
        "id": 6,
        "label": "auction . bid_count = 0 ;"
      },
      {
        "id": 7,
        "label": "auction . end_time = Clock :: get () ? . unix_timestamp + (duration_hours as i64 * 3600) ;"
      },
      {
        "id": 8,
        "label": "auction . is_active = true ;"
      },
      {
        "id": 9,
        "label": "auction . reserve_met = false ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "finalize_auction",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let auction = & mut ctx . accounts . auction ;"
      },
      {
        "id": 13,
        "label": "let finalizer = & ctx . accounts . finalizer ;"
      },
      {
        "id": 14,
        "label": "let current_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "force_end || current_time >= auction . end_time"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "auction . is_active = false ;"
      },
      {
        "id": 20,
        "label": "auction . finalized_at = current_time ;"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "auction . current_bid > auction . starting_bid"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "auction . winner = auction . highest_bidder ;"
      },
      {
        "id": 26,
        "label": "auction . final_price = auction . current_bid ;"
      },
      {
        "id": 27,
        "label": "let house_fee = (auction . current_bid * 250) / 10000 ;"
      },
      {
        "id": 28,
        "label": "let seller_proceeds = auction . current_bid - house_fee ;"
      },
      {
        "id": 29,
        "label": "auction . house_earnings += house_fee ;"
      },
      {
        "id": 30,
        "label": "auction . seller_payout = seller_proceeds ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "auction . bid_history [i as usize] . 0 != auction . highest_bidder"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "auction . pending_refunds [i as usize] = auction . bid_history [i as usize] . 1 ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "No-op"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "auction . total_volume += auction . current_bid ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 31,
        "to": 40,
        "label": "for"
      },
      {
        "from": 21,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 15,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]