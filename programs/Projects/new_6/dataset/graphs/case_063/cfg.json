[
  {
    "name": "init_bridge_config",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let bridge = & mut ctx . accounts . bridge_config ;"
      },
      {
        "id": 2,
        "label": "bridge . bridge_operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "bridge . bridge_fee = bridge_fee ;"
      },
      {
        "id": 4,
        "label": "bridge . min_transfer_amount = min_transfer ;"
      },
      {
        "id": 5,
        "label": "bridge . max_transfer_amount = max_transfer ;"
      },
      {
        "id": 6,
        "label": "bridge . total_volume_in = 0 ;"
      },
      {
        "id": 7,
        "label": "bridge . total_volume_out = 0 ;"
      },
      {
        "id": 8,
        "label": "bridge . total_fees_collected = 0 ;"
      },
      {
        "id": 9,
        "label": "bridge . successful_transfers = 0 ;"
      },
      {
        "id": 10,
        "label": "bridge . failed_transfers = 0 ;"
      },
      {
        "id": 11,
        "label": "bridge . is_paused = false ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute_cross_chain_transfer",
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let bridge = & mut ctx . accounts . bridge_config ;"
      },
      {
        "id": 15,
        "label": "let transfer_record = & mut ctx . accounts . transfer_record ;"
      },
      {
        "id": 16,
        "label": "let executor = & ctx . accounts . executor ;"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "! bridge . is_paused && amount >= bridge . min_transfer_amount && amount <= bridge . max_transfer_amount"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "let current_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 22,
        "label": "let fee_amount = bridge . bridge_fee + (amount * 25) / 10000 ;"
      },
      {
        "id": 23,
        "label": "let transfer_amount = amount - fee_amount ;"
      },
      {
        "id": 24,
        "label": "transfer_record . sender = executor . key () ;"
      },
      {
        "id": 25,
        "label": "transfer_record . recipient = recipient ;"
      },
      {
        "id": 26,
        "label": "transfer_record . amount = amount ;"
      },
      {
        "id": 27,
        "label": "transfer_record . fee_paid = fee_amount ;"
      },
      {
        "id": 28,
        "label": "transfer_record . destination_chain = destination_chain ;"
      },
      {
        "id": 29,
        "label": "transfer_record . nonce = nonce ;"
      },
      {
        "id": 30,
        "label": "transfer_record . initiated_at = current_time ;"
      },
      {
        "id": 31,
        "label": "transfer_record . status = 0 ;"
      },
      {
        "id": 32,
        "label": "let mut validation_score = 0u32 ;"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "amount > 1000 && amount < 1000000"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "validation_score += 25 ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "No-op"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "let mut recipient_score = 0u32 ;"
      },
      {
        "id": 42,
        "label": "Loop Start"
      },
      {
        "id": 43,
        "label": "recipient_score += * byte as u32 ;"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "recipient_score % 100 > 20"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "validation_score += 25 ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "No-op"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "if statement"
      },
      {
        "id": 54,
        "label": "predicate"
      },
      {
        "id": 55,
        "label": "nonce > bridge . last_processed_nonce"
      },
      {
        "id": 56,
        "label": "True body"
      },
      {
        "id": 57,
        "label": "validation_score += 25 ;"
      },
      {
        "id": 58,
        "label": "bridge . last_processed_nonce = nonce ;"
      },
      {
        "id": 59,
        "label": "False body"
      },
      {
        "id": 60,
        "label": "No-op"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "let supported_chains = [1 , 2 , 3 , 4 , 5] ;"
      },
      {
        "id": 63,
        "label": "if statement"
      },
      {
        "id": 64,
        "label": "predicate"
      },
      {
        "id": 65,
        "label": "supported_chains . contains (& destination_chain)"
      },
      {
        "id": 66,
        "label": "True body"
      },
      {
        "id": 67,
        "label": "validation_score += 25 ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "validation_score >= 75"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "transfer_record . status = 1 ;"
      },
      {
        "id": 76,
        "label": "transfer_record . validation_score = validation_score ;"
      },
      {
        "id": 77,
        "label": "bridge . total_volume_out += transfer_amount ;"
      },
      {
        "id": 78,
        "label": "bridge . total_fees_collected += fee_amount ;"
      },
      {
        "id": 79,
        "label": "bridge . successful_transfers += 1 ;"
      },
      {
        "id": 80,
        "label": "bridge . chain_liquidity [destination_chain as usize] += transfer_amount ;"
      },
      {
        "id": 81,
        "label": "if statement"
      },
      {
        "id": 82,
        "label": "predicate"
      },
      {
        "id": 83,
        "label": "amount > bridge . max_transfer_amount / 2"
      },
      {
        "id": 84,
        "label": "True body"
      },
      {
        "id": 85,
        "label": "transfer_record . requires_manual_review = true ;"
      },
      {
        "id": 86,
        "label": "bridge . high_value_transfers += 1 ;"
      },
      {
        "id": 87,
        "label": "False body"
      },
      {
        "id": 88,
        "label": "No-op"
      },
      {
        "id": 89,
        "label": "merge"
      },
      {
        "id": 90,
        "label": "Loop Start"
      },
      {
        "id": 91,
        "label": "if statement"
      },
      {
        "id": 92,
        "label": "predicate"
      },
      {
        "id": 93,
        "label": "i == destination_chain as usize"
      },
      {
        "id": 94,
        "label": "True body"
      },
      {
        "id": 95,
        "label": "bridge . transfer_counts_by_chain [i] += 1 ;"
      },
      {
        "id": 96,
        "label": "break ;"
      },
      {
        "id": 97,
        "label": "False body"
      },
      {
        "id": 98,
        "label": "No-op"
      },
      {
        "id": 99,
        "label": "merge"
      },
      {
        "id": 100,
        "label": "Loop End"
      },
      {
        "id": 101,
        "label": "False body"
      },
      {
        "id": 102,
        "label": "transfer_record . status = 3 ;"
      },
      {
        "id": 103,
        "label": "bridge . failed_transfers += 1 ;"
      },
      {
        "id": 104,
        "label": "merge"
      },
      {
        "id": 105,
        "label": "False body"
      },
      {
        "id": 106,
        "label": "No-op"
      },
      {
        "id": 107,
        "label": "merge"
      },
      {
        "id": 108,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 33,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 44,
        "label": "for"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 45,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "predicate"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "true"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 53,
        "to": 59,
        "label": "false"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "predicate"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "true"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 63,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "predicate"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "true"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 81,
        "to": 87,
        "label": "false"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "predicate"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "true"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 91,
        "to": 97,
        "label": "false"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 96,
        "to": 99,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 90,
        "to": 100,
        "label": "for"
      },
      {
        "from": 71,
        "to": 101,
        "label": "false"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 100,
        "to": 104,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 17,
        "to": 105,
        "label": "false"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 104,
        "to": 107,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      }
    ]
  }
]