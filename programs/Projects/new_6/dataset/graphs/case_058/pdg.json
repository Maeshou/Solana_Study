[
  {
    "name": "post_quest",
    "inputs": [
      "ctx: Context < PostQuest >",
      "quest_id: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if ctx . accounts . cfg . owner != crate :: ID { return Err (ProgramError :: IllegalOwner . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ProgramError :: IllegalOwner . into ()) ;"
      },
      {
        "id": 3,
        "label": "let board = QuestBoard :: try_from_slice (& ctx . accounts . cfg . data . borrow ()) ? ;"
      },
      {
        "id": 4,
        "label": "require_keys_eq ! (board . admin , ctx . accounts . signer . key () , ProgramError :: MissingRequiredSignature) ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"Posting quest id {}\" , quest_id) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: board"
      }
    ]
  },
  {
    "name": "write_adventurer",
    "inputs": [
      "ctx: Context < WriteAdventurer >",
      "key: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let card = AdventurerCard { adventurer : key } ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . cfg . data . borrow_mut () [.. 32] . copy_from_slice (& card . try_to_vec () ?) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: card"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: card"
      }
    ]
  }
]