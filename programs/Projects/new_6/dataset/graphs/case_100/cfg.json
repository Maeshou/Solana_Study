[
  {
    "name": "init_treasury",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let treasury = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 2,
        "label": "treasury . guild_id = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "treasury . max_withdrawals = max_withdrawals ;"
      },
      {
        "id": 4,
        "label": "treasury . remaining_withdrawals = max_withdrawals ;"
      },
      {
        "id": 5,
        "label": "treasury . locked = false ;"
      },
      {
        "id": 6,
        "label": "treasury . audit_log = Vec :: new () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "propose_withdrawal",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let treasury = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 10,
        "label": "let actor = & ctx . accounts . actor ;"
      },
      {
        "id": 11,
        "label": "let timestamp = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "treasury . locked"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "treasury . audit_log . push (format ! (\"{}: Rejected proposal by {} due to locked treasury\" , timestamp , actor . key ())) ;"
      },
      {
        "id": 17,
        "label": "return Ok (()) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "treasury . pending_amount = Some (amount) ;"
      },
      {
        "id": 22,
        "label": "treasury . pending_reason = Some (reason . clone ()) ;"
      },
      {
        "id": 23,
        "label": "treasury . pending_actor = Some (actor . key ()) ;"
      },
      {
        "id": 24,
        "label": "treasury . pending_at = Some (timestamp) ;"
      },
      {
        "id": 25,
        "label": "treasury . audit_log . push (format ! (\"{}: Proposal submitted by {} - {} lamports for {}\" , timestamp , actor . key () , amount , reason)) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 12,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      }
    ]
  },
  {
    "name": "approve_withdrawal",
    "nodes": [
      {
        "id": 27,
        "label": "Entry"
      },
      {
        "id": 28,
        "label": "let treasury = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 29,
        "label": "let board = & ctx . accounts . board ;"
      },
      {
        "id": 30,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "treasury . locked || treasury . remaining_withdrawals == 0"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "treasury . audit_log . push (format ! (\"{}: Withdrawal approval failed - treasury locked or exhausted\" , now)) ;"
      },
      {
        "id": 36,
        "label": "return Ok (()) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let approved_amount = treasury . pending_amount . unwrap_or (0) ;"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "approved_amount == 0"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "treasury . audit_log . push (format ! (\"{}: Approval failed - no pending amount\" , now)) ;"
      },
      {
        "id": 46,
        "label": "return Ok (()) ;"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "No-op"
      },
      {
        "id": 49,
        "label": "merge"
      },
      {
        "id": 50,
        "label": "let dest = & ctx . accounts . fund_sink ;"
      },
      {
        "id": 51,
        "label": "* * dest . to_account_info () . try_borrow_mut_lamports () ? += approved_amount ;"
      },
      {
        "id": 52,
        "label": "treasury . remaining_withdrawals -= 1 ;"
      },
      {
        "id": 53,
        "label": "treasury . audit_log . push (format ! (\"{}: Withdrawal approved by {} - {} lamports to {}\" , now , board . key () , approved_amount , dest . key ())) ;"
      },
      {
        "id": 54,
        "label": "treasury . pending_amount = None ;"
      },
      {
        "id": 55,
        "label": "treasury . pending_actor = None ;"
      },
      {
        "id": 56,
        "label": "treasury . pending_reason = None ;"
      },
      {
        "id": 57,
        "label": "treasury . pending_at = None ;"
      },
      {
        "id": 58,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 41,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      }
    ]
  },
  {
    "name": "emergency_lock",
    "nodes": [
      {
        "id": 59,
        "label": "Entry"
      },
      {
        "id": 60,
        "label": "let treasury = & mut ctx . accounts . treasury ;"
      },
      {
        "id": 61,
        "label": "treasury . locked = true ;"
      },
      {
        "id": 62,
        "label": "treasury . audit_log . push (format ! (\"{}: Emergency lock initiated by {}\" , Clock :: get () ?. unix_timestamp , ctx . accounts . council . key ())) ;"
      },
      {
        "id": 63,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      }
    ]
  }
]