[
  {
    "name": "activate_reactor",
    "inputs": [
      "ctx: Context < ActivateReactor >",
      "override_code: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let forge = & mut ctx . accounts . device ;"
      },
      {
        "id": 2,
        "label": "let operator = & ctx . accounts . controller ;"
      },
      {
        "id": 3,
        "label": "let diagnostics = & mut ctx . accounts . device_log ;"
      },
      {
        "id": 4,
        "label": "if override_code == 777_777 { diagnostics . data . borrow_mut () [0] = 0x42 ; forge . failure_count = 0 ; } else { diagnostics . data . borrow_mut () [1] = 0x13 ; forge . failure_count += 1 ; }"
      },
      {
        "id": 5,
        "label": "diagnostics . data . borrow_mut () [0] = 0x42 ;"
      },
      {
        "id": 6,
        "label": "forge . failure_count = 0 ;"
      },
      {
        "id": 7,
        "label": "diagnostics . data . borrow_mut () [1] = 0x13 ;"
      },
      {
        "id": 8,
        "label": "forge . failure_count += 1 ;"
      },
      {
        "id": 9,
        "label": "for i in 0 .. 8 { diagnostics . data . borrow_mut () [i + 2] = i as u8 ^ override_code as u8 ; }"
      },
      {
        "id": 10,
        "label": "diagnostics . data . borrow_mut () [i + 2] = i as u8 ^ override_code as u8 ;"
      },
      {
        "id": 11,
        "label": "if forge . failure_count > 3 { forge . auto_shutdown = true ; diagnostics . data . borrow_mut () [15] = 0xFF ; }"
      },
      {
        "id": 12,
        "label": "forge . auto_shutdown = true ;"
      },
      {
        "id": 13,
        "label": "diagnostics . data . borrow_mut () [15] = 0xFF ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: forge"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: operator"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: diagnostics"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 9,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 3,
        "to": 10,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 11,
        "label": "data_dep: diagnostics"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: forge"
      },
      {
        "from": 3,
        "to": 13,
        "label": "data_dep: diagnostics"
      }
    ]
  }
]