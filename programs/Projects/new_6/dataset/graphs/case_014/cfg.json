[
  {
    "name": "init_raid_room",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let room = & mut ctx . accounts . room ;"
      },
      {
        "id": 2,
        "label": "room . leader = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "room . name = raid_name ;"
      },
      {
        "id": 4,
        "label": "room . max_participants = max_participants ;"
      },
      {
        "id": 5,
        "label": "room . current_participants = 0 ;"
      },
      {
        "id": 6,
        "label": "room . total_damage = 0 ;"
      },
      {
        "id": 7,
        "label": "room . status = Preparing ;"
      },
      {
        "id": 8,
        "label": "room . completion_bonus = 1000 ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_participant",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let participant = & mut ctx . accounts . participant ;"
      },
      {
        "id": 12,
        "label": "participant . room = ctx . accounts . room . key () ;"
      },
      {
        "id": 13,
        "label": "participant . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 14,
        "label": "participant . level = player_level ;"
      },
      {
        "id": 15,
        "label": "participant . damage_dealt = 0 ;"
      },
      {
        "id": 16,
        "label": "participant . is_ready = false ;"
      },
      {
        "id": 17,
        "label": "participant . reward_claimed = false ;"
      },
      {
        "id": 18,
        "label": "participant . participant_slot = ctx . accounts . room . current_participants ;"
      },
      {
        "id": 19,
        "label": "let room = & mut ctx . accounts . room ;"
      },
      {
        "id": 20,
        "label": "room . current_participants = room . current_participants . checked_add (1) . unwrap_or (u8 :: MAX) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_raid_battle",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let room = & mut ctx . accounts . room ;"
      },
      {
        "id": 24,
        "label": "let attacker_data = ctx . accounts . attacker . try_borrow_mut_data () ? ;"
      },
      {
        "id": 25,
        "label": "let defender_data = ctx . accounts . defender . try_borrow_data () ? ;"
      },
      {
        "id": 26,
        "label": "room . total_damage = room . total_damage . checked_add (damage_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let round_damage = damage_amount / 5 ;"
      },
      {
        "id": 29,
        "label": "let bonus_multiplier = round + 1 ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "round % 2 == 0"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "room . total_damage = room . total_damage . checked_add (round_damage * bonus_multiplier as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "room . completion_bonus = room . completion_bonus ^ (round as u64 * 10) ;"
      },
      {
        "id": 36,
        "label": "room . completion_bonus = room . completion_bonus << (round % 3) ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"Attacker round {} damage: {}\" , round , round_damage) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "room . completion_bonus = room . completion_bonus . saturating_sub (round_damage / 10) ;"
      },
      {
        "id": 40,
        "label": "room . total_damage = room . total_damage + (round as u64 * 50) ;"
      },
      {
        "id": 41,
        "label": "room . current_participants = room . current_participants . wrapping_add (1) ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Defender round {} processed\" , round) ;"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 30,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 27,
        "to": 44,
        "label": "for"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      }
    ]
  }
]