[
  {
    "name": "init_tournament",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitTournament >",
      "tournament_name: String",
      "entry_fee: u64",
      "max_players: u32"
    ],
    "attributes": [],
    "body": [
      "let tournament = & mut ctx . accounts . tournament ;",
      "tournament . organizer = ctx . accounts . organizer . key () ;",
      "tournament . tournament_name = tournament_name ;",
      "tournament . entry_fee = entry_fee ;",
      "tournament . max_players = max_players ;",
      "tournament . current_players = 0 ;",
      "tournament . prize_pool = 0 ;",
      "tournament . status = TournamentStatus :: Open ;",
      "tournament . created_at = Clock :: get () ? . unix_timestamp ;",
      "msg ! (\"Tournament '{}' created\" , tournament . tournament_name) ;",
      "Ok (())"
    ]
  },
  {
    "name": "init_player_registration",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitPlayerRegistration >",
      "player_name: String",
      "skill_level: u32"
    ],
    "attributes": [],
    "body": [
      "let registration = & mut ctx . accounts . registration ;",
      "registration . tournament = ctx . accounts . tournament . key () ;",
      "registration . player = ctx . accounts . player . key () ;",
      "registration . player_name = player_name ;",
      "registration . skill_level = skill_level ;",
      "registration . matches_played = 0 ;",
      "registration . wins = 0 ;",
      "registration . is_eliminated = false ;",
      "registration . registered_at = Clock :: get () ? . unix_timestamp ;",
      "msg ! (\"Player {} registered\" , registration . player_name) ;",
      "Ok (())"
    ]
  },
  {
    "name": "process_tournament_matches",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ProcessTournamentMatches >",
      "rounds: u32",
      "score_multiplier: u32"
    ],
    "attributes": [],
    "body": [
      "let tournament = & mut ctx . accounts . tournament ;",
      "let mut round_count = 0 ;",
      "while round_count < rounds",
      "{",
      "if tournament . status == TournamentStatus :: Active",
      "{",
      "tournament . current_players = tournament . current_players . checked_add (round_count % 4) . unwrap_or (tournament . max_players) ;",
      "let round_prize = tournament . entry_fee * (round_count as u64 + 1) ;",
      "tournament . prize_pool = tournament . prize_pool . checked_add (round_prize) . unwrap_or (u64 :: MAX) ;",
      "let bit_score = (round_count ^ 0x7) << 3 ;",
      "let adjusted_score = bit_score . wrapping_mul (score_multiplier) ;",
      "tournament . prize_pool = tournament . prize_pool . checked_add (adjusted_score as u64) . unwrap_or (u64 :: MAX) ;",
      "msg ! (\"Active match round",
      "{",
      "} processed\" , round_count) ;",
      "} else",
      "{",
      "tournament . current_players = tournament . current_players . saturating_sub (1) ;",
      "let penalty = (round_count as u64) * 100 ;",
      "tournament . prize_pool = tournament . prize_pool . saturating_sub (penalty) ;",
      "let sqrt_players = integer_sqrt (tournament . current_players as u64) ;",
      "tournament . entry_fee = tournament . entry_fee . checked_add (sqrt_players * 50) . unwrap_or (u64 :: MAX) ;",
      "msg ! (\"Inactive tournament round",
      "{",
      "} processed\" , round_count) ;",
      "} round_count += 1 ;",
      "}",
      "for ranking in 0 .. 5",
      "{",
      "let ranking_bonus = (ranking as u64 + 1) * score_multiplier as u64 ;",
      "tournament . prize_pool = tournament . prize_pool . checked_add (ranking_bonus * 10) . unwrap_or (u64 :: MAX) ;",
      "tournament . current_players = (tournament . current_players * 95 + tournament . max_players * 5) / 100 ;",
      "msg ! (\"Ranking adjustment",
      "{",
      "}: bonus {}\" , ranking , ranking_bonus) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitTournament",
    "node_type": "struct",
    "fields": [
      {
        "name": "tournament",
        "attribute": "# [account (init , payer = organizer , space = 8 + 32 + 64 + 8 + 4 + 4 + 8 + 1 + 8)]",
        "field_type": "Account < 'info , Tournament >"
      },
      {
        "name": "organizer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitPlayerRegistration",
    "node_type": "struct",
    "fields": [
      {
        "name": "tournament",
        "attribute": null,
        "field_type": "Account < 'info , Tournament >"
      },
      {
        "name": "registration",
        "attribute": "# [account (init , payer = player , space = 8 + 32 + 32 + 64 + 4 + 4 + 4 + 1 + 8)]",
        "field_type": "Account < 'info , PlayerRegistration >"
      },
      {
        "name": "player",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ProcessTournamentMatches",
    "node_type": "struct",
    "fields": [
      {
        "name": "tournament",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Tournament >"
      },
      {
        "name": "player1_info",
        "attribute": "# [doc = \" CHECK: プレイヤー1の検証が不十分\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "player2_info",
        "attribute": "# [doc = \" CHECK: プレイヤー2の検証が不十分\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "match_operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Tournament",
    "node_type": "struct",
    "fields": [
      {
        "name": "organizer",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "tournament_name",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "entry_fee",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "max_players",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "current_players",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "prize_pool",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "status",
        "attribute": null,
        "field_type": "TournamentStatus"
      },
      {
        "name": "created_at",
        "attribute": null,
        "field_type": "i64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "PlayerRegistration",
    "node_type": "struct",
    "fields": [
      {
        "name": "tournament",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "player",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "player_name",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "skill_level",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "matches_played",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "wins",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "is_eliminated",
        "attribute": null,
        "field_type": "bool"
      },
      {
        "name": "registered_at",
        "attribute": null,
        "field_type": "i64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]