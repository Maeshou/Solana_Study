[
  {
    "name": "init_tournament",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let tournament = & mut ctx . accounts . tournament ;"
      },
      {
        "id": 2,
        "label": "tournament . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "tournament . tournament_name = tournament_name ;"
      },
      {
        "id": 4,
        "label": "tournament . entry_fee = entry_fee ;"
      },
      {
        "id": 5,
        "label": "tournament . max_players = max_players ;"
      },
      {
        "id": 6,
        "label": "tournament . current_players = 0 ;"
      },
      {
        "id": 7,
        "label": "tournament . prize_pool = 0 ;"
      },
      {
        "id": 8,
        "label": "tournament . status = TournamentStatus :: Open ;"
      },
      {
        "id": 9,
        "label": "tournament . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 10,
        "label": "msg ! (\"Tournament '{}' created\" , tournament . tournament_name) ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_player_registration",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let registration = & mut ctx . accounts . registration ;"
      },
      {
        "id": 14,
        "label": "registration . tournament = ctx . accounts . tournament . key () ;"
      },
      {
        "id": 15,
        "label": "registration . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 16,
        "label": "registration . player_name = player_name ;"
      },
      {
        "id": 17,
        "label": "registration . skill_level = skill_level ;"
      },
      {
        "id": 18,
        "label": "registration . matches_played = 0 ;"
      },
      {
        "id": 19,
        "label": "registration . wins = 0 ;"
      },
      {
        "id": 20,
        "label": "registration . is_eliminated = false ;"
      },
      {
        "id": 21,
        "label": "registration . registered_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Player {} registered\" , registration . player_name) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_tournament_matches",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let tournament = & mut ctx . accounts . tournament ;"
      },
      {
        "id": 26,
        "label": "let mut round_count = 0 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "tournament . status == TournamentStatus :: Active"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "tournament . current_players = tournament . current_players . checked_add (round_count % 4) . unwrap_or (tournament . max_players) ;"
      },
      {
        "id": 33,
        "label": "let round_prize = tournament . entry_fee * (round_count as u64 + 1) ;"
      },
      {
        "id": 34,
        "label": "tournament . prize_pool = tournament . prize_pool . checked_add (round_prize) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "let bit_score = (round_count ^ 0x7) << 3 ;"
      },
      {
        "id": 36,
        "label": "let adjusted_score = bit_score . wrapping_mul (score_multiplier) ;"
      },
      {
        "id": 37,
        "label": "tournament . prize_pool = tournament . prize_pool . checked_add (adjusted_score as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Active match round {} processed\" , round_count) ;"
      },
      {
        "id": 39,
        "label": "False body"
      },
      {
        "id": 40,
        "label": "tournament . current_players = tournament . current_players . saturating_sub (1) ;"
      },
      {
        "id": 41,
        "label": "let penalty = (round_count as u64) * 100 ;"
      },
      {
        "id": 42,
        "label": "tournament . prize_pool = tournament . prize_pool . saturating_sub (penalty) ;"
      },
      {
        "id": 43,
        "label": "let sqrt_players = integer_sqrt (tournament . current_players as u64) ;"
      },
      {
        "id": 44,
        "label": "tournament . entry_fee = tournament . entry_fee . checked_add (sqrt_players * 50) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"Inactive tournament round {} processed\" , round_count) ;"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "round_count += 1 ;"
      },
      {
        "id": 48,
        "label": "Loop End"
      },
      {
        "id": 49,
        "label": "Loop Start"
      },
      {
        "id": 50,
        "label": "let ranking_bonus = (ranking as u64 + 1) * score_multiplier as u64 ;"
      },
      {
        "id": 51,
        "label": "tournament . prize_pool = tournament . prize_pool . checked_add (ranking_bonus * 10) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 52,
        "label": "tournament . current_players = (tournament . current_players * 95 + tournament . max_players * 5) / 100 ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"Ranking adjustment {}: bonus {}\" , ranking , ranking_bonus) ;"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 28,
        "to": 39,
        "label": "false"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 38,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 27,
        "to": 48,
        "label": "while"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "for"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]