[
  {
    "name": "init_arena",
    "inputs": [
      "ctx: Context < InitArena >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let arena = & mut ctx . accounts . arena ;"
      },
      {
        "id": 2,
        "label": "arena . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "arena . total_battles = 0 ;"
      },
      {
        "id": 4,
        "label": "arena . prize_pool = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: arena"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: arena"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: arena"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: arena"
      }
    ]
  },
  {
    "name": "register_fighter",
    "inputs": [
      "ctx: Context < RegisterFighter >",
      "fighter_type: FighterType"
    ],
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let fighter = & mut ctx . accounts . fighter ;"
      },
      {
        "id": 8,
        "label": "fighter . arena = ctx . accounts . arena . key () ;"
      },
      {
        "id": 9,
        "label": "fighter . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 10,
        "label": "fighter . fighter_type = fighter_type ;"
      },
      {
        "id": 11,
        "label": "fighter . power = 100 ;"
      },
      {
        "id": 12,
        "label": "fighter . wins = 0 ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 7,
        "label": "def: fighter"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: fighter"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: fighter"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: fighter"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: fighter"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: fighter"
      }
    ]
  },
  {
    "name": "battle_exploit",
    "inputs": [
      "ctx: Context < VulnerableBattle >"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let attacker_info = & ctx . accounts . attacker ;"
      },
      {
        "id": 16,
        "label": "let defender_info = & ctx . accounts . defender ;"
      },
      {
        "id": 17,
        "label": "let arena = & mut ctx . accounts . arena ;"
      },
      {
        "id": 18,
        "label": "let attacker_data = attacker_info . try_borrow_data () ? ;"
      },
      {
        "id": 19,
        "label": "let defender_data = defender_info . try_borrow_data () ? ;"
      },
      {
        "id": 20,
        "label": "if attacker_data . len () >= 41 && defender_data . len () >= 41 { let attacker_power = u32 :: from_le_bytes ([attacker_data [33] , attacker_data [34] , attacker_data [35] , attacker_data [36]]) ; let defender_power = u32 :: from_le_bytes ([defender_data [33] , defender_data [34] , defender_data [35] , defender_data [36]]) ; for round in 0 .. 3 { if attacker_power > defender_power { arena . prize_pool = arena . prize_pool . checked_add ((round + 1) as u64 * 100) . unwrap_or (u64 :: MAX) ; arena . total_battles = arena . total_battles . checked_add (1) . unwrap_or (u64 :: MAX) ; msg ! (\"Attacker wins round {}\" , round) ; } else { arena . total_battles = arena . total_battles . checked_add (2) . unwrap_or (u64 :: MAX) ; arena . prize_pool = arena . prize_pool . checked_add (50) . unwrap_or (u64 :: MAX) ; msg ! (\"Defender wins round {}\" , round) ; } } }"
      },
      {
        "id": 21,
        "label": "let attacker_power = u32 :: from_le_bytes ([attacker_data [33] , attacker_data [34] , attacker_data [35] , attacker_data [36]]) ;"
      },
      {
        "id": 22,
        "label": "let defender_power = u32 :: from_le_bytes ([defender_data [33] , defender_data [34] , defender_data [35] , defender_data [36]]) ;"
      },
      {
        "id": 23,
        "label": "for round in 0 .. 3 { if attacker_power > defender_power { arena . prize_pool = arena . prize_pool . checked_add ((round + 1) as u64 * 100) . unwrap_or (u64 :: MAX) ; arena . total_battles = arena . total_battles . checked_add (1) . unwrap_or (u64 :: MAX) ; msg ! (\"Attacker wins round {}\" , round) ; } else { arena . total_battles = arena . total_battles . checked_add (2) . unwrap_or (u64 :: MAX) ; arena . prize_pool = arena . prize_pool . checked_add (50) . unwrap_or (u64 :: MAX) ; msg ! (\"Defender wins round {}\" , round) ; } }"
      },
      {
        "id": 24,
        "label": "if attacker_power > defender_power { arena . prize_pool = arena . prize_pool . checked_add ((round + 1) as u64 * 100) . unwrap_or (u64 :: MAX) ; arena . total_battles = arena . total_battles . checked_add (1) . unwrap_or (u64 :: MAX) ; msg ! (\"Attacker wins round {}\" , round) ; } else { arena . total_battles = arena . total_battles . checked_add (2) . unwrap_or (u64 :: MAX) ; arena . prize_pool = arena . prize_pool . checked_add (50) . unwrap_or (u64 :: MAX) ; msg ! (\"Defender wins round {}\" , round) ; }"
      },
      {
        "id": 25,
        "label": "arena . prize_pool = arena . prize_pool . checked_add ((round + 1) as u64 * 100) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 26,
        "label": "arena . total_battles = arena . total_battles . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Attacker wins round {}\" , round) ;"
      },
      {
        "id": 28,
        "label": "arena . total_battles = arena . total_battles . checked_add (2) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "arena . prize_pool = arena . prize_pool . checked_add (50) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "msg ! (\"Defender wins round {}\" , round) ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: attacker_info"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: defender_info"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: arena"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: attacker_data"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: attacker_info"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: defender_data"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: defender_info"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: defender_data"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: defender_data"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: arena"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: attacker_power"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: attacker_data"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: defender_power"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: defender_data"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: defender_data"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: attacker_power"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: defender_power"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: arena"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: attacker_power"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: defender_power"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 26,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 26,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 28,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 28,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: arena"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: arena"
      }
    ]
  }
]