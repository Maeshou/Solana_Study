[
  {
    "name": "init_yield_farm",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let farm = & mut ctx . accounts . yield_farm ;"
      },
      {
        "id": 2,
        "label": "farm . farm_owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "farm . reward_per_block = reward_token_per_block ;"
      },
      {
        "id": 4,
        "label": "farm . bonus_multiplier = bonus_multiplier ;"
      },
      {
        "id": 5,
        "label": "farm . total_staked = 0 ;"
      },
      {
        "id": 6,
        "label": "farm . total_rewards_distributed = 0 ;"
      },
      {
        "id": 7,
        "label": "farm . start_block = Clock :: get () ? . slot ;"
      },
      {
        "id": 8,
        "label": "farm . last_reward_block = Clock :: get () ? . slot ;"
      },
      {
        "id": 9,
        "label": "farm . accumulated_reward_per_share = 0 ;"
      },
      {
        "id": 10,
        "label": "farm . emission_rate = 100 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "harvest_rewards",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let farm = & mut ctx . accounts . yield_farm ;"
      },
      {
        "id": 14,
        "label": "let user_info = & mut ctx . accounts . user_farming_info ;"
      },
      {
        "id": 15,
        "label": "let harvester = & ctx . accounts . harvester ;"
      },
      {
        "id": 16,
        "label": "let current_block = Clock :: get () ? . slot ;"
      },
      {
        "id": 17,
        "label": "let blocks_elapsed = current_block - farm . last_reward_block ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "blocks_elapsed > 0 && farm . total_staked > 0"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "let reward = blocks_elapsed * farm . reward_per_block ;"
      },
      {
        "id": 23,
        "label": "farm . accumulated_reward_per_share += (reward * 1e12 as u64) / farm . total_staked ;"
      },
      {
        "id": 24,
        "label": "farm . last_reward_block = current_block ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "No-op"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "let user_accumulated_reward = (user_info . staked_amount * farm . accumulated_reward_per_share) / 1e12 as u64 ;"
      },
      {
        "id": 29,
        "label": "let pending_reward = user_accumulated_reward - user_info . reward_debt ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "pending_reward > 0"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "user_info . total_harvested += pending_reward ;"
      },
      {
        "id": 35,
        "label": "farm . total_rewards_distributed += pending_reward ;"
      },
      {
        "id": 36,
        "label": "if statement"
      },
      {
        "id": 37,
        "label": "predicate"
      },
      {
        "id": 38,
        "label": "force_compound"
      },
      {
        "id": 39,
        "label": "True body"
      },
      {
        "id": 40,
        "label": "user_info . staked_amount += pending_reward ;"
      },
      {
        "id": 41,
        "label": "farm . total_staked += pending_reward ;"
      },
      {
        "id": 42,
        "label": "user_info . compound_count += 1 ;"
      },
      {
        "id": 43,
        "label": "let compound_bonus = (pending_reward * farm . bonus_multiplier as u64) / 10000 ;"
      },
      {
        "id": 44,
        "label": "user_info . bonus_rewards += compound_bonus ;"
      },
      {
        "id": 45,
        "label": "farm . total_bonus_distributed += compound_bonus ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let farming_duration = current_block - user_info . first_stake_block ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "farming_duration > 100000"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "user_info . loyalty_multiplier = (user_info . loyalty_multiplier + 5) . min (200) ;"
      },
      {
        "id": 55,
        "label": "False body"
      },
      {
        "id": 56,
        "label": "No-op"
      },
      {
        "id": 57,
        "label": "merge"
      },
      {
        "id": 58,
        "label": "Loop Start"
      },
      {
        "id": 59,
        "label": "if statement"
      },
      {
        "id": 60,
        "label": "predicate"
      },
      {
        "id": 61,
        "label": "farming_duration > (week + 1) as u64 * 10080"
      },
      {
        "id": 62,
        "label": "True body"
      },
      {
        "id": 63,
        "label": "user_info . weekly_multipliers [week] = 110 + (week as u16 * 10) ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "No-op"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "Loop End"
      },
      {
        "id": 68,
        "label": "user_info . reward_debt = (user_info . staked_amount * farm . accumulated_reward_per_share) / 1e12 as u64 ;"
      },
      {
        "id": 69,
        "label": "False body"
      },
      {
        "id": 70,
        "label": "No-op"
      },
      {
        "id": 71,
        "label": "merge"
      },
      {
        "id": 72,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 18,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "predicate"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "true"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 36,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 50,
        "to": 55,
        "label": "false"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "predicate"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "true"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 59,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 58,
        "to": 67,
        "label": "for"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 30,
        "to": 69,
        "label": "false"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      }
    ]
  }
]