[
  {
    "name": "init_energy_hub",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let hub = & mut ctx . accounts . hub ;"
      },
      {
        "id": 2,
        "label": "hub . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "hub . name = hub_name ;"
      },
      {
        "id": 4,
        "label": "hub . total_energy = 10000 ;"
      },
      {
        "id": 5,
        "label": "hub . active_users = 0 ;"
      },
      {
        "id": 6,
        "label": "hub . regeneration_rate = 10 ;"
      },
      {
        "id": 7,
        "label": "hub . is_operational = true ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_player_energy",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let player_energy = & mut ctx . accounts . player_energy ;"
      },
      {
        "id": 11,
        "label": "player_energy . hub = ctx . accounts . hub . key () ;"
      },
      {
        "id": 12,
        "label": "player_energy . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 13,
        "label": "player_energy . current_energy = max_energy ;"
      },
      {
        "id": 14,
        "label": "player_energy . max_energy = max_energy ;"
      },
      {
        "id": 15,
        "label": "player_energy . last_regeneration = 2000 ;"
      },
      {
        "id": 16,
        "label": "player_energy . energy_type = Combat ;"
      },
      {
        "id": 17,
        "label": "player_energy . usage_count = 0 ;"
      },
      {
        "id": 18,
        "label": "let hub = & mut ctx . accounts . hub ;"
      },
      {
        "id": 19,
        "label": "hub . active_users = hub . active_users . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  },
  {
    "name": "transfer_energy",
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let hub = & mut ctx . accounts . hub ;"
      },
      {
        "id": 23,
        "label": "let source_data = ctx . accounts . source_energy . try_borrow_mut_data () ? ;"
      },
      {
        "id": 24,
        "label": "let target_data = ctx . accounts . target_energy . try_borrow_mut_data () ? ;"
      },
      {
        "id": 25,
        "label": "hub . total_energy = hub . total_energy . checked_add (amount as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "let step_amount = transfer_step + 1 ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "transfer_step % 2 == 0"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "hub . regeneration_rate = hub . regeneration_rate . checked_add (step_amount / 10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 33,
        "label": "hub . total_energy = hub . total_energy ^ (transfer_step as u64) ;"
      },
      {
        "id": 34,
        "label": "hub . active_users = hub . active_users << 1 ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"Source energy step {} processed\" , transfer_step) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "hub . regeneration_rate = hub . regeneration_rate . saturating_sub (1) ;"
      },
      {
        "id": 38,
        "label": "hub . total_energy = hub . total_energy + (step_amount as u64 * 5) ;"
      },
      {
        "id": 39,
        "label": "hub . active_users = hub . active_users . wrapping_add (step_amount) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Target energy step {} processed\" , transfer_step) ;"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "Loop End"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 28,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 35,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 26,
        "to": 42,
        "label": "for"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]