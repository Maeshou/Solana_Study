[
  {
    "name": "init_price_feed",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let feed = & mut ctx . accounts . price_feed ;"
      },
      {
        "id": 2,
        "label": "feed . oracle_authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "feed . asset_symbol = asset_symbol ;"
      },
      {
        "id": 4,
        "label": "feed . update_frequency_seconds = update_frequency ;"
      },
      {
        "id": 5,
        "label": "feed . current_price = 0 ;"
      },
      {
        "id": 6,
        "label": "feed . last_update = 0 ;"
      },
      {
        "id": 7,
        "label": "feed . price_deviation_threshold = 500 ;"
      },
      {
        "id": 8,
        "label": "feed . total_updates = 0 ;"
      },
      {
        "id": 9,
        "label": "feed . reliability_score = 1000 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "aggregate_price_data",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let feed = & mut ctx . accounts . price_feed ;"
      },
      {
        "id": 13,
        "label": "let aggregator = & ctx . accounts . aggregator ;"
      },
      {
        "id": 14,
        "label": "let current_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 15,
        "label": "let submission_count = price_submissions . len () . min (10) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "submission_count > 0"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "let mut weighted_sum = 0u128 ;"
      },
      {
        "id": 21,
        "label": "let mut total_weight = 0u128 ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let price = price_submissions [i] ;"
      },
      {
        "id": 24,
        "label": "let confidence = confidence_scores . get (i) . unwrap_or (& 1000) . min (& 1000) ;"
      },
      {
        "id": 25,
        "label": "let weight = * confidence as u128 ;"
      },
      {
        "id": 26,
        "label": "weighted_sum += price as u128 * weight ;"
      },
      {
        "id": 27,
        "label": "total_weight += weight ;"
      },
      {
        "id": 28,
        "label": "feed . price_history [i] = price ;"
      },
      {
        "id": 29,
        "label": "feed . confidence_history [i] = * confidence ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let new_price = if total_weight > 0 { (weighted_sum / total_weight) as u64 } else { feed . current_price } ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "feed . current_price > 0"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "let deviation = if new_price > feed . current_price { ((new_price - feed . current_price) * 10000) / feed . current_price } else { ((feed . current_price - new_price) * 10000) / feed . current_price } ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "deviation > feed . price_deviation_threshold as u64"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "feed . reliability_score = feed . reliability_score . saturating_sub (50) ;"
      },
      {
        "id": 42,
        "label": "feed . large_deviation_count += 1 ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "feed . reliability_score = (feed . reliability_score + 10) . min (1000) ;"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "feed . volatility_score = ((feed . volatility_score as u64 * 9 + deviation) / 10) as u16 ;"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "No-op"
      },
      {
        "id": 49,
        "label": "merge"
      },
      {
        "id": 50,
        "label": "feed . current_price = new_price ;"
      },
      {
        "id": 51,
        "label": "feed . last_update = current_time ;"
      },
      {
        "id": 52,
        "label": "feed . total_updates += 1 ;"
      },
      {
        "id": 53,
        "label": "let window_size = 5 . min (feed . total_updates) ;"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "window_size > 0"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "let mut sum = 0u64 ;"
      },
      {
        "id": 59,
        "label": "Loop Start"
      },
      {
        "id": 60,
        "label": "sum += feed . price_history [j as usize] ;"
      },
      {
        "id": 61,
        "label": "Loop End"
      },
      {
        "id": 62,
        "label": "feed . moving_average_5 = sum / window_size as u64 ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "No-op"
      },
      {
        "id": 65,
        "label": "merge"
      },
      {
        "id": 66,
        "label": "False body"
      },
      {
        "id": 67,
        "label": "No-op"
      },
      {
        "id": 68,
        "label": "merge"
      },
      {
        "id": 69,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 22,
        "to": 30,
        "label": "for"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 32,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 61,
        "label": "for"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 54,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 62,
        "to": 65,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 16,
        "to": 66,
        "label": "false"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 65,
        "to": 68,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      }
    ]
  }
]