[
  {
    "name": "init_lending_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . lending_pool ;"
      },
      {
        "id": 2,
        "label": "pool . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "pool . total_deposits = 0 ;"
      },
      {
        "id": 4,
        "label": "pool . total_borrows = 0 ;"
      },
      {
        "id": 5,
        "label": "pool . interest_rate = 8 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_deposit",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let deposit = & mut ctx . accounts . deposit_account ;"
      },
      {
        "id": 9,
        "label": "deposit . pool = ctx . accounts . lending_pool . key () ;"
      },
      {
        "id": 10,
        "label": "deposit . depositor = ctx . accounts . depositor . key () ;"
      },
      {
        "id": 11,
        "label": "deposit . amount = amount ;"
      },
      {
        "id": 12,
        "label": "deposit . interest_earned = 0 ;"
      },
      {
        "id": 13,
        "label": "deposit . last_update = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 14,
        "label": "let pool = & mut ctx . accounts . lending_pool ;"
      },
      {
        "id": 15,
        "label": "pool . total_deposits = pool . total_deposits . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "vulnerable_liquidation",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let pool = & mut ctx . accounts . lending_pool ;"
      },
      {
        "id": 19,
        "label": "let borrower_info = & ctx . accounts . borrower_position ;"
      },
      {
        "id": 20,
        "label": "let liquidator_info = & ctx . accounts . liquidator_position ;"
      },
      {
        "id": 21,
        "label": "let borrower_data = borrower_info . try_borrow_data () ? ;"
      },
      {
        "id": 22,
        "label": "let liquidator_data = liquidator_info . try_borrow_data () ? ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "borrower_data . len () >= 40 && liquidator_data . len () >= 40"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "let borrow_amount = u64 :: from_le_bytes ([borrower_data [32] , borrower_data [33] , borrower_data [34] , borrower_data [35] , borrower_data [36] , borrower_data [37] , borrower_data [38] , borrower_data [39]]) ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "borrow_amount > 5000"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "let liquidation_amount = (borrow_amount >> liquidation_round) & 0x1FF ;"
      },
      {
        "id": 34,
        "label": "pool . total_borrows = pool . total_borrows . saturating_sub (liquidation_amount) ;"
      },
      {
        "id": 35,
        "label": "let rate_adjustment = (liquidation_amount >> 8) & 0x0F ;"
      },
      {
        "id": 36,
        "label": "pool . interest_rate = pool . interest_rate . checked_add (rate_adjustment as u32) . unwrap_or (50) ;"
      },
      {
        "id": 37,
        "label": "let bonus = liquidation_amount * (liquidation_round + 1) as u64 / 10 ;"
      },
      {
        "id": 38,
        "label": "pool . total_deposits = pool . total_deposits . checked_add (bonus) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"Liquidation round {}: amount={}, bonus={}\" , liquidation_round , liquidation_amount , bonus) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "let penalty = pool . total_deposits / 100 ;"
      },
      {
        "id": 42,
        "label": "pool . total_deposits = pool . total_deposits . saturating_sub (penalty) ;"
      },
      {
        "id": 43,
        "label": "let compound_interest = (pool . total_borrows * pool . interest_rate as u64) / 100 ;"
      },
      {
        "id": 44,
        "label": "pool . total_borrows = pool . total_borrows . checked_add (compound_interest) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"Penalty applied: {}, compound interest: {}\" , penalty , compound_interest) ;"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "Loop End"
      },
      {
        "id": 48,
        "label": "False body"
      },
      {
        "id": 49,
        "label": "No-op"
      },
      {
        "id": 50,
        "label": "merge"
      },
      {
        "id": 51,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 29,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 39,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 28,
        "to": 47,
        "label": "for"
      },
      {
        "from": 23,
        "to": 48,
        "label": "false"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      }
    ]
  }
]