[
  {
    "name": "init_arena",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let arena = & mut ctx . accounts . arena ;"
      },
      {
        "id": 2,
        "label": "arena . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "arena . total_matches = 0 ;"
      },
      {
        "id": 4,
        "label": "arena . total_rewards_distributed = 0 ;"
      },
      {
        "id": 5,
        "label": "arena . reward_pool = base_pool ;"
      },
      {
        "id": 6,
        "label": "arena . max_rank = max_rank ;"
      },
      {
        "id": 7,
        "label": "arena . rewards_per_rank = vec ! [100 , 80 , 60 , 40 , 20] ;"
      },
      {
        "id": 8,
        "label": "arena . rank_statistics = [0 ; 10] ;"
      },
      {
        "id": 9,
        "label": "arena . paused = false ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "report_match_and_distribute",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let arena = & mut ctx . accounts . arena ;"
      },
      {
        "id": 13,
        "label": "let match_log = & mut ctx . accounts . match_log ;"
      },
      {
        "id": 14,
        "label": "let reporter = & ctx . accounts . reporter ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "arena . paused"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "rank >= arena . max_rank"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "arena . rank_statistics [9] += 1 ;"
      },
      {
        "id": 28,
        "label": "return Ok (()) ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "match_log . player = reporter . key () ;"
      },
      {
        "id": 33,
        "label": "match_log . rank = rank ;"
      },
      {
        "id": 34,
        "label": "match_log . opponent_power = opponent_power ;"
      },
      {
        "id": 35,
        "label": "match_log . nonce = match_nonce ;"
      },
      {
        "id": 36,
        "label": "match_log . timestamp = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 37,
        "label": "match_log . processed = false ;"
      },
      {
        "id": 38,
        "label": "match_log . notes = vec ! [] ;"
      },
      {
        "id": 39,
        "label": "let mut validation_score : u32 = 0 ;"
      },
      {
        "id": 40,
        "label": "let key_bytes = reporter . key () . to_bytes () ;"
      },
      {
        "id": 41,
        "label": "Loop Start"
      },
      {
        "id": 42,
        "label": "validation_score += (* byte as u32) . wrapping_mul ((i as u32 + 3)) ;"
      },
      {
        "id": 43,
        "label": "Loop End"
      },
      {
        "id": 44,
        "label": "validation_score ^= rank . rotate_left (2) ;"
      },
      {
        "id": 45,
        "label": "validation_score = validation_score . rotate_right ((match_nonce % 32) as u32) ;"
      },
      {
        "id": 46,
        "label": "let mut reward = 0u64 ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "validation_score % 5 == 0"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "reward += 10 ;"
      },
      {
        "id": 52,
        "label": "match_log . notes . push (\"Bonus: validation checksum passed\" . to_string ()) ;"
      },
      {
        "id": 53,
        "label": "False body"
      },
      {
        "id": 54,
        "label": "No-op"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "if statement"
      },
      {
        "id": 57,
        "label": "predicate"
      },
      {
        "id": 58,
        "label": "opponent_power > 1000"
      },
      {
        "id": 59,
        "label": "True body"
      },
      {
        "id": 60,
        "label": "reward += opponent_power % 250 ;"
      },
      {
        "id": 61,
        "label": "match_log . notes . push (\"Strong opponent bonus applied\" . to_string ()) ;"
      },
      {
        "id": 62,
        "label": "False body"
      },
      {
        "id": 63,
        "label": "No-op"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "let mut table_bonus = 0u64 ;"
      },
      {
        "id": 66,
        "label": "Loop Start"
      },
      {
        "id": 67,
        "label": "if statement"
      },
      {
        "id": 68,
        "label": "predicate"
      },
      {
        "id": 69,
        "label": "i as u32 == rank"
      },
      {
        "id": 70,
        "label": "True body"
      },
      {
        "id": 71,
        "label": "table_bonus = arena . rewards_per_rank [i] ;"
      },
      {
        "id": 72,
        "label": "False body"
      },
      {
        "id": 73,
        "label": "No-op"
      },
      {
        "id": 74,
        "label": "merge"
      },
      {
        "id": 75,
        "label": "Loop End"
      },
      {
        "id": 76,
        "label": "reward += table_bonus ;"
      },
      {
        "id": 77,
        "label": "if statement"
      },
      {
        "id": 78,
        "label": "predicate"
      },
      {
        "id": 79,
        "label": "match_nonce % 2 == 0"
      },
      {
        "id": 80,
        "label": "True body"
      },
      {
        "id": 81,
        "label": "reward ^= 0x55 ;"
      },
      {
        "id": 82,
        "label": "False body"
      },
      {
        "id": 83,
        "label": "No-op"
      },
      {
        "id": 84,
        "label": "merge"
      },
      {
        "id": 85,
        "label": "match_log . reward_given = reward ;"
      },
      {
        "id": 86,
        "label": "match_log . processed = true ;"
      },
      {
        "id": 87,
        "label": "match_log . validation_hash = validation_score ;"
      },
      {
        "id": 88,
        "label": "arena . total_matches += 1 ;"
      },
      {
        "id": 89,
        "label": "arena . total_rewards_distributed = arena . total_rewards_distributed . saturating_add (reward) ;"
      },
      {
        "id": 90,
        "label": "arena . reward_pool = arena . reward_pool . saturating_sub (reward) ;"
      },
      {
        "id": 91,
        "label": "if statement"
      },
      {
        "id": 92,
        "label": "predicate"
      },
      {
        "id": 93,
        "label": "rank < 10"
      },
      {
        "id": 94,
        "label": "True body"
      },
      {
        "id": 95,
        "label": "arena . rank_statistics [rank as usize] += 1 ;"
      },
      {
        "id": 96,
        "label": "False body"
      },
      {
        "id": 97,
        "label": "No-op"
      },
      {
        "id": 98,
        "label": "merge"
      },
      {
        "id": 99,
        "label": "if statement"
      },
      {
        "id": 100,
        "label": "predicate"
      },
      {
        "id": 101,
        "label": "rank == 0"
      },
      {
        "id": 102,
        "label": "True body"
      },
      {
        "id": 103,
        "label": "match_log . notes . push (\"Top rank match recorded\" . to_string ()) ;"
      },
      {
        "id": 104,
        "label": "False body"
      },
      {
        "id": 105,
        "label": "No-op"
      },
      {
        "id": 106,
        "label": "merge"
      },
      {
        "id": 107,
        "label": "let risk = (validation_score % 128) as u8 ;"
      },
      {
        "id": 108,
        "label": "if statement"
      },
      {
        "id": 109,
        "label": "predicate"
      },
      {
        "id": 110,
        "label": "risk > 100"
      },
      {
        "id": 111,
        "label": "True body"
      },
      {
        "id": 112,
        "label": "match_log . flagged_for_audit = true ;"
      },
      {
        "id": 113,
        "label": "match_log . notes . push (\"Flagged for audit: risk too high\" . to_string ()) ;"
      },
      {
        "id": 114,
        "label": "False body"
      },
      {
        "id": 115,
        "label": "No-op"
      },
      {
        "id": 116,
        "label": "merge"
      },
      {
        "id": 117,
        "label": "arena . admin = reporter . key () ;"
      },
      {
        "id": 118,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 23,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 43,
        "label": "for"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 47,
        "to": 53,
        "label": "false"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "predicate"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "true"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 56,
        "to": 62,
        "label": "false"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "predicate"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "true"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 67,
        "to": 72,
        "label": "false"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 66,
        "to": 75,
        "label": "for"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "predicate"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 77,
        "to": 80,
        "label": "true"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 77,
        "to": 82,
        "label": "false"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "predicate"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "true"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 91,
        "to": 96,
        "label": "false"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 95,
        "to": 98,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "predicate"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 99,
        "to": 102,
        "label": "true"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 99,
        "to": 104,
        "label": "false"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 103,
        "to": 106,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "predicate"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 108,
        "to": 111,
        "label": "true"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 108,
        "to": 114,
        "label": "false"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 113,
        "to": 116,
        "label": "next"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "next"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      }
    ]
  }
]