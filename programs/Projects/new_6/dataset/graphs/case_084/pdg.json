[
  {
    "name": "init_campaign",
    "inputs": [
      "ctx: Context < InitCampaign >",
      "cap: u64",
      "wave_span: i64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 2,
        "label": "c . owner = ctx . accounts . distributor . key () ;"
      },
      {
        "id": 3,
        "label": "c . cap = cap ;"
      },
      {
        "id": 4,
        "label": "c . claimed = 0 ;"
      },
      {
        "id": 5,
        "label": "c . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 6,
        "label": "c . wave_span = wave_span ;"
      },
      {
        "id": 7,
        "label": "c . paused = false ;"
      },
      {
        "id": 8,
        "label": "c . manual_bonus = 0 ;"
      },
      {
        "id": 9,
        "label": "let mut base = cap . rotate_left (5) ;"
      },
      {
        "id": 10,
        "label": "for step in 1 .. 4 { base = base . wrapping_add ((step as u64) . pow (2)) . rotate_right (1) ; }"
      },
      {
        "id": 11,
        "label": "base = base . wrapping_add ((step as u64) . pow (2)) . rotate_right (1) ;"
      },
      {
        "id": 12,
        "label": "c . health_score = (base % 10_000) as u16 ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: base"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: base"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: base"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: base"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: base"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: base"
      }
    ]
  },
  {
    "name": "register_participant",
    "inputs": [
      "ctx: Context < RegisterParticipant >",
      "profile_note: String"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 16,
        "label": "let p = & mut ctx . accounts . participant ;"
      },
      {
        "id": 17,
        "label": "let who = & ctx . accounts . user ;"
      },
      {
        "id": 18,
        "label": "p . user = who . key () ;"
      },
      {
        "id": 19,
        "label": "p . note = profile_note ;"
      },
      {
        "id": 20,
        "label": "p . joined_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 21,
        "label": "p . claimed_amount = 0 ;"
      },
      {
        "id": 22,
        "label": "p . recent_hash = p . user . to_bytes () [0] as u64 + (p . joined_at as u64) ;"
      },
      {
        "id": 23,
        "label": "let calc = (p . recent_hash ^ c . cap) . rotate_left (2) ;"
      },
      {
        "id": 24,
        "label": "if calc % 3 > 0 { p . priority = (calc % 100) as u8 ; } else { p . priority = ((calc % 50) as u8) . saturating_add (5) ; }"
      },
      {
        "id": 25,
        "label": "p . priority = (calc % 100) as u8 ;"
      },
      {
        "id": 26,
        "label": "p . priority = ((calc % 50) as u8) . saturating_add (5) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: c"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: p"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: who"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: p"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: who"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: calc"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: calc"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: calc"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: calc"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: calc"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: p"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: calc"
      }
    ]
  },
  {
    "name": "execute_airdrop",
    "inputs": [
      "ctx: Context < ExecuteAirdrop >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 28,
        "label": "Entry"
      },
      {
        "id": 29,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 30,
        "label": "let p = & mut ctx . accounts . participant ;"
      },
      {
        "id": 31,
        "label": "let exec = & ctx . accounts . distributor ;"
      },
      {
        "id": 32,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 33,
        "label": "let age = now . saturating_sub (c . created_at) ;"
      },
      {
        "id": 34,
        "label": "let mut quota = amount ;"
      },
      {
        "id": 35,
        "label": "let mut waves = 1i64 ;"
      },
      {
        "id": 36,
        "label": "if c . wave_span > 0 { waves = age / c . wave_span + 1 ; }"
      },
      {
        "id": 37,
        "label": "waves = age / c . wave_span + 1 ;"
      },
      {
        "id": 38,
        "label": "let mut i = 0i64 ;"
      },
      {
        "id": 39,
        "label": "while i < waves { quota = quota . saturating_add ((i as u64) . wrapping_mul (7)) ; if i % 2 == 1 { c . manual_bonus = c . manual_bonus . saturating_add (1) ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 40,
        "label": "quota = quota . saturating_add ((i as u64) . wrapping_mul (7)) ;"
      },
      {
        "id": 41,
        "label": "if i % 2 == 1 { c . manual_bonus = c . manual_bonus . saturating_add (1) ; }"
      },
      {
        "id": 42,
        "label": "c . manual_bonus = c . manual_bonus . saturating_add (1) ;"
      },
      {
        "id": 43,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "if c . claimed . saturating_add (quota) > c . cap { let remain = c . cap . saturating_sub (c . claimed) ; quota = remain ; }"
      },
      {
        "id": 45,
        "label": "let remain = c . cap . saturating_sub (c . claimed) ;"
      },
      {
        "id": 46,
        "label": "quota = remain ;"
      },
      {
        "id": 47,
        "label": "p . claimed_amount = p . claimed_amount . saturating_add (quota) ;"
      },
      {
        "id": 48,
        "label": "c . claimed = c . claimed . saturating_add (quota) ;"
      },
      {
        "id": 49,
        "label": "c . last_executor = exec . key () ;"
      },
      {
        "id": 50,
        "label": "let mix = (quota ^ (p . recent_hash | c . cap)) . rotate_right (3) ;"
      },
      {
        "id": 51,
        "label": "c . health_score = c . health_score . saturating_add ((mix % 37) as u16) ;"
      },
      {
        "id": 52,
        "label": "if quota > 0 && mix % 5 == 0 { c . paused = true ; } else { if c . paused { c . paused = false ; } }"
      },
      {
        "id": 53,
        "label": "c . paused = true ;"
      },
      {
        "id": 54,
        "label": "if c . paused { c . paused = false ; }"
      },
      {
        "id": 55,
        "label": "c . paused = false ;"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 29,
        "to": 29,
        "label": "def: c"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: p"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: exec"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: now"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: age"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: now"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: c"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: quota"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: waves"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: c"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: waves"
      },
      {
        "from": 33,
        "to": 36,
        "label": "data_dep: age"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: c"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: waves"
      },
      {
        "from": 33,
        "to": 37,
        "label": "data_dep: age"
      },
      {
        "from": 29,
        "to": 37,
        "label": "data_dep: c"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: i"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: i"
      },
      {
        "from": 35,
        "to": 39,
        "label": "data_dep: waves"
      },
      {
        "from": 34,
        "to": 39,
        "label": "data_dep: quota"
      },
      {
        "from": 34,
        "to": 39,
        "label": "data_dep: quota"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: i"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: i"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: c"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: i"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: i"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: quota"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: quota"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: i"
      },
      {
        "from": 38,
        "to": 41,
        "label": "data_dep: i"
      },
      {
        "from": 29,
        "to": 41,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 41,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 42,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 42,
        "label": "data_dep: c"
      },
      {
        "from": 38,
        "to": 43,
        "label": "data_dep: i"
      },
      {
        "from": 38,
        "to": 43,
        "label": "data_dep: i"
      },
      {
        "from": 29,
        "to": 44,
        "label": "data_dep: c"
      },
      {
        "from": 34,
        "to": 44,
        "label": "data_dep: quota"
      },
      {
        "from": 29,
        "to": 44,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 44,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 44,
        "label": "data_dep: c"
      },
      {
        "from": 34,
        "to": 44,
        "label": "data_dep: quota"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: remain"
      },
      {
        "from": 29,
        "to": 45,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 45,
        "label": "data_dep: c"
      },
      {
        "from": 34,
        "to": 46,
        "label": "data_dep: quota"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: remain"
      },
      {
        "from": 30,
        "to": 47,
        "label": "data_dep: p"
      },
      {
        "from": 30,
        "to": 47,
        "label": "data_dep: p"
      },
      {
        "from": 34,
        "to": 47,
        "label": "data_dep: quota"
      },
      {
        "from": 29,
        "to": 48,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 48,
        "label": "data_dep: c"
      },
      {
        "from": 34,
        "to": 48,
        "label": "data_dep: quota"
      },
      {
        "from": 29,
        "to": 49,
        "label": "data_dep: c"
      },
      {
        "from": 31,
        "to": 49,
        "label": "data_dep: exec"
      },
      {
        "from": 50,
        "to": 50,
        "label": "def: mix"
      },
      {
        "from": 34,
        "to": 50,
        "label": "data_dep: quota"
      },
      {
        "from": 30,
        "to": 50,
        "label": "data_dep: p"
      },
      {
        "from": 29,
        "to": 50,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 51,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 51,
        "label": "data_dep: c"
      },
      {
        "from": 50,
        "to": 51,
        "label": "data_dep: mix"
      },
      {
        "from": 34,
        "to": 52,
        "label": "data_dep: quota"
      },
      {
        "from": 50,
        "to": 52,
        "label": "data_dep: mix"
      },
      {
        "from": 29,
        "to": 52,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 52,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 52,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 53,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 54,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 54,
        "label": "data_dep: c"
      },
      {
        "from": 29,
        "to": 55,
        "label": "data_dep: c"
      }
    ]
  }
]