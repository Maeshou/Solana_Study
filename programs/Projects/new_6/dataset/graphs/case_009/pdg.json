[
  {
    "name": "init_prediction_market",
    "inputs": [
      "ctx: Context < InitPredictionMarket >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let market = & mut ctx . accounts . prediction_market ;"
      },
      {
        "id": 2,
        "label": "market . oracle = ctx . accounts . oracle . key () ;"
      },
      {
        "id": 3,
        "label": "market . total_volume = 0 ;"
      },
      {
        "id": 4,
        "label": "market . yes_pool = 0 ;"
      },
      {
        "id": 5,
        "label": "market . no_pool = 0 ;"
      },
      {
        "id": 6,
        "label": "market . resolved = false ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: market"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: market"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: market"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: market"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: market"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: market"
      }
    ]
  },
  {
    "name": "create_bet",
    "inputs": [
      "ctx: Context < CreateBet >",
      "amount: u64",
      "prediction: bool"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let bet = & mut ctx . accounts . bet_account ;"
      },
      {
        "id": 10,
        "label": "bet . market = ctx . accounts . prediction_market . key () ;"
      },
      {
        "id": 11,
        "label": "bet . bettor = ctx . accounts . bettor . key () ;"
      },
      {
        "id": 12,
        "label": "bet . amount = amount ;"
      },
      {
        "id": 13,
        "label": "bet . prediction = prediction ;"
      },
      {
        "id": 14,
        "label": "bet . claimed = false ;"
      },
      {
        "id": 15,
        "label": "let market = & mut ctx . accounts . prediction_market ;"
      },
      {
        "id": 16,
        "label": "market . total_volume = market . total_volume . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 17,
        "label": "if prediction { market . yes_pool = market . yes_pool . checked_add (amount) . unwrap_or (u64 :: MAX) ; } else { market . no_pool = market . no_pool . checked_add (amount) . unwrap_or (u64 :: MAX) ; }"
      },
      {
        "id": 18,
        "label": "market . yes_pool = market . yes_pool . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 19,
        "label": "market . no_pool = market . no_pool . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: bet"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: bet"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: bet"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: bet"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: bet"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: bet"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: market"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: market"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: market"
      }
    ]
  },
  {
    "name": "vulnerable_resolve",
    "inputs": [
      "ctx: Context < VulnerableResolve >"
    ],
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let market = & mut ctx . accounts . prediction_market ;"
      },
      {
        "id": 23,
        "label": "let winner_info = & ctx . accounts . winner_bet ;"
      },
      {
        "id": 24,
        "label": "let loser_info = & ctx . accounts . loser_bet ;"
      },
      {
        "id": 25,
        "label": "let winner_data = winner_info . try_borrow_mut_data () ? ;"
      },
      {
        "id": 26,
        "label": "let loser_data = loser_info . try_borrow_data () ? ;"
      },
      {
        "id": 27,
        "label": "if winner_data . len () >= 41 && loser_data . len () >= 41 { let winner_amount = u64 :: from_le_bytes ([winner_data [32] , winner_data [33] , winner_data [34] , winner_data [35] , winner_data [36] , winner_data [37] , winner_data [38] , winner_data [39]]) ; let loser_amount = u64 :: from_le_bytes ([loser_data [32] , loser_data [33] , loser_data [34] , loser_data [35] , loser_data [36] , loser_data [37] , loser_data [38] , loser_data [39]]) ; for resolve_round in 0 .. 8 { if winner_amount > loser_amount { let payout_multiplier = (resolve_round + 2) as u64 ; let total_payout = winner_amount * payout_multiplier ; market . yes_pool = market . yes_pool . checked_add (total_payout) . unwrap_or (u64 :: MAX) ; market . total_volume = market . total_volume . checked_add (winner_amount) . unwrap_or (u64 :: MAX) ; let new_amount_bytes = total_payout . to_le_bytes () ; winner_data [32 .. 40] . copy_from_slice (& new_amount_bytes) ; msg ! (\"Winner payout round {}: amount={}\" , resolve_round , total_payout) ; } else { let house_cut = (loser_amount >> resolve_round) & 0x1FF ; market . no_pool = market . no_pool . saturating_sub (house_cut) ; let odds_adjustment = (house_cut ^ resolve_round as u64) & 0xFF ; market . total_volume = market . total_volume . checked_add (odds_adjustment) . unwrap_or (u64 :: MAX) ; msg ! (\"House cut round {}: amount={}\" , resolve_round , house_cut) ; } } market . resolved = true ; }"
      },
      {
        "id": 28,
        "label": "let winner_amount = u64 :: from_le_bytes ([winner_data [32] , winner_data [33] , winner_data [34] , winner_data [35] , winner_data [36] , winner_data [37] , winner_data [38] , winner_data [39]]) ;"
      },
      {
        "id": 29,
        "label": "let loser_amount = u64 :: from_le_bytes ([loser_data [32] , loser_data [33] , loser_data [34] , loser_data [35] , loser_data [36] , loser_data [37] , loser_data [38] , loser_data [39]]) ;"
      },
      {
        "id": 30,
        "label": "for resolve_round in 0 .. 8 { if winner_amount > loser_amount { let payout_multiplier = (resolve_round + 2) as u64 ; let total_payout = winner_amount * payout_multiplier ; market . yes_pool = market . yes_pool . checked_add (total_payout) . unwrap_or (u64 :: MAX) ; market . total_volume = market . total_volume . checked_add (winner_amount) . unwrap_or (u64 :: MAX) ; let new_amount_bytes = total_payout . to_le_bytes () ; winner_data [32 .. 40] . copy_from_slice (& new_amount_bytes) ; msg ! (\"Winner payout round {}: amount={}\" , resolve_round , total_payout) ; } else { let house_cut = (loser_amount >> resolve_round) & 0x1FF ; market . no_pool = market . no_pool . saturating_sub (house_cut) ; let odds_adjustment = (house_cut ^ resolve_round as u64) & 0xFF ; market . total_volume = market . total_volume . checked_add (odds_adjustment) . unwrap_or (u64 :: MAX) ; msg ! (\"House cut round {}: amount={}\" , resolve_round , house_cut) ; } }"
      },
      {
        "id": 31,
        "label": "if winner_amount > loser_amount { let payout_multiplier = (resolve_round + 2) as u64 ; let total_payout = winner_amount * payout_multiplier ; market . yes_pool = market . yes_pool . checked_add (total_payout) . unwrap_or (u64 :: MAX) ; market . total_volume = market . total_volume . checked_add (winner_amount) . unwrap_or (u64 :: MAX) ; let new_amount_bytes = total_payout . to_le_bytes () ; winner_data [32 .. 40] . copy_from_slice (& new_amount_bytes) ; msg ! (\"Winner payout round {}: amount={}\" , resolve_round , total_payout) ; } else { let house_cut = (loser_amount >> resolve_round) & 0x1FF ; market . no_pool = market . no_pool . saturating_sub (house_cut) ; let odds_adjustment = (house_cut ^ resolve_round as u64) & 0xFF ; market . total_volume = market . total_volume . checked_add (odds_adjustment) . unwrap_or (u64 :: MAX) ; msg ! (\"House cut round {}: amount={}\" , resolve_round , house_cut) ; }"
      },
      {
        "id": 32,
        "label": "let payout_multiplier = (resolve_round + 2) as u64 ;"
      },
      {
        "id": 33,
        "label": "let total_payout = winner_amount * payout_multiplier ;"
      },
      {
        "id": 34,
        "label": "market . yes_pool = market . yes_pool . checked_add (total_payout) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "market . total_volume = market . total_volume . checked_add (winner_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "let new_amount_bytes = total_payout . to_le_bytes () ;"
      },
      {
        "id": 37,
        "label": "winner_data [32 .. 40] . copy_from_slice (& new_amount_bytes) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Winner payout round {}: amount={}\" , resolve_round , total_payout) ;"
      },
      {
        "id": 39,
        "label": "let house_cut = (loser_amount >> resolve_round) & 0x1FF ;"
      },
      {
        "id": 40,
        "label": "market . no_pool = market . no_pool . saturating_sub (house_cut) ;"
      },
      {
        "id": 41,
        "label": "let odds_adjustment = (house_cut ^ resolve_round as u64) & 0xFF ;"
      },
      {
        "id": 42,
        "label": "market . total_volume = market . total_volume . checked_add (odds_adjustment) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"House cut round {}: amount={}\" , resolve_round , house_cut) ;"
      },
      {
        "id": 44,
        "label": "market . resolved = true ;"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 22,
        "label": "def: market"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: winner_info"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: loser_info"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: winner_data"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: winner_info"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: loser_data"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: loser_info"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: loser_data"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: winner_data"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: market"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: winner_amount"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: winner_data"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: loser_amount"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: loser_data"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: loser_amount"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: winner_data"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: loser_amount"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: market"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: loser_amount"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: winner_data"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: loser_amount"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: market"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: payout_multiplier"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: total_payout"
      },
      {
        "from": 28,
        "to": 33,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: payout_multiplier"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: market"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: total_payout"
      },
      {
        "from": 22,
        "to": 35,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 35,
        "label": "data_dep: market"
      },
      {
        "from": 28,
        "to": 35,
        "label": "data_dep: winner_amount"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: new_amount_bytes"
      },
      {
        "from": 33,
        "to": 36,
        "label": "data_dep: total_payout"
      },
      {
        "from": 25,
        "to": 37,
        "label": "data_dep: winner_data"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: new_amount_bytes"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: house_cut"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: loser_amount"
      },
      {
        "from": 22,
        "to": 40,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 40,
        "label": "data_dep: market"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: house_cut"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: odds_adjustment"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: house_cut"
      },
      {
        "from": 22,
        "to": 42,
        "label": "data_dep: market"
      },
      {
        "from": 22,
        "to": 42,
        "label": "data_dep: market"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: odds_adjustment"
      },
      {
        "from": 22,
        "to": 44,
        "label": "data_dep: market"
      }
    ]
  }
]