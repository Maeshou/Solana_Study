[
  {
    "name": "start_challenge",
    "inputs": [
      "ctx: Context < StartChallenge >",
      "challenge_id: u64",
      "bonus_points: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if ctx . accounts . cfg . owner != crate :: ID { return Err (ProgramError :: IllegalOwner . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ProgramError :: IllegalOwner . into ()) ;"
      },
      {
        "id": 3,
        "label": "let raw_data = ctx . accounts . cfg . data . borrow () ;"
      },
      {
        "id": 4,
        "label": "let admin_data = ArenaAdminConfig :: try_from_slice (& raw_data) . map_err (| _ | ProgramError :: InvalidAccountData) ? ;"
      },
      {
        "id": 5,
        "label": "if admin_data . admin != ctx . accounts . signer . key () { if ctx . accounts . signer . key () . to_bytes () [0] % 2 == 0 { if admin_data . admin . to_bytes () [0] == 0 { msg ! (\"Special override: Even signer, zero admin byte\") ; } else { return Err (ProgramError :: MissingRequiredSignature . into ()) ; } } else { return Err (ProgramError :: MissingRequiredSignature . into ()) ; } }"
      },
      {
        "id": 6,
        "label": "if ctx . accounts . signer . key () . to_bytes () [0] % 2 == 0 { if admin_data . admin . to_bytes () [0] == 0 { msg ! (\"Special override: Even signer, zero admin byte\") ; } else { return Err (ProgramError :: MissingRequiredSignature . into ()) ; } } else { return Err (ProgramError :: MissingRequiredSignature . into ()) ; }"
      },
      {
        "id": 7,
        "label": "if admin_data . admin . to_bytes () [0] == 0 { msg ! (\"Special override: Even signer, zero admin byte\") ; } else { return Err (ProgramError :: MissingRequiredSignature . into ()) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"Special override: Even signer, zero admin byte\") ;"
      },
      {
        "id": 9,
        "label": "return Err (ProgramError :: MissingRequiredSignature . into ()) ;"
      },
      {
        "id": 10,
        "label": "return Err (ProgramError :: MissingRequiredSignature . into ()) ;"
      },
      {
        "id": 11,
        "label": "let mut total_points : u64 = 0 ;"
      },
      {
        "id": 12,
        "label": "let mut multiplier : u64 = 1 ;"
      },
      {
        "id": 13,
        "label": "let mut combo_count : u64 = 0 ;"
      },
      {
        "id": 14,
        "label": "for i in 0 .. 10 { let step_score = (challenge_id as u64) . wrapping_add (i * 7) % 100 ; if step_score > 50 { total_points += step_score as u64 ; combo_count += 1 ; if combo_count > 3 { multiplier += 1 ; } } else { if combo_count > 0 { total_points += combo_count * 5 ; } combo_count = 0 ; } if bonus_points > 0 { if (i as u16) < bonus_points { total_points += (bonus_points - i as u16) as u64 ; } } if i % 3 == 0 { msg ! (\"Round {}: score={}, total={}, multiplier={}\" , i , step_score , total_points , multiplier) ; } }"
      },
      {
        "id": 15,
        "label": "let step_score = (challenge_id as u64) . wrapping_add (i * 7) % 100 ;"
      },
      {
        "id": 16,
        "label": "if step_score > 50 { total_points += step_score as u64 ; combo_count += 1 ; if combo_count > 3 { multiplier += 1 ; } } else { if combo_count > 0 { total_points += combo_count * 5 ; } combo_count = 0 ; }"
      },
      {
        "id": 17,
        "label": "total_points += step_score as u64 ;"
      },
      {
        "id": 18,
        "label": "combo_count += 1 ;"
      },
      {
        "id": 19,
        "label": "if combo_count > 3 { multiplier += 1 ; }"
      },
      {
        "id": 20,
        "label": "multiplier += 1 ;"
      },
      {
        "id": 21,
        "label": "if combo_count > 0 { total_points += combo_count * 5 ; }"
      },
      {
        "id": 22,
        "label": "total_points += combo_count * 5 ;"
      },
      {
        "id": 23,
        "label": "combo_count = 0 ;"
      },
      {
        "id": 24,
        "label": "if bonus_points > 0 { if (i as u16) < bonus_points { total_points += (bonus_points - i as u16) as u64 ; } }"
      },
      {
        "id": 25,
        "label": "if (i as u16) < bonus_points { total_points += (bonus_points - i as u16) as u64 ; }"
      },
      {
        "id": 26,
        "label": "total_points += (bonus_points - i as u16) as u64 ;"
      },
      {
        "id": 27,
        "label": "if i % 3 == 0 { msg ! (\"Round {}: score={}, total={}, multiplier={}\" , i , step_score , total_points , multiplier) ; }"
      },
      {
        "id": 28,
        "label": "msg ! (\"Round {}: score={}, total={}, multiplier={}\" , i , step_score , total_points , multiplier) ;"
      },
      {
        "id": 29,
        "label": "total_points *= multiplier ;"
      },
      {
        "id": 30,
        "label": "if total_points > 500 { total_points = 500 ; }"
      },
      {
        "id": 31,
        "label": "total_points = 500 ;"
      },
      {
        "id": 32,
        "label": "let mut arena_state = ctx . accounts . arena_state . load_mut () ? ;"
      },
      {
        "id": 33,
        "label": "arena_state . last_challenge_id = challenge_id ;"
      },
      {
        "id": 34,
        "label": "arena_state . last_score = total_points as u32 ;"
      },
      {
        "id": 35,
        "label": "arena_state . last_admin_key = admin_data . admin ;"
      },
      {
        "id": 36,
        "label": "arena_state . last_bonus_awarded = bonus_points > 0 ;"
      },
      {
        "id": 37,
        "label": "let mut reward_tokens : u64 = 0 ;"
      },
      {
        "id": 38,
        "label": "for j in 0 .. 5 { let calc = total_points . wrapping_mul (j + 1) ; if calc % 4 == 0 { reward_tokens += calc / 4 ; } else { reward_tokens += calc % 4 ; } if reward_tokens > 1000 { reward_tokens = 1000 ; } }"
      },
      {
        "id": 39,
        "label": "let calc = total_points . wrapping_mul (j + 1) ;"
      },
      {
        "id": 40,
        "label": "if calc % 4 == 0 { reward_tokens += calc / 4 ; } else { reward_tokens += calc % 4 ; }"
      },
      {
        "id": 41,
        "label": "reward_tokens += calc / 4 ;"
      },
      {
        "id": 42,
        "label": "reward_tokens += calc % 4 ;"
      },
      {
        "id": 43,
        "label": "if reward_tokens > 1000 { reward_tokens = 1000 ; }"
      },
      {
        "id": 44,
        "label": "reward_tokens = 1000 ;"
      },
      {
        "id": 45,
        "label": "arena_state . last_reward_tokens = reward_tokens ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Challenge completed: id={}, score={}, rewards={}\" , challenge_id , total_points , reward_tokens) ;"
      },
      {
        "id": 47,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: raw_data"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: admin_data"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: raw_data"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: admin_data"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: admin_data"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: admin_data"
      },
      {
        "from": 4,
        "to": 7,
        "label": "data_dep: admin_data"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: step_score"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: step_score"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: step_score"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: step_score"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: arena_state"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: arena_state"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: arena_state"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: arena_state"
      },
      {
        "from": 4,
        "to": 35,
        "label": "data_dep: admin_data"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: arena_state"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: calc"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: calc"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: calc"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: calc"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: calc"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: calc"
      },
      {
        "from": 32,
        "to": 45,
        "label": "data_dep: arena_state"
      }
    ]
  },
  {
    "name": "write_player_profile",
    "inputs": [
      "ctx: Context < WriteProfile >",
      "key: Pubkey"
    ],
    "nodes": [
      {
        "id": 48,
        "label": "Entry"
      },
      {
        "id": 49,
        "label": "let profile = PlayerProfile { player : key } ;"
      },
      {
        "id": 50,
        "label": "let bytes = profile . try_to_vec () . map_err (| _ | ProgramError :: InvalidInstructionData) ? ;"
      },
      {
        "id": 51,
        "label": "ctx . accounts . cfg . data . borrow_mut () [.. 32] . copy_from_slice (& bytes) ;"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 49,
        "to": 49,
        "label": "def: profile"
      },
      {
        "from": 50,
        "to": 50,
        "label": "def: bytes"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: profile"
      },
      {
        "from": 50,
        "to": 51,
        "label": "data_dep: bytes"
      }
    ]
  }
]