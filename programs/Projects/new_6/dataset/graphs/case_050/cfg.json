[
  {
    "name": "start_challenge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "ctx . accounts . cfg . owner != crate :: ID"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "return Err (ProgramError :: IllegalOwner . into ()) ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "let raw_data = ctx . accounts . cfg . data . borrow () ;"
      },
      {
        "id": 10,
        "label": "let admin_data = ArenaAdminConfig :: try_from_slice (& raw_data) . map_err (| _ | ProgramError :: InvalidAccountData) ? ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "admin_data . admin != ctx . accounts . signer . key ()"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "ctx . accounts . signer . key () . to_bytes () [0] % 2 == 0"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "admin_data . admin . to_bytes () [0] == 0"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "msg ! (\"Special override: Even signer, zero admin byte\") ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "return Err (ProgramError :: MissingRequiredSignature . into ()) ;"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "return Err (ProgramError :: MissingRequiredSignature . into ()) ;"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "No-op"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "let mut total_points : u64 = 0 ;"
      },
      {
        "id": 34,
        "label": "let mut multiplier : u64 = 1 ;"
      },
      {
        "id": 35,
        "label": "let mut combo_count : u64 = 0 ;"
      },
      {
        "id": 36,
        "label": "Loop Start"
      },
      {
        "id": 37,
        "label": "let step_score = (challenge_id as u64) . wrapping_add (i * 7) % 100 ;"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "step_score > 50"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "total_points += step_score as u64 ;"
      },
      {
        "id": 43,
        "label": "combo_count += 1 ;"
      },
      {
        "id": 44,
        "label": "if statement"
      },
      {
        "id": 45,
        "label": "predicate"
      },
      {
        "id": 46,
        "label": "combo_count > 3"
      },
      {
        "id": 47,
        "label": "True body"
      },
      {
        "id": 48,
        "label": "multiplier += 1 ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "if statement"
      },
      {
        "id": 54,
        "label": "predicate"
      },
      {
        "id": 55,
        "label": "combo_count > 0"
      },
      {
        "id": 56,
        "label": "True body"
      },
      {
        "id": 57,
        "label": "total_points += combo_count * 5 ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "No-op"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "combo_count = 0 ;"
      },
      {
        "id": 62,
        "label": "merge"
      },
      {
        "id": 63,
        "label": "if statement"
      },
      {
        "id": 64,
        "label": "predicate"
      },
      {
        "id": 65,
        "label": "bonus_points > 0"
      },
      {
        "id": 66,
        "label": "True body"
      },
      {
        "id": 67,
        "label": "if statement"
      },
      {
        "id": 68,
        "label": "predicate"
      },
      {
        "id": 69,
        "label": "(i as u16) < bonus_points"
      },
      {
        "id": 70,
        "label": "True body"
      },
      {
        "id": 71,
        "label": "total_points += (bonus_points - i as u16) as u64 ;"
      },
      {
        "id": 72,
        "label": "False body"
      },
      {
        "id": 73,
        "label": "No-op"
      },
      {
        "id": 74,
        "label": "merge"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "No-op"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "if statement"
      },
      {
        "id": 79,
        "label": "predicate"
      },
      {
        "id": 80,
        "label": "i % 3 == 0"
      },
      {
        "id": 81,
        "label": "True body"
      },
      {
        "id": 82,
        "label": "msg ! (\"Round {}: score={}, total={}, multiplier={}\" , i , step_score , total_points , multiplier) ;"
      },
      {
        "id": 83,
        "label": "False body"
      },
      {
        "id": 84,
        "label": "No-op"
      },
      {
        "id": 85,
        "label": "merge"
      },
      {
        "id": 86,
        "label": "Loop End"
      },
      {
        "id": 87,
        "label": "total_points *= multiplier ;"
      },
      {
        "id": 88,
        "label": "if statement"
      },
      {
        "id": 89,
        "label": "predicate"
      },
      {
        "id": 90,
        "label": "total_points > 500"
      },
      {
        "id": 91,
        "label": "True body"
      },
      {
        "id": 92,
        "label": "total_points = 500 ;"
      },
      {
        "id": 93,
        "label": "False body"
      },
      {
        "id": 94,
        "label": "No-op"
      },
      {
        "id": 95,
        "label": "merge"
      },
      {
        "id": 96,
        "label": "let mut arena_state = ctx . accounts . arena_state . load_mut () ? ;"
      },
      {
        "id": 97,
        "label": "arena_state . last_challenge_id = challenge_id ;"
      },
      {
        "id": 98,
        "label": "arena_state . last_score = total_points as u32 ;"
      },
      {
        "id": 99,
        "label": "arena_state . last_admin_key = admin_data . admin ;"
      },
      {
        "id": 100,
        "label": "arena_state . last_bonus_awarded = bonus_points > 0 ;"
      },
      {
        "id": 101,
        "label": "let mut reward_tokens : u64 = 0 ;"
      },
      {
        "id": 102,
        "label": "Loop Start"
      },
      {
        "id": 103,
        "label": "let calc = total_points . wrapping_mul (j + 1) ;"
      },
      {
        "id": 104,
        "label": "if statement"
      },
      {
        "id": 105,
        "label": "predicate"
      },
      {
        "id": 106,
        "label": "calc % 4 == 0"
      },
      {
        "id": 107,
        "label": "True body"
      },
      {
        "id": 108,
        "label": "reward_tokens += calc / 4 ;"
      },
      {
        "id": 109,
        "label": "False body"
      },
      {
        "id": 110,
        "label": "reward_tokens += calc % 4 ;"
      },
      {
        "id": 111,
        "label": "merge"
      },
      {
        "id": 112,
        "label": "if statement"
      },
      {
        "id": 113,
        "label": "predicate"
      },
      {
        "id": 114,
        "label": "reward_tokens > 1000"
      },
      {
        "id": 115,
        "label": "True body"
      },
      {
        "id": 116,
        "label": "reward_tokens = 1000 ;"
      },
      {
        "id": 117,
        "label": "False body"
      },
      {
        "id": 118,
        "label": "No-op"
      },
      {
        "id": 119,
        "label": "merge"
      },
      {
        "id": 120,
        "label": "Loop End"
      },
      {
        "id": 121,
        "label": "arena_state . last_reward_tokens = reward_tokens ;"
      },
      {
        "id": 122,
        "label": "msg ! (\"Challenge completed: id={}, score={}, rewards={}\" , challenge_id , total_points , reward_tokens) ;"
      },
      {
        "id": 123,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 15,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 11,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "predicate"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "true"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 44,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 38,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "predicate"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "true"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 53,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 51,
        "to": 62,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "predicate"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "true"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "predicate"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "true"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 67,
        "to": 72,
        "label": "false"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 63,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "predicate"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 78,
        "to": 81,
        "label": "true"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 78,
        "to": 83,
        "label": "false"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 36,
        "to": 86,
        "label": "for"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "predicate"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 88,
        "to": 91,
        "label": "true"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 88,
        "to": 93,
        "label": "false"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 92,
        "to": 95,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "predicate"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 104,
        "to": 107,
        "label": "true"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 104,
        "to": 109,
        "label": "false"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 108,
        "to": 111,
        "label": "next"
      },
      {
        "from": 110,
        "to": 111,
        "label": "next"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 112,
        "to": 113,
        "label": "predicate"
      },
      {
        "from": 113,
        "to": 114,
        "label": "next"
      },
      {
        "from": 112,
        "to": 115,
        "label": "true"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 112,
        "to": 117,
        "label": "false"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 116,
        "to": 119,
        "label": "next"
      },
      {
        "from": 118,
        "to": 119,
        "label": "next"
      },
      {
        "from": 102,
        "to": 120,
        "label": "for"
      },
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 121,
        "to": 122,
        "label": "next"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      }
    ]
  },
  {
    "name": "write_player_profile",
    "nodes": [
      {
        "id": 124,
        "label": "Entry"
      },
      {
        "id": 125,
        "label": "let profile = PlayerProfile { player : key } ;"
      },
      {
        "id": 126,
        "label": "let bytes = profile . try_to_vec () . map_err (| _ | ProgramError :: InvalidInstructionData) ? ;"
      },
      {
        "id": 127,
        "label": "ctx . accounts . cfg . data . borrow_mut () [.. 32] . copy_from_slice (& bytes) ;"
      },
      {
        "id": 128,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 124,
        "to": 125,
        "label": "next"
      },
      {
        "from": 125,
        "to": 126,
        "label": "next"
      },
      {
        "from": 126,
        "to": 127,
        "label": "next"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      }
    ]
  }
]