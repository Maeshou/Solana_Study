[
  {
    "name": "init_marketplace",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let marketplace = & mut ctx . accounts . marketplace ;"
      },
      {
        "id": 2,
        "label": "marketplace . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "marketplace . fee_rate = fee_rate ;"
      },
      {
        "id": 4,
        "label": "marketplace . total_sales = 0 ;"
      },
      {
        "id": 5,
        "label": "marketplace . is_active = true ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Marketplace initialized with fee rate: {}%\" , fee_rate) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_listing",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let listing = & mut ctx . accounts . listing ;"
      },
      {
        "id": 10,
        "label": "listing . marketplace = ctx . accounts . marketplace . key () ;"
      },
      {
        "id": 11,
        "label": "listing . seller = ctx . accounts . seller . key () ;"
      },
      {
        "id": 12,
        "label": "listing . price = price ;"
      },
      {
        "id": 13,
        "label": "listing . nft_mint = nft_mint ;"
      },
      {
        "id": 14,
        "label": "listing . is_active = true ;"
      },
      {
        "id": 15,
        "label": "listing . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"NFT listed for {} lamports\" , price) ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute_trade",
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let marketplace = & mut ctx . accounts . marketplace ;"
      },
      {
        "id": 20,
        "label": "let listing = & mut ctx . accounts . listing ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "listing . is_active"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "let adjusted_price = expected_price . checked_add (iteration * 1000) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "listing . price = adjusted_price ;"
      },
      {
        "id": 28,
        "label": "listing . is_active = false ;"
      },
      {
        "id": 29,
        "label": "marketplace . total_sales = marketplace . total_sales . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "let fee_amount = (adjusted_price * marketplace . fee_rate as u64) / 10000 ;"
      },
      {
        "id": 31,
        "label": "let seller_amount = adjusted_price - fee_amount ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Trade executed: seller gets {}, fee: {}\" , seller_amount , fee_amount) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "marketplace . total_sales = marketplace . total_sales . checked_add (iteration) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "let timestamp_diff = Clock :: get () ? . unix_timestamp - listing . created_at ;"
      },
      {
        "id": 36,
        "label": "listing . price = listing . price . checked_add (timestamp_diff as u64 * 100) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"Inactive listing processed in iteration {}\" , iteration) ;"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 22,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 32,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 21,
        "to": 39,
        "label": "for"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]