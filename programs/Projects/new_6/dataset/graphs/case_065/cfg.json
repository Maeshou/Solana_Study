[
  {
    "name": "init_guild",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let g = & mut ctx . accounts . guild ;"
      },
      {
        "id": 2,
        "label": "g . name = name ;"
      },
      {
        "id": 3,
        "label": "g . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 4,
        "label": "g . max_members = max_members ;"
      },
      {
        "id": 5,
        "label": "g . member_count = 0 ;"
      },
      {
        "id": 6,
        "label": "g . total_funds = 0 ;"
      },
      {
        "id": 7,
        "label": "g . rank_points = 0 ;"
      },
      {
        "id": 8,
        "label": "g . last_ops = vec ! [] ;"
      },
      {
        "id": 9,
        "label": "g . threshold = 10_000 ;"
      },
      {
        "id": 10,
        "label": "g . penalty_pool = 0 ;"
      },
      {
        "id": 11,
        "label": "g . version = 1 ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_contribute_and_reweight",
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let g = & mut ctx . accounts . guild ;"
      },
      {
        "id": 15,
        "label": "let p = & mut ctx . accounts . member_like ;"
      },
      {
        "id": 16,
        "label": "let actor = & ctx . accounts . actor ;"
      },
      {
        "id": 17,
        "label": "let ts = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 18,
        "label": "g . last_ops . push (format ! (\"t={} m={} a={}\" , ts , memo , amount)) ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "g . last_ops . len () > 24"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "g . last_ops . remove (0) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "let mut credit = amount ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "amount > g . threshold"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "credit = credit . saturating_add (amount / 20) ;"
      },
      {
        "id": 33,
        "label": "p . flags ^= 0b0001 ;"
      },
      {
        "id": 34,
        "label": "g . penalty_pool = g . penalty_pool . saturating_add (3) ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "wave % 2 == 0"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "credit = credit . rotate_left ((wave % 8) as u32) ;"
      },
      {
        "id": 43,
        "label": "g . version = g . version . wrapping_add (1) ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "g . total_funds = g . total_funds . saturating_add (credit) ;"
      },
      {
        "id": 48,
        "label": "let idx = (wave % 5) as usize ;"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "p . badges . len () <= idx"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "p . badges . resize (idx + 1 , 0) ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "let mix = ((amount as u32) ^ ((ts as u32) << (idx as u32 & 3))) & 0xFFFF ;"
      },
      {
        "id": 58,
        "label": "p . badges [idx] = p . badges [idx] . wrapping_add ((mix % 251) as u16) ;"
      },
      {
        "id": 59,
        "label": "if statement"
      },
      {
        "id": 60,
        "label": "predicate"
      },
      {
        "id": 61,
        "label": "p . badges [idx] & 0b1 != 0"
      },
      {
        "id": 62,
        "label": "True body"
      },
      {
        "id": 63,
        "label": "p . reputation = p . reputation . saturating_add (2) ;"
      },
      {
        "id": 64,
        "label": "p . flags ^= 0b0010 ;"
      },
      {
        "id": 65,
        "label": "False body"
      },
      {
        "id": 66,
        "label": "No-op"
      },
      {
        "id": 67,
        "label": "merge"
      },
      {
        "id": 68,
        "label": "if statement"
      },
      {
        "id": 69,
        "label": "predicate"
      },
      {
        "id": 70,
        "label": "p . reputation > 200"
      },
      {
        "id": 71,
        "label": "True body"
      },
      {
        "id": 72,
        "label": "p . reputation = p . reputation . rotate_right (1) ;"
      },
      {
        "id": 73,
        "label": "g . rank_points = g . rank_points . saturating_add ((p . reputation % 17) as u32) ;"
      },
      {
        "id": 74,
        "label": "False body"
      },
      {
        "id": 75,
        "label": "No-op"
      },
      {
        "id": 76,
        "label": "merge"
      },
      {
        "id": 77,
        "label": "p . notes . push (format ! (\"{}:{}:{}\" , wave , amount , memo)) ;"
      },
      {
        "id": 78,
        "label": "if statement"
      },
      {
        "id": 79,
        "label": "predicate"
      },
      {
        "id": 80,
        "label": "p . notes . len () > 12"
      },
      {
        "id": 81,
        "label": "True body"
      },
      {
        "id": 82,
        "label": "p . notes . reverse () ;"
      },
      {
        "id": 83,
        "label": "p . notes . truncate (10) ;"
      },
      {
        "id": 84,
        "label": "p . notes . sort () ;"
      },
      {
        "id": 85,
        "label": "False body"
      },
      {
        "id": 86,
        "label": "No-op"
      },
      {
        "id": 87,
        "label": "merge"
      },
      {
        "id": 88,
        "label": "if statement"
      },
      {
        "id": 89,
        "label": "predicate"
      },
      {
        "id": 90,
        "label": "g . total_funds > 1_000_000"
      },
      {
        "id": 91,
        "label": "True body"
      },
      {
        "id": 92,
        "label": "let mut decay = 0u64 ;"
      },
      {
        "id": 93,
        "label": "Loop Start"
      },
      {
        "id": 94,
        "label": "p . badges [i] = p . badges [i] . reverse_bits () ;"
      },
      {
        "id": 95,
        "label": "decay = decay . saturating_add ((p . badges [i] as u64) & 7) ;"
      },
      {
        "id": 96,
        "label": "Loop End"
      },
      {
        "id": 97,
        "label": "g . total_funds = g . total_funds . saturating_sub (decay) ;"
      },
      {
        "id": 98,
        "label": "g . penalty_pool = g . penalty_pool . saturating_add ((decay % 29) as u64) ;"
      },
      {
        "id": 99,
        "label": "False body"
      },
      {
        "id": 100,
        "label": "No-op"
      },
      {
        "id": 101,
        "label": "merge"
      },
      {
        "id": 102,
        "label": "g . creator = actor . key () ;"
      },
      {
        "id": 103,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 28,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 38,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "predicate"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "true"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 59,
        "to": 65,
        "label": "false"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "predicate"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "true"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 68,
        "to": 74,
        "label": "false"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 73,
        "to": 76,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "predicate"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 78,
        "to": 81,
        "label": "true"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 78,
        "to": 85,
        "label": "false"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 84,
        "to": 87,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "predicate"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 88,
        "to": 91,
        "label": "true"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 93,
        "to": 96,
        "label": "for"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 88,
        "to": 99,
        "label": "false"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      }
    ]
  }
]