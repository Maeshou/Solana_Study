[
  {
    "name": "init_station",
    "inputs": [
      "ctx: Context < InitStation >",
      "category: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "s . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "s . category = category ;"
      },
      {
        "id": 4,
        "label": "s . design_pool = vec ! [] ;"
      },
      {
        "id": 5,
        "label": "s . material_pool = vec ! [] ;"
      },
      {
        "id": 6,
        "label": "s . output_hash = 0 ;"
      },
      {
        "id": 7,
        "label": "s . usage = 0 ;"
      },
      {
        "id": 8,
        "label": "s . flags = 0 ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "act_craft",
    "inputs": [
      "ctx: Context < Craft >",
      "design: Vec < u8 >",
      "mats: Vec < u16 >",
      "bias: u32"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let s = & mut ctx . accounts . station ;"
      },
      {
        "id": 12,
        "label": "let auditor = & ctx . accounts . auditor ;"
      },
      {
        "id": 13,
        "label": "s . design_pool . extend_from_slice (& design) ;"
      },
      {
        "id": 14,
        "label": "s . material_pool . extend_from_slice (& mats) ;"
      },
      {
        "id": 15,
        "label": "if s . design_pool . len () > 64 { s . design_pool . drain (0 .. (s . design_pool . len () - 64)) ; }"
      },
      {
        "id": 16,
        "label": "s . design_pool . drain (0 .. (s . design_pool . len () - 64)) ;"
      },
      {
        "id": 17,
        "label": "if s . material_pool . len () > 128 { s . material_pool . reverse () ; s . material_pool . truncate (128) ; }"
      },
      {
        "id": 18,
        "label": "s . material_pool . reverse () ;"
      },
      {
        "id": 19,
        "label": "s . material_pool . truncate (128) ;"
      },
      {
        "id": 20,
        "label": "let mut h : u64 = 0xDEADBEEF ;"
      },
      {
        "id": 21,
        "label": "for (i , d) in s . design_pool . iter () . enumerate () { let val = (* d as u64) << ((i % 8) as u64) ; h ^= val . rotate_left (((i as u32) & 7) + 1) ; if d % 3 == 0 { s . flags ^= 0b0010 ; } }"
      },
      {
        "id": 22,
        "label": "let val = (* d as u64) << ((i % 8) as u64) ;"
      },
      {
        "id": 23,
        "label": "h ^= val . rotate_left (((i as u32) & 7) + 1) ;"
      },
      {
        "id": 24,
        "label": "if d % 3 == 0 { s . flags ^= 0b0010 ; }"
      },
      {
        "id": 25,
        "label": "s . flags ^= 0b0010 ;"
      },
      {
        "id": 26,
        "label": "for (i , m) in s . material_pool . iter () . enumerate () { let mix = (* m as u64) ^ ((bias as u64) << (i % 13)) ; h = h . wrapping_add (mix . reverse_bits ()) ; if m % 5 == 0 { s . flags ^= 0b0001 ; } }"
      },
      {
        "id": 27,
        "label": "let mix = (* m as u64) ^ ((bias as u64) << (i % 13)) ;"
      },
      {
        "id": 28,
        "label": "h = h . wrapping_add (mix . reverse_bits ()) ;"
      },
      {
        "id": 29,
        "label": "if m % 5 == 0 { s . flags ^= 0b0001 ; }"
      },
      {
        "id": 30,
        "label": "s . flags ^= 0b0001 ;"
      },
      {
        "id": 31,
        "label": "s . output_hash = h . rotate_left ((bias % 31) as u32) ;"
      },
      {
        "id": 32,
        "label": "s . usage = s . usage . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "if s . flags & 0b0011 == 0b0011 { s . usage = s . usage . saturating_add (2) ; s . design_pool . rotate_left (1) ; s . material_pool . rotate_right (1) ; }"
      },
      {
        "id": 34,
        "label": "s . usage = s . usage . saturating_add (2) ;"
      },
      {
        "id": 35,
        "label": "s . design_pool . rotate_left (1) ;"
      },
      {
        "id": 36,
        "label": "s . material_pool . rotate_right (1) ;"
      },
      {
        "id": 37,
        "label": "if s . usage % 7 == 0 { s . output_hash ^= 0xBADC0FFEE0DDF00D ; s . flags ^= 0b0100 ; }"
      },
      {
        "id": 38,
        "label": "s . output_hash ^= 0xBADC0FFEE0DDF00D ;"
      },
      {
        "id": 39,
        "label": "s . flags ^= 0b0100 ;"
      },
      {
        "id": 40,
        "label": "s . manager = auditor . key () ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: auditor"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: val"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: val"
      },
      {
        "from": 11,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: mix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: mix"
      },
      {
        "from": 11,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 39,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 40,
        "label": "data_dep: auditor"
      }
    ]
  }
]