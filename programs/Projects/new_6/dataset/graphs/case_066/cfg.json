[
  {
    "name": "init_forge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "f . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "f . seed = seed ;"
      },
      {
        "id": 4,
        "label": "f . banks = vec ! [0 ; 6] ;"
      },
      {
        "id": 5,
        "label": "f . modes = [0u8 ; 4] ;"
      },
      {
        "id": 6,
        "label": "f . paused = false ;"
      },
      {
        "id": 7,
        "label": "f . history = vec ! [] ;"
      },
      {
        "id": 8,
        "label": "f . eff_index = 0 ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_cycle",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 12,
        "label": "let inspector = & ctx . accounts . inspector ;"
      },
      {
        "id": 13,
        "label": "let ts = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 14,
        "label": "f . history . push (format ! (\"p={}/{} t={}\" , pulses , tweak , ts)) ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "f . history . len () > 30"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "f . history . drain (0 .. 5) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "let mut i = 0u16 ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let pos = (i as usize) % f . banks . len () ;"
      },
      {
        "id": 26,
        "label": "let shifted = (pulses ^ (i . rotate_left (2))) as u64 ;"
      },
      {
        "id": 27,
        "label": "f . banks [pos] = f . banks [pos] . wrapping_add ((shifted & 0x3FF) + (tweak as u64)) ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "f . banks [pos] & 1 == 1"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "f . modes [pos % 4] = f . modes [pos % 4] . wrapping_add ((tweak ^ (pos as u8)) & 0x1F) ;"
      },
      {
        "id": 33,
        "label": "f . seed = f . seed . rotate_left (((pos as u32) & 7) + 1) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "No-op"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "f . modes [pos % 4] > 127"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "f . modes [pos % 4] = f . modes [pos % 4] % 101 ;"
      },
      {
        "id": 42,
        "label": "f . banks [pos] = f . banks [pos] . reverse_bits () ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "i = i . saturating_add (3) ;"
      },
      {
        "id": 47,
        "label": "Loop End"
      },
      {
        "id": 48,
        "label": "let mut local = 0u32 ;"
      },
      {
        "id": 49,
        "label": "Loop Start"
      },
      {
        "id": 50,
        "label": "local = local . wrapping_add (* ch as u32) ;"
      },
      {
        "id": 51,
        "label": "if statement"
      },
      {
        "id": 52,
        "label": "predicate"
      },
      {
        "id": 53,
        "label": "ch % 2 == 0"
      },
      {
        "id": 54,
        "label": "True body"
      },
      {
        "id": 55,
        "label": "f . eff_index = f . eff_index . wrapping_add ((ch % 7) as u8) ;"
      },
      {
        "id": 56,
        "label": "f . seed ^= (* ch as u64) << (ch % 8) ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "if statement"
      },
      {
        "id": 62,
        "label": "predicate"
      },
      {
        "id": 63,
        "label": "local % 5 == 0"
      },
      {
        "id": 64,
        "label": "True body"
      },
      {
        "id": 65,
        "label": "f . paused = true ;"
      },
      {
        "id": 66,
        "label": "f . history . push (\"eff pause\" . into ()) ;"
      },
      {
        "id": 67,
        "label": "f . banks . rotate_left (1) ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "f . paused"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "f . modes . iter_mut () . for_each (| m | * m = m . rotate_left (1)) ;"
      },
      {
        "id": 76,
        "label": "let s = f . banks . iter () . fold (0u64 , | a , b | a . wrapping_add (* b)) ;"
      },
      {
        "id": 77,
        "label": "f . history . push (format ! (\"cooldown={}\" , s & 0xFF)) ;"
      },
      {
        "id": 78,
        "label": "False body"
      },
      {
        "id": 79,
        "label": "No-op"
      },
      {
        "id": 80,
        "label": "merge"
      },
      {
        "id": 81,
        "label": "f . operator = inspector . key () ;"
      },
      {
        "id": 82,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 28,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 24,
        "to": 47,
        "label": "while"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "predicate"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "true"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 51,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 49,
        "to": 60,
        "label": "for"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "predicate"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "true"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 61,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 71,
        "to": 78,
        "label": "false"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 77,
        "to": 80,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      }
    ]
  }
]