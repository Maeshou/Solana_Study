[
  {
    "name": "init_staking_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 2,
        "label": "pool . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool . total_staked = 0 ;"
      },
      {
        "id": 4,
        "label": "pool . reward_rate = 5 ;"
      },
      {
        "id": 5,
        "label": "pool . active = true ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_stake",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let stake = & mut ctx . accounts . stake_account ;"
      },
      {
        "id": 9,
        "label": "stake . pool = ctx . accounts . staking_pool . key () ;"
      },
      {
        "id": 10,
        "label": "stake . staker = ctx . accounts . staker . key () ;"
      },
      {
        "id": 11,
        "label": "stake . amount = amount ;"
      },
      {
        "id": 12,
        "label": "stake . last_claim = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 13,
        "label": "stake . rewards_earned = 0 ;"
      },
      {
        "id": 14,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 15,
        "label": "pool . total_staked = pool . total_staked . checked_add (amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "vulnerable_claim",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 19,
        "label": "assert ! (ctx . accounts . stake_a . key () != ctx . accounts . stake_b . key ()) ;"
      },
      {
        "id": 20,
        "label": "let stake_a_data = ctx . accounts . stake_a . try_borrow_data () ? ;"
      },
      {
        "id": 21,
        "label": "let stake_b_data = ctx . accounts . stake_b . try_borrow_data () ? ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "stake_a_data . len () >= 32 && stake_b_data . len () >= 32"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "let stake_a_amount = u64 :: from_le_bytes ([stake_a_data [72] , stake_a_data [73] , stake_a_data [74] , stake_a_data [75] , stake_a_data [76] , stake_a_data [77] , stake_a_data [78] , stake_a_data [79]]) ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "stake_a_amount > 1000"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "let reward = (stake_a_amount * pool . reward_rate as u64) / 100 ;"
      },
      {
        "id": 33,
        "label": "pool . total_staked = pool . total_staked . checked_add (reward) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 34,
        "label": "let bonus_multiplier = (reward_cycle + 1) as u64 ;"
      },
      {
        "id": 35,
        "label": "let bonus = reward * bonus_multiplier / 10 ;"
      },
      {
        "id": 36,
        "label": "pool . total_staked = pool . total_staked . checked_add (bonus) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"Reward cycle {}: base={}, bonus={}\" , reward_cycle , reward , bonus) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "pool . reward_rate = (pool . reward_rate + reward_cycle as u32) . min (50) ;"
      },
      {
        "id": 40,
        "label": "let admin_fee = pool . total_staked / 1000 ;"
      },
      {
        "id": 41,
        "label": "pool . total_staked = pool . total_staked . saturating_sub (admin_fee) ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Admin fee collected: {}\" , admin_fee) ;"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 28,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 27,
        "to": 44,
        "label": "for"
      },
      {
        "from": 22,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]