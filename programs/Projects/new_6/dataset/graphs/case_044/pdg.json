[
  {
    "name": "init_store",
    "inputs": [
      "ctx: Context < InitStore >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . store ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . deployer . key () ;"
      },
      {
        "id": 3,
        "label": "s . items = vec ! [100 , 200 , 300] ;"
      },
      {
        "id": 4,
        "label": "s . prices = vec ! [50 , 75 , 100] ;"
      },
      {
        "id": 5,
        "label": "s . version = 1 ;"
      },
      {
        "id": 6,
        "label": "s . history = vec ! [] ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "act_update",
    "inputs": [
      "ctx: Context < UpdateStore >",
      "factor: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . store ;"
      },
      {
        "id": 10,
        "label": "let actor = & ctx . accounts . any_role ;"
      },
      {
        "id": 11,
        "label": "for i in 0 .. s . items . len () { if i % 2 == 0 { s . items [i] = s . items [i] . saturating_sub ((i as u64 + 1) * (factor as u64)) ; s . prices [i] = s . prices [i] . saturating_add (factor as u64 * 2) ; } else { s . items [i] = s . items [i] . saturating_add (factor as u64) ; s . prices [i] = s . prices [i] . saturating_sub ((i as u64 + 1) * 3) ; } if s . prices [i] > 500 { s . prices [i] = s . prices [i] % 400 ; } let log = format ! (\"Updated item {}: qty={}, price={}\" , i , s . items [i] , s . prices [i]) ; s . history . push (log) ; }"
      },
      {
        "id": 12,
        "label": "if i % 2 == 0 { s . items [i] = s . items [i] . saturating_sub ((i as u64 + 1) * (factor as u64)) ; s . prices [i] = s . prices [i] . saturating_add (factor as u64 * 2) ; } else { s . items [i] = s . items [i] . saturating_add (factor as u64) ; s . prices [i] = s . prices [i] . saturating_sub ((i as u64 + 1) * 3) ; }"
      },
      {
        "id": 13,
        "label": "s . items [i] = s . items [i] . saturating_sub ((i as u64 + 1) * (factor as u64)) ;"
      },
      {
        "id": 14,
        "label": "s . prices [i] = s . prices [i] . saturating_add (factor as u64 * 2) ;"
      },
      {
        "id": 15,
        "label": "s . items [i] = s . items [i] . saturating_add (factor as u64) ;"
      },
      {
        "id": 16,
        "label": "s . prices [i] = s . prices [i] . saturating_sub ((i as u64 + 1) * 3) ;"
      },
      {
        "id": 17,
        "label": "if s . prices [i] > 500 { s . prices [i] = s . prices [i] % 400 ; }"
      },
      {
        "id": 18,
        "label": "s . prices [i] = s . prices [i] % 400 ;"
      },
      {
        "id": 19,
        "label": "let log = format ! (\"Updated item {}: qty={}, price={}\" , i , s . items [i] , s . prices [i]) ;"
      },
      {
        "id": 20,
        "label": "s . history . push (log) ;"
      },
      {
        "id": 21,
        "label": "if s . history . len () > 20 { s . history . drain (0 .. 5) ; }"
      },
      {
        "id": 22,
        "label": "s . history . drain (0 .. 5) ;"
      },
      {
        "id": 23,
        "label": "s . version = s . version . wrapping_add (1) ;"
      },
      {
        "id": 24,
        "label": "s . admin = actor . key () ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: actor"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: log"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: log"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: actor"
      }
    ]
  }
]