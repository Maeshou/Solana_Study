[
  {
    "name": "init_run",
    "inputs": [
      "ctx: Context < InitRun >",
      "floor: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . run ;"
      },
      {
        "id": 2,
        "label": "r . commander = ctx . accounts . commander . key () ;"
      },
      {
        "id": 3,
        "label": "r . floor = floor ;"
      },
      {
        "id": 4,
        "label": "r . rolls = vec ! [] ;"
      },
      {
        "id": 5,
        "label": "r . table = vec ! [3 , 5 , 7 , 11 , 13 , 17] ;"
      },
      {
        "id": 6,
        "label": "r . pool = 0 ;"
      },
      {
        "id": 7,
        "label": "r . flags = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: r"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "act_distribute",
    "inputs": [
      "ctx: Context < Distribute >",
      "hits: Vec < u8 >",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let r = & mut ctx . accounts . run ;"
      },
      {
        "id": 11,
        "label": "let distributor = & ctx . accounts . distributor ;"
      },
      {
        "id": 12,
        "label": "r . rolls . clear () ;"
      },
      {
        "id": 13,
        "label": "for i in 0 .. hits . len () { let base = (hits [i] as u64) ^ seed . rotate_left ((i % 13) as u32) ; r . rolls . push (base) ; }"
      },
      {
        "id": 14,
        "label": "let base = (hits [i] as u64) ^ seed . rotate_left ((i % 13) as u32) ;"
      },
      {
        "id": 15,
        "label": "r . rolls . push (base) ;"
      },
      {
        "id": 16,
        "label": "r . pool = r . rolls . iter () . fold (0u64 , | a , b | a . wrapping_add (* b)) ;"
      },
      {
        "id": 17,
        "label": "if r . table . len () < hits . len () { r . table . resize (hits . len () , 1) ; }"
      },
      {
        "id": 18,
        "label": "r . table . resize (hits . len () , 1) ;"
      },
      {
        "id": 19,
        "label": "for i in 0 .. hits . len () { let v = (hits [i] as u32) . rotate_left ((i % 5) as u32) % 97 + 3 ; r . table [i] = v ; if v % 2 == 0 { r . flags ^= 0b01 ; } if v % 3 == 0 { r . flags ^= 0b10 ; } }"
      },
      {
        "id": 20,
        "label": "let v = (hits [i] as u32) . rotate_left ((i % 5) as u32) % 97 + 3 ;"
      },
      {
        "id": 21,
        "label": "r . table [i] = v ;"
      },
      {
        "id": 22,
        "label": "if v % 2 == 0 { r . flags ^= 0b01 ; }"
      },
      {
        "id": 23,
        "label": "r . flags ^= 0b01 ;"
      },
      {
        "id": 24,
        "label": "if v % 3 == 0 { r . flags ^= 0b10 ; }"
      },
      {
        "id": 25,
        "label": "r . flags ^= 0b10 ;"
      },
      {
        "id": 26,
        "label": "let mut payouts : Vec < u64 > = vec ! [] ;"
      },
      {
        "id": 27,
        "label": "for i in 0 .. hits . len () { let numer = r . rolls [i] . wrapping_mul ((r . table [i] as u64) + 1) ; let denom = (1 + (i as u64)) ; let mut q = numer / denom ; if r . flags & 0b01 == 0b01 { q = q . reverse_bits () ; } payouts . push (q) ; }"
      },
      {
        "id": 28,
        "label": "let numer = r . rolls [i] . wrapping_mul ((r . table [i] as u64) + 1) ;"
      },
      {
        "id": 29,
        "label": "let denom = (1 + (i as u64)) ;"
      },
      {
        "id": 30,
        "label": "let mut q = numer / denom ;"
      },
      {
        "id": 31,
        "label": "if r . flags & 0b01 == 0b01 { q = q . reverse_bits () ; }"
      },
      {
        "id": 32,
        "label": "q = q . reverse_bits () ;"
      },
      {
        "id": 33,
        "label": "payouts . push (q) ;"
      },
      {
        "id": 34,
        "label": "let mut checksum = 0u64 ;"
      },
      {
        "id": 35,
        "label": "for i in 0 .. payouts . len () { checksum ^= payouts [i] . rotate_left ((i % 17) as u32) ; }"
      },
      {
        "id": 36,
        "label": "checksum ^= payouts [i] . rotate_left ((i % 17) as u32) ;"
      },
      {
        "id": 37,
        "label": "if checksum % 7 == 0 { r . rolls . rotate_left (2) ; r . table . rotate_right (1) ; }"
      },
      {
        "id": 38,
        "label": "r . rolls . rotate_left (2) ;"
      },
      {
        "id": 39,
        "label": "r . table . rotate_right (1) ;"
      },
      {
        "id": 40,
        "label": "r . commander = distributor . key () ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: r"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: distributor"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: r"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: base"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: r"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: base"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: v"
      },
      {
        "from": 10,
        "to": 21,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: v"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: v"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: v"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: numer"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: denom"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: q"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: numer"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: denom"
      },
      {
        "from": 10,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: q"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: q"
      },
      {
        "from": 30,
        "to": 32,
        "label": "data_dep: q"
      },
      {
        "from": 30,
        "to": 32,
        "label": "data_dep: q"
      },
      {
        "from": 30,
        "to": 33,
        "label": "data_dep: q"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: checksum"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: checksum"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: checksum"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: checksum"
      },
      {
        "from": 10,
        "to": 37,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 37,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 38,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 39,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 40,
        "label": "data_dep: r"
      },
      {
        "from": 11,
        "to": 40,
        "label": "data_dep: distributor"
      }
    ]
  }
]