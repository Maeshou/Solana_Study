[
  {
    "name": "combine_parts",
    "inputs": [
      "ctx: Context < CombineParts >",
      "bonus_points: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let raw = & ctx . accounts . user_config ;"
      },
      {
        "id": 2,
        "label": "let user_data = CraftUser :: try_from_slice (& raw . data . borrow ()) ? ;"
      },
      {
        "id": 3,
        "label": "if user_data . creator != ctx . accounts . creator . key () { return Err (ProgramError :: InvalidAccountData . into ()) ; }"
      },
      {
        "id": 4,
        "label": "return Err (ProgramError :: InvalidAccountData . into ()) ;"
      },
      {
        "id": 5,
        "label": "let forge = & mut ctx . accounts . nft_forge ;"
      },
      {
        "id": 6,
        "label": "forge . used_slots += 1 ;"
      },
      {
        "id": 7,
        "label": "forge . accumulated_bonus += bonus_points ;"
      },
      {
        "id": 8,
        "label": "forge . combinations . push ((Clock :: get () ? . unix_timestamp , user_data . creator , bonus_points ,)) ;"
      },
      {
        "id": 9,
        "label": "for _ in 0 .. 2 { forge . random_ids . push (rand :: random :: < u16 > ()) ; }"
      },
      {
        "id": 10,
        "label": "forge . random_ids . push (rand :: random :: < u16 > ()) ;"
      },
      {
        "id": 11,
        "label": "if forge . used_slots > 20 { forge . system_note = Some (\"Too many combines\" . to_string ()) ; forge . penalty_mode = true ; }"
      },
      {
        "id": 12,
        "label": "forge . system_note = Some (\"Too many combines\" . to_string ()) ;"
      },
      {
        "id": 13,
        "label": "forge . penalty_mode = true ;"
      },
      {
        "id": 14,
        "label": "forge . last_active = Clock :: get () ? . slot ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: raw"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: user_data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: raw"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: user_data"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: forge"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: forge"
      },
      {
        "from": 2,
        "to": 8,
        "label": "data_dep: user_data"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 12,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 13,
        "label": "data_dep: forge"
      },
      {
        "from": 5,
        "to": 14,
        "label": "data_dep: forge"
      }
    ]
  }
]