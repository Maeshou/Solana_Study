[
  {
    "name": "init_lab",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitLab >",
      "code: u32"
    ],
    "attributes": [],
    "body": [
      "let l = & mut ctx . accounts . lab ;",
      "l . owner = ctx . accounts . owner . key () ;",
      "l . code = code ;",
      "l . pool_a = vec ! [] ;",
      "l . pool_b = vec ! [] ;",
      "l . traits = [0u8 ; 8] ;",
      "l . audit = vec ! [] ;",
      "Ok (())"
    ]
  },
  {
    "name": "act_fuse",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Fuse >",
      "genome_a: Vec < u8 >",
      "genome_b: Vec < u8 >",
      "key: u64"
    ],
    "attributes": [],
    "body": [
      "let l = & mut ctx . accounts . lab ;",
      "let researcher = & ctx . accounts . researcher ;",
      "l . pool_a . extend_from_slice (& genome_a) ;",
      "l . pool_b . extend_from_slice (& genome_b) ;",
      "if l . pool_a . len () > 64",
      "{",
      "l . pool_a . drain (0 .. (l . pool_a . len () - 64)) ;",
      "}",
      "if l . pool_b . len () > 64",
      "{",
      "l . pool_b . drain (0 .. (l . pool_b . len () - 64)) ;",
      "}",
      "let mut out : Vec < u8 > = vec ! [] ;",
      "for i in 0 .. l . pool_a . len () . min (l . pool_b . len ())",
      "{",
      "let a = l . pool_a [i] ;",
      "let b = l . pool_b [i] ;",
      "let mut gene = (a ^ b) . rotate_left ((i % 7) as u32) ;",
      "if i % 3 == 0",
      "{",
      "gene = gene . reverse_bits () ;",
      "l . traits [i % 8] = l . traits [i % 8] . wrapping_add ((gene & 0x1F) as u8) ;",
      "} out . push (gene) ;",
      "}",
      "l . audit . push (format ! (\"fuse#{}>{}\" , key , out . len ())) ;",
      "if l . audit . len () > 12",
      "{",
      "l . audit . remove (0) ;",
      "}",
      "let mut sum = 0u32 ;",
      "for (i , v) in out . iter () . enumerate ()",
      "{",
      "sum = sum . wrapping_add ((* v as u32) << (i % 11)) ;",
      "}",
      "l . code = l . code . rotate_left (((sum % 29) as u32) + 1) ^ (key as u32) ;",
      "l . owner = researcher . key () ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitLab",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 4 + 128 + 128 + 8 + 128)]",
        "field_type": "Account < 'info , Lab >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Fuse",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Lab >"
      },
      {
        "name": "researcher",
        "attribute": "# [doc = \" CHECK: 研究員検証なし\"]",
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Lab",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "code",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "pool_a",
        "attribute": null,
        "field_type": "Vec < u8 >"
      },
      {
        "name": "pool_b",
        "attribute": null,
        "field_type": "Vec < u8 >"
      },
      {
        "name": "traits",
        "attribute": null,
        "field_type": "[u8 ; 8]"
      },
      {
        "name": "audit",
        "attribute": null,
        "field_type": "Vec < String >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]