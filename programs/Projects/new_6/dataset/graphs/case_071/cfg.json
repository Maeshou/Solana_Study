[
  {
    "name": "init_lab",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let l = & mut ctx . accounts . lab ;"
      },
      {
        "id": 2,
        "label": "l . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "l . code = code ;"
      },
      {
        "id": 4,
        "label": "l . pool_a = vec ! [] ;"
      },
      {
        "id": 5,
        "label": "l . pool_b = vec ! [] ;"
      },
      {
        "id": 6,
        "label": "l . traits = [0u8 ; 8] ;"
      },
      {
        "id": 7,
        "label": "l . audit = vec ! [] ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_fuse",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let l = & mut ctx . accounts . lab ;"
      },
      {
        "id": 11,
        "label": "let researcher = & ctx . accounts . researcher ;"
      },
      {
        "id": 12,
        "label": "l . pool_a . extend_from_slice (& genome_a) ;"
      },
      {
        "id": 13,
        "label": "l . pool_b . extend_from_slice (& genome_b) ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "l . pool_a . len () > 64"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "l . pool_a . drain (0 .. (l . pool_a . len () - 64)) ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "l . pool_b . len () > 64"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "l . pool_b . drain (0 .. (l . pool_b . len () - 64)) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let mut out : Vec < u8 > = vec ! [] ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "let a = l . pool_a [i] ;"
      },
      {
        "id": 33,
        "label": "let b = l . pool_b [i] ;"
      },
      {
        "id": 34,
        "label": "let mut gene = (a ^ b) . rotate_left ((i % 7) as u32) ;"
      },
      {
        "id": 35,
        "label": "if statement"
      },
      {
        "id": 36,
        "label": "predicate"
      },
      {
        "id": 37,
        "label": "i % 3 == 0"
      },
      {
        "id": 38,
        "label": "True body"
      },
      {
        "id": 39,
        "label": "gene = gene . reverse_bits () ;"
      },
      {
        "id": 40,
        "label": "l . traits [i % 8] = l . traits [i % 8] . wrapping_add ((gene & 0x1F) as u8) ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "No-op"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "out . push (gene) ;"
      },
      {
        "id": 45,
        "label": "Loop End"
      },
      {
        "id": 46,
        "label": "l . audit . push (format ! (\"fuse#{}>{}\" , key , out . len ())) ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "l . audit . len () > 12"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "l . audit . remove (0) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "let mut sum = 0u32 ;"
      },
      {
        "id": 56,
        "label": "Loop Start"
      },
      {
        "id": 57,
        "label": "sum = sum . wrapping_add ((* v as u32) << (i % 11)) ;"
      },
      {
        "id": 58,
        "label": "Loop End"
      },
      {
        "id": 59,
        "label": "l . code = l . code . rotate_left (((sum % 29) as u32) + 1) ^ (key as u32) ;"
      },
      {
        "id": 60,
        "label": "l . owner = researcher . key () ;"
      },
      {
        "id": 61,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "predicate"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "true"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 35,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 31,
        "to": 45,
        "label": "for"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 58,
        "label": "for"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      }
    ]
  }
]