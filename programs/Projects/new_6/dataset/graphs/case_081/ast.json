[
  {
    "name": "distribute_rewards",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < DistributeRewards >",
      "amount: u64"
    ],
    "attributes": [],
    "body": [
      "let treasury_raw = & ctx . accounts . guild_config ;",
      "let treasury_data = GuildTreasury :: try_from_slice (& treasury_raw . data . borrow ()) ? ;",
      "let sender_key = ctx . accounts . initiator . key () ;",
      "let vault = & mut ctx . accounts . guild_vault ;",
      "let clock = Clock :: get () ? ;",
      "if treasury_data . owner != ctx . accounts . guild_config . owner",
      "{",
      "return Err (ProgramError :: IllegalOwner . into ()) ;",
      "}",
      "if treasury_data . admin == sender_key",
      "{",
      "vault . balance += amount / 2 ;",
      "vault . log . push ((clock . unix_timestamp , \"half reward\" . to_string ())) ;",
      "vault . claims . push (sender_key) ;",
      "} else",
      "{",
      "vault . balance += amount ;",
      "vault . log . push ((clock . unix_timestamp , \"full reward\" . to_string ())) ;",
      "}",
      "vault . event_count += 1 ;",
      "vault . last_updated = clock . slot ;",
      "vault . claim_attempts . insert (sender_key , vault . claim_attempts . get (& sender_key) . unwrap_or (& 0) + 1) ;",
      "for i in 0 .. 5",
      "{",
      "let k = Pubkey :: new_unique () ;",
      "if vault . trusted_members . contains (& k)",
      "{",
      "vault . trusted_activity += 1 ;",
      "}",
      "}",
      "if vault . claims . len () > 10",
      "{",
      "vault . flagged = true ;",
      "vault . review_notes . push (\"Suspicious volume\" . to_string ()) ;",
      "vault . flag_count += 1 ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "DistributeRewards",
    "node_type": "struct",
    "fields": [
      {
        "name": "initiator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "guild_config",
        "attribute": "# [doc = \" CHECK: Unverified, vulnerable to type cosplay\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "guild_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Vault >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Vault",
    "node_type": "struct",
    "fields": [
      {
        "name": "balance",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "log",
        "attribute": null,
        "field_type": "Vec < (i64 , String) >"
      },
      {
        "name": "claims",
        "attribute": null,
        "field_type": "Vec < Pubkey >"
      },
      {
        "name": "event_count",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "last_updated",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "claim_attempts",
        "attribute": null,
        "field_type": "std :: collections :: BTreeMap < Pubkey , u32 >"
      },
      {
        "name": "trusted_members",
        "attribute": null,
        "field_type": "Vec < Pubkey >"
      },
      {
        "name": "trusted_activity",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "flagged",
        "attribute": null,
        "field_type": "bool"
      },
      {
        "name": "review_notes",
        "attribute": null,
        "field_type": "Vec < String >"
      },
      {
        "name": "flag_count",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "GuildTreasury",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]