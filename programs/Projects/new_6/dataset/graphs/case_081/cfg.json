[
  {
    "name": "distribute_rewards",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let treasury_raw = & ctx . accounts . guild_config ;"
      },
      {
        "id": 2,
        "label": "let treasury_data = GuildTreasury :: try_from_slice (& treasury_raw . data . borrow ()) ? ;"
      },
      {
        "id": 3,
        "label": "let sender_key = ctx . accounts . initiator . key () ;"
      },
      {
        "id": 4,
        "label": "let vault = & mut ctx . accounts . guild_vault ;"
      },
      {
        "id": 5,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "treasury_data . owner != ctx . accounts . guild_config . owner"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "return Err (ProgramError :: IllegalOwner . into ()) ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "No-op"
      },
      {
        "id": 13,
        "label": "merge"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "treasury_data . admin == sender_key"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "vault . balance += amount / 2 ;"
      },
      {
        "id": 19,
        "label": "vault . log . push ((clock . unix_timestamp , \"half reward\" . to_string ())) ;"
      },
      {
        "id": 20,
        "label": "vault . claims . push (sender_key) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "vault . balance += amount ;"
      },
      {
        "id": 23,
        "label": "vault . log . push ((clock . unix_timestamp , \"full reward\" . to_string ())) ;"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "vault . event_count += 1 ;"
      },
      {
        "id": 26,
        "label": "vault . last_updated = clock . slot ;"
      },
      {
        "id": 27,
        "label": "vault . claim_attempts . insert (sender_key , vault . claim_attempts . get (& sender_key) . unwrap_or (& 0) + 1) ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "let k = Pubkey :: new_unique () ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "vault . trusted_members . contains (& k)"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "vault . trusted_activity += 1 ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "Loop End"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "vault . claims . len () > 10"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "vault . flagged = true ;"
      },
      {
        "id": 44,
        "label": "vault . review_notes . push (\"Suspicious volume\" . to_string ()) ;"
      },
      {
        "id": 45,
        "label": "vault . flag_count += 1 ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 6,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 14,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 20,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 28,
        "to": 38,
        "label": "for"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 39,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      }
    ]
  }
]