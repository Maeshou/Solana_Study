[
  {
    "name": "init_harvester",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let harvester = & mut ctx . accounts . harvester_core ;"
      },
      {
        "id": 2,
        "label": "harvester . harvester_id = harvester_id * 3 ;"
      },
      {
        "id": 3,
        "label": "harvester . energy_level = energy_level ;"
      },
      {
        "id": 4,
        "label": "harvester . crystals_processed = 0 ;"
      },
      {
        "id": 5,
        "label": "harvester . is_active = harvester . energy_level > 0 ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Quantum Harvester {} initialized with {} energy.\" , harvester . harvester_id , harvester . energy_level) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_crystal",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let crystal = & mut ctx . accounts . quantum_crystal ;"
      },
      {
        "id": 10,
        "label": "crystal . parent_harvester = ctx . accounts . harvester_core . key () ;"
      },
      {
        "id": 11,
        "label": "crystal . crystal_id = crystal_id ^ 0x1122334455667788 ;"
      },
      {
        "id": 12,
        "label": "crystal . efficiency = efficiency ;"
      },
      {
        "id": 13,
        "label": "crystal . is_charged = false ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"New crystal {} created with {} efficiency.\" , crystal . crystal_id , crystal . efficiency) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_quantum_state",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let harvester = & mut ctx . accounts . harvester_core ;"
      },
      {
        "id": 18,
        "label": "let crystal_a = & mut ctx . accounts . crystal_a ;"
      },
      {
        "id": 19,
        "label": "let crystal_b = & mut ctx . accounts . crystal_b ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "crystal_a . efficiency > MIN_PROCESSING_EFFICIENCY"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "harvester . energy_level = harvester . energy_level . saturating_add (ENERGY_GAIN_PER_CYCLE) ;"
      },
      {
        "id": 26,
        "label": "crystal_a . is_charged = harvester . energy_level > MAX_ENERGY_CAPACITY / 2 ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "harvester . energy_level = harvester . energy_level . saturating_sub (ENERGY_GAIN_PER_CYCLE / 2) ;"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "crystal_b . efficiency > MIN_PROCESSING_EFFICIENCY"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "harvester . energy_level = harvester . energy_level . saturating_add (ENERGY_GAIN_PER_CYCLE * 2) ;"
      },
      {
        "id": 35,
        "label": "crystal_b . is_charged = harvester . energy_level > MAX_ENERGY_CAPACITY ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "harvester . energy_level = harvester . energy_level . saturating_sub (ENERGY_GAIN_PER_CYCLE) ;"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "harvester . crystals_processed = harvester . crystals_processed . saturating_add (2) ;"
      },
      {
        "id": 41,
        "label": "harvester . is_active = harvester . energy_level > 0 ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Processed crystals for {} cycles. Harvester energy: {}. Crystal A charged: {}, Crystal B charged: {}.\" , cycles , harvester . energy_level , crystal_a . is_charged , crystal_b . is_charged) ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 21,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 30,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 20,
        "to": 39,
        "label": "for"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]