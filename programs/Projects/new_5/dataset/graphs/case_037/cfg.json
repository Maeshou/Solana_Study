[
  {
    "name": "init_event",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let event = & mut ctx . accounts . event ;"
      },
      {
        "id": 2,
        "label": "event . host = ctx . accounts . host . key () ;"
      },
      {
        "id": 3,
        "label": "event . event_id = event_id ;"
      },
      {
        "id": 4,
        "label": "event . name = name ;"
      },
      {
        "id": 5,
        "label": "event . participant_count = 0 ;"
      },
      {
        "id": 6,
        "label": "event . is_open = true ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Event '{}' initialized.\" , event . name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_participation",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let participation = & mut ctx . accounts . participation ;"
      },
      {
        "id": 11,
        "label": "let event = & mut ctx . accounts . event ;"
      },
      {
        "id": 12,
        "label": "participation . event = event . key () ;"
      },
      {
        "id": 13,
        "label": "participation . participant = ctx . accounts . participant . key () ;"
      },
      {
        "id": 14,
        "label": "participation . participation_id = participation_id ;"
      },
      {
        "id": 15,
        "label": "participation . has_attended = false ;"
      },
      {
        "id": 16,
        "label": "event . participant_count = event . participant_count . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"Participation {} created for event {}.\" , participation . participation_id , event . name) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_participation_records",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let record_a = & mut ctx . accounts . record_a ;"
      },
      {
        "id": 21,
        "label": "let record_b = & mut ctx . accounts . record_b ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "! ctx . accounts . event . is_open"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "return Err (ErrorCode :: EventClosed . into ()) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let mut a_update_count = 0 ;"
      },
      {
        "id": 31,
        "label": "let mut b_update_count = 0 ;"
      },
      {
        "id": 32,
        "label": "Loop Start"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "* value > 5"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "record_a . has_attended = true ;"
      },
      {
        "id": 38,
        "label": "record_b . has_attended = false ;"
      },
      {
        "id": 39,
        "label": "a_update_count += 1 ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Value > 5, updating A and B differently.\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "record_a . has_attended = false ;"
      },
      {
        "id": 43,
        "label": "record_b . has_attended = true ;"
      },
      {
        "id": 44,
        "label": "b_update_count += 1 ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"Value <= 5, updating B and A differently.\") ;"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "Loop End"
      },
      {
        "id": 48,
        "label": "if statement"
      },
      {
        "id": 49,
        "label": "predicate"
      },
      {
        "id": 50,
        "label": "record_a . has_attended"
      },
      {
        "id": 51,
        "label": "True body"
      },
      {
        "id": 52,
        "label": "msg ! (\"Record A is set to true.\") ;"
      },
      {
        "id": 53,
        "label": "False body"
      },
      {
        "id": 54,
        "label": "msg ! (\"Record A is set to false.\") ;"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "if statement"
      },
      {
        "id": 57,
        "label": "predicate"
      },
      {
        "id": 58,
        "label": "record_b . has_attended"
      },
      {
        "id": 59,
        "label": "True body"
      },
      {
        "id": 60,
        "label": "msg ! (\"Record B is set to true.\") ;"
      },
      {
        "id": 61,
        "label": "False body"
      },
      {
        "id": 62,
        "label": "msg ! (\"Record B is set to false.\") ;"
      },
      {
        "id": 63,
        "label": "merge"
      },
      {
        "id": 64,
        "label": "msg ! (\"Processed {} updates. A updates: {}, B updates: {}.\" , update_values . len () , a_update_count , b_update_count) ;"
      },
      {
        "id": 65,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 33,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 40,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 32,
        "to": 47,
        "label": "for"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "predicate"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "true"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 48,
        "to": 53,
        "label": "false"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "predicate"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "true"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 56,
        "to": 61,
        "label": "false"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 60,
        "to": 63,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      }
    ]
  }
]