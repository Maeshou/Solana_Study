[
  {
    "name": "init_circle",
    "inputs": [
      "ctx: Context < InitCircle >",
      "circle_id: u64",
      "initial_aether: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let circle = & mut ctx . accounts . magic_circle ;"
      },
      {
        "id": 2,
        "label": "circle . circle_id = circle_id . checked_add (9876) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "circle . aether_pool = initial_aether . checked_mul (2) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 4,
        "label": "circle . active_casters = 0 ;"
      },
      {
        "id": 5,
        "label": "circle . is_active = circle . aether_pool > 1000 ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Magic Circle {} created with {} aether.\" , circle . circle_id , circle . aether_pool) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: circle"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: circle"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: circle"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: circle"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: circle"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: circle"
      }
    ]
  },
  {
    "name": "init_caster",
    "inputs": [
      "ctx: Context < InitCaster >",
      "caster_id: u64",
      "caster_type: CasterType"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let caster = & mut ctx . accounts . spellcaster ;"
      },
      {
        "id": 10,
        "label": "caster . parent_circle = ctx . accounts . magic_circle . key () ;"
      },
      {
        "id": 11,
        "label": "caster . caster_id = caster_id ^ 0xFF00FF00FF00FF00 ;"
      },
      {
        "id": 12,
        "label": "caster . caster_type = caster_type ;"
      },
      {
        "id": 13,
        "label": "caster . mastery_level = 0 ;"
      },
      {
        "id": 14,
        "label": "caster . is_casting = false ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"Spellcaster {} of type {:?} joins the circle.\" , caster . caster_id , caster . caster_type) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: caster"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: caster"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: caster"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: caster"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: caster"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: caster"
      }
    ]
  },
  {
    "name": "cast_spells",
    "inputs": [
      "ctx: Context < CastSpells >",
      "cycles: u32"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let circle = & mut ctx . accounts . magic_circle ;"
      },
      {
        "id": 19,
        "label": "let caster = & mut ctx . accounts . spellcaster ;"
      },
      {
        "id": 20,
        "label": "for _i in 0 .. cycles { match caster . caster_type { CasterType :: Elementalist => { circle . aether_pool = circle . aether_pool . checked_sub (20) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (1) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 50 ; } , CasterType :: Illusionist => { circle . aether_pool = circle . aether_pool . checked_sub (15) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (2) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 80 ; } , CasterType :: Necromancer => { circle . aether_pool = circle . aether_pool . checked_sub (30) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (3) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 100 ; } , } circle . active_casters = circle . active_casters . checked_add (1) . unwrap_or (u32 :: MAX) ; }"
      },
      {
        "id": 21,
        "label": "match caster . caster_type { CasterType :: Elementalist => { circle . aether_pool = circle . aether_pool . checked_sub (20) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (1) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 50 ; } , CasterType :: Illusionist => { circle . aether_pool = circle . aether_pool . checked_sub (15) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (2) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 80 ; } , CasterType :: Necromancer => { circle . aether_pool = circle . aether_pool . checked_sub (30) . unwrap_or (0) ; caster . mastery_level = caster . mastery_level . checked_add (3) . unwrap_or (u32 :: MAX) ; caster . is_casting = caster . mastery_level < 100 ; } , }"
      },
      {
        "id": 22,
        "label": "circle . aether_pool = circle . aether_pool . checked_sub (20) . unwrap_or (0) ;"
      },
      {
        "id": 23,
        "label": "caster . mastery_level = caster . mastery_level . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 24,
        "label": "caster . is_casting = caster . mastery_level < 50 ;"
      },
      {
        "id": 25,
        "label": "circle . aether_pool = circle . aether_pool . checked_sub (15) . unwrap_or (0) ;"
      },
      {
        "id": 26,
        "label": "caster . mastery_level = caster . mastery_level . checked_add (2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "caster . is_casting = caster . mastery_level < 80 ;"
      },
      {
        "id": 28,
        "label": "circle . aether_pool = circle . aether_pool . checked_sub (30) . unwrap_or (0) ;"
      },
      {
        "id": 29,
        "label": "caster . mastery_level = caster . mastery_level . checked_add (3) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "caster . is_casting = caster . mastery_level < 100 ;"
      },
      {
        "id": 31,
        "label": "circle . active_casters = circle . active_casters . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 32,
        "label": "circle . is_active = circle . aether_pool > 1000 ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"Spellcaster {} performed {} cycles of casting.\" , caster . caster_id , cycles) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: circle"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 25,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 25,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: circle"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: caster"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: caster"
      },
      {
        "from": 18,
        "to": 31,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 31,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 32,
        "label": "data_dep: circle"
      },
      {
        "from": 18,
        "to": 32,
        "label": "data_dep: circle"
      }
    ]
  }
]