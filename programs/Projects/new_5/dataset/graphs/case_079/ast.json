[
  {
    "name": "init_circle",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitCircle >",
      "circle_id: u64",
      "initial_aether: u64"
    ],
    "attributes": [],
    "body": [
      "let circle = & mut ctx . accounts . magic_circle ;",
      "circle . circle_id = circle_id . checked_add (9876) . unwrap_or (u64 :: MAX) ;",
      "circle . aether_pool = initial_aether . checked_mul (2) . unwrap_or (u64 :: MAX) ;",
      "circle . active_casters = 0 ;",
      "circle . is_active = circle . aether_pool > 1000 ;",
      "msg ! (\"Magic Circle {} created with {} aether.\" , circle . circle_id , circle . aether_pool) ;",
      "Ok (())"
    ]
  },
  {
    "name": "init_caster",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitCaster >",
      "caster_id: u64",
      "caster_type: CasterType"
    ],
    "attributes": [],
    "body": [
      "let caster = & mut ctx . accounts . spellcaster ;",
      "caster . parent_circle = ctx . accounts . magic_circle . key () ;",
      "caster . caster_id = caster_id ^ 0xFF00FF00FF00FF00 ;",
      "caster . caster_type = caster_type ;",
      "caster . mastery_level = 0 ;",
      "caster . is_casting = false ;",
      "msg ! (\"Spellcaster {} of type {:?} joins the circle.\" , caster . caster_id , caster . caster_type) ;",
      "Ok (())"
    ]
  },
  {
    "name": "cast_spells",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CastSpells >",
      "cycles: u32"
    ],
    "attributes": [],
    "body": [
      "let circle = & mut ctx . accounts . magic_circle ;",
      "let caster = & mut ctx . accounts . spellcaster ;",
      "for _i in 0 .. cycles",
      "{",
      "match caster . caster_type",
      "{",
      "CasterType :: Elementalist => { circle . aether_pool = circle . aether_pool . checked_sub (20) . unwrap_or (0) ;",
      "caster . mastery_level = caster . mastery_level . checked_add (1) . unwrap_or (u32 :: MAX) ;",
      "caster . is_casting = caster . mastery_level < 50 ;",
      "} , CasterType :: Illusionist =>",
      "{",
      "circle . aether_pool = circle . aether_pool . checked_sub (15) . unwrap_or (0) ;",
      "caster . mastery_level = caster . mastery_level . checked_add (2) . unwrap_or (u32 :: MAX) ;",
      "caster . is_casting = caster . mastery_level < 80 ;",
      "} , CasterType :: Necromancer =>",
      "{",
      "circle . aether_pool = circle . aether_pool . checked_sub (30) . unwrap_or (0) ;",
      "caster . mastery_level = caster . mastery_level . checked_add (3) . unwrap_or (u32 :: MAX) ;",
      "caster . is_casting = caster . mastery_level < 100 ;",
      "} , } circle . active_casters = circle . active_casters . checked_add (1) . unwrap_or (u32 :: MAX) ;",
      "}",
      "circle . is_active = circle . aether_pool > 1000 ;",
      "msg ! (\"Spellcaster {} performed {} cycles of casting.\" , caster . caster_id , cycles) ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitCircle",
    "node_type": "struct",
    "fields": [
      {
        "name": "magic_circle",
        "attribute": "# [account (init , payer = signer , space = 8 + 8 + 8 + 4 + 1)]",
        "field_type": "Account < 'info , MagicCircle >"
      },
      {
        "name": "signer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitCaster",
    "node_type": "struct",
    "fields": [
      {
        "name": "spellcaster",
        "attribute": "# [account (init , payer = signer , space = 8 + 32 + 8 + 1 + 4 + 1)]",
        "field_type": "Account < 'info , Spellcaster >"
      },
      {
        "name": "magic_circle",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , MagicCircle >"
      },
      {
        "name": "signer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "CastSpells",
    "node_type": "struct",
    "fields": [
      {
        "name": "magic_circle",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , MagicCircle >"
      },
      {
        "name": "spellcaster",
        "attribute": "# [account (mut , has_one = parent_circle)]",
        "field_type": "Account < 'info , Spellcaster >"
      },
      {
        "name": "signer",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MagicCircle",
    "node_type": "struct",
    "fields": [
      {
        "name": "circle_id",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "aether_pool",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "active_casters",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "is_active",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Spellcaster",
    "node_type": "struct",
    "fields": [
      {
        "name": "parent_circle",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "caster_id",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "caster_type",
        "attribute": null,
        "field_type": "CasterType"
      },
      {
        "name": "mastery_level",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "is_casting",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]