[
  {
    "name": "init_party",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . party ;"
      },
      {
        "id": 2,
        "label": "p . leader = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "p . flag = flag ;"
      },
      {
        "id": 4,
        "label": "p . power = 100 ;"
      },
      {
        "id": 5,
        "label": "p . raid_count = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_log",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let l = & mut ctx . accounts . raid_log ;"
      },
      {
        "id": 9,
        "label": "l . parent = ctx . accounts . party . key () ;"
      },
      {
        "id": 10,
        "label": "l . boss_id = boss_id ;"
      },
      {
        "id": 11,
        "label": "l . state = Dormant ;"
      },
      {
        "id": 12,
        "label": "l . damage = 0 ;"
      },
      {
        "id": 13,
        "label": "l . turns = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_rounds",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let p = & mut ctx . accounts . party ;"
      },
      {
        "id": 17,
        "label": "let a = & mut ctx . accounts . log_a ;"
      },
      {
        "id": 18,
        "label": "let b = & mut ctx . accounts . log_b ;"
      },
      {
        "id": 19,
        "label": "let mut avg : u64 = p . power as u64 ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "let hit = ((bursts as u64 + k as u64 * 17) % 300) as u64 ;"
      },
      {
        "id": 22,
        "label": "avg = (avg * 3 + hit) / 4 ;"
      },
      {
        "id": 23,
        "label": "p . raid_count = p . raid_count . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "Loop End"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "avg as u32 > p . power"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "a . state = Raging ;"
      },
      {
        "id": 30,
        "label": "a . damage = a . damage . saturating_add ((avg as u32) / 3 + 10) ;"
      },
      {
        "id": 31,
        "label": "a . turns = a . turns . saturating_add (2) ;"
      },
      {
        "id": 32,
        "label": "p . power = (p . power + ((avg as u32) & 255)) . min (10_000) ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"A raging; dmg={}, power={}\" , a . damage , p . power) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "a . state = Dormant ;"
      },
      {
        "id": 36,
        "label": "a . damage = a . damage / 2 + (bursts & 31) ;"
      },
      {
        "id": 37,
        "label": "a . turns = a . turns . saturating_sub (1) ;"
      },
      {
        "id": 38,
        "label": "p . power = (p . power / 2) + 77 ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"A calmed; dmg={}, power={}\" , a . damage , p . power) ;"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "Loop Start"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "(b . boss_id ^ (p . power as u32)) & 1 == 1"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "b . state = Enraged ;"
      },
      {
        "id": 47,
        "label": "b . damage = b . damage . saturating_add (bursts / 2 + 5) ;"
      },
      {
        "id": 48,
        "label": "p . power = p . power . saturating_add (9) ;"
      },
      {
        "id": 49,
        "label": "msg ! (\"B enraged; dmg={}, power={}\" , b . damage , p . power) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "b . state = Dormant ;"
      },
      {
        "id": 52,
        "label": "b . turns = b . turns . saturating_add (1) ;"
      },
      {
        "id": 53,
        "label": "p . power = p . power . saturating_sub (3) ;"
      },
      {
        "id": 54,
        "label": "msg ! (\"B stall; turns={}, power={}\" , b . turns , p . power) ;"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 20,
        "to": 24,
        "label": "for"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 25,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 33,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 42,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 49,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 41,
        "to": 56,
        "label": "for"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      }
    ]
  }
]