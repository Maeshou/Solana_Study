[
  {
    "name": "init_journal",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitJournal >",
      "journal_id: u64",
      "initial_pages: u32"
    ],
    "attributes": [],
    "body": [
      "let journal = & mut ctx . accounts . journal_core ;",
      "journal . journal_id = journal_id ^ 0xFEEDC0DE ;",
      "journal . total_pages = initial_pages . saturating_add (INITIAL_PAGES_BONUS) ;",
      "journal . sync_count = 0 ;",
      "journal . is_complete = false ;",
      "msg ! (\"Journal {} initialized with {} pages.\" , journal . journal_id , journal . total_pages) ;",
      "Ok (())"
    ]
  },
  {
    "name": "init_entry",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitEntry >",
      "entry_id: u64",
      "content_hash: u64"
    ],
    "attributes": [],
    "body": [
      "let entry = & mut ctx . accounts . journal_entry ;",
      "entry . parent_journal = ctx . accounts . journal_core . key () ;",
      "entry . entry_id = entry_id + 1 ;",
      "entry . content_hash = content_hash ;",
      "entry . is_synced = false ;",
      "msg ! (\"New entry {} created with hash {}.\" , entry . entry_id , entry . content_hash) ;",
      "Ok (())"
    ]
  },
  {
    "name": "synchronize_entries",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SynchronizeEntries >",
      "new_content_hash: u64"
    ],
    "attributes": [],
    "body": [
      "let journal = & mut ctx . accounts . journal_core ;",
      "let main_entry = & mut ctx . accounts . main_entry ;",
      "let backup_entry = & mut ctx . accounts . backup_entry ;",
      "require ! (! main_entry . is_synced && ! backup_entry . is_synced , ChronoscribeError :: EntriesAlreadySynced) ;",
      "if main_entry . content_hash != backup_entry . content_hash",
      "{",
      "backup_entry . content_hash = main_entry . content_hash ;",
      "msg ! (\"Content mismatch detected. Backup entry",
      "{",
      "} synchronized with main entry {}.\" , backup_entry . entry_id , main_entry . entry_id) ;",
      "}",
      "main_entry . content_hash = new_content_hash ;",
      "backup_entry . content_hash = new_content_hash ;",
      "main_entry . is_synced = true ;",
      "backup_entry . is_synced = true ;",
      "journal . sync_count = journal . sync_count . saturating_add (1) ;",
      "journal . is_complete = journal . sync_count . checked_cmp (& SYNC_COMPLETION_THRESHOLD) != Some (std :: cmp :: Ordering :: Less) ;",
      "msg ! (\"Entries {} and {} synchronized. New hash: {}.\" , main_entry . entry_id , backup_entry . entry_id , new_content_hash) ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitJournal",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal_core",
        "attribute": "# [account (init , payer = signer , space = 8 + 8 + 4 + 4 + 1)]",
        "field_type": "Account < 'info , JournalCore >"
      },
      {
        "name": "signer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitEntry",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal_entry",
        "attribute": "# [account (init , payer = signer , space = 8 + 32 + 8 + 8 + 1)]",
        "field_type": "Account < 'info , JournalEntry >"
      },
      {
        "name": "journal_core",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , JournalCore >"
      },
      {
        "name": "signer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SynchronizeEntries",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal_core",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , JournalCore >"
      },
      {
        "name": "main_entry",
        "attribute": "# [account (mut , has_one = parent_journal)]",
        "field_type": "Account < 'info , JournalEntry >"
      },
      {
        "name": "backup_entry",
        "attribute": "# [account (mut , has_one = parent_journal)]",
        "field_type": "Account < 'info , JournalEntry >"
      },
      {
        "name": "signer",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "JournalCore",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal_id",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "total_pages",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "sync_count",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "is_complete",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "JournalEntry",
    "node_type": "struct",
    "fields": [
      {
        "name": "parent_journal",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "entry_id",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "content_hash",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "is_synced",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]