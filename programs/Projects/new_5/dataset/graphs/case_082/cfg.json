[
  {
    "name": "init_void",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let void = & mut ctx . accounts . void_core ;"
      },
      {
        "id": 2,
        "label": "void . void_seed = void_seed . checked_sub (123456) . unwrap_or (1) ;"
      },
      {
        "id": 3,
        "label": "void . max_echoes = max_echoes . checked_mul (2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 4,
        "label": "void . active_echoes = 0 ;"
      },
      {
        "id": 5,
        "label": "void . void_state = VoidState :: Initial ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Void initialized with seed {}.\" , void . void_seed) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_echo",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let echo = & mut ctx . accounts . echo_data ;"
      },
      {
        "id": 10,
        "label": "echo . parent_void = ctx . accounts . void_core . key () ;"
      },
      {
        "id": 11,
        "label": "echo . echo_id = echo_id . rotate_right (2) ;"
      },
      {
        "id": 12,
        "label": "echo . intensity = base_intensity . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 13,
        "label": "echo . life_span = 1000 ;"
      },
      {
        "id": 14,
        "label": "echo . is_stable = true ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"New echo {} created with intensity {}.\" , echo . echo_id , echo . intensity) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "amplify_echoes",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let void = & mut ctx . accounts . void_core ;"
      },
      {
        "id": 19,
        "label": "let echo1 = & mut ctx . accounts . echo1 ;"
      },
      {
        "id": 20,
        "label": "let echo2 = & mut ctx . accounts . echo2 ;"
      },
      {
        "id": 21,
        "label": "let mut loop_counter = cycles ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let intensity_gain1 = (void . void_seed as u32) . checked_add (echo1 . intensity) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 24,
        "label": "echo1 . intensity = echo1 . intensity . checked_add (intensity_gain1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 25,
        "label": "echo1 . life_span = echo1 . life_span . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 26,
        "label": "echo1 . is_stable = echo1 . life_span > 0 && echo1 . intensity < 5000 ;"
      },
      {
        "id": 27,
        "label": "let intensity_gain2 = (void . void_seed as u32) . checked_mul (2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 28,
        "label": "echo2 . intensity = echo2 . intensity . checked_add (intensity_gain2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "echo2 . life_span = echo2 . life_span . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 30,
        "label": "echo2 . is_stable = echo2 . life_span > 0 && echo2 . intensity < 8000 ;"
      },
      {
        "id": 31,
        "label": "void . void_state = if echo1 . is_stable && echo2 . is_stable { VoidState :: Amplifying } else { VoidState :: Unstable } ;"
      },
      {
        "id": 32,
        "label": "void . active_echoes = (echo1 . is_stable as u32) . checked_add (echo2 . is_stable as u32) . unwrap_or (0) ;"
      },
      {
        "id": 33,
        "label": "loop_counter = loop_counter . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "msg ! (\"Echoes amplified for {} cycles. Void state is now {:?}.\" , cycles , void . void_state) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 22,
        "to": 34,
        "label": "while"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]