[
  {
    "name": "init_relay",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let relay = & mut ctx . accounts . relay_core ;"
      },
      {
        "id": 2,
        "label": "relay . relay_id = relay_id << 2 ;"
      },
      {
        "id": 3,
        "label": "relay . power_reserve = power_reserve ;"
      },
      {
        "id": 4,
        "label": "relay . total_packets_transferred = 0 ;"
      },
      {
        "id": 5,
        "label": "relay . is_operational = power_reserve . checked_cmp (& MIN_RELAY_POWER_THRESHOLD) == Some (std :: cmp :: Ordering :: Greater) ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Orbital Relay {} established with {} power.\" , relay . relay_id , relay . power_reserve) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_packet",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let packet = & mut ctx . accounts . data_packet ;"
      },
      {
        "id": 10,
        "label": "packet . parent_relay = ctx . accounts . relay_core . key () ;"
      },
      {
        "id": 11,
        "label": "packet . packet_id = packet_id ^ 0x0123456789ABCDEF ;"
      },
      {
        "id": 12,
        "label": "packet . data_size = data_size ;"
      },
      {
        "id": 13,
        "label": "packet . is_processed = false ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"New data packet {} created with size {}.\" , packet . packet_id , packet . data_size) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "transfer_data",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let relay = & mut ctx . accounts . relay_core ;"
      },
      {
        "id": 18,
        "label": "let incoming_packet = & mut ctx . accounts . incoming_packet ;"
      },
      {
        "id": 19,
        "label": "let outgoing_packet = & mut ctx . accounts . outgoing_packet ;"
      },
      {
        "id": 20,
        "label": "require ! (relay . is_operational , OrbitalRelayError :: RelayNotOperational) ;"
      },
      {
        "id": 21,
        "label": "require ! (! incoming_packet . is_processed && ! outgoing_packet . is_processed , OrbitalRelayError :: PacketsAlreadyProcessed) ;"
      },
      {
        "id": 22,
        "label": "let total_size = incoming_packet . data_size . saturating_add (outgoing_packet . data_size) ;"
      },
      {
        "id": 23,
        "label": "require ! (total_size . checked_cmp (& MAX_BUFFER_SIZE) != Some (std :: cmp :: Ordering :: Greater) , OrbitalRelayError :: BufferCapacityExceeded) ;"
      },
      {
        "id": 24,
        "label": "relay . power_reserve = relay . power_reserve . saturating_sub (POWER_COST_PER_PACKET) ;"
      },
      {
        "id": 25,
        "label": "incoming_packet . is_processed = true ;"
      },
      {
        "id": 26,
        "label": "outgoing_packet . is_processed = true ;"
      },
      {
        "id": 27,
        "label": "relay . total_packets_transferred = relay . total_packets_transferred . saturating_add (2) ;"
      },
      {
        "id": 28,
        "label": "relay . is_operational = relay . power_reserve . checked_cmp (& MIN_RELAY_POWER_THRESHOLD) == Some (std :: cmp :: Ordering :: Greater) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"Transferred incoming packet {} and outgoing packet {}.\" , incoming_packet . packet_id , outgoing_packet . packet_id) ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  }
]