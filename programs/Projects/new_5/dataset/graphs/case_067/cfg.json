[
  {
    "name": "create_system",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let system = & mut ctx . accounts . system ;"
      },
      {
        "id": 2,
        "label": "system . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "system . system_id = system_id ;"
      },
      {
        "id": 4,
        "label": "system . vehicle_count = 0 ;"
      },
      {
        "id": 5,
        "label": "system . is_operational = TrafficSystemStatus :: Operational ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Traffic management system {} created.\" , system . system_id) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "register_vehicle",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let vehicle = & mut ctx . accounts . vehicle ;"
      },
      {
        "id": 10,
        "label": "let system = & mut ctx . accounts . system ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "matches ! (system . is_operational , TrafficSystemStatus :: Operational)"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "vehicle . is_active = true ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "route_code == 1"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "vehicle . current_route = Route :: City ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "vehicle . current_route = Route :: Highway ;"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "system . vehicle_count = system . vehicle_count . saturating_add (1) ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"Vehicle {} registered and assigned a route.\" , vehicle . vehicle_id) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "vehicle . is_active = false ;"
      },
      {
        "id": 28,
        "label": "vehicle . current_route = Route :: City ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"System is not operational. Vehicle {} registered as inactive.\" , vehicle . vehicle_id) ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "vehicle . system = system . key () ;"
      },
      {
        "id": 32,
        "label": "vehicle . vehicle_id = vehicle_id ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 11,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 25,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_routes",
    "nodes": [
      {
        "id": 34,
        "label": "Entry"
      },
      {
        "id": 35,
        "label": "let vehicle1 = & mut ctx . accounts . vehicle1 ;"
      },
      {
        "id": 36,
        "label": "let vehicle2 = & mut ctx . accounts . vehicle2 ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "matches ! (vehicle1 . is_active , true) && matches ! (vehicle2 . is_active , true)"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "new_route_code == 1"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "vehicle1 . current_route = Route :: City ;"
      },
      {
        "id": 46,
        "label": "vehicle2 . current_route = Route :: City ;"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "vehicle1 . current_route = Route :: Highway ;"
      },
      {
        "id": 49,
        "label": "vehicle2 . current_route = Route :: Highway ;"
      },
      {
        "id": 50,
        "label": "merge"
      },
      {
        "id": 51,
        "label": "msg ! (\"Routes updated for both vehicles.\") ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "msg ! (\"One or both vehicles are inactive.\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 41,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 46,
        "to": 50,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 37,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]