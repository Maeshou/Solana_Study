[
  {
    "name": "setup_battle_zone",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let zone = & mut ctx . accounts . battle_zone ;"
      },
      {
        "id": 2,
        "label": "zone . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 3,
        "label": "zone . zone_id = zone_id ;"
      },
      {
        "id": 4,
        "label": "zone . name = name ;"
      },
      {
        "id": 5,
        "label": "zone . active_battles = 0 ;"
      },
      {
        "id": 6,
        "label": "zone . max_players = 20 ;"
      },
      {
        "id": 7,
        "label": "zone . zone_status = ZoneStatus :: Active ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Battle Zone '{}' initialized with a capacity of {}. Status is now Active.\" , zone . name , zone . max_players) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "enroll_combatant",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let combatant = & mut ctx . accounts . combatant_stats ;"
      },
      {
        "id": 12,
        "label": "let zone = & mut ctx . accounts . battle_zone ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "zone . zone_status != ZoneStatus :: Active"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (error ! (BattleError :: ZoneNotActive)) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "combatant . zone = zone . key () ;"
      },
      {
        "id": 22,
        "label": "combatant . player_id = player_id ;"
      },
      {
        "id": 23,
        "label": "combatant . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 24,
        "label": "combatant . health = initial_power . checked_mul (5) . unwrap_or (u16 :: MAX) ;"
      },
      {
        "id": 25,
        "label": "combatant . stamina = initial_power . checked_div (2) . unwrap_or (0) ;"
      },
      {
        "id": 26,
        "label": "combatant . last_action_timestamp = 1731518400 ;"
      },
      {
        "id": 27,
        "label": "combatant . combat_status = CombatantStatus :: Ready ;"
      },
      {
        "id": 28,
        "label": "zone . active_battles = zone . active_battles . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"Combatant {} enrolled in battle zone. Health: {}, Stamina: {}.\" , combatant . player_id , combatant . health , combatant . stamina) ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute_duel_round",
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let attacker_stats = & mut ctx . accounts . attacker_stats ;"
      },
      {
        "id": 33,
        "label": "let defender_stats = & mut ctx . accounts . defender_stats ;"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "attacker_stats . combat_status != CombatantStatus :: Ready || defender_stats . combat_status != CombatantStatus :: Ready"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "return Err (error ! (BattleError :: CombatantNotReady)) ;"
      },
      {
        "id": 39,
        "label": "False body"
      },
      {
        "id": 40,
        "label": "No-op"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "let mut damage_multiplier = 1.0 ;"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "attacker_move == defender_move"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "msg ! (\"Moves are identical, a stalemate!\") ;"
      },
      {
        "id": 48,
        "label": "attacker_stats . stamina = attacker_stats . stamina . saturating_sub (attacker_move as u16 / 2) ;"
      },
      {
        "id": 49,
        "label": "defender_stats . stamina = defender_stats . stamina . saturating_sub (defender_move as u16 / 2) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "if statement"
      },
      {
        "id": 52,
        "label": "predicate"
      },
      {
        "id": 53,
        "label": "attacker_move > defender_move"
      },
      {
        "id": 54,
        "label": "True body"
      },
      {
        "id": 55,
        "label": "msg ! (\"Attacker has the advantage.\") ;"
      },
      {
        "id": 56,
        "label": "damage_multiplier = 1.5 ;"
      },
      {
        "id": 57,
        "label": "attacker_stats . stamina = attacker_stats . stamina . saturating_sub (attacker_move as u16) ;"
      },
      {
        "id": 58,
        "label": "defender_stats . stamina = defender_stats . stamina . saturating_sub (defender_move as u16 / 4) ;"
      },
      {
        "id": 59,
        "label": "False body"
      },
      {
        "id": 60,
        "label": "msg ! (\"Defender has the advantage.\") ;"
      },
      {
        "id": 61,
        "label": "damage_multiplier = 0.5 ;"
      },
      {
        "id": 62,
        "label": "attacker_stats . stamina = attacker_stats . stamina . saturating_sub (attacker_move as u16 / 4) ;"
      },
      {
        "id": 63,
        "label": "defender_stats . stamina = defender_stats . stamina . saturating_sub (defender_move as u16) ;"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "merge"
      },
      {
        "id": 66,
        "label": "let damage = (attacker_stats . stamina . saturating_sub (defender_stats . stamina)) . checked_mul (damage_multiplier as u16) . unwrap_or (0) ;"
      },
      {
        "id": 67,
        "label": "defender_stats . health = defender_stats . health . checked_sub (damage) . unwrap_or (0) ;"
      },
      {
        "id": 68,
        "label": "if statement"
      },
      {
        "id": 69,
        "label": "predicate"
      },
      {
        "id": 70,
        "label": "defender_stats . health == 0"
      },
      {
        "id": 71,
        "label": "True body"
      },
      {
        "id": 72,
        "label": "msg ! (\"Defender defeated!\") ;"
      },
      {
        "id": 73,
        "label": "defender_stats . combat_status = CombatantStatus :: Defeated ;"
      },
      {
        "id": 74,
        "label": "ctx . accounts . battle_zone . active_battles = ctx . accounts . battle_zone . active_battles . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "msg ! (\"Defender takes {} damage.\" , damage) ;"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 34,
        "to": 39,
        "label": "false"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 43,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "predicate"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "true"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 51,
        "to": 59,
        "label": "false"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 58,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 49,
        "to": 65,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "predicate"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "true"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 68,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      }
    ]
  }
]