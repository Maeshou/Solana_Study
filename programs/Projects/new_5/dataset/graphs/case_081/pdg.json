[
  {
    "name": "init_map",
    "inputs": [
      "ctx: Context < InitMap >",
      "map_id: u64",
      "initial_sectors: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let map = & mut ctx . accounts . galaxy_map ;"
      },
      {
        "id": 2,
        "label": "map . map_id = map_id . checked_add (101) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "map . total_sectors = initial_sectors . checked_mul (5) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 4,
        "label": "map . explored_sectors = 0 ;"
      },
      {
        "id": 5,
        "label": "map . is_complete = false ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Galaxy Map {} initialized with {} total sectors.\" , map . map_id , map . total_sectors) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: map"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: map"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: map"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: map"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: map"
      }
    ]
  },
  {
    "name": "init_cartographer",
    "inputs": [
      "ctx: Context < InitCartographer >",
      "explorer_id: u64",
      "base_skill: u32"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let explorer = & mut ctx . accounts . cartographer ;"
      },
      {
        "id": 10,
        "label": "explorer . parent_map = ctx . accounts . galaxy_map . key () ;"
      },
      {
        "id": 11,
        "label": "explorer . explorer_id = explorer_id ^ 0xA5A5A5A5A5A5A5A5 ;"
      },
      {
        "id": 12,
        "label": "explorer . exploration_skill = base_skill . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 13,
        "label": "explorer . sectors_found = 0 ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"Cartographer {} joins the expedition with skill {}.\" , explorer . explorer_id , explorer . exploration_skill) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: explorer"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: explorer"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: explorer"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: explorer"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: explorer"
      }
    ]
  },
  {
    "name": "explore_sector",
    "inputs": [
      "ctx: Context < ExploreSector >",
      "exploration_cycles: u32"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let map = & mut ctx . accounts . galaxy_map ;"
      },
      {
        "id": 18,
        "label": "let explorer = & mut ctx . accounts . cartographer ;"
      },
      {
        "id": 19,
        "label": "let mut rng = rand :: thread_rng () ;"
      },
      {
        "id": 20,
        "label": "for _i in 0 .. exploration_cycles { let success_roll = rng . gen_range (0 .. 100) ; let success_threshold = explorer . exploration_skill . min (100) ; match success_roll < success_threshold { true => { let sectors_found_cycle = rng . gen_range (1 ..= 10) ; map . explored_sectors = map . explored_sectors . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ; explorer . sectors_found = explorer . sectors_found . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ; explorer . exploration_skill = explorer . exploration_skill . checked_add (1) . unwrap_or (u32 :: MAX) ; } , false => { explorer . exploration_skill = explorer . exploration_skill . checked_sub (1) . unwrap_or (0) ; } , } }"
      },
      {
        "id": 21,
        "label": "let success_roll = rng . gen_range (0 .. 100) ;"
      },
      {
        "id": 22,
        "label": "let success_threshold = explorer . exploration_skill . min (100) ;"
      },
      {
        "id": 23,
        "label": "match success_roll < success_threshold { true => { let sectors_found_cycle = rng . gen_range (1 ..= 10) ; map . explored_sectors = map . explored_sectors . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ; explorer . sectors_found = explorer . sectors_found . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ; explorer . exploration_skill = explorer . exploration_skill . checked_add (1) . unwrap_or (u32 :: MAX) ; } , false => { explorer . exploration_skill = explorer . exploration_skill . checked_sub (1) . unwrap_or (0) ; } , }"
      },
      {
        "id": 24,
        "label": "let sectors_found_cycle = rng . gen_range (1 ..= 10) ;"
      },
      {
        "id": 25,
        "label": "map . explored_sectors = map . explored_sectors . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 26,
        "label": "explorer . sectors_found = explorer . sectors_found . checked_add (sectors_found_cycle) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "explorer . exploration_skill = explorer . exploration_skill . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 28,
        "label": "explorer . exploration_skill = explorer . exploration_skill . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 29,
        "label": "map . is_complete = map . explored_sectors >= map . total_sectors ;"
      },
      {
        "id": 30,
        "label": "msg ! (\"Cartographer {} explored for {} cycles. Found {} sectors.\" , explorer . explorer_id , exploration_cycles , explorer . sectors_found) ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: map"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: explorer"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: rng"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: rng"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: rng"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: map"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: map"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: explorer"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: success_roll"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: rng"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: success_threshold"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: explorer"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: success_roll"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: success_threshold"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: rng"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: map"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: map"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: explorer"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: sectors_found_cycle"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: rng"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: map"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: map"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: sectors_found_cycle"
      },
      {
        "from": 18,
        "to": 26,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 26,
        "label": "data_dep: explorer"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: sectors_found_cycle"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: explorer"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: explorer"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: map"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: map"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: map"
      }
    ]
  }
]