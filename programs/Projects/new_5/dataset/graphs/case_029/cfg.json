[
  {
    "name": "init_profile",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . profile ;"
      },
      {
        "id": 2,
        "label": "p . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "p . seed = seed ;"
      },
      {
        "id": 4,
        "label": "p . level = 1 ;"
      },
      {
        "id": 5,
        "label": "p . energy = 100 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_stage",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let s = & mut ctx . accounts . stage ;"
      },
      {
        "id": 9,
        "label": "s . parent = ctx . accounts . profile . key () ;"
      },
      {
        "id": 10,
        "label": "s . label = label ;"
      },
      {
        "id": 11,
        "label": "s . phase = Locked ;"
      },
      {
        "id": 12,
        "label": "s . progress = 0 ;"
      },
      {
        "id": 13,
        "label": "s . fail_counter = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "tick_two",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let p = & mut ctx . accounts . profile ;"
      },
      {
        "id": 17,
        "label": "let s1 = & mut ctx . accounts . stage_one ;"
      },
      {
        "id": 18,
        "label": "let s2 = & mut ctx . accounts . stage_two ;"
      },
      {
        "id": 19,
        "label": "let mut acc : u64 = p . energy as u64 + 1 ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "acc = acc + acc * (1000 - (acc % 1000)) / 2000 ;"
      },
      {
        "id": 22,
        "label": "p . level = (p . level + (acc as u32 % 3)) . min (99) ;"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "p . energy > budget / 2"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "s1 . phase = Active ;"
      },
      {
        "id": 29,
        "label": "s1 . progress = s1 . progress . saturating_add (budget / 3 + 5) ;"
      },
      {
        "id": 30,
        "label": "p . energy = p . energy . saturating_sub (budget / 4) ;"
      },
      {
        "id": 31,
        "label": "s1 . fail_counter = s1 . fail_counter / 2 ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Stage1 active; prog={}, energy={}\" , s1 . progress , p . energy) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "s1 . phase = Locked ;"
      },
      {
        "id": 35,
        "label": "s1 . progress = s1 . progress / 2 + 1 ;"
      },
      {
        "id": 36,
        "label": "p . energy = p . energy + (p . seed as u32 % 17) ;"
      },
      {
        "id": 37,
        "label": "s1 . fail_counter = s1 . fail_counter . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Stage1 locked; prog={}, energy={}\" , s1 . progress , p . energy) ;"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "Loop Start"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "(s2 . label + p . level) & 2 == 0"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "s2 . phase = Active ;"
      },
      {
        "id": 46,
        "label": "s2 . progress = s2 . progress . saturating_add ((p . level as u32) & 31) ;"
      },
      {
        "id": 47,
        "label": "p . energy = p . energy . saturating_sub (3) ;"
      },
      {
        "id": 48,
        "label": "msg ! (\"Stage2 tick+; prog={}, energy={}\" , s2 . progress , p . energy) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "s2 . phase = Failed ;"
      },
      {
        "id": 51,
        "label": "s2 . fail_counter = s2 . fail_counter . saturating_add (2) ;"
      },
      {
        "id": 52,
        "label": "p . energy = p . energy + 5 ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"Stage2 fail; fails={}, energy={}\" , s2 . fail_counter , p . energy) ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Loop End"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 24,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 32,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 41,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 48,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 40,
        "to": 55,
        "label": "for"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      }
    ]
  }
]