[
  {
    "name": "init_citadel",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let citadel = & mut ctx . accounts . citadel_core ;"
      },
      {
        "id": 2,
        "label": "citadel . core_id = core_id . checked_add (100000) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "citadel . defense_level = defense_level . checked_sub (100) . unwrap_or (0) ;"
      },
      {
        "id": 4,
        "label": "citadel . resource_reserve = 0 ;"
      },
      {
        "id": 5,
        "label": "citadel . citadel_state = CitadelState :: Peaceful ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Citadel core {} established with defense level {}.\" , citadel . core_id , citadel . defense_level) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_module",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let module = & mut ctx . accounts . defense_module ;"
      },
      {
        "id": 10,
        "label": "module . parent_citadel = ctx . accounts . citadel_core . key () ;"
      },
      {
        "id": 11,
        "label": "module . module_id = module_id . checked_add (50) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 12,
        "label": "module . module_type = module_type . rotate_right (3) ;"
      },
      {
        "id": 13,
        "label": "module . is_online = true ;"
      },
      {
        "id": 14,
        "label": "module . energy_consumption = 0 ;"
      },
      {
        "id": 15,
        "label": "module . last_update_cycle = 0 ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"Module {} installed with type {}.\" , module . module_id , module . module_type) ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      }
    ]
  },
  {
    "name": "activate_modules",
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let citadel = & mut ctx . accounts . citadel_core ;"
      },
      {
        "id": 20,
        "label": "let module_primary = & mut ctx . accounts . module_primary ;"
      },
      {
        "id": 21,
        "label": "let module_secondary = & mut ctx . accounts . module_secondary ;"
      },
      {
        "id": 22,
        "label": "let mut loop_counter = 0 ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "module_primary . is_online"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "let energy_use = energy_injection . checked_add (loop_counter) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "citadel . resource_reserve = citadel . resource_reserve . checked_sub (energy_use as u64) . unwrap_or (0) ;"
      },
      {
        "id": 30,
        "label": "module_primary . energy_consumption = module_primary . energy_consumption . checked_add (energy_use) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 31,
        "label": "citadel . defense_level = citadel . defense_level . checked_add (energy_use) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 32,
        "label": "module_primary . last_update_cycle = loop_counter ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"Primary module consumed {} energy, defense level increased.\" , energy_use) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "let repair_cost = 1000u64 . checked_div (citadel . defense_level as u64) . unwrap_or (10) ;"
      },
      {
        "id": 36,
        "label": "citadel . resource_reserve = citadel . resource_reserve . checked_sub (repair_cost) . unwrap_or (0) ;"
      },
      {
        "id": 37,
        "label": "module_primary . is_online = true ;"
      },
      {
        "id": 38,
        "label": "module_primary . energy_consumption = 0 ;"
      },
      {
        "id": 39,
        "label": "module_primary . last_update_cycle = 0 ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Primary module is brought back online at a cost of {}.\" , repair_cost) ;"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "module_secondary . is_online"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "let energy_use = energy_injection . checked_mul (loop_counter . checked_add (1) . unwrap_or (1)) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 47,
        "label": "citadel . resource_reserve = citadel . resource_reserve . checked_sub (energy_use as u64) . unwrap_or (0) ;"
      },
      {
        "id": 48,
        "label": "module_secondary . energy_consumption = module_secondary . energy_consumption . checked_add (energy_use) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 49,
        "label": "citadel . defense_level = citadel . defense_level . checked_add (energy_use) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 50,
        "label": "module_secondary . last_update_cycle = loop_counter ;"
      },
      {
        "id": 51,
        "label": "msg ! (\"Secondary module consumed {} energy, defense level increased.\" , energy_use) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "let repair_cost = 2000u64 . checked_div (citadel . defense_level as u64) . unwrap_or (10) ;"
      },
      {
        "id": 54,
        "label": "citadel . resource_reserve = citadel . resource_reserve . checked_sub (repair_cost) . unwrap_or (0) ;"
      },
      {
        "id": 55,
        "label": "module_secondary . is_online = true ;"
      },
      {
        "id": 56,
        "label": "module_secondary . energy_consumption = 0 ;"
      },
      {
        "id": 57,
        "label": "module_secondary . last_update_cycle = 0 ;"
      },
      {
        "id": 58,
        "label": "msg ! (\"Secondary module is brought back online at a cost of {}.\" , repair_cost) ;"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "loop_counter = loop_counter . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 61,
        "label": "Loop End"
      },
      {
        "id": 62,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 24,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 33,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 42,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 51,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 23,
        "to": 61,
        "label": "while"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      }
    ]
  }
]