[
  {
    "name": "create_logistics_hub",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let hub = & mut ctx . accounts . logistics_hub ;"
      },
      {
        "id": 2,
        "label": "hub . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "hub . hub_id = hub_id ;"
      },
      {
        "id": 4,
        "label": "hub . location = location ;"
      },
      {
        "id": 5,
        "label": "hub . total_containers = 0 ;"
      },
      {
        "id": 6,
        "label": "hub . last_activity_count = 1000 ;"
      },
      {
        "id": 7,
        "label": "hub . hub_status = HubStatus :: Operational ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Logistics Hub '{}' created at {}. Status is Operational.\" , hub . hub_id , hub . location) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "register_shipping_container",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let container = & mut ctx . accounts . shipping_container ;"
      },
      {
        "id": 12,
        "label": "let hub = & mut ctx . accounts . logistics_hub ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "hub . hub_status != HubStatus :: Operational"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (error ! (SupplyChainError :: HubInactive)) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "container . hub = hub . key () ;"
      },
      {
        "id": 22,
        "label": "container . container_id = container_id ;"
      },
      {
        "id": 23,
        "label": "container . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 24,
        "label": "container . weight_kg = content_weight ;"
      },
      {
        "id": 25,
        "label": "container . container_status = ContainerStatus :: InTransit ;"
      },
      {
        "id": 26,
        "label": "hub . total_containers = hub . total_containers . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Container {} registered to hub. Weight: {}.\" , container . container_id , container . weight_kg) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_transfer_manifest",
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "let primary_vault = & mut ctx . accounts . primary_vault ;"
      },
      {
        "id": 31,
        "label": "let secondary_vault = & mut ctx . accounts . secondary_vault ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "primary_vault . container_status == ContainerStatus :: Maintenance || secondary_vault . container_status == ContainerStatus :: Maintenance"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "return Err (error ! (SupplyChainError :: ContainerInMaintenance)) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 41,
        "label": "Loop Start"
      },
      {
        "id": 42,
        "label": "let temp_weight = primary_vault . weight_kg . checked_div (transfer_factor as u32) . unwrap_or (0) ;"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "primary_vault . weight_kg > secondary_vault . weight_kg"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "primary_vault . weight_kg = primary_vault . weight_kg . checked_sub (temp_weight) . unwrap_or (0) ;"
      },
      {
        "id": 48,
        "label": "secondary_vault . weight_kg = secondary_vault . weight_kg . checked_add (temp_weight) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 49,
        "label": "msg ! (\"Primary vault had more weight, transferring some to secondary.\") ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "primary_vault . weight_kg = primary_vault . weight_kg . checked_add (temp_weight) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 52,
        "label": "secondary_vault . weight_kg = secondary_vault . weight_kg . checked_sub (temp_weight) . unwrap_or (0) ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"Secondary vault had more or equal weight, transferring some to primary.\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "primary_vault . weight_kg > 50000"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "primary_vault . container_status = ContainerStatus :: Loaded ;"
      },
      {
        "id": 62,
        "label": "msg ! (\"Primary vault is now loaded.\") ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "primary_vault . container_status = ContainerStatus :: Unloaded ;"
      },
      {
        "id": 65,
        "label": "msg ! (\"Primary vault is now unloaded.\") ;"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 43,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 41,
        "to": 56,
        "label": "while"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 57,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 62,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      }
    ]
  }
]