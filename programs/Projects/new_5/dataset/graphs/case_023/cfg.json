[
  {
    "name": "init_market",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let market = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "market . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "market . name = name ;"
      },
      {
        "id": 4,
        "label": "market . is_active = true ;"
      },
      {
        "id": 5,
        "label": "market . trade_count = 0 ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Market '{}' initialized.\" , market . name) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_offer",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let offer = & mut ctx . accounts . offer ;"
      },
      {
        "id": 10,
        "label": "let market = & mut ctx . accounts . market ;"
      },
      {
        "id": 11,
        "label": "offer . market = market . key () ;"
      },
      {
        "id": 12,
        "label": "offer . offer_id = offer_id ;"
      },
      {
        "id": 13,
        "label": "offer . lister = ctx . accounts . lister . key () ;"
      },
      {
        "id": 14,
        "label": "offer . price = price ;"
      },
      {
        "id": 15,
        "label": "offer . is_fulfilled = false ;"
      },
      {
        "id": 16,
        "label": "market . trade_count = market . trade_count . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"Offer {} created for market {}.\" , offer . offer_id , market . name) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "fulfill_offers",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let offer_a = & mut ctx . accounts . offer_a ;"
      },
      {
        "id": 21,
        "label": "let offer_b = & mut ctx . accounts . offer_b ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "! ctx . accounts . market . is_active"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "return Err (ErrorCode :: MarketInactive . into ()) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let mut total_price_change = 0 ;"
      },
      {
        "id": 31,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 32,
        "label": "Loop Start"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "! offer_a . is_fulfilled && ! offer_b . is_fulfilled"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "offer_a . price = offer_a . price . checked_add (100) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 38,
        "label": "offer_b . price = offer_b . price . checked_sub (50) . unwrap_or (0) ;"
      },
      {
        "id": 39,
        "label": "total_price_change += 50 ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Adjusting prices for A and B.\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "! offer_a . is_fulfilled"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "offer_a . is_fulfilled = true ;"
      },
      {
        "id": 47,
        "label": "msg ! (\"Offer A fulfilled.\") ;"
      },
      {
        "id": 48,
        "label": "break ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "offer_b . is_fulfilled = true ;"
      },
      {
        "id": 51,
        "label": "msg ! (\"Offer B fulfilled.\") ;"
      },
      {
        "id": 52,
        "label": "break ;"
      },
      {
        "id": 53,
        "label": "merge"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "offer_a . price > 10000 && offer_b . price < 500"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "offer_a . is_fulfilled = true ;"
      },
      {
        "id": 62,
        "label": "offer_b . is_fulfilled = true ;"
      },
      {
        "id": 63,
        "label": "msg ! (\"Offers A and B auto-fulfilled due to price conditions.\") ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "msg ! (\"Conditions not met for auto-fulfillment.\") ;"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 33,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 42,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 48,
        "to": 53,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 40,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 32,
        "to": 56,
        "label": "while"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 57,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      }
    ]
  }
]