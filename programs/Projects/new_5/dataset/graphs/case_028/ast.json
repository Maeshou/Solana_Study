[
  {
    "name": "init_market",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitMarket >",
      "fee_bps: u16"
    ],
    "attributes": [],
    "body": [
      "let m = & mut ctx . accounts . market ;",
      "m . owner = ctx . accounts . owner . key () ;",
      "m . fee_bps = fee_bps ;",
      "m . turnover = 0 ;",
      "m . tick = 1 ;",
      "Ok (())"
    ]
  },
  {
    "name": "init_lot",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitLot >",
      "sku: u32"
    ],
    "attributes": [],
    "body": [
      "let l = & mut ctx . accounts . lot ;",
      "l . parent = ctx . accounts . market . key () ;",
      "l . sku = sku ;",
      "l . state = Pending ;",
      "l . price = 1000 ;",
      "l . volume = 0 ;",
      "Ok (())"
    ]
  },
  {
    "name": "rotate_and_trade",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RotateAndTrade >",
      "step: u32"
    ],
    "attributes": [],
    "body": [
      "let m = & mut ctx . accounts . market ;",
      "let x = & mut ctx . accounts . lot_x ;",
      "let y = & mut ctx . accounts . lot_y ;",
      "for i in 0 .. 5",
      "{",
      "let wave = ((m . tick + i) % 7) as u32 ;",
      "let adj = (wave * step) % 97 ;",
      "m . turnover = m . turnover . saturating_add ((adj + 3) as u64) ;",
      "m . tick = m . tick . saturating_add (1) ;",
      "}",
      "if (x . sku . rotate_left ((step % 31) as u32) & 3) == 0",
      "{",
      "x . state = Listed ;",
      "x . price = x . price . saturating_add (step + (m . fee_bps as u32)) ;",
      "x . volume = x . volume . saturating_add (1) ;",
      "m . turnover = m . turnover . saturating_add (x . price as u64) ;",
      "msg ! (\"X listed;",
      "price=",
      "{",
      "}, turn={}\" , x . price , m . turnover) ;",
      "} else",
      "{",
      "x . state = Delisted ;",
      "let cut = (x . price / 7) . max (1) ;",
      "x . price = x . price . saturating_sub (cut) ;",
      "m . tick = m . tick . saturating_add ((cut % 13) as u32) ;",
      "msg ! (\"X delisted;",
      "price=",
      "{",
      "}, tick={}\" , x . price , m . tick) ;",
      "}",
      "for _ in 0 .. 3",
      "{",
      "if y . price & 1 == 1",
      "{",
      "y . state = Listed ;",
      "y . volume = y . volume . saturating_add (step % 5 + 1) ;",
      "m . turnover = m . turnover . saturating_add ((y . volume as u64) * 2) ;",
      "msg ! (\"Y trade+;",
      "vol=",
      "{",
      "}, turn={}\" , y . volume , m . turnover) ;",
      "} else",
      "{",
      "y . state = Pending ;",
      "y . price = y . price / 2 + (m . tick % 19) ;",
      "m . tick = m . tick . saturating_add (2) ;",
      "msg ! (\"Y cooled;",
      "price=",
      "{",
      "}, tick={}\" , y . price , m . tick) ;",
      "}",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitMarket",
    "node_type": "struct",
    "fields": [
      {
        "name": "market",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 2 + 8 + 4)]",
        "field_type": "Account < 'info , Market >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitLot",
    "node_type": "struct",
    "fields": [
      {
        "name": "market",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Market >"
      },
      {
        "name": "lot",
        "attribute": "# [account (init , payer = seller , space = 8 + 32 + 4 + 1 + 4 + 4)]",
        "field_type": "Account < 'info , Lot >"
      },
      {
        "name": "seller",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RotateAndTrade",
    "node_type": "struct",
    "fields": [
      {
        "name": "market",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Market >"
      },
      {
        "name": "lot_x",
        "attribute": "# [account (mut , has_one = parent)]",
        "field_type": "Account < 'info , Lot >"
      },
      {
        "name": "lot_y",
        "attribute": "# [account (mut , has_one = parent)]",
        "field_type": "Account < 'info , Lot >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Market",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "fee_bps",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "turnover",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tick",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Lot",
    "node_type": "struct",
    "fields": [
      {
        "name": "parent",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "sku",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "state",
        "attribute": null,
        "field_type": "LotState"
      },
      {
        "name": "price",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "volume",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]