[
  {
    "name": "init_dungeon",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let dungeon = & mut ctx . accounts . dungeon_data ;"
      },
      {
        "id": 2,
        "label": "dungeon . level_count = level_count . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "dungeon . base_difficulty = base_difficulty . checked_div (2) . unwrap_or (1) ;"
      },
      {
        "id": 4,
        "label": "dungeon . total_treasure = 0 ;"
      },
      {
        "id": 5,
        "label": "dungeon . dungeon_status = DungeonStatus :: Unexplored ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Dungeon created with {} levels and base difficulty {}.\" , dungeon . level_count , dungeon . base_difficulty) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_adventurer",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let adventurer = & mut ctx . accounts . adventurer_sheet ;"
      },
      {
        "id": 10,
        "label": "adventurer . parent_dungeon = ctx . accounts . dungeon_data . key () ;"
      },
      {
        "id": 11,
        "label": "adventurer . player_id = player_id . checked_add (500) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 12,
        "label": "adventurer . courage_level = courage_level . checked_add (10) . unwrap_or (u8 :: MAX) ;"
      },
      {
        "id": 13,
        "label": "adventurer . is_alive = true ;"
      },
      {
        "id": 14,
        "label": "adventurer . current_level = 0 ;"
      },
      {
        "id": 15,
        "label": "adventurer . treasure_found = 0 ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"Adventurer {} enters the dungeon with courage level {}.\" , adventurer . player_id , adventurer . courage_level) ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      }
    ]
  },
  {
    "name": "raid_dungeon",
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let dungeon = & mut ctx . accounts . dungeon_data ;"
      },
      {
        "id": 20,
        "label": "let explorer = & mut ctx . accounts . explorer_sheet ;"
      },
      {
        "id": 21,
        "label": "let scout = & mut ctx . accounts . scout_sheet ;"
      },
      {
        "id": 22,
        "label": "let mut treasure_gained_total = 0u64 ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "explorer . is_alive"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "let treasure_amount = (raid_power as u64) . checked_add (scout . current_level as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "explorer . treasure_found = explorer . treasure_found . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "explorer . courage_level = explorer . courage_level . checked_add (dungeon . base_difficulty) . unwrap_or (u8 :: MAX) ;"
      },
      {
        "id": 31,
        "label": "dungeon . total_treasure = dungeon . total_treasure . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 32,
        "label": "treasure_gained_total = treasure_gained_total . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"Explorer found {} treasure on level {}.\" , treasure_amount , scout . current_level) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "let revival_cost = (raid_power as u64) . checked_add (dungeon . base_difficulty as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "dungeon . total_treasure = dungeon . total_treasure . checked_sub (revival_cost) . unwrap_or (0) ;"
      },
      {
        "id": 37,
        "label": "explorer . is_alive = true ;"
      },
      {
        "id": 38,
        "label": "explorer . treasure_found = explorer . treasure_found . checked_div (2) . unwrap_or (0) ;"
      },
      {
        "id": 39,
        "label": "explorer . courage_level = explorer . courage_level . checked_add (10) . unwrap_or (u8 :: MAX) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Explorer revived, losing {} treasure.\" , revival_cost) ;"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "scout . is_alive"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "let treasure_amount = (raid_power as u64) . checked_mul (dungeon . base_difficulty as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 47,
        "label": "scout . treasure_found = scout . treasure_found . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 48,
        "label": "scout . current_level = scout . current_level . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 49,
        "label": "dungeon . total_treasure = dungeon . total_treasure . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 50,
        "label": "treasure_gained_total = treasure_gained_total . checked_add (treasure_amount) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 51,
        "label": "msg ! (\"Scout advanced to level {} and found {} treasure.\" , scout . current_level , treasure_amount) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "let revival_cost = (raid_power as u64) . checked_mul (dungeon . base_difficulty as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 54,
        "label": "dungeon . total_treasure = dungeon . total_treasure . checked_sub (revival_cost) . unwrap_or (0) ;"
      },
      {
        "id": 55,
        "label": "scout . is_alive = true ;"
      },
      {
        "id": 56,
        "label": "scout . treasure_found = scout . treasure_found . checked_div (3) . unwrap_or (0) ;"
      },
      {
        "id": 57,
        "label": "scout . courage_level = scout . courage_level . checked_add (20) . unwrap_or (u8 :: MAX) ;"
      },
      {
        "id": 58,
        "label": "msg ! (\"Scout revived, losing {} treasure.\" , revival_cost) ;"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "msg ! (\"Total treasure gained in this raid: {}\" , treasure_gained_total) ;"
      },
      {
        "id": 62,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 24,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 33,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 42,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 51,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 23,
        "to": 60,
        "label": "while"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      }
    ]
  }
]