[
  {
    "name": "init_dungeon",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let dungeon = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 2,
        "label": "dungeon . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "dungeon . dungeon_id = dungeon_id ;"
      },
      {
        "id": 4,
        "label": "dungeon . name = name ;"
      },
      {
        "id": 5,
        "label": "dungeon . total_runs = 0 ;"
      },
      {
        "id": 6,
        "label": "dungeon . difficulty = 1 ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Dungeon '{}' initialized.\" , dungeon . name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_loot_record",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let record = & mut ctx . accounts . record ;"
      },
      {
        "id": 11,
        "label": "let dungeon = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 12,
        "label": "record . dungeon = dungeon . key () ;"
      },
      {
        "id": 13,
        "label": "record . loot_id = loot_id ;"
      },
      {
        "id": 14,
        "label": "record . finder = ctx . accounts . finder . key () ;"
      },
      {
        "id": 15,
        "label": "record . loot_value = initial_value ;"
      },
      {
        "id": 16,
        "label": "record . is_processed = false ;"
      },
      {
        "id": 17,
        "label": "dungeon . total_runs = dungeon . total_runs . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Loot record {} created for dungeon {}.\" , record . loot_id , dungeon . name) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_loot_records",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let record_a = & mut ctx . accounts . record_a ;"
      },
      {
        "id": 22,
        "label": "let record_b = & mut ctx . accounts . record_b ;"
      },
      {
        "id": 23,
        "label": "let mut a_value_change : i64 = 0 ;"
      },
      {
        "id": 24,
        "label": "let mut b_value_change : i64 = 0 ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "* mod_val > 50"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "let bonus = (* mod_val / 10) as i64 ;"
      },
      {
        "id": 31,
        "label": "record_a . loot_value = record_a . loot_value . saturating_add (bonus as u32) ;"
      },
      {
        "id": 32,
        "label": "record_b . loot_value = record_b . loot_value . saturating_add (bonus as u32) ;"
      },
      {
        "id": 33,
        "label": "a_value_change += bonus ;"
      },
      {
        "id": 34,
        "label": "b_value_change += bonus ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"Applying bonus to both records.\") ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "let penalty = (* mod_val / 5) as i64 ;"
      },
      {
        "id": 38,
        "label": "record_a . loot_value = record_a . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ;"
      },
      {
        "id": 39,
        "label": "record_b . loot_value = record_b . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ;"
      },
      {
        "id": 40,
        "label": "a_value_change -= penalty ;"
      },
      {
        "id": 41,
        "label": "b_value_change -= penalty ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Applying penalty to both records.\") ;"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "record_a . loot_value > record_b . loot_value"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "record_a . loot_value = record_a . loot_value . saturating_add (100) ;"
      },
      {
        "id": 50,
        "label": "msg ! (\"Record A had higher value, adding 100 bonus.\") ;"
      },
      {
        "id": 51,
        "label": "False body"
      },
      {
        "id": 52,
        "label": "record_b . loot_value = record_b . loot_value . saturating_add (100) ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"Record B had higher or equal value, adding 100 bonus.\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "msg ! (\"Updated loot records. A change: {}, B change: {}.\" , a_value_change , b_value_change) ;"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 26,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 35,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 25,
        "to": 44,
        "label": "for"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 45,
        "to": 51,
        "label": "false"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 50,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      }
    ]
  }
]