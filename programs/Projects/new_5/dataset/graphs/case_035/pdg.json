[
  {
    "name": "init_dungeon",
    "inputs": [
      "ctx: Context < InitDungeon >",
      "dungeon_id: u32",
      "name: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let dungeon = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 2,
        "label": "dungeon . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "dungeon . dungeon_id = dungeon_id ;"
      },
      {
        "id": 4,
        "label": "dungeon . name = name ;"
      },
      {
        "id": 5,
        "label": "dungeon . total_runs = 0 ;"
      },
      {
        "id": 6,
        "label": "dungeon . difficulty = 1 ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Dungeon '{}' initialized.\" , dungeon . name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: dungeon"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: dungeon"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: dungeon"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: dungeon"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: dungeon"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: dungeon"
      }
    ]
  },
  {
    "name": "init_loot_record",
    "inputs": [
      "ctx: Context < InitLootRecord >",
      "loot_id: u64",
      "initial_value: u32"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let record = & mut ctx . accounts . record ;"
      },
      {
        "id": 11,
        "label": "let dungeon = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 12,
        "label": "record . dungeon = dungeon . key () ;"
      },
      {
        "id": 13,
        "label": "record . loot_id = loot_id ;"
      },
      {
        "id": 14,
        "label": "record . finder = ctx . accounts . finder . key () ;"
      },
      {
        "id": 15,
        "label": "record . loot_value = initial_value ;"
      },
      {
        "id": 16,
        "label": "record . is_processed = false ;"
      },
      {
        "id": 17,
        "label": "dungeon . total_runs = dungeon . total_runs . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Loot record {} created for dungeon {}.\" , record . loot_id , dungeon . name) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: record"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: dungeon"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: record"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: dungeon"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: record"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: record"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: record"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: record"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: dungeon"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: dungeon"
      }
    ]
  },
  {
    "name": "update_loot_records",
    "inputs": [
      "ctx: Context < UpdateLootRecords >",
      "mods: Vec < u32 >"
    ],
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let record_a = & mut ctx . accounts . record_a ;"
      },
      {
        "id": 22,
        "label": "let record_b = & mut ctx . accounts . record_b ;"
      },
      {
        "id": 23,
        "label": "let mut a_value_change : i64 = 0 ;"
      },
      {
        "id": 24,
        "label": "let mut b_value_change : i64 = 0 ;"
      },
      {
        "id": 25,
        "label": "for mod_val in mods . iter () { if * mod_val > 50 { let bonus = (* mod_val / 10) as i64 ; record_a . loot_value = record_a . loot_value . saturating_add (bonus as u32) ; record_b . loot_value = record_b . loot_value . saturating_add (bonus as u32) ; a_value_change += bonus ; b_value_change += bonus ; msg ! (\"Applying bonus to both records.\") ; } else { let penalty = (* mod_val / 5) as i64 ; record_a . loot_value = record_a . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ; record_b . loot_value = record_b . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ; a_value_change -= penalty ; b_value_change -= penalty ; msg ! (\"Applying penalty to both records.\") ; } }"
      },
      {
        "id": 26,
        "label": "if * mod_val > 50 { let bonus = (* mod_val / 10) as i64 ; record_a . loot_value = record_a . loot_value . saturating_add (bonus as u32) ; record_b . loot_value = record_b . loot_value . saturating_add (bonus as u32) ; a_value_change += bonus ; b_value_change += bonus ; msg ! (\"Applying bonus to both records.\") ; } else { let penalty = (* mod_val / 5) as i64 ; record_a . loot_value = record_a . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ; record_b . loot_value = record_b . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ; a_value_change -= penalty ; b_value_change -= penalty ; msg ! (\"Applying penalty to both records.\") ; }"
      },
      {
        "id": 27,
        "label": "let bonus = (* mod_val / 10) as i64 ;"
      },
      {
        "id": 28,
        "label": "record_a . loot_value = record_a . loot_value . saturating_add (bonus as u32) ;"
      },
      {
        "id": 29,
        "label": "record_b . loot_value = record_b . loot_value . saturating_add (bonus as u32) ;"
      },
      {
        "id": 30,
        "label": "a_value_change += bonus ;"
      },
      {
        "id": 31,
        "label": "b_value_change += bonus ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Applying bonus to both records.\") ;"
      },
      {
        "id": 33,
        "label": "let penalty = (* mod_val / 5) as i64 ;"
      },
      {
        "id": 34,
        "label": "record_a . loot_value = record_a . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ;"
      },
      {
        "id": 35,
        "label": "record_b . loot_value = record_b . loot_value . checked_sub (penalty as u32) . unwrap_or (0) ;"
      },
      {
        "id": 36,
        "label": "a_value_change -= penalty ;"
      },
      {
        "id": 37,
        "label": "b_value_change -= penalty ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Applying penalty to both records.\") ;"
      },
      {
        "id": 39,
        "label": "if record_a . loot_value > record_b . loot_value { record_a . loot_value = record_a . loot_value . saturating_add (100) ; msg ! (\"Record A had higher value, adding 100 bonus.\") ; } else { record_b . loot_value = record_b . loot_value . saturating_add (100) ; msg ! (\"Record B had higher or equal value, adding 100 bonus.\") ; }"
      },
      {
        "id": 40,
        "label": "record_a . loot_value = record_a . loot_value . saturating_add (100) ;"
      },
      {
        "id": 41,
        "label": "msg ! (\"Record A had higher value, adding 100 bonus.\") ;"
      },
      {
        "id": 42,
        "label": "record_b . loot_value = record_b . loot_value . saturating_add (100) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"Record B had higher or equal value, adding 100 bonus.\") ;"
      },
      {
        "id": 44,
        "label": "msg ! (\"Updated loot records. A change: {}, B change: {}.\" , a_value_change , b_value_change) ;"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 21,
        "label": "def: record_a"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: record_b"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: record_b"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: record_b"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: record_b"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: record_b"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: bonus"
      },
      {
        "from": 21,
        "to": 28,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 28,
        "label": "data_dep: record_a"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: bonus"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: record_b"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: bonus"
      },
      {
        "from": 27,
        "to": 30,
        "label": "data_dep: bonus"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: bonus"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: penalty"
      },
      {
        "from": 21,
        "to": 34,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 34,
        "label": "data_dep: record_a"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: penalty"
      },
      {
        "from": 22,
        "to": 35,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 35,
        "label": "data_dep: record_b"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: penalty"
      },
      {
        "from": 33,
        "to": 36,
        "label": "data_dep: penalty"
      },
      {
        "from": 33,
        "to": 37,
        "label": "data_dep: penalty"
      },
      {
        "from": 21,
        "to": 39,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 39,
        "label": "data_dep: record_b"
      },
      {
        "from": 21,
        "to": 39,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 39,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 39,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 39,
        "label": "data_dep: record_b"
      },
      {
        "from": 21,
        "to": 40,
        "label": "data_dep: record_a"
      },
      {
        "from": 21,
        "to": 40,
        "label": "data_dep: record_a"
      },
      {
        "from": 22,
        "to": 42,
        "label": "data_dep: record_b"
      },
      {
        "from": 22,
        "to": 42,
        "label": "data_dep: record_b"
      }
    ]
  }
]