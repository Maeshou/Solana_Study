[
  {
    "name": "initialize_moderation_queue",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let queue = & mut ctx . accounts . moderation_queue ;"
      },
      {
        "id": 2,
        "label": "queue . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "queue . queue_id = queue_id ;"
      },
      {
        "id": 4,
        "label": "queue . name = name ;"
      },
      {
        "id": 5,
        "label": "queue . pending_submissions = 0 ;"
      },
      {
        "id": 6,
        "label": "queue . queue_state = QueueState :: Active ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Moderation queue '{}' initialized. State is Active.\" , queue . name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "submit_content_for_review",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let submission = & mut ctx . accounts . submission ;"
      },
      {
        "id": 11,
        "label": "let queue = & mut ctx . accounts . moderation_queue ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "queue . queue_state != QueueState :: Active"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "return Err (error ! (ContentError :: QueueInactive)) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "submission . queue = queue . key () ;"
      },
      {
        "id": 21,
        "label": "submission . submission_id = submission_id ;"
      },
      {
        "id": 22,
        "label": "submission . author = ctx . accounts . author . key () ;"
      },
      {
        "id": 23,
        "label": "submission . content_hash = content_hash ;"
      },
      {
        "id": 24,
        "label": "submission . review_status = ReviewStatus :: Pending ;"
      },
      {
        "id": 25,
        "label": "submission . review_score_sum = 0 ;"
      },
      {
        "id": 26,
        "label": "queue . pending_submissions = queue . pending_submissions . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Content submission {} created and added to queue.\" , submission . submission_id) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_review_scores",
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "let submission_one = & mut ctx . accounts . submission_one ;"
      },
      {
        "id": 31,
        "label": "let submission_two = & mut ctx . accounts . submission_two ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "submission_one . review_status != ReviewStatus :: Pending || submission_two . review_status != ReviewStatus :: Pending"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "return Err (error ! (ContentError :: SubmissionNotPending)) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let mut total_score_one : u64 = 0 ;"
      },
      {
        "id": 41,
        "label": "let mut total_score_two : u64 = 0 ;"
      },
      {
        "id": 42,
        "label": "Loop Start"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "i % 2 == 0"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "submission_one . review_score_sum = submission_one . review_score_sum . saturating_add (* score as u64) ;"
      },
      {
        "id": 48,
        "label": "total_score_one = total_score_one . saturating_add (* score as u64) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "submission_two . review_score_sum = submission_two . review_score_sum . saturating_add (* score as u64) ;"
      },
      {
        "id": 51,
        "label": "total_score_two = total_score_two . saturating_add (* score as u64) ;"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "Loop End"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "submission_one . review_score_sum > 255"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "submission_one . review_status = ReviewStatus :: Approved ;"
      },
      {
        "id": 59,
        "label": "msg ! (\"Submission one approved with a total score of {}.\" , submission_one . review_score_sum) ;"
      },
      {
        "id": 60,
        "label": "False body"
      },
      {
        "id": 61,
        "label": "submission_one . review_status = ReviewStatus :: Rejected ;"
      },
      {
        "id": 62,
        "label": "msg ! (\"Submission one rejected with a total score of {}.\" , submission_one . review_score_sum) ;"
      },
      {
        "id": 63,
        "label": "merge"
      },
      {
        "id": 64,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 43,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 48,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 42,
        "to": 53,
        "label": "for"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 54,
        "to": 60,
        "label": "false"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 59,
        "to": 63,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      }
    ]
  }
]