[
  {
    "name": "init_chrono",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let chrono = & mut ctx . accounts . chrono_core ;"
      },
      {
        "id": 2,
        "label": "chrono . core_id = core_id . checked_add (100000) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "chrono . stability_level = base_stability . checked_sub (100) . unwrap_or (0) ;"
      },
      {
        "id": 4,
        "label": "chrono . total_jumps = 0 ;"
      },
      {
        "id": 5,
        "label": "chrono . is_stable = true ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Chrono Core {} established with stability level {}.\" , chrono . core_id , chrono . stability_level) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_traveler",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let traveler = & mut ctx . accounts . time_traveler ;"
      },
      {
        "id": 10,
        "label": "traveler . parent_chrono = ctx . accounts . chrono_core . key () ;"
      },
      {
        "id": 11,
        "label": "traveler . traveler_id = traveler_id ^ 0xFF00FF00FF00FF00 ;"
      },
      {
        "id": 12,
        "label": "traveler . current_coordinate = starting_coordinate ;"
      },
      {
        "id": 13,
        "label": "traveler . stability_score = 100 ;"
      },
      {
        "id": 14,
        "label": "traveler . is_stranded = false ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"Time Traveler {} registered at coordinate {}.\" , traveler . traveler_id , traveler . current_coordinate) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "perform_jump",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let chrono = & mut ctx . accounts . chrono_core ;"
      },
      {
        "id": 19,
        "label": "let traveler = & mut ctx . accounts . time_traveler ;"
      },
      {
        "id": 20,
        "label": "let mut loop_counter = 0 ;"
      },
      {
        "id": 21,
        "label": "let mut rng = rand :: thread_rng () ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let stability_delta = rng . gen_range (- 10 ..= 10) ;"
      },
      {
        "id": 24,
        "label": "traveler . stability_score = traveler . stability_score . checked_add (stability_delta) . unwrap_or (0) ;"
      },
      {
        "id": 25,
        "label": "traveler . stability_score = traveler . stability_score . max (0) ;"
      },
      {
        "id": 26,
        "label": "traveler . is_stranded = traveler . stability_score < 20 && loop_counter > 5 ;"
      },
      {
        "id": 27,
        "label": "chrono . is_stable = chrono . stability_level > 500 && ! traveler . is_stranded ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "traveler . is_stranded"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "msg ! (\"Traveler is stranded! Jump aborted.\") ;"
      },
      {
        "id": 33,
        "label": "break ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "traveler . current_coordinate = traveler . current_coordinate . checked_add (jump_distance) . unwrap_or (i64 :: MAX) ;"
      },
      {
        "id": 36,
        "label": "chrono . stability_level = chrono . stability_level . checked_sub (jump_distance as u32) . unwrap_or (0) ;"
      },
      {
        "id": 37,
        "label": "chrono . total_jumps = chrono . total_jumps . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Traveler jumped to coordinate {}.\" , traveler . current_coordinate) ;"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "loop_counter = loop_counter . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 41,
        "label": "Loop End"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 28,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 33,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 22,
        "to": 41,
        "label": "while"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  }
]