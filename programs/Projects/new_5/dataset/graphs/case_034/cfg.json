[
  {
    "name": "init_board",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "b . seed = seed ;"
      },
      {
        "id": 4,
        "label": "b . roll = 1 ;"
      },
      {
        "id": 5,
        "label": "b . posts = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_quest",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let q = & mut ctx . accounts . quest ;"
      },
      {
        "id": 9,
        "label": "q . parent = ctx . accounts . board . key () ;"
      },
      {
        "id": 10,
        "label": "q . qid = qid ;"
      },
      {
        "id": 11,
        "label": "q . phase = Open ;"
      },
      {
        "id": 12,
        "label": "q . reward = 100 ;"
      },
      {
        "id": 13,
        "label": "q . fail = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "advance_pair",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 17,
        "label": "let qa = & mut ctx . accounts . qa ;"
      },
      {
        "id": 18,
        "label": "let qb = & mut ctx . accounts . qb ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "let add = ((b . seed as u32 + step + r) % 23) as u32 ;"
      },
      {
        "id": 21,
        "label": "b . roll = b . roll . saturating_add (add) ;"
      },
      {
        "id": 22,
        "label": "b . posts = b . posts . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "(qa . qid ^ b . roll) & 1 == 0"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "qa . phase = Running ;"
      },
      {
        "id": 29,
        "label": "qa . reward = qa . reward . saturating_add (step / 2 + 7) ;"
      },
      {
        "id": 30,
        "label": "b . roll = b . roll . saturating_add ((qa . reward & 63) as u32) ;"
      },
      {
        "id": 31,
        "label": "qa . fail = qa . fail . saturating_sub (qa . fail . min (1)) ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"QA running; reward={}, roll={}\" , qa . reward , b . roll) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "qa . phase = Failed ;"
      },
      {
        "id": 35,
        "label": "qa . reward = qa . reward / 2 + 11 ;"
      },
      {
        "id": 36,
        "label": "qa . fail = qa . fail . saturating_add (2) ;"
      },
      {
        "id": 37,
        "label": "b . roll = b . roll / 2 + 5 ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"QA failed; reward={}, fail={}\" , qa . reward , qa . fail) ;"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "Loop Start"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "(qb . reward + b . roll) & 3 == 0"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "qb . phase = Running ;"
      },
      {
        "id": 46,
        "label": "qb . reward = qb . reward . saturating_add ((b . seed as u32 % 17) + 3) ;"
      },
      {
        "id": 47,
        "label": "b . posts = b . posts . saturating_add (2) ;"
      },
      {
        "id": 48,
        "label": "msg ! (\"QB bonus; reward={}, posts={}\" , qb . reward , b . posts) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "qb . phase = Open ;"
      },
      {
        "id": 51,
        "label": "qb . reward = qb . reward . saturating_sub (qb . reward . min (9)) ;"
      },
      {
        "id": 52,
        "label": "b . roll = b . roll ^ (qb . qid . rotate_left (5)) ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"QB rest; reward={}, roll={}\" , qb . reward , b . roll) ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Loop End"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 19,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 24,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 32,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 41,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 48,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 40,
        "to": 55,
        "label": "for"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      }
    ]
  }
]