[
  {
    "name": "init_game",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let game = & mut ctx . accounts . game ;"
      },
      {
        "id": 2,
        "label": "game . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "game . game_id = game_id ;"
      },
      {
        "id": 4,
        "label": "game . name = name ;"
      },
      {
        "id": 5,
        "label": "game . is_active = true ;"
      },
      {
        "id": 6,
        "label": "game . total_players = 0 ;"
      },
      {
        "id": 7,
        "label": "game . total_score = 0 ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Game {} initialized.\" , game . name) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_player_state",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let player = & mut ctx . accounts . player_state ;"
      },
      {
        "id": 12,
        "label": "let game = & mut ctx . accounts . game ;"
      },
      {
        "id": 13,
        "label": "player . game = game . key () ;"
      },
      {
        "id": 14,
        "label": "player . player_id = player_id ;"
      },
      {
        "id": 15,
        "label": "player . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 16,
        "label": "player . level = initial_level ;"
      },
      {
        "id": 17,
        "label": "player . xp = 0 ;"
      },
      {
        "id": 18,
        "label": "player . is_online = true ;"
      },
      {
        "id": 19,
        "label": "game . total_players = game . total_players . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "msg ! (\"Player {} added to game {}.\" , player . player_id , game . name) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_player_scores",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let player_a = & mut ctx . accounts . player_a ;"
      },
      {
        "id": 24,
        "label": "let player_b = & mut ctx . accounts . player_b ;"
      },
      {
        "id": 25,
        "label": "let mut total_score_a = 0 ;"
      },
      {
        "id": 26,
        "label": "let mut total_score_b = 0 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let bonus_factor = if * score > 50 { 2 } else { 1 } ;"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "score % 2 == 0"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "player_a . xp = player_a . xp . saturating_add ((* score as u64) * bonus_factor) ;"
      },
      {
        "id": 34,
        "label": "total_score_a = total_score_a . saturating_add (score) ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "player_b . xp = player_b . xp . saturating_add ((* score as u64) * bonus_factor) ;"
      },
      {
        "id": 37,
        "label": "total_score_b = total_score_b . saturating_add (score) ;"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "player_a . level = (player_a . xp / 1000) as u8 ;"
      },
      {
        "id": 41,
        "label": "player_b . level = (player_b . xp / 1000) as u8 ;"
      },
      {
        "id": 42,
        "label": "ctx . accounts . game . total_score = ctx . accounts . game . total_score . saturating_add (total_score_a as u64) . saturating_add (total_score_b as u64) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"Updated scores for two players. Player A gained {} XP, Player B gained {} XP.\" , total_score_a , total_score_b) ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 29,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 34,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 27,
        "to": 39,
        "label": "for"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      }
    ]
  }
]