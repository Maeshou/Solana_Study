[
  {
    "name": "init_artist",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = & mut ctx . accounts . artist ;"
      },
      {
        "id": 2,
        "label": "a . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "a . seed = seed ;"
      },
      {
        "id": 4,
        "label": "a . curve = 0 ;"
      },
      {
        "id": 5,
        "label": "a . strokes = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_palette",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let p = & mut ctx . accounts . palette ;"
      },
      {
        "id": 9,
        "label": "p . parent = ctx . accounts . artist . key () ;"
      },
      {
        "id": 10,
        "label": "p . tag = tag ;"
      },
      {
        "id": 11,
        "label": "p . mode = Linear ;"
      },
      {
        "id": 12,
        "label": "p . base = 128 ;"
      },
      {
        "id": 13,
        "label": "p . range = 64 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "blend_two",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let a = & mut ctx . accounts . artist ;"
      },
      {
        "id": 17,
        "label": "let p1 = & mut ctx . accounts . palette_a ;"
      },
      {
        "id": 18,
        "label": "let p2 = & mut ctx . accounts . palette_b ;"
      },
      {
        "id": 19,
        "label": "let mut tone : u32 = a . seed ^ intensity ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "tone = ((tone << 3) ^ (tone >> 2)) & 1023 ;"
      },
      {
        "id": 22,
        "label": "a . strokes = a . strokes . saturating_add ((tone & 7) as u64) ;"
      },
      {
        "id": 23,
        "label": "a . curve = a . curve . saturating_add ((tone % 19) as u32) ;"
      },
      {
        "id": 24,
        "label": "Loop End"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "p1 . base + p1 . range < 255"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "p1 . mode = Linear ;"
      },
      {
        "id": 30,
        "label": "p1 . base = (p1 . base + (intensity % 11) as u16) . min (255) ;"
      },
      {
        "id": 31,
        "label": "p1 . range = (p1 . range + (a . curve % 9) as u16) . min (180) ;"
      },
      {
        "id": 32,
        "label": "a . curve = a . curve / 2 + 3 ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"P1 linear; base={}, range={}, curve={}\" , p1 . base , p1 . range , a . curve) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "p1 . mode = Curve ;"
      },
      {
        "id": 36,
        "label": "p1 . base = p1 . base . saturating_sub ((intensity % 13) as u16) ;"
      },
      {
        "id": 37,
        "label": "p1 . range = (p1 . range / 2) . max (8) ;"
      },
      {
        "id": 38,
        "label": "a . curve = a . curve . saturating_sub (5) ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"P1 curve; base={}, range={}, curve={}\" , p1 . base , p1 . range , a . curve) ;"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "Loop Start"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "p2 . tag & 1 == 1"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "p2 . mode = Curve ;"
      },
      {
        "id": 47,
        "label": "p2 . base = p2 . base . saturating_add (((a . seed % 7) + 1) as u16) ;"
      },
      {
        "id": 48,
        "label": "p2 . range = p2 . range . saturating_add (((a . curve % 5) + 2) as u16) ;"
      },
      {
        "id": 49,
        "label": "msg ! (\"P2 curve+; base={}, range={}\" , p2 . base , p2 . range) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "p2 . mode = Linear ;"
      },
      {
        "id": 52,
        "label": "p2 . base = p2 . base / 2 + 12 ;"
      },
      {
        "id": 53,
        "label": "p2 . range = p2 . range . saturating_sub (3) ;"
      },
      {
        "id": 54,
        "label": "msg ! (\"P2 linear-; base={}, range={}\" , p2 . base , p2 . range) ;"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 20,
        "to": 24,
        "label": "for"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 25,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 33,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 42,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 49,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 41,
        "to": 56,
        "label": "for"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      }
    ]
  }
]