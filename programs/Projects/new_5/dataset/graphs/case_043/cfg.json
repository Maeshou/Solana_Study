[
  {
    "name": "initialize_market",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let market = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "market . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "market . market_id = market_id ;"
      },
      {
        "id": 4,
        "label": "market . name = name ;"
      },
      {
        "id": 5,
        "label": "market . market_status = MarketStatus :: Open ;"
      },
      {
        "id": 6,
        "label": "market . last_transaction_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 7,
        "label": "market . total_orders = 0 ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Market '{}' initialized. Status is Open.\" , market . name) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_order",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let order = & mut ctx . accounts . order ;"
      },
      {
        "id": 12,
        "label": "let market = & mut ctx . accounts . market ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "market . market_status != MarketStatus :: Open"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (error ! (MarketError :: MarketClosed)) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "order . market = market . key () ;"
      },
      {
        "id": 22,
        "label": "order . order_id = order_id ;"
      },
      {
        "id": 23,
        "label": "order . trader = ctx . accounts . trader . key () ;"
      },
      {
        "id": 24,
        "label": "order . price = price ;"
      },
      {
        "id": 25,
        "label": "order . order_status = OrderStatus :: Pending ;"
      },
      {
        "id": 26,
        "label": "order . order_type = OrderType :: Buy ;"
      },
      {
        "id": 27,
        "label": "market . total_orders = market . total_orders . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "msg ! (\"Order {} created with price {}. Status is Pending.\" , order . order_id , order . price) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  },
  {
    "name": "match_orders",
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "let order_one = & mut ctx . accounts . order_one ;"
      },
      {
        "id": 32,
        "label": "let order_two = & mut ctx . accounts . order_two ;"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "order_one . order_status != OrderStatus :: Pending || order_two . order_status != OrderStatus :: Pending"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "return Err (error ! (MarketError :: OrderNotPending)) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "No-op"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 42,
        "label": "Loop Start"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "order_one . price > order_two . price"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "order_one . price = order_one . price . saturating_sub (order_two . price / 2) ;"
      },
      {
        "id": 48,
        "label": "order_two . price = order_two . price . saturating_add (order_one . price / 2) ;"
      },
      {
        "id": 49,
        "label": "msg ! (\"Order One has higher price, adjusting.\") ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "order_one . price = order_one . price . saturating_add (order_two . price / 2) ;"
      },
      {
        "id": 52,
        "label": "order_two . price = order_two . price . saturating_sub (order_one . price / 2) ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"Order Two has higher or equal price, adjusting.\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "order_one . price == order_two . price"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "order_one . order_status = OrderStatus :: Fulfilled ;"
      },
      {
        "id": 62,
        "label": "order_two . order_status = OrderStatus :: Fulfilled ;"
      },
      {
        "id": 63,
        "label": "msg ! (\"Orders matched and fulfilled!\") ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "msg ! (\"Orders did not match.\") ;"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 33,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 43,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 42,
        "to": 56,
        "label": "while"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 57,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      }
    ]
  }
]