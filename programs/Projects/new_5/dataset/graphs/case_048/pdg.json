[
  {
    "name": "setup_ledger_book",
    "inputs": [
      "ctx: Context < SetupLedgerBook >",
      "book_id: u64",
      "name: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let book = & mut ctx . accounts . ledger_book ;"
      },
      {
        "id": 2,
        "label": "book . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "book . book_id = book_id ;"
      },
      {
        "id": 4,
        "label": "book . name = name ;"
      },
      {
        "id": 5,
        "label": "book . transaction_count = 0 ;"
      },
      {
        "id": 6,
        "label": "book . total_volume = 1000 ;"
      },
      {
        "id": 7,
        "label": "book . ledger_status = LedgerStatus :: Open ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Financial Ledger Book '{}' created with initial volume of 1000. Status is Open.\" , book . name) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: book"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: book"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: book"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: book"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: book"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: book"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: book"
      }
    ]
  },
  {
    "name": "record_transaction",
    "inputs": [
      "ctx: Context < RecordTransaction >",
      "transaction_id: u64",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let transaction_record = & mut ctx . accounts . transaction_record ;"
      },
      {
        "id": 12,
        "label": "let book = & mut ctx . accounts . ledger_book ;"
      },
      {
        "id": 13,
        "label": "if book . ledger_status != LedgerStatus :: Open { return Err (error ! (FinancialError :: LedgerClosed)) ; }"
      },
      {
        "id": 14,
        "label": "return Err (error ! (FinancialError :: LedgerClosed)) ;"
      },
      {
        "id": 15,
        "label": "transaction_record . ledger_book = book . key () ;"
      },
      {
        "id": 16,
        "label": "transaction_record . transaction_id = transaction_id ;"
      },
      {
        "id": 17,
        "label": "transaction_record . sender = ctx . accounts . sender . key () ;"
      },
      {
        "id": 18,
        "label": "transaction_record . receiver = ctx . accounts . receiver . key () ;"
      },
      {
        "id": 19,
        "label": "transaction_record . amount = amount ;"
      },
      {
        "id": 20,
        "label": "transaction_record . processing_status = ProcessingStatus :: Pending ;"
      },
      {
        "id": 21,
        "label": "book . transaction_count = book . transaction_count . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "book . total_volume = book . total_volume . saturating_add (amount) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"Transaction record {} logged with amount {}.\" , transaction_record . transaction_id , transaction_record . amount) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: transaction_record"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: book"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: book"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: book"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: transaction_record"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: book"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: book"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: book"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: book"
      }
    ]
  },
  {
    "name": "process_multiple_transactions",
    "inputs": [
      "ctx: Context < ProcessMultipleTransactions >"
    ],
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let first_record = & mut ctx . accounts . first_record ;"
      },
      {
        "id": 27,
        "label": "let second_record = & mut ctx . accounts . second_record ;"
      },
      {
        "id": 28,
        "label": "if first_record . processing_status != ProcessingStatus :: Pending || second_record . processing_status != ProcessingStatus :: Pending { return Err (error ! (FinancialError :: TransactionNotPending)) ; }"
      },
      {
        "id": 29,
        "label": "return Err (error ! (FinancialError :: TransactionNotPending)) ;"
      },
      {
        "id": 30,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 31,
        "label": "while loop_count < 2 { if first_record . amount > second_record . amount { first_record . amount = first_record . amount . saturating_sub (10) ; second_record . amount = second_record . amount . saturating_add (20) ; msg ! (\"First record has larger amount, adjusting.\") ; } else { first_record . amount = first_record . amount . saturating_add (20) ; second_record . amount = second_record . amount . saturating_sub (10) ; msg ! (\"Second record has larger or equal amount, adjusting.\") ; } loop_count += 1 ; }"
      },
      {
        "id": 32,
        "label": "if first_record . amount > second_record . amount { first_record . amount = first_record . amount . saturating_sub (10) ; second_record . amount = second_record . amount . saturating_add (20) ; msg ! (\"First record has larger amount, adjusting.\") ; } else { first_record . amount = first_record . amount . saturating_add (20) ; second_record . amount = second_record . amount . saturating_sub (10) ; msg ! (\"Second record has larger or equal amount, adjusting.\") ; }"
      },
      {
        "id": 33,
        "label": "first_record . amount = first_record . amount . saturating_sub (10) ;"
      },
      {
        "id": 34,
        "label": "second_record . amount = second_record . amount . saturating_add (20) ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"First record has larger amount, adjusting.\") ;"
      },
      {
        "id": 36,
        "label": "first_record . amount = first_record . amount . saturating_add (20) ;"
      },
      {
        "id": 37,
        "label": "second_record . amount = second_record . amount . saturating_sub (10) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"Second record has larger or equal amount, adjusting.\") ;"
      },
      {
        "id": 39,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 40,
        "label": "if first_record . amount > 1000 { first_record . processing_status = ProcessingStatus :: Processed ; msg ! (\"First record processed due to large amount.\") ; }"
      },
      {
        "id": 41,
        "label": "first_record . processing_status = ProcessingStatus :: Processed ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"First record processed due to large amount.\") ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 26,
        "to": 26,
        "label": "def: first_record"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: second_record"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: second_record"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: loop_count"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: loop_count"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: second_record"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: loop_count"
      },
      {
        "from": 26,
        "to": 32,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 32,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 32,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 32,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 32,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 33,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 33,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 34,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 34,
        "label": "data_dep: second_record"
      },
      {
        "from": 26,
        "to": 36,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 36,
        "label": "data_dep: first_record"
      },
      {
        "from": 27,
        "to": 37,
        "label": "data_dep: second_record"
      },
      {
        "from": 27,
        "to": 37,
        "label": "data_dep: second_record"
      },
      {
        "from": 30,
        "to": 39,
        "label": "data_dep: loop_count"
      },
      {
        "from": 26,
        "to": 40,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 40,
        "label": "data_dep: first_record"
      },
      {
        "from": 26,
        "to": 41,
        "label": "data_dep: first_record"
      }
    ]
  }
]