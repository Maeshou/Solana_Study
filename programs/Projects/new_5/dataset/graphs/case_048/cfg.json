[
  {
    "name": "setup_ledger_book",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let book = & mut ctx . accounts . ledger_book ;"
      },
      {
        "id": 2,
        "label": "book . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "book . book_id = book_id ;"
      },
      {
        "id": 4,
        "label": "book . name = name ;"
      },
      {
        "id": 5,
        "label": "book . transaction_count = 0 ;"
      },
      {
        "id": 6,
        "label": "book . total_volume = 1000 ;"
      },
      {
        "id": 7,
        "label": "book . ledger_status = LedgerStatus :: Open ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Financial Ledger Book '{}' created with initial volume of 1000. Status is Open.\" , book . name) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_transaction",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let transaction_record = & mut ctx . accounts . transaction_record ;"
      },
      {
        "id": 12,
        "label": "let book = & mut ctx . accounts . ledger_book ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "book . ledger_status != LedgerStatus :: Open"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (error ! (FinancialError :: LedgerClosed)) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "transaction_record . ledger_book = book . key () ;"
      },
      {
        "id": 22,
        "label": "transaction_record . transaction_id = transaction_id ;"
      },
      {
        "id": 23,
        "label": "transaction_record . sender = ctx . accounts . sender . key () ;"
      },
      {
        "id": 24,
        "label": "transaction_record . receiver = ctx . accounts . receiver . key () ;"
      },
      {
        "id": 25,
        "label": "transaction_record . amount = amount ;"
      },
      {
        "id": 26,
        "label": "transaction_record . processing_status = ProcessingStatus :: Pending ;"
      },
      {
        "id": 27,
        "label": "book . transaction_count = book . transaction_count . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "book . total_volume = book . total_volume . saturating_add (amount) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"Transaction record {} logged with amount {}.\" , transaction_record . transaction_id , transaction_record . amount) ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_multiple_transactions",
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let first_record = & mut ctx . accounts . first_record ;"
      },
      {
        "id": 33,
        "label": "let second_record = & mut ctx . accounts . second_record ;"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "first_record . processing_status != ProcessingStatus :: Pending || second_record . processing_status != ProcessingStatus :: Pending"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "return Err (error ! (FinancialError :: TransactionNotPending)) ;"
      },
      {
        "id": 39,
        "label": "False body"
      },
      {
        "id": 40,
        "label": "No-op"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 43,
        "label": "Loop Start"
      },
      {
        "id": 44,
        "label": "if statement"
      },
      {
        "id": 45,
        "label": "predicate"
      },
      {
        "id": 46,
        "label": "first_record . amount > second_record . amount"
      },
      {
        "id": 47,
        "label": "True body"
      },
      {
        "id": 48,
        "label": "first_record . amount = first_record . amount . saturating_sub (10) ;"
      },
      {
        "id": 49,
        "label": "second_record . amount = second_record . amount . saturating_add (20) ;"
      },
      {
        "id": 50,
        "label": "msg ! (\"First record has larger amount, adjusting.\") ;"
      },
      {
        "id": 51,
        "label": "False body"
      },
      {
        "id": 52,
        "label": "first_record . amount = first_record . amount . saturating_add (20) ;"
      },
      {
        "id": 53,
        "label": "second_record . amount = second_record . amount . saturating_sub (10) ;"
      },
      {
        "id": 54,
        "label": "msg ! (\"Second record has larger or equal amount, adjusting.\") ;"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 57,
        "label": "Loop End"
      },
      {
        "id": 58,
        "label": "if statement"
      },
      {
        "id": 59,
        "label": "predicate"
      },
      {
        "id": 60,
        "label": "first_record . amount > 1000"
      },
      {
        "id": 61,
        "label": "True body"
      },
      {
        "id": 62,
        "label": "first_record . processing_status = ProcessingStatus :: Processed ;"
      },
      {
        "id": 63,
        "label": "msg ! (\"First record processed due to large amount.\") ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "No-op"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 34,
        "to": 39,
        "label": "false"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "predicate"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "true"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 44,
        "to": 51,
        "label": "false"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 50,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 43,
        "to": 57,
        "label": "while"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "predicate"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "true"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 58,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      }
    ]
  }
]