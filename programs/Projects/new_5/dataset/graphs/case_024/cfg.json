[
  {
    "name": "init_competition",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let competition = & mut ctx . accounts . competition ;"
      },
      {
        "id": 2,
        "label": "competition . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "competition . comp_id = comp_id ;"
      },
      {
        "id": 4,
        "label": "competition . comp_name = comp_name ;"
      },
      {
        "id": 5,
        "label": "competition . entry_count = 0 ;"
      },
      {
        "id": 6,
        "label": "competition . is_open = true ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Competition '{}' initialized.\" , competition . comp_name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_entry",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let entry = & mut ctx . accounts . entry ;"
      },
      {
        "id": 11,
        "label": "let competition = & mut ctx . accounts . competition ;"
      },
      {
        "id": 12,
        "label": "entry . competition = competition . key () ;"
      },
      {
        "id": 13,
        "label": "entry . entry_id = entry_id ;"
      },
      {
        "id": 14,
        "label": "entry . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 15,
        "label": "entry . score = initial_score ;"
      },
      {
        "id": 16,
        "label": "entry . is_final = false ;"
      },
      {
        "id": 17,
        "label": "competition . entry_count = competition . entry_count . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Entry {} created for competition {}.\" , entry . entry_id , competition . comp_name) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_entries",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let entry_a = & mut ctx . accounts . entry_a ;"
      },
      {
        "id": 22,
        "label": "let entry_b = & mut ctx . accounts . entry_b ;"
      },
      {
        "id": 23,
        "label": "let mut a_bonuses_sum : u64 = 0 ;"
      },
      {
        "id": 24,
        "label": "let mut b_bonuses_sum : u64 = 0 ;"
      },
      {
        "id": 25,
        "label": "let mut loops_run = 0 ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "let bonus = bonuses [loops_run] as u64 ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "entry_a . score > entry_b . score"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "entry_a . score = entry_a . score . saturating_add ((bonus * 2) as u32) ;"
      },
      {
        "id": 33,
        "label": "entry_b . score = entry_b . score . checked_sub ((bonus / 2) as u32) . unwrap_or (0) ;"
      },
      {
        "id": 34,
        "label": "a_bonuses_sum = a_bonuses_sum . saturating_add (bonus * 2) ;"
      },
      {
        "id": 35,
        "label": "b_bonuses_sum = b_bonuses_sum . saturating_sub (bonus / 2) ;"
      },
      {
        "id": 36,
        "label": "msg ! (\"A had higher score, applying bonus to A and penalty to B.\") ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "entry_b . score = entry_b . score . saturating_add ((bonus * 2) as u32) ;"
      },
      {
        "id": 39,
        "label": "entry_a . score = entry_a . score . checked_sub ((bonus / 2) as u32) . unwrap_or (0) ;"
      },
      {
        "id": 40,
        "label": "b_bonuses_sum = b_bonuses_sum . saturating_add (bonus * 2) ;"
      },
      {
        "id": 41,
        "label": "a_bonuses_sum = a_bonuses_sum . saturating_sub (bonus / 2) ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"B had higher or equal score, applying bonus to B and penalty to A.\") ;"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "loops_run += 1 ;"
      },
      {
        "id": 45,
        "label": "Loop End"
      },
      {
        "id": 46,
        "label": "if statement"
      },
      {
        "id": 47,
        "label": "predicate"
      },
      {
        "id": 48,
        "label": "a_bonuses_sum > b_bonuses_sum"
      },
      {
        "id": 49,
        "label": "True body"
      },
      {
        "id": 50,
        "label": "entry_a . is_final = true ;"
      },
      {
        "id": 51,
        "label": "False body"
      },
      {
        "id": 52,
        "label": "entry_b . is_final = true ;"
      },
      {
        "id": 53,
        "label": "merge"
      },
      {
        "id": 54,
        "label": "msg ! (\"Processed {} bonuses. A's score change: {}, B's score change: {}.\" , loops_run , a_bonuses_sum , b_bonuses_sum) ;"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 28,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 36,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 26,
        "to": 45,
        "label": "while"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "predicate"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "true"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 46,
        "to": 51,
        "label": "false"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]