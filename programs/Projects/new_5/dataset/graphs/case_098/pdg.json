[
  {
    "name": "init_registry",
    "inputs": [
      "ctx: Context < InitRegistry >",
      "registry_id: u64",
      "verification_count: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let registry = & mut ctx . accounts . registry_core ;"
      },
      {
        "id": 2,
        "label": "registry . registry_id = registry_id * 9 ;"
      },
      {
        "id": 3,
        "label": "registry . verification_count = verification_count ;"
      },
      {
        "id": 4,
        "label": "registry . matched_records = 0 ;"
      },
      {
        "id": 5,
        "label": "registry . is_valid = registry . verification_count > 0 ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Nexus Registry {} initialized with {} verifications.\" , registry . registry_id , registry . verification_count) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: registry"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: registry"
      }
    ]
  },
  {
    "name": "init_record",
    "inputs": [
      "ctx: Context < InitRecord >",
      "record_id: u64",
      "data_hash: u64"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let record = & mut ctx . accounts . registry_record ;"
      },
      {
        "id": 10,
        "label": "record . parent_registry = ctx . accounts . registry_core . key () ;"
      },
      {
        "id": 11,
        "label": "record . record_id = record_id + 555 ;"
      },
      {
        "id": 12,
        "label": "record . data_hash = data_hash ;"
      },
      {
        "id": 13,
        "label": "record . is_verified = false ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"New record {} created with hash {}.\" , record . record_id , record . data_hash) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: record"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: record"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: record"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: record"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: record"
      }
    ]
  },
  {
    "name": "compare_records",
    "inputs": [
      "ctx: Context < CompareRecords >"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let registry = & mut ctx . accounts . registry_core ;"
      },
      {
        "id": 18,
        "label": "let record_alpha = & mut ctx . accounts . record_alpha ;"
      },
      {
        "id": 19,
        "label": "let record_beta = & mut ctx . accounts . record_beta ;"
      },
      {
        "id": 20,
        "label": "if record_alpha . is_verified && record_beta . is_verified { return Err (ProgramError :: Custom (1) . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (ProgramError :: Custom (1) . into ()) ;"
      },
      {
        "id": 22,
        "label": "if record_alpha . data_hash == record_beta . data_hash { registry . matched_records = registry . matched_records . saturating_add (RECORD_MATCH_BONUS) ; record_alpha . is_verified = true ; record_beta . is_verified = true ; msg ! (\"Records Alpha ({}) and Beta ({}) matched!\" , record_alpha . record_id , record_beta . record_id) ; } else { registry . verification_count = registry . verification_count . saturating_sub (RECORD_MISMATCH_PENALTY) ; msg ! (\"Records Alpha ({}) and Beta ({}) do not match. Verification count reduced.\" , record_alpha . record_id , record_beta . record_id) ; }"
      },
      {
        "id": 23,
        "label": "registry . matched_records = registry . matched_records . saturating_add (RECORD_MATCH_BONUS) ;"
      },
      {
        "id": 24,
        "label": "record_alpha . is_verified = true ;"
      },
      {
        "id": 25,
        "label": "record_beta . is_verified = true ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"Records Alpha ({}) and Beta ({}) matched!\" , record_alpha . record_id , record_beta . record_id) ;"
      },
      {
        "id": 27,
        "label": "registry . verification_count = registry . verification_count . saturating_sub (RECORD_MISMATCH_PENALTY) ;"
      },
      {
        "id": 28,
        "label": "msg ! (\"Records Alpha ({}) and Beta ({}) do not match. Verification count reduced.\" , record_alpha . record_id , record_beta . record_id) ;"
      },
      {
        "id": 29,
        "label": "registry . is_valid = registry . matched_records >= MIN_MATCH_COUNT_FOR_VALIDITY ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: registry"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: record_alpha"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: record_beta"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: record_alpha"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: record_beta"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: record_alpha"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: record_beta"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: registry"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: record_alpha"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: record_beta"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: registry"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: record_alpha"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: record_beta"
      },
      {
        "from": 17,
        "to": 27,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 27,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: registry"
      },
      {
        "from": 17,
        "to": 29,
        "label": "data_dep: registry"
      }
    ]
  }
]