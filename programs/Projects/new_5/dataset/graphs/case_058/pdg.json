[
  {
    "name": "setup_battle_zone",
    "inputs": [
      "ctx: Context < SetupBattleZone >",
      "zone_id: u64",
      "max_players: u32",
      "zone_status_code: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let zone = & mut ctx . accounts . battle_zone ;"
      },
      {
        "id": 2,
        "label": "zone . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 3,
        "label": "zone . zone_id = zone_id ;"
      },
      {
        "id": 4,
        "label": "if zone_status_code == 1 { zone . zone_status = ZoneStatus :: Active ; } else { zone . zone_status = ZoneStatus :: Closed ; }"
      },
      {
        "id": 5,
        "label": "zone . zone_status = ZoneStatus :: Active ;"
      },
      {
        "id": 6,
        "label": "zone . zone_status = ZoneStatus :: Closed ;"
      },
      {
        "id": 7,
        "label": "zone . active_battles = 0 ;"
      },
      {
        "id": 8,
        "label": "zone . max_players = max_players . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 9,
        "label": "msg ! (\"Battle Zone '{}' initialized with a capacity of {}. Status is now Active.\" , zone . zone_id , zone . max_players) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: zone"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: zone"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: zone"
      }
    ]
  },
  {
    "name": "enroll_combatant",
    "inputs": [
      "ctx: Context < EnrollCombatant >",
      "player_id: u32",
      "initial_power: u16"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let combatant = & mut ctx . accounts . combatant_stats ;"
      },
      {
        "id": 13,
        "label": "let zone = & mut ctx . accounts . battle_zone ;"
      },
      {
        "id": 14,
        "label": "if zone . zone_status != ZoneStatus :: Active { combatant . health = 0 ; combatant . stamina = 0 ; combatant . combat_status = CombatantStatus :: Defeated ; msg ! (\"Enrollment failed: Battle zone is not active. Combatant initialized as defeated.\") ; } else { combatant . health = initial_power . checked_mul (5) . unwrap_or (u16 :: MAX) ; combatant . stamina = initial_power . checked_div (2) . unwrap_or (0) ; combatant . combat_status = CombatantStatus :: Ready ; zone . active_battles = zone . active_battles . saturating_add (1) ; msg ! (\"Combatant {} enrolled. Health: {}, Stamina: {}.\" , player_id , combatant . health , combatant . stamina) ; }"
      },
      {
        "id": 15,
        "label": "combatant . health = 0 ;"
      },
      {
        "id": 16,
        "label": "combatant . stamina = 0 ;"
      },
      {
        "id": 17,
        "label": "combatant . combat_status = CombatantStatus :: Defeated ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Enrollment failed: Battle zone is not active. Combatant initialized as defeated.\") ;"
      },
      {
        "id": 19,
        "label": "combatant . health = initial_power . checked_mul (5) . unwrap_or (u16 :: MAX) ;"
      },
      {
        "id": 20,
        "label": "combatant . stamina = initial_power . checked_div (2) . unwrap_or (0) ;"
      },
      {
        "id": 21,
        "label": "combatant . combat_status = CombatantStatus :: Ready ;"
      },
      {
        "id": 22,
        "label": "zone . active_battles = zone . active_battles . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"Combatant {} enrolled. Health: {}, Stamina: {}.\" , player_id , combatant . health , combatant . stamina) ;"
      },
      {
        "id": 24,
        "label": "combatant . zone = zone . key () ;"
      },
      {
        "id": 25,
        "label": "combatant . player_id = player_id ;"
      },
      {
        "id": 26,
        "label": "combatant . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 27,
        "label": "combatant . last_action_timestamp = initial_power as i64 ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: combatant"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: zone"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: zone"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: combatant"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: zone"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: zone"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: combatant"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: zone"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: zone"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: combatant"
      },
      {
        "from": 13,
        "to": 24,
        "label": "data_dep: zone"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: combatant"
      },
      {
        "from": 12,
        "to": 27,
        "label": "data_dep: combatant"
      }
    ]
  },
  {
    "name": "execute_duel_round",
    "inputs": [
      "ctx: Context < ExecuteDuelRound >",
      "attacker_move: u8",
      "defender_move: u8"
    ],
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "let attacker_stats = & mut ctx . accounts . attacker_stats ;"
      },
      {
        "id": 31,
        "label": "let defender_stats = & mut ctx . accounts . defender_stats ;"
      },
      {
        "id": 32,
        "label": "if attacker_stats . combat_status == CombatantStatus :: Ready && defender_stats . combat_status == CombatantStatus :: Ready { let damage = (attacker_move as u16) . saturating_sub (defender_move as u16) ; defender_stats . health = defender_stats . health . checked_sub (damage) . unwrap_or (0) ; msg ! (\"Defender takes {} damage.\" , damage) ; if defender_stats . health == 0 { msg ! (\"Defender defeated! Battle ends.\") ; defender_stats . combat_status = CombatantStatus :: Defeated ; ctx . accounts . battle_zone . active_battles = ctx . accounts . battle_zone . active_battles . checked_sub (1) . unwrap_or (0) ; } } else { msg ! (\"Duel round skipped because one or more combatants are not ready.\") ; }"
      },
      {
        "id": 33,
        "label": "let damage = (attacker_move as u16) . saturating_sub (defender_move as u16) ;"
      },
      {
        "id": 34,
        "label": "defender_stats . health = defender_stats . health . checked_sub (damage) . unwrap_or (0) ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"Defender takes {} damage.\" , damage) ;"
      },
      {
        "id": 36,
        "label": "if defender_stats . health == 0 { msg ! (\"Defender defeated! Battle ends.\") ; defender_stats . combat_status = CombatantStatus :: Defeated ; ctx . accounts . battle_zone . active_battles = ctx . accounts . battle_zone . active_battles . checked_sub (1) . unwrap_or (0) ; }"
      },
      {
        "id": 37,
        "label": "msg ! (\"Defender defeated! Battle ends.\") ;"
      },
      {
        "id": 38,
        "label": "defender_stats . combat_status = CombatantStatus :: Defeated ;"
      },
      {
        "id": 39,
        "label": "ctx . accounts . battle_zone . active_battles = ctx . accounts . battle_zone . active_battles . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"Duel round skipped because one or more combatants are not ready.\") ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 30,
        "label": "def: attacker_stats"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: defender_stats"
      },
      {
        "from": 30,
        "to": 32,
        "label": "data_dep: attacker_stats"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: damage"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: damage"
      },
      {
        "from": 31,
        "to": 36,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 36,
        "label": "data_dep: defender_stats"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: defender_stats"
      }
    ]
  }
]