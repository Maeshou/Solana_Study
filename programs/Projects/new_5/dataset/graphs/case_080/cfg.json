[
  {
    "name": "init_engine",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let engine = & mut ctx . accounts . engine_core ;"
      },
      {
        "id": 2,
        "label": "engine . engine_id = engine_id . rotate_left (4) ;"
      },
      {
        "id": 3,
        "label": "engine . energy_level = base_energy . checked_mul (100) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 4,
        "label": "engine . fragment_count = 0 ;"
      },
      {
        "id": 5,
        "label": "engine . is_operational = engine . energy_level > 1000 ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Void Engine {} activated with {} energy.\" , engine . engine_id , engine . energy_level) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_fragment",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let fragment = & mut ctx . accounts . fragment_data ;"
      },
      {
        "id": 10,
        "label": "fragment . parent_engine = ctx . accounts . engine_core . key () ;"
      },
      {
        "id": 11,
        "label": "fragment . fragment_id = fragment_id . checked_add (1000) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 12,
        "label": "fragment . efficiency = efficiency . checked_div (2) . unwrap_or (1) ;"
      },
      {
        "id": 13,
        "label": "fragment . is_active = true ;"
      },
      {
        "id": 14,
        "label": "fragment . processed_count = 0 ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"New fragment {} linked with efficiency {}.\" , fragment . fragment_id , fragment . efficiency) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_fragments",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let engine = & mut ctx . accounts . engine_core ;"
      },
      {
        "id": 19,
        "label": "let fragment1 = & mut ctx . accounts . fragment1 ;"
      },
      {
        "id": 20,
        "label": "let fragment2 = & mut ctx . accounts . fragment2 ;"
      },
      {
        "id": 21,
        "label": "let mut loop_counter = cycles ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let energy_gain1 = (fragment1 . efficiency as u64) . checked_mul (10) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 24,
        "label": "engine . energy_level = engine . energy_level . checked_add (energy_gain1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 25,
        "label": "fragment1 . processed_count = fragment1 . processed_count . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 26,
        "label": "fragment1 . is_active = fragment1 . efficiency > 50 && engine . is_operational ;"
      },
      {
        "id": 27,
        "label": "let energy_gain2 = (fragment2 . efficiency as u64) . checked_mul (20) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 28,
        "label": "engine . energy_level = engine . energy_level . checked_add (energy_gain2) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "fragment2 . processed_count = fragment2 . processed_count . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "fragment2 . is_active = fragment2 . efficiency > 60 && engine . is_operational ;"
      },
      {
        "id": 31,
        "label": "engine . is_operational = engine . energy_level > 500 && (fragment1 . is_active || fragment2 . is_active) ;"
      },
      {
        "id": 32,
        "label": "loop_counter = loop_counter . checked_sub (1) . unwrap_or (0) ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "msg ! (\"Engine processed fragments for {} cycles. Current energy level is {}.\" , cycles , engine . energy_level) ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 22,
        "to": 33,
        "label": "while"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]