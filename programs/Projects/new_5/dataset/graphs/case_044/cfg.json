[
  {
    "name": "init_player",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let player = & mut ctx . accounts . player ;"
      },
      {
        "id": 2,
        "label": "player . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "player . level = initial_level ;"
      },
      {
        "id": 4,
        "label": "player . xp = initial_xp ;"
      },
      {
        "id": 5,
        "label": "player . energy = 100 ;"
      },
      {
        "id": 6,
        "label": "player . max_energy = 100 ;"
      },
      {
        "id": 7,
        "label": "player . is_active = true ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Player {} initialized with level {}\" , player . owner , player . level) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_session",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let session = & mut ctx . accounts . session ;"
      },
      {
        "id": 12,
        "label": "session . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 13,
        "label": "session . session_id = session_id ;"
      },
      {
        "id": 14,
        "label": "session . xp_gained = 0 ;"
      },
      {
        "id": 15,
        "label": "session . energy_consumed = 0 ;"
      },
      {
        "id": 16,
        "label": "session . is_finished = false ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"New session {} started for player {}\" , session . session_id , session . player) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "progress_in_session",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let player = & mut ctx . accounts . player ;"
      },
      {
        "id": 21,
        "label": "let session = & mut ctx . accounts . session ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "session . is_finished"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "return Err (ErrorCode :: SessionFinished . into ()) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let mut total_xp_gained : u64 = 0 ;"
      },
      {
        "id": 31,
        "label": "let mut total_energy_cost : u8 = 0 ;"
      },
      {
        "id": 32,
        "label": "let max_actions = 20 ;"
      },
      {
        "id": 33,
        "label": "Loop Start"
      },
      {
        "id": 34,
        "label": "let energy_cost = if action_type == 1 { 5 } else { 10 } ;"
      },
      {
        "id": 35,
        "label": "if statement"
      },
      {
        "id": 36,
        "label": "predicate"
      },
      {
        "id": 37,
        "label": "player . energy < energy_cost"
      },
      {
        "id": 38,
        "label": "True body"
      },
      {
        "id": 39,
        "label": "player . is_active = false ;"
      },
      {
        "id": 40,
        "label": "session . is_finished = true ;"
      },
      {
        "id": 41,
        "label": "msg ! (\"Not enough energy. Session terminated.\") ;"
      },
      {
        "id": 42,
        "label": "break ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "let xp_gain = if action_type == 1 { 20 } else { 50 } ;"
      },
      {
        "id": 45,
        "label": "player . xp = player . xp . saturating_add (xp_gain as u64) ;"
      },
      {
        "id": 46,
        "label": "player . energy = player . energy . saturating_sub (energy_cost) ;"
      },
      {
        "id": 47,
        "label": "total_xp_gained += xp_gain as u64 ;"
      },
      {
        "id": 48,
        "label": "total_energy_cost += energy_cost ;"
      },
      {
        "id": 49,
        "label": "let xp_to_next_level = player . level * 1000 ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "player . xp >= xp_to_next_level as u64"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "player . level = player . level . saturating_add (1) ;"
      },
      {
        "id": 55,
        "label": "player . xp = player . xp . saturating_sub (xp_to_next_level as u64) ;"
      },
      {
        "id": 56,
        "label": "player . max_energy = player . max_energy . saturating_add (10) ;"
      },
      {
        "id": 57,
        "label": "msg ! (\"Player leveled up to {}!\" , player . level) ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "No-op"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "Loop End"
      },
      {
        "id": 63,
        "label": "msg ! (\"Session {} processed. Gained {} XP, consumed {} energy.\" , session . session_id , total_xp_gained , total_energy_cost) ;"
      },
      {
        "id": 64,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "predicate"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "true"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 35,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 50,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 42,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 33,
        "to": 62,
        "label": "for"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      }
    ]
  }
]