[
  {
    "name": "init_profile",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . client_profile . level = level ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . usage_stats . count = 0 ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . usage_stats . last_active = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . usage_stats . is_active = true ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . reward_config . max_reward = 1000 ;"
      },
      {
        "id": 6,
        "label": "ctx . accounts . reward_config . min_threshold = 10 ;"
      },
      {
        "id": 7,
        "label": "ctx . accounts . reward_config . bump = * ctx . bumps . get (\"client_profile\") . unwrap () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_profile",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "require_keys_neq ! (ctx . accounts . client_profile . key () , ctx . accounts . usage_stats . key () , CustomError :: SameAccount) ;"
      },
      {
        "id": 11,
        "label": "let mut total = ctx . accounts . client_profile . level as u64 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "total += 1 ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "total > ctx . accounts . reward_config . max_reward"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "ctx . accounts . reward_config . min_threshold = total as u32 ;"
      },
      {
        "id": 20,
        "label": "msg ! (\"Threshold updated: {}\" , ctx . accounts . reward_config . min_threshold) ;"
      },
      {
        "id": 21,
        "label": "ctx . accounts . usage_stats . count += 1 ;"
      },
      {
        "id": 22,
        "label": "ctx . accounts . usage_stats . is_active = false ;"
      },
      {
        "id": 23,
        "label": "False body"
      },
      {
        "id": 24,
        "label": "ctx . accounts . reward_config . min_threshold -= 1 ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"Threshold decreased: {}\" , ctx . accounts . reward_config . min_threshold) ;"
      },
      {
        "id": 26,
        "label": "ctx . accounts . usage_stats . count -= 1 ;"
      },
      {
        "id": 27,
        "label": "ctx . accounts . usage_stats . is_active = true ;"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 14,
        "label": "for"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 15,
        "to": 23,
        "label": "false"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 22,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]