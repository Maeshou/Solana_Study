[
  {
    "name": "initialize_reputation_board",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let board = & mut ctx . accounts . reputation_board ;"
      },
      {
        "id": 2,
        "label": "board . governor = ctx . accounts . governor . key () ;"
      },
      {
        "id": 3,
        "label": "board . board_name = name ;"
      },
      {
        "id": 4,
        "label": "board . last_update_count = 0 ;"
      },
      {
        "id": 5,
        "label": "board . total_users = 0 ;"
      },
      {
        "id": 6,
        "label": "board . board_state = BoardState :: Running ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Reputation Board '{}' initialized. State is Running.\" , board . board_name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_user_profile",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let profile = & mut ctx . accounts . user_profile ;"
      },
      {
        "id": 11,
        "label": "let board = & mut ctx . accounts . reputation_board ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "board . board_state != BoardState :: Running"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "return Err (error ! (ReputationError :: BoardPaused)) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "profile . board = board . key () ;"
      },
      {
        "id": 21,
        "label": "profile . user = ctx . accounts . user . key () ;"
      },
      {
        "id": 22,
        "label": "profile . username = username ;"
      },
      {
        "id": 23,
        "label": "profile . trust_score = 500 ;"
      },
      {
        "id": 24,
        "label": "profile . last_score_change_count = 0 ;"
      },
      {
        "id": 25,
        "label": "profile . profile_status = ProfileStatus :: Active ;"
      },
      {
        "id": 26,
        "label": "board . total_users = board . total_users . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"User profile for '{}' created with a starting score of 500.\" , profile . username) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  },
  {
    "name": "transfer_trust_score",
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "let target_profile = & mut ctx . accounts . target_profile ;"
      },
      {
        "id": 31,
        "label": "let source_profile = & mut ctx . accounts . source_profile ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "target_profile . profile_status != ProfileStatus :: Active || source_profile . profile_status != ProfileStatus :: Active"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "return Err (error ! (ReputationError :: ProfileInactive)) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let mut final_transfer = score_to_transfer ;"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "source_profile . trust_score < final_transfer"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "final_transfer = source_profile . trust_score ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let mut a_factor = 1 ;"
      },
      {
        "id": 50,
        "label": "let mut b_factor = 1 ;"
      },
      {
        "id": 51,
        "label": "if statement"
      },
      {
        "id": 52,
        "label": "predicate"
      },
      {
        "id": 53,
        "label": "target_profile . trust_score > 1000"
      },
      {
        "id": 54,
        "label": "True body"
      },
      {
        "id": 55,
        "label": "a_factor = 2 ;"
      },
      {
        "id": 56,
        "label": "msg ! (\"Target is high-reputation, receives double bonus.\") ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "if statement"
      },
      {
        "id": 61,
        "label": "predicate"
      },
      {
        "id": 62,
        "label": "source_profile . trust_score < 100"
      },
      {
        "id": 63,
        "label": "True body"
      },
      {
        "id": 64,
        "label": "b_factor = 0 ;"
      },
      {
        "id": 65,
        "label": "msg ! (\"Source is low-reputation, cannot transfer.\") ;"
      },
      {
        "id": 66,
        "label": "False body"
      },
      {
        "id": 67,
        "label": "No-op"
      },
      {
        "id": 68,
        "label": "merge"
      },
      {
        "id": 69,
        "label": "target_profile . trust_score = target_profile . trust_score . saturating_add (final_transfer . checked_mul (a_factor) . unwrap_or (u32 :: MAX)) ;"
      },
      {
        "id": 70,
        "label": "source_profile . trust_score = source_profile . trust_score . checked_sub (final_transfer . checked_mul (b_factor) . unwrap_or (0)) . unwrap_or (0) ;"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "target_profile . trust_score > 10000"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "target_profile . profile_status = ProfileStatus :: Maxed ;"
      },
      {
        "id": 76,
        "label": "msg ! (\"Target profile achieved maximum reputation!\") ;"
      },
      {
        "id": 77,
        "label": "False body"
      },
      {
        "id": 78,
        "label": "msg ! (\"Target score is now {}.\" , target_profile . trust_score) ;"
      },
      {
        "id": 79,
        "label": "merge"
      },
      {
        "id": 80,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 41,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "predicate"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "true"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 51,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "predicate"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 60,
        "to": 63,
        "label": "true"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 60,
        "to": 66,
        "label": "false"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 65,
        "to": 68,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 71,
        "to": 77,
        "label": "false"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 76,
        "to": 79,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      }
    ]
  }
]