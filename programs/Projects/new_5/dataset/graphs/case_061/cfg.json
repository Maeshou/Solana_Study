[
  {
    "name": "create_pet_world",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pet_world = & mut ctx . accounts . pet_world ;"
      },
      {
        "id": 2,
        "label": "pet_world . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pet_world . world_id = world_id ;"
      },
      {
        "id": 4,
        "label": "pet_world . total_pets = 0 ;"
      },
      {
        "id": 5,
        "label": "pet_world . is_active = PetWorldStatus :: Active ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Pet world {} created and is now active.\" , pet_world . world_id) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "hatch_pet",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pet = & mut ctx . accounts . pet ;"
      },
      {
        "id": 10,
        "label": "let world = & mut ctx . accounts . pet_world ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "matches ! (world . is_active , PetWorldStatus :: Active)"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "pet . is_happy = true ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "species_code == 1"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "pet . species = PetSpecies :: Dragon ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "pet . species = PetSpecies :: Rabbit ;"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "pet . is_happy = false ;"
      },
      {
        "id": 26,
        "label": "pet . species = PetSpecies :: Rabbit ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"World is not active, pet starts unhappy.\") ;"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "pet . world = world . key () ;"
      },
      {
        "id": 30,
        "label": "pet . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 31,
        "label": "pet . pet_id = pet_id ;"
      },
      {
        "id": 32,
        "label": "pet . energy = initial_energy ;"
      },
      {
        "id": 33,
        "label": "pet . generation = 0 ;"
      },
      {
        "id": 34,
        "label": "world . total_pets = world . total_pets . saturating_add (1) ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"Pet {} hatched with {} energy.\" , pet . pet_id , pet . energy) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 11,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  },
  {
    "name": "breed_pets",
    "nodes": [
      {
        "id": 37,
        "label": "Entry"
      },
      {
        "id": 38,
        "label": "let parent1 = & mut ctx . accounts . parent1 ;"
      },
      {
        "id": 39,
        "label": "let parent2 = & mut ctx . accounts . parent2 ;"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "parent1 . energy > 50 && parent2 . energy > 50"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "parent1 . energy = parent1 . energy . saturating_sub (50) ;"
      },
      {
        "id": 45,
        "label": "parent2 . energy = parent2 . energy . saturating_sub (50) ;"
      },
      {
        "id": 46,
        "label": "let new_generation = parent1 . generation . max (parent2 . generation) . saturating_add (1) ;"
      },
      {
        "id": 47,
        "label": "ctx . accounts . new_pet . energy = 100 ;"
      },
      {
        "id": 48,
        "label": "ctx . accounts . new_pet . generation = new_generation ;"
      },
      {
        "id": 49,
        "label": "ctx . accounts . new_pet . is_happy = true ;"
      },
      {
        "id": 50,
        "label": "ctx . accounts . new_pet . species = PetSpecies :: Rabbit ;"
      },
      {
        "id": 51,
        "label": "ctx . accounts . new_pet . world = ctx . accounts . pet_world . key () ;"
      },
      {
        "id": 52,
        "label": "ctx . accounts . new_pet . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 53,
        "label": "ctx . accounts . new_pet . pet_id = 999 ;"
      },
      {
        "id": 54,
        "label": "ctx . accounts . pet_world . total_pets = ctx . accounts . pet_world . total_pets . saturating_add (1) ;"
      },
      {
        "id": 55,
        "label": "msg ! (\"New pet hatched from breeding. Generation: {}\" , new_generation) ;"
      },
      {
        "id": 56,
        "label": "False body"
      },
      {
        "id": 57,
        "label": "msg ! (\"Not enough energy to breed.\") ;"
      },
      {
        "id": 58,
        "label": "merge"
      },
      {
        "id": 59,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 40,
        "to": 56,
        "label": "false"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      }
    ]
  }
]