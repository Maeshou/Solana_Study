[
  {
    "name": "init_harvest",
    "inputs": [
      "ctx: Context < InitHarvest >",
      "harvest_id: u64",
      "max_harvesters: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let harvest = & mut ctx . accounts . harvest_core ;"
      },
      {
        "id": 2,
        "label": "harvest . harvest_id = harvest_id . checked_mul (2) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 3,
        "label": "harvest . max_harvesters = max_harvesters . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 4,
        "label": "harvest . total_resources = (harvest_id . checked_rem (10) . unwrap_or (0)) as u64 ;"
      },
      {
        "id": 5,
        "label": "harvest . is_active = true ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Cosmic Harvest {} established with capacity for {} harvesters.\" , harvest . harvest_id , harvest . max_harvesters) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: harvest"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: harvest"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: harvest"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: harvest"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: harvest"
      }
    ]
  },
  {
    "name": "init_harvester",
    "inputs": [
      "ctx: Context < InitHarvester >",
      "harvester_id: u64",
      "harvester_type: HarvesterType"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let harvester = & mut ctx . accounts . harvester_data ;"
      },
      {
        "id": 10,
        "label": "harvester . parent_harvest = ctx . accounts . harvest_core . key () ;"
      },
      {
        "id": 11,
        "label": "harvester . harvester_id = harvester_id . checked_add (101) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 12,
        "label": "harvester . harvester_type = harvester_type ;"
      },
      {
        "id": 13,
        "label": "harvester . harvest_count = 0 ;"
      },
      {
        "id": 14,
        "label": "harvester . efficiency = 50 ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"New harvester {} of type {:?} created.\" , harvester . harvester_id , harvester . harvester_type) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: harvester"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: harvester"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: harvester"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: harvester"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: harvester"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: harvester"
      }
    ]
  },
  {
    "name": "harvest_resources",
    "inputs": [
      "ctx: Context < HarvestResources >",
      "cycles: u32"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let harvest = & mut ctx . accounts . harvest_core ;"
      },
      {
        "id": 19,
        "label": "let harvester = & mut ctx . accounts . harvester ;"
      },
      {
        "id": 20,
        "label": "for _i in 0 .. cycles { match harvester . harvester_type { HarvesterType :: Miner => { harvester . harvest_count = harvester . harvest_count . checked_add (10) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (1) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , HarvesterType :: Gatherer => { harvester . harvest_count = harvester . harvest_count . checked_add (5) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (2) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , HarvesterType :: Collector => { harvester . harvest_count = harvester . harvest_count . checked_add (20) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (3) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , } }"
      },
      {
        "id": 21,
        "label": "match harvester . harvester_type { HarvesterType :: Miner => { harvester . harvest_count = harvester . harvest_count . checked_add (10) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (1) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , HarvesterType :: Gatherer => { harvester . harvest_count = harvester . harvest_count . checked_add (5) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (2) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , HarvesterType :: Collector => { harvester . harvest_count = harvester . harvest_count . checked_add (20) . unwrap_or (u32 :: MAX) ; harvester . efficiency = harvester . efficiency . checked_add (3) . unwrap_or (u32 :: MAX) ; harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ; } , }"
      },
      {
        "id": 22,
        "label": "harvester . harvest_count = harvester . harvest_count . checked_add (10) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 23,
        "label": "harvester . efficiency = harvester . efficiency . checked_add (1) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 24,
        "label": "harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 25,
        "label": "harvester . harvest_count = harvester . harvest_count . checked_add (5) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 26,
        "label": "harvester . efficiency = harvester . efficiency . checked_add (2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 28,
        "label": "harvester . harvest_count = harvester . harvest_count . checked_add (20) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 29,
        "label": "harvester . efficiency = harvester . efficiency . checked_add (3) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "harvest . total_resources = harvest . total_resources . checked_add (harvester . harvest_count as u64) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 31,
        "label": "harvest . is_active = harvest . total_resources > 0 ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Harvester {} performed {} cycles. Total resources collected: {}.\" , harvester . harvester_id , cycles , harvester . harvest_count) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: harvest"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: harvester"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: harvest"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: harvester"
      },
      {
        "from": 18,
        "to": 31,
        "label": "data_dep: harvest"
      },
      {
        "from": 18,
        "to": 31,
        "label": "data_dep: harvest"
      }
    ]
  }
]