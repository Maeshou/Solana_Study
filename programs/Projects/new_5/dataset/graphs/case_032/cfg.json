[
  {
    "name": "init_referee",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . referee ;"
      },
      {
        "id": 2,
        "label": "r . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "r . seed = seed ;"
      },
      {
        "id": 4,
        "label": "r . rng = seed ^ 0xA5A5_A5A5 ;"
      },
      {
        "id": 5,
        "label": "r . rounds = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_board",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 9,
        "label": "b . parent = ctx . accounts . referee . key () ;"
      },
      {
        "id": 10,
        "label": "b . slot = slot ;"
      },
      {
        "id": 11,
        "label": "b . phase = Warmup ;"
      },
      {
        "id": 12,
        "label": "b . score = 0 ;"
      },
      {
        "id": 13,
        "label": "b . combos = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "tally_pair",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let r = & mut ctx . accounts . referee ;"
      },
      {
        "id": 17,
        "label": "let b1 = & mut ctx . accounts . a_board ;"
      },
      {
        "id": 18,
        "label": "let b2 = & mut ctx . accounts . b_board ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "r . rng = r . rng . rotate_left (5) ^ (r . seed . rotate_right (3)) ;"
      },
      {
        "id": 21,
        "label": "r . rounds = r . rounds . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "Loop End"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "(r . rng & 1) == 1"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "b1 . phase = Active ;"
      },
      {
        "id": 28,
        "label": "b1 . score = b1 . score . saturating_add (boost + (r . rounds as u32 & 31)) ;"
      },
      {
        "id": 29,
        "label": "b1 . combos = b1 . combos . saturating_add (2) ;"
      },
      {
        "id": 30,
        "label": "r . seed = r . seed ^ 0x5F5F_5F5F ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"B1 active; score={}, combos={}\" , b1 . score , b1 . combos) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "b1 . phase = Cooldown ;"
      },
      {
        "id": 34,
        "label": "b1 . score = b1 . score / 2 + (b1 . combos & 7) ;"
      },
      {
        "id": 35,
        "label": "b1 . combos = b1 . combos . saturating_sub (1) ;"
      },
      {
        "id": 36,
        "label": "r . seed = r . seed / 3 + 17 ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"B1 cool; score={}, combos={}\" , b1 . score , b1 . combos) ;"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "Loop Start"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "(b2 . slot as u32 + r . rounds as u32) & 3 == 0"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "b2 . phase = Active ;"
      },
      {
        "id": 45,
        "label": "b2 . combos = b2 . combos . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "b2 . score = b2 . score . saturating_add (5 + (r . seed & 15)) ;"
      },
      {
        "id": 47,
        "label": "msg ! (\"B2 chain+; score={}, combos={}\" , b2 . score , b2 . combos) ;"
      },
      {
        "id": 48,
        "label": "False body"
      },
      {
        "id": 49,
        "label": "b2 . phase = Warmup ;"
      },
      {
        "id": 50,
        "label": "b2 . score = b2 . score . saturating_sub (b2 . score . min (3)) ;"
      },
      {
        "id": 51,
        "label": "r . rng = r . rng ^ (b2 . score as u32) ;"
      },
      {
        "id": 52,
        "label": "msg ! (\"B2 warm; score={}, rng={}\" , b2 . score , r . rng) ;"
      },
      {
        "id": 53,
        "label": "merge"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "for"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 23,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 31,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 40,
        "to": 48,
        "label": "false"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 47,
        "to": 53,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 39,
        "to": 54,
        "label": "for"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]