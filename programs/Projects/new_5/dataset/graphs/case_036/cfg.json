[
  {
    "name": "init_team",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let team = & mut ctx . accounts . team ;"
      },
      {
        "id": 2,
        "label": "team . captain = ctx . accounts . captain . key () ;"
      },
      {
        "id": 3,
        "label": "team . team_id = team_id ;"
      },
      {
        "id": 4,
        "label": "team . name = name ;"
      },
      {
        "id": 5,
        "label": "team . member_count = 0 ;"
      },
      {
        "id": 6,
        "label": "team . is_active = true ;"
      },
      {
        "id": 7,
        "label": "msg ! (\"Team '{}' initialized.\" , team . name) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_member",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let member = & mut ctx . accounts . member ;"
      },
      {
        "id": 11,
        "label": "let team = & mut ctx . accounts . team ;"
      },
      {
        "id": 12,
        "label": "member . team = team . key () ;"
      },
      {
        "id": 13,
        "label": "member . member_id = member_id ;"
      },
      {
        "id": 14,
        "label": "member . player = ctx . accounts . player . key () ;"
      },
      {
        "id": 15,
        "label": "member . status = MemberStatus :: Active ;"
      },
      {
        "id": 16,
        "label": "member . last_login = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 17,
        "label": "team . member_count = team . member_count . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Member {} joined team {}.\" , member . member_id , team . name) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_member_status",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let member_a = & mut ctx . accounts . member_a ;"
      },
      {
        "id": 22,
        "label": "let member_b = & mut ctx . accounts . member_b ;"
      },
      {
        "id": 23,
        "label": "let current_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 24,
        "label": "let mut loop_count = 0 ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "current_time - member_a . last_login > 86400"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "member_a . status = MemberStatus :: Inactive ;"
      },
      {
        "id": 31,
        "label": "member_a . last_login = current_time ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Member A status changed to Inactive.\") ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "member_a . last_login = current_time ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"Member A last login updated.\") ;"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "current_time - member_b . last_login > 86400 * 2"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "member_b . status = MemberStatus :: Kicked ;"
      },
      {
        "id": 42,
        "label": "member_b . last_login = current_time ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"Member B status changed to Kicked.\") ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "member_b . last_login = current_time ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Member B last login updated.\") ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 26,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 32,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 37,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 43,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 25,
        "to": 49,
        "label": "while"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]