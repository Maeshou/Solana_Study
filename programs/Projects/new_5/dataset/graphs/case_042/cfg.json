[
  {
    "name": "init_item",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let item = & mut ctx . accounts . item ;"
      },
      {
        "id": 2,
        "label": "item . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "item . item_id = item_id ;"
      },
      {
        "id": 4,
        "label": "item . base_power = base_power ;"
      },
      {
        "id": 5,
        "label": "item . level = 0 ;"
      },
      {
        "id": 6,
        "label": "item . upgrade_cost = 100 ;"
      },
      {
        "id": 7,
        "label": "item . rarity_level = Rarity :: Common ;"
      },
      {
        "id": 8,
        "label": "item . is_locked = false ;"
      },
      {
        "id": 9,
        "label": "msg ! (\"Item {} initialized with base power {}\" , item . item_id , item . base_power) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "enhance_item",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let item = & mut ctx . accounts . item ;"
      },
      {
        "id": 13,
        "label": "let material = & mut ctx . accounts . material ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "item . is_locked"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "return Err (ErrorCode :: ItemLocked . into ()) ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "let mut success_chance_sum = 0.0 ;"
      },
      {
        "id": 23,
        "label": "let mut total_added_power = 0 ;"
      },
      {
        "id": 24,
        "label": "let mut loops_run = 0 ;"
      },
      {
        "id": 25,
        "label": "let max_loops = 5 ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "material . count == 0"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "break ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "let bonus_factor = if item . level > 10 { 1.2 } else { 1.0 } ;"
      },
      {
        "id": 36,
        "label": "let success_roll = 1.0 - (loops_run as f64 * 0.1) ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "success_roll > 0.5"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "let added_power = (material . power as f64 * bonus_factor) as u16 ;"
      },
      {
        "id": 42,
        "label": "item . base_power = item . base_power . checked_add (added_power) . unwrap_or (u16 :: MAX) ;"
      },
      {
        "id": 43,
        "label": "total_added_power += added_power ;"
      },
      {
        "id": 44,
        "label": "success_chance_sum += success_roll ;"
      },
      {
        "id": 45,
        "label": "material . count -= 1 ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "item . upgrade_cost = item . upgrade_cost . saturating_add (10) ;"
      },
      {
        "id": 48,
        "label": "item . level = item . level . saturating_sub (1) ;"
      },
      {
        "id": 49,
        "label": "material . count = material . count . saturating_sub (1) ;"
      },
      {
        "id": 50,
        "label": "msg ! (\"Enhancement failed, item level decreased and cost increased.\") ;"
      },
      {
        "id": 51,
        "label": "break ;"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "loops_run += 1 ;"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "if statement"
      },
      {
        "id": 56,
        "label": "predicate"
      },
      {
        "id": 57,
        "label": "item . base_power > 2000"
      },
      {
        "id": 58,
        "label": "True body"
      },
      {
        "id": 59,
        "label": "item . rarity_level = Rarity :: Legendary ;"
      },
      {
        "id": 60,
        "label": "msg ! (\"Item upgraded to Legendary rarity!\") ;"
      },
      {
        "id": 61,
        "label": "False body"
      },
      {
        "id": 62,
        "label": "item . rarity_level = Rarity :: Rare ;"
      },
      {
        "id": 63,
        "label": "msg ! (\"Item upgraded to Rare rarity.\") ;"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "msg ! (\"Enhanced item {} with {} total added power. New power: {}\" , item . item_id , total_added_power , item . base_power) ;"
      },
      {
        "id": 66,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 37,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 45,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 26,
        "to": 54,
        "label": "while"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "predicate"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "true"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 55,
        "to": 61,
        "label": "false"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 60,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      }
    ]
  }
]