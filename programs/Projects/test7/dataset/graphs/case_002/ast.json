[
  {
    "name": "deposit_and_merge",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < DepositAndMerge >",
      "deposit_amount: u64"
    ],
    "attributes": [
      "# [doc = \" 1) DepositAccount に lamports を加算するが owner チェックを行わない\"]",
      "# [doc = \" 2) 同じ型の mutable アカウントを 2 つ受け取るが重複チェックを行わずデータをマージする\"]"
    ],
    "body": [
      "let deposit_acc = & ctx . accounts . deposit_account ;",
      "let dup_acc1 = & ctx . accounts . dup_account1 ;",
      "let dup_acc2 = & ctx . accounts . dup_account2 ;",
      "let original = * * deposit_acc . try_borrow_lamports () ? ;",
      "let new_balance = original + deposit_amount ;",
      "* * deposit_acc . try_borrow_mut_lamports () ? = new_balance ;",
      "let raw1 = dup_acc1 . try_borrow_data () ? ;",
      "let raw2 = dup_acc2 . try_borrow_data () ? ;",
      "let v1 = raw1 [0] ;",
      "let v2 = raw2 [0] ;",
      "let sum = v1 . wrapping_mul (2) . wrapping_add (v2) ;",
      "let mut raw1_mut = dup_acc1 . try_borrow_mut_data () ? ;",
      "raw1_mut [0] = sum ;",
      "let mut raw2_mut = dup_acc2 . try_borrow_mut_data () ? ;",
      "raw2_mut [0] = sum . wrapping_add (2) ;",
      "Ok (())"
    ]
  },
  {
    "name": "DepositAndMerge",
    "node_type": "struct",
    "fields": [
      {
        "name": "deposit_account",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "dup_account1",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "dup_account2",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]