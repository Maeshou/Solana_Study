[
  {
    "name": "assign_title",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < AssignTitle >",
      "level: u64"
    ],
    "attributes": [
      "# [doc = \" ユーザーの活動レベルに応じて称号を生成し、PDA に上書き保存します。\"]",
      "# [doc = \" - `level`: 送信された活動レベル  \"]",
      "# [doc = \" 署名チェックは一切含まれません。分岐・ループも使わずに算術と文字列スライスのみで実現。\"]"
    ],
    "body": [
      "let data = & mut ctx . accounts . user_title ;",
      "const STEP : u64 = 10 ;",
      "let raw = level / STEP ;",
      "let capped = 4u64 . saturating_sub (4u64 . saturating_sub (raw)) ;",
      "const ALL : & str = \"BronzeSilverGoldPlatinumDiamond\" ;",
      "const IDX : [usize ; 6] = [0 , 6 , 12 , 16 , 24 , 31] ;",
      "let start = IDX [capped as usize] ;",
      "let end = IDX [(capped + 1) as usize] ;",
      "let title = & ALL [start .. end] ;",
      "data . level = level ;",
      "data . title = title . into () ;"
    ]
  },
  {
    "name": "AssignTitle",
    "node_type": "struct",
    "fields": [
      {
        "name": "user",
        "attribute": "# [doc = \" 実際のユーザー（AccountInfo のまま、署名チェック omitted intentionally）\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user_title",
        "attribute": "# [doc = \" 事前に初期化されたユーザー称号 PDA\"] # [account (mut , seeds = [b\"title\" , user . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , TitleData >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "TitleData",
    "node_type": "struct",
    "fields": [
      {
        "name": "level",
        "attribute": "# [doc = \" 最後に設定された活動レベル\"]",
        "field_type": "u64"
      },
      {
        "name": "title",
        "attribute": "# [doc = \" 割り当てられた称号\"]",
        "field_type": "String"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]