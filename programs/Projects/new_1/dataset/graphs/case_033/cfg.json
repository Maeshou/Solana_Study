[
  {
    "name": "freeze_nft",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let info = & mut ctx . accounts . nft_info ;"
      },
      {
        "id": 2,
        "label": "info . frozen = true ;"
      },
      {
        "id": 3,
        "label": "msg ! (\"VULN: NFT {} frozen by operator {}\" , info . mint , ctx . accounts . operator . key ()) ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "unfreeze_nft",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let info = & mut ctx . accounts . nft_info ;"
      },
      {
        "id": 7,
        "label": "info . frozen = false ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"VULN: NFT {} unfrozen by operator {}\" , info . mint , ctx . accounts . operator . key ()) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "set_penalty_rate",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let cfg = & mut ctx . accounts . penalty_cfg ;"
      },
      {
        "id": 12,
        "label": "cfg . rate = new_rate ;"
      },
      {
        "id": 13,
        "label": "msg ! (\"VULN: Penalty rate set to {}% by {}\" , new_rate , ctx . accounts . admin . key ()) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "collect_penalty",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let info = & mut ctx . accounts . nft_info ;"
      },
      {
        "id": 17,
        "label": "let vault = & mut ctx . accounts . penalty_vault ;"
      },
      {
        "id": 18,
        "label": "let cfg = & ctx . accounts . penalty_cfg ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "info . frozen"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "let amount = vault . collected . checked_add (cfg . rate as u64) . unwrap () ;"
      },
      {
        "id": 24,
        "label": "vault . collected = amount ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"VULN: Collected {} tokens from NFT {} (rate {}%)\" , cfg . rate , info . mint , cfg . rate) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "msg ! (\"NFT {} is not frozen; no penalty collected\" , info . mint) ;"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 19,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]