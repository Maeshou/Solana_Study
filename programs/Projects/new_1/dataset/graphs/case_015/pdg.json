[
  {
    "name": "init_pool",
    "inputs": [
      "ctx: Context < InitPool >",
      "seed_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let payer = ctx . accounts . payer . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let pool = ctx . accounts . pool . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "let stats = & mut ctx . accounts . stats ;"
      },
      {
        "id": 4,
        "label": "let init = & ctx . accounts . initializer ;"
      },
      {
        "id": 5,
        "label": "let ix = system_instruction :: transfer (payer . key , pool . key , seed_amount ,) ;"
      },
      {
        "id": 6,
        "label": "invoke (& ix , & [payer . clone () , pool . clone () , ctx . accounts . system_program . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 7,
        "label": "stats . total_seeded = seed_amount ;"
      },
      {
        "id": 8,
        "label": "stats . operations_count = 1 ;"
      },
      {
        "id": 9,
        "label": "stats . last_amount = seed_amount ;"
      },
      {
        "id": 10,
        "label": "emit ! (PoolInitEvent { initializer : * init . key , amount : seed_amount , }) ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: payer"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: pool"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: stats"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: init"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: ix"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: payer"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: pool"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: ix"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: payer"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: pool"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: stats"
      },
      {
        "from": 3,
        "to": 8,
        "label": "data_dep: stats"
      },
      {
        "from": 3,
        "to": 9,
        "label": "data_dep: stats"
      }
    ]
  },
  {
    "name": "refill",
    "inputs": [
      "ctx: Context < RefillPool >",
      "top_up: u64",
      "fee_bips: u16"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let funder = ctx . accounts . funder . to_account_info () ;"
      },
      {
        "id": 14,
        "label": "let pool = ctx . accounts . pool . to_account_info () ;"
      },
      {
        "id": 15,
        "label": "let maintenance = ctx . accounts . maintenance . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "let stats = & mut ctx . accounts . stats ;"
      },
      {
        "id": 17,
        "label": "let fee_amount = top_up . checked_mul (fee_bips as u64) . unwrap () . checked_div (10_000) . unwrap () ;"
      },
      {
        "id": 18,
        "label": "let actual_fund = top_up . checked_sub (fee_amount) . unwrap () ;"
      },
      {
        "id": 19,
        "label": "let fee_ix = system_instruction :: transfer (funder . key , maintenance . key , fee_amount ,) ;"
      },
      {
        "id": 20,
        "label": "invoke (& fee_ix , & [funder . clone () , maintenance . clone () , ctx . accounts . system_program . to_account_info ()] ,) ? ;"
      },
      {
        "id": 21,
        "label": "let top_up_ix = system_instruction :: transfer (funder . key , pool . key , actual_fund ,) ;"
      },
      {
        "id": 22,
        "label": "invoke (& top_up_ix , & [funder . clone () , pool . clone () , ctx . accounts . system_program . to_account_info ()] ,) ? ;"
      },
      {
        "id": 23,
        "label": "stats . total_refilled = stats . total_refilled . checked_add (top_up) . unwrap () ;"
      },
      {
        "id": 24,
        "label": "stats . operations_count += 1 ;"
      },
      {
        "id": 25,
        "label": "stats . last_amount = top_up ;"
      },
      {
        "id": 26,
        "label": "emit ! (RefillEvent { funder : * ctx . accounts . funder . key , topped_up : top_up , fee : fee_amount , }) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: funder"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: pool"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: maintenance"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: stats"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: fee_amount"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: actual_fund"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: fee_amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: fee_ix"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: funder"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: maintenance"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: fee_amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: fee_ix"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: funder"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: maintenance"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: top_up_ix"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: funder"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: pool"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: actual_fund"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: top_up_ix"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: funder"
      },
      {
        "from": 14,
        "to": 22,
        "label": "data_dep: pool"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: stats"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: stats"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: stats"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: stats"
      }
    ]
  },
  {
    "name": "payout",
    "inputs": [
      "ctx: Context < Payout >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 28,
        "label": "Entry"
      },
      {
        "id": 29,
        "label": "let pool = ctx . accounts . pool . to_account_info () ;"
      },
      {
        "id": 30,
        "label": "let r1 = ctx . accounts . recipient_one . to_account_info () ;"
      },
      {
        "id": 31,
        "label": "let r2 = ctx . accounts . recipient_two . to_account_info () ;"
      },
      {
        "id": 32,
        "label": "let r3 = ctx . accounts . recipient_three . to_account_info () ;"
      },
      {
        "id": 33,
        "label": "let stats = & mut ctx . accounts . stats ;"
      },
      {
        "id": 34,
        "label": "let share = amount . checked_div (3) . unwrap () ;"
      },
      {
        "id": 35,
        "label": "let ix1 = system_instruction :: transfer (pool . key , r1 . key , share) ;"
      },
      {
        "id": 36,
        "label": "invoke (& ix1 , & [pool . clone () , r1 . clone () , ctx . accounts . system_program . to_account_info ()]) ? ;"
      },
      {
        "id": 37,
        "label": "let ix2 = system_instruction :: transfer (pool . key , r2 . key , share) ;"
      },
      {
        "id": 38,
        "label": "invoke (& ix2 , & [pool . clone () , r2 . clone () , ctx . accounts . system_program . to_account_info ()]) ? ;"
      },
      {
        "id": 39,
        "label": "let ix3 = system_instruction :: transfer (pool . key , r3 . key , share) ;"
      },
      {
        "id": 40,
        "label": "invoke (& ix3 , & [pool . clone () , r3 . clone () , ctx . accounts . system_program . to_account_info ()]) ? ;"
      },
      {
        "id": 41,
        "label": "stats . total_payouts = stats . total_payouts . checked_add (amount) . unwrap () ;"
      },
      {
        "id": 42,
        "label": "stats . operations_count += 1 ;"
      },
      {
        "id": 43,
        "label": "stats . last_amount = amount ;"
      },
      {
        "id": 44,
        "label": "emit ! (PayoutEvent { origin : * ctx . accounts . pool . key , total : amount , each : share , }) ;"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 29,
        "to": 29,
        "label": "def: pool"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: r1"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: r2"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: r3"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: stats"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: share"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: ix1"
      },
      {
        "from": 29,
        "to": 35,
        "label": "data_dep: pool"
      },
      {
        "from": 30,
        "to": 35,
        "label": "data_dep: r1"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: share"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: ix1"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: pool"
      },
      {
        "from": 30,
        "to": 36,
        "label": "data_dep: r1"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: ix2"
      },
      {
        "from": 29,
        "to": 37,
        "label": "data_dep: pool"
      },
      {
        "from": 31,
        "to": 37,
        "label": "data_dep: r2"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: share"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: ix2"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: pool"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: r2"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: ix3"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: pool"
      },
      {
        "from": 32,
        "to": 39,
        "label": "data_dep: r3"
      },
      {
        "from": 34,
        "to": 39,
        "label": "data_dep: share"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: ix3"
      },
      {
        "from": 29,
        "to": 40,
        "label": "data_dep: pool"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: r3"
      },
      {
        "from": 33,
        "to": 41,
        "label": "data_dep: stats"
      },
      {
        "from": 33,
        "to": 41,
        "label": "data_dep: stats"
      },
      {
        "from": 33,
        "to": 42,
        "label": "data_dep: stats"
      },
      {
        "from": 33,
        "to": 43,
        "label": "data_dep: stats"
      }
    ]
  }
]