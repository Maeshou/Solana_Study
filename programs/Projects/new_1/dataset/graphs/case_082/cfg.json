[
  {
    "name": "configure",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let cfg = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "cfg . lamports_per_nft = lamports_per_nft ;"
      },
      {
        "id": 3,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      }
    ]
  },
  {
    "name": "withdraw",
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let cfg = & ctx . accounts . config ;"
      },
      {
        "id": 6,
        "label": "let vault_info = ctx . accounts . vault . to_account_info () ;"
      },
      {
        "id": 7,
        "label": "let recipient_info = ctx . accounts . recipient . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "let total = cfg . lamports_per_nft . checked_mul (nft_count) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 9,
        "label": "let vault_balance = * * vault_info . lamports . borrow () ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "vault_balance < total"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "return Err (ErrorCode :: InsufficientFunds . into ()) ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "No-op"
      },
      {
        "id": 17,
        "label": "merge"
      },
      {
        "id": 18,
        "label": "* * vault_info . lamports . borrow_mut () = vault_balance - total ;"
      },
      {
        "id": 19,
        "label": "* * recipient_info . lamports . borrow_mut () = * * recipient_info . lamports . borrow () + total ;"
      },
      {
        "id": 20,
        "label": "Ok (total)"
      }
    ],
    "edges": [
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  }
]