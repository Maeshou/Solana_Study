[
  {
    "name": "initialize_registry",
    "inputs": [
      "ctx: Context < InitializeRegistry >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 2,
        "label": "registry . members = Vec :: new () ;"
      },
      {
        "id": 3,
        "label": "registry . user_data = Vec :: new () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: registry"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: registry"
      }
    ]
  },
  {
    "name": "register_user",
    "inputs": [
      "ctx: Context < RegisterUser >",
      "nickname: String"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 7,
        "label": "registry . members . push (ctx . accounts . user . key ()) ;"
      },
      {
        "id": 8,
        "label": "registry . user_data . push (nickname) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: registry"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: registry"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: registry"
      }
    ]
  },
  {
    "name": "unregister_user",
    "inputs": [
      "ctx: Context < UnregisterUser >"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 12,
        "label": "let target = ctx . accounts . user . key () ;"
      },
      {
        "id": 13,
        "label": "if let Some (idx) = registry . members . iter () . position (| & k | k == target) { registry . members . swap_remove (idx) ; registry . user_data . swap_remove (idx) ; }"
      },
      {
        "id": 14,
        "label": "registry . members . swap_remove (idx) ;"
      },
      {
        "id": 15,
        "label": "registry . user_data . swap_remove (idx) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: registry"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: target"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: registry"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: target"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: registry"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: registry"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: registry"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: registry"
      }
    ]
  }
]