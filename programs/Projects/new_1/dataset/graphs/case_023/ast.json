[
  {
    "name": "register_skin",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RegisterSkin >",
      "name: String",
      "symbol: String",
      "uri: String",
      "description: String"
    ],
    "attributes": [
      "# [doc = \" オリジナルスキン情報をオンチェーンに登録\"]",
      "# [doc = \" ──────────────────────────────────────────────\"]",
      "# [doc = \" name       : 入力された名称を大文字化して保存  \"]",
      "# [doc = \" symbol     : 入力されたシンボルを逆順にして保存  \"]",
      "# [doc = \" uri        : タイムスタンプを付与して保存  \"]",
      "# [doc = \" description: クォートで囲んで保存  \"]"
    ],
    "body": [
      "let ts = ctx . accounts . clock . unix_timestamp ;",
      "let up_name = name . to_uppercase () ;",
      "let rev_symbol = symbol . chars () . rev () . collect :: < String > () ;",
      "let uri_ts = format ! (\"{}?ts={}\" , uri , ts) ;",
      "let desc_quoted = format ! (\"\\\"{}\\\"\" , description) ;",
      "let skin = & mut ctx . accounts . skin_pda ;",
      "skin . owner = * ctx . accounts . user . key ;",
      "skin . created_at = ts ;",
      "skin . name = up_name ;",
      "skin . symbol = rev_symbol ;",
      "skin . uri = uri_ts ;",
      "skin . description = desc_quoted ;"
    ]
  },
  {
    "name": "mint_genesis",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < MintGenesis >"
    ],
    "attributes": [
      "# [doc = \" 登録済みスキンをもとにジェネシス情報をPDAに保存\"]",
      "# [doc = \" ──────────────────────────────────────────────\"]",
      "# [doc = \" 別途オフチェーンでNFT発行する想定の簡易版\"]"
    ],
    "body": [
      "let ts = ctx . accounts . clock . unix_timestamp ;",
      "let skin = ctx . accounts . skin_pda . key () ;",
      "let bytes = ctx . accounts . genesis_pda . key () . to_bytes () ;",
      "let mut arr = [0u8 ; 8] ;",
      "arr . copy_from_slice (& bytes [.. 8]) ;",
      "let serial = u64 :: from_le_bytes (arr) ;",
      "let gen = & mut ctx . accounts . genesis_pda ;",
      "gen . owner = * ctx . accounts . user . key ;",
      "gen . skin = skin ;",
      "gen . issued_at = ts ;",
      "gen . serial = serial ;"
    ]
  },
  {
    "name": "SkinPda",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "created_at",
        "attribute": null,
        "field_type": "i64"
      },
      {
        "name": "name",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "symbol",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "uri",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "description",
        "attribute": null,
        "field_type": "String"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RegisterSkin",
    "node_type": "struct",
    "fields": [
      {
        "name": "fee_payer",
        "attribute": "# [doc = \" この tx の手数料を支払うアカウント（署名必須）\"] # [account (mut)]",
        "field_type": "ProgramAccount < 'info , Signer >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" 脆弱性として署名チェックを省略する対象アカウント\"] # [doc = \" (本来なら Signer<'info> とすべきところを AccountInfo<'info> のまま)\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "skin_pda",
        "attribute": "# [doc = \" スキン情報を保持する PDA\"] # [account (init_if_needed , payer = fee_payer , space = 8 + 32 + 8 + 4 * 4 + 512 , seeds = [b\"skin\" , user . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , SkinPda >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      },
      {
        "name": "rent",
        "attribute": null,
        "field_type": "Sysvar < 'info , Rent >"
      },
      {
        "name": "clock",
        "attribute": null,
        "field_type": "Sysvar < 'info , Clock >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "GenesisPda",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "skin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "issued_at",
        "attribute": null,
        "field_type": "i64"
      },
      {
        "name": "serial",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MintGenesis",
    "node_type": "struct",
    "fields": [
      {
        "name": "fee_payer",
        "attribute": "# [doc = \" 手数料支払い用アカウント（署名必須）\"] # [account (mut)]",
        "field_type": "ProgramAccount < 'info , Signer >"
      },
      {
        "name": "skin_pda",
        "attribute": "# [doc = \" 登録済み SkinPda (owner チェックのみ)\"] # [account (seeds = [b\"skin\" , user . key () . as_ref ()] , bump , has_one = owner @ ErrorCode :: Unauthorized)]",
        "field_type": "Account < 'info , SkinPda >"
      },
      {
        "name": "owner",
        "attribute": "# [doc = \" owner 検証用 (PDA.owner と照合するのみ)\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "genesis_pda",
        "attribute": "# [doc = \" ジェネシス情報を保持する PDA\"] # [account (init , payer = fee_payer , space = 8 + 32 + 32 + 8 + 8 , seeds = [b\"genesis\" , user . key () . as_ref () , skin_pda . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , GenesisPda >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" 署名チェック omitted intentionally\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      },
      {
        "name": "rent",
        "attribute": null,
        "field_type": "Sysvar < 'info , Rent >"
      },
      {
        "name": "clock",
        "attribute": null,
        "field_type": "Sysvar < 'info , Clock >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]