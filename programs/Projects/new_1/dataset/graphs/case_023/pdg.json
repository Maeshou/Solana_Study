[
  {
    "name": "register_skin",
    "inputs": [
      "ctx: Context < RegisterSkin >",
      "name: String",
      "symbol: String",
      "uri: String",
      "description: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ts = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 2,
        "label": "let up_name = name . to_uppercase () ;"
      },
      {
        "id": 3,
        "label": "let rev_symbol = symbol . chars () . rev () . collect :: < String > () ;"
      },
      {
        "id": 4,
        "label": "let uri_ts = format ! (\"{}?ts={}\" , uri , ts) ;"
      },
      {
        "id": 5,
        "label": "let desc_quoted = format ! (\"\\\"{}\\\"\" , description) ;"
      },
      {
        "id": 6,
        "label": "let skin = & mut ctx . accounts . skin_pda ;"
      },
      {
        "id": 7,
        "label": "skin . owner = * ctx . accounts . user . key ;"
      },
      {
        "id": 8,
        "label": "skin . created_at = ts ;"
      },
      {
        "id": 9,
        "label": "skin . name = up_name ;"
      },
      {
        "id": 10,
        "label": "skin . symbol = rev_symbol ;"
      },
      {
        "id": 11,
        "label": "skin . uri = uri_ts ;"
      },
      {
        "id": 12,
        "label": "skin . description = desc_quoted ;"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: ts"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: up_name"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: rev_symbol"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: uri_ts"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: desc_quoted"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: skin"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: skin"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: skin"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: ts"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: skin"
      },
      {
        "from": 2,
        "to": 9,
        "label": "data_dep: up_name"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: skin"
      },
      {
        "from": 3,
        "to": 10,
        "label": "data_dep: rev_symbol"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: skin"
      },
      {
        "from": 4,
        "to": 11,
        "label": "data_dep: uri_ts"
      },
      {
        "from": 6,
        "to": 12,
        "label": "data_dep: skin"
      },
      {
        "from": 5,
        "to": 12,
        "label": "data_dep: desc_quoted"
      }
    ]
  },
  {
    "name": "mint_genesis",
    "inputs": [
      "ctx: Context < MintGenesis >"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let ts = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 15,
        "label": "let skin = ctx . accounts . skin_pda . key () ;"
      },
      {
        "id": 16,
        "label": "let bytes = ctx . accounts . genesis_pda . key () . to_bytes () ;"
      },
      {
        "id": 17,
        "label": "let mut arr = [0u8 ; 8] ;"
      },
      {
        "id": 18,
        "label": "arr . copy_from_slice (& bytes [.. 8]) ;"
      },
      {
        "id": 19,
        "label": "let serial = u64 :: from_le_bytes (arr) ;"
      },
      {
        "id": 20,
        "label": "let gen = & mut ctx . accounts . genesis_pda ;"
      },
      {
        "id": 21,
        "label": "gen . owner = * ctx . accounts . user . key ;"
      },
      {
        "id": 22,
        "label": "gen . skin = skin ;"
      },
      {
        "id": 23,
        "label": "gen . issued_at = ts ;"
      },
      {
        "id": 24,
        "label": "gen . serial = serial ;"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: ts"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: skin"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: bytes"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: arr"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: arr"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: bytes"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: serial"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: arr"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: gen"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: gen"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: gen"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: skin"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: gen"
      },
      {
        "from": 14,
        "to": 23,
        "label": "data_dep: ts"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: gen"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: serial"
      }
    ]
  }
]