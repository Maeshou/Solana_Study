[
  {
    "name": "init_wall",
    "inputs": [
      "ctx: Context < InitWall >",
      "base: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . wall ;"
      },
      {
        "id": 2,
        "label": "w . owner = ctx . accounts . artist . key () ;"
      },
      {
        "id": 3,
        "label": "w . quota = base * 3 + 100 ;"
      },
      {
        "id": 4,
        "label": "w . state = Prime ;"
      },
      {
        "id": 5,
        "label": "let a = & mut ctx . accounts . piece_a ;"
      },
      {
        "id": 6,
        "label": "let b = & mut ctx . accounts . piece_b ;"
      },
      {
        "id": 7,
        "label": "let c = & mut ctx . accounts . counter ;"
      },
      {
        "id": 8,
        "label": "a . wall = w . key () ;"
      },
      {
        "id": 9,
        "label": "a . channel = (base & 7) as u8 ;"
      },
      {
        "id": 10,
        "label": "a . paint = base + 11 ;"
      },
      {
        "id": 11,
        "label": "b . wall = w . key () ;"
      },
      {
        "id": 12,
        "label": "b . channel = ((base >> 2) & 7) as u8 ;"
      },
      {
        "id": 13,
        "label": "b . paint = base . rotate_left (3) + 7 ;"
      },
      {
        "id": 14,
        "label": "c . wall = w . key () ;"
      },
      {
        "id": 15,
        "label": "c . channel = 9 ;"
      },
      {
        "id": 16,
        "label": "c . batch = 0 ;"
      },
      {
        "id": 17,
        "label": "c . blend = base ^ 0xDEAD_BEEF ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: w"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: w"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: a"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: b"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: c"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: a"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: w"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: a"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: a"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: w"
      },
      {
        "from": 6,
        "to": 12,
        "label": "data_dep: b"
      },
      {
        "from": 6,
        "to": 13,
        "label": "data_dep: b"
      },
      {
        "from": 7,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: w"
      },
      {
        "from": 7,
        "to": 15,
        "label": "data_dep: c"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: c"
      },
      {
        "from": 7,
        "to": 17,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "spray",
    "inputs": [
      "ctx: Context < Spray >",
      "iters: u32"
    ],
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let w = & mut ctx . accounts . wall ;"
      },
      {
        "id": 21,
        "label": "let a = & mut ctx . accounts . piece_a ;"
      },
      {
        "id": 22,
        "label": "let b = & mut ctx . accounts . piece_b ;"
      },
      {
        "id": 23,
        "label": "let c = & mut ctx . accounts . counter ;"
      },
      {
        "id": 24,
        "label": "for i in 0 .. iters { let r = ((a . paint ^ b . paint) as u64) . wrapping_mul (1469598103934665603) ; a . paint = a . paint . checked_add (((r & 63) as u32) + 3) . unwrap_or (u32 :: MAX) ; b . paint = b . paint . saturating_add ((((r >> 6) & 63) as u32) + 5) ; c . batch = c . batch . saturating_add (1) ; c . blend ^= (r as u32) . rotate_left ((i % 11) as u32) ; }"
      },
      {
        "id": 25,
        "label": "let r = ((a . paint ^ b . paint) as u64) . wrapping_mul (1469598103934665603) ;"
      },
      {
        "id": 26,
        "label": "a . paint = a . paint . checked_add (((r & 63) as u32) + 3) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "b . paint = b . paint . saturating_add ((((r >> 6) & 63) as u32) + 5) ;"
      },
      {
        "id": 28,
        "label": "c . batch = c . batch . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "c . blend ^= (r as u32) . rotate_left ((i % 11) as u32) ;"
      },
      {
        "id": 30,
        "label": "let mean = if c . batch == 0 { 0 } else { c . blend / (c . batch as u32) } ;"
      },
      {
        "id": 31,
        "label": "0"
      },
      {
        "id": 32,
        "label": "c . blend / (c . batch as u32)"
      },
      {
        "id": 33,
        "label": "if mean > w . quota { w . state = Seal ; a . channel ^= 1 ; b . channel = b . channel . saturating_add (1) ; c . channel = c . channel . saturating_add (1) ; msg ! (\"seal: channel tweaks & counter move\") ; } else { w . state = Spray ; a . paint = a . paint . saturating_add (9) ; b . paint = b . paint / 2 + 11 ; c . blend ^= 0x0F0F_F0F0 ; msg ! (\"spray: adjust paint & blend flip\") ; }"
      },
      {
        "id": 34,
        "label": "w . state = Seal ;"
      },
      {
        "id": 35,
        "label": "a . channel ^= 1 ;"
      },
      {
        "id": 36,
        "label": "b . channel = b . channel . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "c . channel = c . channel . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"seal: channel tweaks & counter move\") ;"
      },
      {
        "id": 39,
        "label": "w . state = Spray ;"
      },
      {
        "id": 40,
        "label": "a . paint = a . paint . saturating_add (9) ;"
      },
      {
        "id": 41,
        "label": "b . paint = b . paint / 2 + 11 ;"
      },
      {
        "id": 42,
        "label": "c . blend ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"spray: adjust paint & blend flip\") ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 20,
        "label": "def: w"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: a"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: b"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: c"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: b"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: a"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: b"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: r"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: b"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: a"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: a"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: c"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: r"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: mean"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 32,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 32,
        "label": "data_dep: c"
      },
      {
        "from": 30,
        "to": 33,
        "label": "data_dep: mean"
      },
      {
        "from": 20,
        "to": 33,
        "label": "data_dep: w"
      },
      {
        "from": 20,
        "to": 33,
        "label": "data_dep: w"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: b"
      },
      {
        "from": 23,
        "to": 33,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 33,
        "label": "data_dep: c"
      },
      {
        "from": 20,
        "to": 33,
        "label": "data_dep: w"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: a"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: b"
      },
      {
        "from": 23,
        "to": 33,
        "label": "data_dep: c"
      },
      {
        "from": 20,
        "to": 34,
        "label": "data_dep: w"
      },
      {
        "from": 21,
        "to": 35,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 36,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 36,
        "label": "data_dep: b"
      },
      {
        "from": 23,
        "to": 37,
        "label": "data_dep: c"
      },
      {
        "from": 23,
        "to": 37,
        "label": "data_dep: c"
      },
      {
        "from": 20,
        "to": 39,
        "label": "data_dep: w"
      },
      {
        "from": 21,
        "to": 40,
        "label": "data_dep: a"
      },
      {
        "from": 21,
        "to": 40,
        "label": "data_dep: a"
      },
      {
        "from": 22,
        "to": 41,
        "label": "data_dep: b"
      },
      {
        "from": 22,
        "to": 41,
        "label": "data_dep: b"
      },
      {
        "from": 23,
        "to": 42,
        "label": "data_dep: c"
      }
    ]
  }
]