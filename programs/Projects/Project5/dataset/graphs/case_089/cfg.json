[
  {
    "name": "init_yard",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = & mut ctx . accounts . balloon_a ;"
      },
      {
        "id": 2,
        "label": "let b = & mut ctx . accounts . balloon_b ;"
      },
      {
        "id": 3,
        "label": "let y = & mut ctx . accounts . yard ;"
      },
      {
        "id": 4,
        "label": "a . yard = y . key () ;"
      },
      {
        "id": 5,
        "label": "a . mast = (mass & 7) as u8 ;"
      },
      {
        "id": 6,
        "label": "a . lift = (mass . count_ones () * 7 + 50) as u32 ;"
      },
      {
        "id": 7,
        "label": "b . yard = y . key () ;"
      },
      {
        "id": 8,
        "label": "b . mast = ((mass >> 3) & 7) as u8 ;"
      },
      {
        "id": 9,
        "label": "b . lift = ((mass ^ (mass << 1)) . count_ones () * 5 + 60) as u32 ;"
      },
      {
        "id": 10,
        "label": "y . owner = ctx . accounts . marshal . key () ;"
      },
      {
        "id": 11,
        "label": "y . capacity = mass . saturating_mul (3) + 400 ;"
      },
      {
        "id": 12,
        "label": "y . phase = Dock ;"
      },
      {
        "id": 13,
        "label": "let t = & mut ctx . accounts . tether ;"
      },
      {
        "id": 14,
        "label": "t . yard = y . key () ;"
      },
      {
        "id": 15,
        "label": "t . mast = 9 ;"
      },
      {
        "id": 16,
        "label": "t . strain = 0 ;"
      },
      {
        "id": 17,
        "label": "t . knot = mass ^ 0x39A7 ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "ballast",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let y = & mut ctx . accounts . yard ;"
      },
      {
        "id": 21,
        "label": "let a = & mut ctx . accounts . balloon_a ;"
      },
      {
        "id": 22,
        "label": "let b = & mut ctx . accounts . balloon_b ;"
      },
      {
        "id": 23,
        "label": "let t = & mut ctx . accounts . tether ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let mix = ((a . lift ^ b . lift) as u64) . wrapping_mul (11400714819323198485) ;"
      },
      {
        "id": 26,
        "label": "a . lift = a . lift . checked_add (((mix & 31) as u32) + 3) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "b . lift = b . lift . saturating_add ((((mix >> 5) & 31) as u32) + 2) ;"
      },
      {
        "id": 28,
        "label": "t . strain = t . strain . saturating_add ((a . lift as u64 + b . lift as u64) & 0x7F) ;"
      },
      {
        "id": 29,
        "label": "t . knot ^= (mix as u32) . rotate_left ((i % 13) as u32) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let total = a . lift + b . lift ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "total > y . capacity"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "y . phase = Hold ;"
      },
      {
        "id": 37,
        "label": "a . mast ^= 1 ;"
      },
      {
        "id": 38,
        "label": "b . mast = b . mast . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "t . mast = t . mast . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"hold: mast tweaks & tether move\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "y . phase = Load ;"
      },
      {
        "id": 43,
        "label": "a . lift = a . lift . saturating_add (9) ;"
      },
      {
        "id": 44,
        "label": "b . lift = b . lift / 2 + 11 ;"
      },
      {
        "id": 45,
        "label": "t . knot ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"load: lift adjust & knot flip\") ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "for"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 32,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 40,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]