[
  {
    "name": "init_hatchery",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "s . hatchery . owner = s . owner . key () ;"
      },
      {
        "id": 3,
        "label": "s . hatchery . target_temp = temp ;"
      },
      {
        "id": 4,
        "label": "s . hatchery . mode = Warm ;"
      },
      {
        "id": 5,
        "label": "s . egg_a . hatchery = s . hatchery . key () ;"
      },
      {
        "id": 6,
        "label": "s . egg_b . hatchery = s . hatchery . key () ;"
      },
      {
        "id": 7,
        "label": "s . journal . hatchery = s . hatchery . key () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "incubate",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let s = & mut ctx . accounts ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let inc = 5 + (d % 4) ;"
      },
      {
        "id": 13,
        "label": "s . egg_a . energy = s . egg_a . energy . saturating_add (inc * 3) ;"
      },
      {
        "id": 14,
        "label": "s . egg_b . energy = s . egg_b . energy . saturating_add (inc * 2 + 1) ;"
      },
      {
        "id": 15,
        "label": "s . journal . stamps = s . journal . stamps . wrapping_add (1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "let heat = (s . egg_a . energy + s . egg_b . energy) / 2 ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "heat > s . hatchery . target_temp"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "s . hatchery . mode = Rest ;"
      },
      {
        "id": 23,
        "label": "s . journal . alerts = s . journal . alerts . wrapping_add (2) ;"
      },
      {
        "id": 24,
        "label": "s . egg_a . energy = s . egg_a . energy / 2 + 9 ;"
      },
      {
        "id": 25,
        "label": "s . egg_b . energy = s . egg_b . energy / 2 + 7 ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"rest: alerts+2, energies damped\") ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "s . hatchery . mode = Active ;"
      },
      {
        "id": 29,
        "label": "s . journal . notes = s . journal . notes . wrapping_add (3) ;"
      },
      {
        "id": 30,
        "label": "s . egg_a . energy = s . egg_a . energy + 13 ;"
      },
      {
        "id": 31,
        "label": "s . egg_b . energy = s . egg_b . energy + 11 ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"active: notes+3, energy boosts\") ;"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 18,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 26,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]