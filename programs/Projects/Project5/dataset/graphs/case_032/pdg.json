[
  {
    "name": "init_painter",
    "inputs": [
      "ctx: Context < InitPainter >",
      "hue_cap: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let game = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "game . canvas . owner = game . artist . key () ;"
      },
      {
        "id": 3,
        "label": "game . canvas . hue_cap = hue_cap ;"
      },
      {
        "id": 4,
        "label": "game . canvas . mode = PaletteMode :: Blend ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: game"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: game"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: game"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: game"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: game"
      }
    ]
  },
  {
    "name": "paint_step",
    "inputs": [
      "ctx: Context < PaintStep >",
      "strokes: u16"
    ],
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let game = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "assert_ne ! (game . palette . key () , game . region_a . key () , \"palette/region_a must differ\") ;"
      },
      {
        "id": 9,
        "label": "assert_ne ! (game . palette . key () , game . region_b . key () , \"palette/region_b must differ\") ;"
      },
      {
        "id": 10,
        "label": "for i in 0 .. strokes { let w = 4 + (i % 5) as u32 ; game . region_a . saturation = game . region_a . saturation . saturating_add (w) ; game . region_b . saturation = game . region_b . saturation . saturating_add (w + 3) ; game . palette . spreads = game . palette . spreads . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let w = 4 + (i % 5) as u32 ;"
      },
      {
        "id": 12,
        "label": "game . region_a . saturation = game . region_a . saturation . saturating_add (w) ;"
      },
      {
        "id": 13,
        "label": "game . region_b . saturation = game . region_b . saturation . saturating_add (w + 3) ;"
      },
      {
        "id": 14,
        "label": "game . palette . spreads = game . palette . spreads . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "let total = game . region_a . saturation . saturating_add (game . region_b . saturation) ;"
      },
      {
        "id": 16,
        "label": "if total > game . canvas . hue_cap { game . canvas . mode = PaletteMode :: Seal ; game . ledger . awards = game . ledger . awards . saturating_add (2) ; game . palette . ink = game . palette . ink . saturating_add (9) ; msg ! (\"cap exceeded: sealing; +awards, +ink\") ; } else { game . canvas . mode = PaletteMode :: Blend ; game . ledger . ops = game . ledger . ops . saturating_add (1) ; game . palette . ink = game . palette . ink . saturating_add (3) ; msg ! (\"within cap: blending; +ops, +ink\") ; }"
      },
      {
        "id": 17,
        "label": "game . canvas . mode = PaletteMode :: Seal ;"
      },
      {
        "id": 18,
        "label": "game . ledger . awards = game . ledger . awards . saturating_add (2) ;"
      },
      {
        "id": 19,
        "label": "game . palette . ink = game . palette . ink . saturating_add (9) ;"
      },
      {
        "id": 20,
        "label": "msg ! (\"cap exceeded: sealing; +awards, +ink\") ;"
      },
      {
        "id": 21,
        "label": "game . canvas . mode = PaletteMode :: Blend ;"
      },
      {
        "id": 22,
        "label": "game . ledger . ops = game . ledger . ops . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "game . palette . ink = game . palette . ink . saturating_add (3) ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"within cap: blending; +ops, +ink\") ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 7,
        "label": "def: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: game"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: w"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: game"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 7,
        "to": 13,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 13,
        "label": "data_dep: game"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: w"
      },
      {
        "from": 7,
        "to": 14,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 14,
        "label": "data_dep: game"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: total"
      },
      {
        "from": 7,
        "to": 15,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 15,
        "label": "data_dep: game"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: total"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 17,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 18,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 18,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 19,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 19,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 21,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 22,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 22,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 23,
        "label": "data_dep: game"
      },
      {
        "from": 7,
        "to": 23,
        "label": "data_dep: game"
      }
    ]
  }
]