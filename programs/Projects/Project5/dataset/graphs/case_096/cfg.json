[
  {
    "name": "init_survey",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . survey ;"
      },
      {
        "id": 2,
        "label": "s . owner = ctx . accounts . ranger . key () ;"
      },
      {
        "id": 3,
        "label": "s . limit = dx + dy + 400 ;"
      },
      {
        "id": 4,
        "label": "s . phase = Scout ;"
      },
      {
        "id": 5,
        "label": "let mut x = 0u32 ;"
      },
      {
        "id": 6,
        "label": "let mut y = 0u32 ;"
      },
      {
        "id": 7,
        "label": "let mut err : i32 = dx as i32 - dy as i32 ;"
      },
      {
        "id": 8,
        "label": "let mut acc = 0u32 ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "let e2 = 2 * err ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "e2 > - (dy as i32)"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "err -= dy as i32 ;"
      },
      {
        "id": 16,
        "label": "x += 1 ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "acc ^= 0x55AA ;"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "e2 < dx as i32"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "err += dx as i32 ;"
      },
      {
        "id": 25,
        "label": "y += 1 ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "acc ^= 0xAA55 ;"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "Loop End"
      },
      {
        "id": 30,
        "label": "let a = & mut ctx . accounts . ridge_a ;"
      },
      {
        "id": 31,
        "label": "a . survey = s . key () ;"
      },
      {
        "id": 32,
        "label": "a . band = (dx & 7) as u8 ;"
      },
      {
        "id": 33,
        "label": "a . mass = (x + acc) + 21 ;"
      },
      {
        "id": 34,
        "label": "let b = & mut ctx . accounts . ridge_b ;"
      },
      {
        "id": 35,
        "label": "b . survey = s . key () ;"
      },
      {
        "id": 36,
        "label": "b . band = (dy & 7) as u8 ;"
      },
      {
        "id": 37,
        "label": "b . mass = (y + acc . rotate_left (3)) + 19 ;"
      },
      {
        "id": 38,
        "label": "let lg = & mut ctx . accounts . log ;"
      },
      {
        "id": 39,
        "label": "lg . survey = s . key () ;"
      },
      {
        "id": 40,
        "label": "lg . band = 9 ;"
      },
      {
        "id": 41,
        "label": "lg . steps = 0 ;"
      },
      {
        "id": 42,
        "label": "lg . sig = ((x as u64) << 32) ^ y as u64 ^ acc as u64 ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 11,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 20,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 9,
        "to": 29,
        "label": "for"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  },
  {
    "name": "traverse",
    "nodes": [
      {
        "id": 44,
        "label": "Entry"
      },
      {
        "id": 45,
        "label": "let s = & mut ctx . accounts . survey ;"
      },
      {
        "id": 46,
        "label": "let a = & mut ctx . accounts . ridge_a ;"
      },
      {
        "id": 47,
        "label": "let b = & mut ctx . accounts . ridge_b ;"
      },
      {
        "id": 48,
        "label": "let lg = & mut ctx . accounts . log ;"
      },
      {
        "id": 49,
        "label": "Loop Start"
      },
      {
        "id": 50,
        "label": "let z = ((a . mass ^ b . mass) as u64) . wrapping_mul (1469598103934665603) ;"
      },
      {
        "id": 51,
        "label": "a . mass = a . mass . checked_add (((z & 63) as u32) + 3) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 52,
        "label": "b . mass = b . mass . saturating_add ((((z >> 6) & 63) as u32) + 5) ;"
      },
      {
        "id": 53,
        "label": "lg . steps = lg . steps . saturating_add (1) ;"
      },
      {
        "id": 54,
        "label": "lg . sig ^= z . rotate_left ((i % 19) as u32) ;"
      },
      {
        "id": 55,
        "label": "Loop End"
      },
      {
        "id": 56,
        "label": "let sum = a . mass + b . mass ;"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "sum > s . limit"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "s . phase = Retreat ;"
      },
      {
        "id": 62,
        "label": "a . band ^= 1 ;"
      },
      {
        "id": 63,
        "label": "b . band = b . band . saturating_add (1) ;"
      },
      {
        "id": 64,
        "label": "lg . band = lg . band . saturating_add (1) ;"
      },
      {
        "id": 65,
        "label": "msg ! (\"retreat: band tweaks & log move\") ;"
      },
      {
        "id": 66,
        "label": "False body"
      },
      {
        "id": 67,
        "label": "s . phase = Sample ;"
      },
      {
        "id": 68,
        "label": "a . mass = a . mass . saturating_add (9) ;"
      },
      {
        "id": 69,
        "label": "b . mass = b . mass / 2 + 11 ;"
      },
      {
        "id": 70,
        "label": "lg . sig ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 71,
        "label": "msg ! (\"sample: mass adjust & sig flip\") ;"
      },
      {
        "id": 72,
        "label": "merge"
      },
      {
        "id": 73,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 49,
        "to": 55,
        "label": "for"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 57,
        "to": 66,
        "label": "false"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 65,
        "to": 72,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      }
    ]
  }
]