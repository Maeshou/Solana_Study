[
  {
    "name": "init_studio",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "p . studio . owner = p . owner . key () ;"
      },
      {
        "id": 3,
        "label": "p . studio . limit = limit ;"
      },
      {
        "id": 4,
        "label": "p . studio . mode = Gradient ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "tint",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let p = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let h = hashv (& [p . studio . owner . as_ref () , & p . avatar . hue . to_le_bytes () , & i . to_le_bytes ()]) ;"
      },
      {
        "id": 10,
        "label": "let dv = (u16 :: from_le_bytes ([h . 0 [0] , h . 0 [1]]) % 181 + 7) as u32 ;"
      },
      {
        "id": 11,
        "label": "p . avatar . hue = p . avatar . hue . rotate_left ((dv % 17) + 1) ;"
      },
      {
        "id": 12,
        "label": "p . avatar . sat = p . avatar . sat . wrapping_add ((dv & 0x7F) as u32) ;"
      },
      {
        "id": 13,
        "label": "p . log . strokes = p . log . strokes . wrapping_add (1) ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "p . avatar . sat > p . studio . limit"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "p . studio . mode = Mono ;"
      },
      {
        "id": 20,
        "label": "p . log . badges = p . log . badges . wrapping_add (3) ;"
      },
      {
        "id": 21,
        "label": "p . avatar . hue ^= 0x00FF_00FF ;"
      },
      {
        "id": 22,
        "label": "p . avatar . sat = p . avatar . sat / 2 + 11 ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"mono: badges+3, hue xor, sat half+11\") ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "p . studio . mode = Prism ;"
      },
      {
        "id": 26,
        "label": "p . log . strokes = p . log . strokes . wrapping_mul (2) ;"
      },
      {
        "id": 27,
        "label": "p . avatar . hue = p . avatar . hue . rotate_right (3) ;"
      },
      {
        "id": 28,
        "label": "p . avatar . sat = p . avatar . sat + 13 ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"prism: strokes*2, hue rot, sat+13\") ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 8,
        "to": 14,
        "label": "for"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 15,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 23,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]