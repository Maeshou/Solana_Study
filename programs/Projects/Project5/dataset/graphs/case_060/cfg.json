[
  {
    "name": "init_reef",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "r . pool . keeper = r . keeper . key () ;"
      },
      {
        "id": 3,
        "label": "r . pool . cap = cap ;"
      },
      {
        "id": 4,
        "label": "r . pool . state = Calm ;"
      },
      {
        "id": 5,
        "label": "r . pet . pool = r . pool . key () ;"
      },
      {
        "id": 6,
        "label": "r . pet . slot = 1 ;"
      },
      {
        "id": 7,
        "label": "r . feeder . pool = r . pool . key () ;"
      },
      {
        "id": 8,
        "label": "r . feeder . slot = 2 ;"
      },
      {
        "id": 9,
        "label": "r . log . pool = r . pool . key () ;"
      },
      {
        "id": 10,
        "label": "r . log . slot = 9 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "feed",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let r = & mut ctx . accounts ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "r . pet . size = r . pet . size . checked_add (6 + (i % 4)) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 16,
        "label": "r . feeder . stock = r . feeder . stock . saturating_add (3 + (i % 3)) ;"
      },
      {
        "id": 17,
        "label": "r . log . events = r . log . events . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "r . pet . size as u64 > r . pool . cap as u64"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "r . pool . state = Bloom ;"
      },
      {
        "id": 24,
        "label": "r . log . bonus = r . log . bonus . saturating_add (2) ;"
      },
      {
        "id": 25,
        "label": "r . feeder . stock = r . feeder . stock / 2 + 5 ;"
      },
      {
        "id": 26,
        "label": "r . pet . size = r . pet . size / 2 + 7 ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"bloom: bonus+2, damp size/stock\") ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "r . pool . state = Feed ;"
      },
      {
        "id": 30,
        "label": "r . log . events = r . log . events . saturating_add (3) ;"
      },
      {
        "id": 31,
        "label": "r . pet . size = r . pet . size . saturating_add (9) ;"
      },
      {
        "id": 32,
        "label": "r . feeder . stock = r . feeder . stock . saturating_add (7) ;"
      },
      {
        "id": 33,
        "label": "msg ! (\"feed: events+3, size+9, stock+7\") ;"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 14,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 19,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 27,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]