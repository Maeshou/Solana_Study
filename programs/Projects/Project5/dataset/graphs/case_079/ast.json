[
  {
    "name": "init_hub",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitHub >",
      "seed: u64"
    ],
    "attributes": [],
    "body": [
      "let belt_a = & mut ctx . accounts . belt_a ;",
      "let belt_b = & mut ctx . accounts . belt_b ;",
      "let bin = & mut ctx . accounts . bin ;",
      "let hub = & mut ctx . accounts . hub ;",
      "let mut s = seed . wrapping_mul (6364136223846793005) . wrapping_add (1) ;",
      "belt_a . hub = hub . key () ;",
      "belt_a . lane = (s as u8) & 7 ;",
      "belt_a . parcels = (s & 511) as u32 + 40 ;",
      "s = s . wrapping_mul (6364136223846793005) . wrapping_add (1) ;",
      "belt_b . hub = hub . key () ;",
      "belt_b . lane = (s as u8) & 7 ;",
      "belt_b . parcels = ((s >> 9) & 511) as u32 + 35 ;",
      "bin . hub = hub . key () ;",
      "bin . lane = 9 ;",
      "bin . load = 0 ;",
      "bin . tag = (seed as u8) ^ 0x5A ;",
      "hub . owner = ctx . accounts . operator . key () ;",
      "hub . capacity = ((seed as u32) & 0x0FFF) + 600 ;",
      "hub . state = Idle ;",
      "Ok (())"
    ]
  },
  {
    "name": "route",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Route >",
      "t: u32"
    ],
    "attributes": [],
    "body": [
      "let hub = & mut ctx . accounts . hub ;",
      "let a = & mut ctx . accounts . belt_a ;",
      "let b = & mut ctx . accounts . belt_b ;",
      "let bin = & mut ctx . accounts . bin ;",
      "for i in 0 .. t",
      "{",
      "let mix = ((a . parcels ^ b . parcels) as u64) . wrapping_mul (780291637) ;",
      "a . parcels = a . parcels . checked_add (((mix & 31) as u32) + 2) . unwrap_or (u32 :: MAX) ;",
      "b . parcels = b . parcels . saturating_add ((((mix >> 5) & 31) as u32) + 1) ;",
      "bin . load = bin . load . saturating_add ((mix & 15) as u64) ;",
      "bin . tag ^= (mix as u8) . rotate_left ((i % 5) as u32) ;",
      "}",
      "let sum = a . parcels + b . parcels ;",
      "if sum > hub . capacity",
      "{",
      "hub . state = Blocked ;",
      "bin . lane = bin . lane . saturating_add (1) ;",
      "a . lane ^= 1 ;",
      "b . lane = b . lane . saturating_add (1) ;",
      "msg ! (\"blocked: lane tweaks & bin shift\") ;",
      "} else",
      "{",
      "hub . state = Routing ;",
      "a . parcels = a . parcels . saturating_add (11) ;",
      "b . parcels = b . parcels / 2 + 9 ;",
      "bin . tag ^= 0xF0 ;",
      "msg ! (\"routing: adjust parcels & tag flip\") ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitHub",
    "node_type": "struct",
    "fields": [
      {
        "name": "hub",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 4 + 1)]",
        "field_type": "Account < 'info , HubCore >"
      },
      {
        "name": "belt_a",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Belt >"
      },
      {
        "name": "belt_b",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Belt >"
      },
      {
        "name": "bin",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 8 + 1)]",
        "field_type": "Account < 'info , BinStore >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Route",
    "node_type": "struct",
    "fields": [
      {
        "name": "hub",
        "attribute": "# [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , HubCore >"
      },
      {
        "name": "belt_a",
        "attribute": "# [account (mut , has_one = hub , constraint = belt_a . lane != belt_b . lane @ HubErr :: Dup)]",
        "field_type": "Account < 'info , Belt >"
      },
      {
        "name": "belt_b",
        "attribute": "# [account (mut , has_one = hub , constraint = belt_b . lane != bin . lane @ HubErr :: Dup)]",
        "field_type": "Account < 'info , Belt >"
      },
      {
        "name": "bin",
        "attribute": "# [account (mut , has_one = hub)]",
        "field_type": "Account < 'info , BinStore >"
      },
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "HubCore",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "capacity",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "state",
        "attribute": null,
        "field_type": "HubState"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Belt",
    "node_type": "struct",
    "fields": [
      {
        "name": "hub",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "lane",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "parcels",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "BinStore",
    "node_type": "struct",
    "fields": [
      {
        "name": "hub",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "lane",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "load",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tag",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]