[
  {
    "name": "init_lake",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let l = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "l . lake . warden = l . warden . key () ;"
      },
      {
        "id": 3,
        "label": "l . lake . cap = cap ;"
      },
      {
        "id": 4,
        "label": "l . lake . state = Open ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "cast",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let l = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let phase = (t % 8) as u32 ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "phase < 4"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "l . stats . lam_q16 = l . stats . lam_q16 . saturating_add (1 << 14) ;"
      },
      {
        "id": 15,
        "label": "l . card . casts = l . card . casts . wrapping_add (1) ;"
      },
      {
        "id": 16,
        "label": "l . trace . notes = l . trace . notes . wrapping_add (1) ;"
      },
      {
        "id": 17,
        "label": "l . trace . flags = l . trace . flags ^ 0x1 ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "let dec = (1 << 14) . min (l . stats . lam_q16) ;"
      },
      {
        "id": 20,
        "label": "l . stats . lam_q16 = l . stats . lam_q16 - dec ;"
      },
      {
        "id": 21,
        "label": "l . card . casts = l . card . casts . wrapping_add (1) ;"
      },
      {
        "id": 22,
        "label": "l . trace . notes = l . trace . notes . wrapping_add (1) ;"
      },
      {
        "id": 23,
        "label": "l . trace . flags = l . trace . flags ^ 0x2 ;"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "l . stats . count_q16 = l . stats . count_q16 . saturating_add (l . stats . lam_q16) ;"
      },
      {
        "id": 26,
        "label": "l . stats . var_q16 = l . stats . var_q16 . saturating_add (l . stats . lam_q16 / 2) ;"
      },
      {
        "id": 27,
        "label": "Loop End"
      },
      {
        "id": 28,
        "label": "let exp_catch = l . stats . count_q16 >> 16 ;"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "exp_catch > l . lake . cap"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "l . lake . state = Closed ;"
      },
      {
        "id": 34,
        "label": "l . card . trophies = l . card . trophies . wrapping_add (3) ;"
      },
      {
        "id": 35,
        "label": "l . stats . count_q16 = (l . lake . cap as u32) << 16 ;"
      },
      {
        "id": 36,
        "label": "l . trace . flags = l . trace . flags | 0x10 ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"closed: trophies+3, clamp count, flag set\") ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "l . lake . state = Busy ;"
      },
      {
        "id": 40,
        "label": "l . card . casts = l . card . casts + 7 ;"
      },
      {
        "id": 41,
        "label": "l . stats . var_q16 = l . stats . var_q16 + (1 << 12) ;"
      },
      {
        "id": 42,
        "label": "l . trace . notes = l . trace . notes . wrapping_mul (2) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"busy: casts+7, var bump, notes*2\") ;"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 10,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 17,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 8,
        "to": 27,
        "label": "for"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 29,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 37,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      }
    ]
  }
]