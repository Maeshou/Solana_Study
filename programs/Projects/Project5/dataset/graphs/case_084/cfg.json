[
  {
    "name": "init_hive",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hive ;"
      },
      {
        "id": 2,
        "label": "h . owner = ctx . accounts . keeper . key () ;"
      },
      {
        "id": 3,
        "label": "h . nectar = nectar ;"
      },
      {
        "id": 4,
        "label": "h . stage = Build ;"
      },
      {
        "id": 5,
        "label": "let a = & mut ctx . accounts . frame_a ;"
      },
      {
        "id": 6,
        "label": "let b = & mut ctx . accounts . frame_b ;"
      },
      {
        "id": 7,
        "label": "let lg = & mut ctx . accounts . ledger ;"
      },
      {
        "id": 8,
        "label": "a . hive = h . key () ;"
      },
      {
        "id": 9,
        "label": "a . cell = (nectar & 7) as u8 ;"
      },
      {
        "id": 10,
        "label": "a . honey = nectar + 13 ;"
      },
      {
        "id": 11,
        "label": "b . hive = h . key () ;"
      },
      {
        "id": 12,
        "label": "b . cell = ((nectar >> 2) & 7) as u8 ;"
      },
      {
        "id": 13,
        "label": "b . honey = nectar . rotate_left (3) + 7 ;"
      },
      {
        "id": 14,
        "label": "lg . hive = h . key () ;"
      },
      {
        "id": 15,
        "label": "lg . cell = 9 ;"
      },
      {
        "id": 16,
        "label": "lg . frames = 0 ;"
      },
      {
        "id": 17,
        "label": "lg . chaos = nectar as u64 ^ 0x55AA_33CC ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "forage",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let h = & mut ctx . accounts . hive ;"
      },
      {
        "id": 21,
        "label": "let a = & mut ctx . accounts . frame_a ;"
      },
      {
        "id": 22,
        "label": "let b = & mut ctx . accounts . frame_b ;"
      },
      {
        "id": 23,
        "label": "let lg = & mut ctx . accounts . ledger ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let r = ((a . honey ^ b . honey) as u64) . wrapping_mul (11400714819323198485) ;"
      },
      {
        "id": 26,
        "label": "a . honey = a . honey . checked_add (((r & 31) as u32) + 2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "b . honey = b . honey . saturating_add ((((r >> 5) & 31) as u32) + 3) ;"
      },
      {
        "id": 28,
        "label": "lg . frames = lg . frames . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "lg . chaos ^= r . rotate_left ((i % 13) as u32) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let total = a . honey + b . honey ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "total > h . nectar * 5"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "h . stage = Winter ;"
      },
      {
        "id": 37,
        "label": "a . cell ^= 1 ;"
      },
      {
        "id": 38,
        "label": "b . cell = b . cell . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "lg . cell = lg . cell . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"winter: cell tweaks & ledger move\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "h . stage = Harvest ;"
      },
      {
        "id": 43,
        "label": "a . honey = a . honey . saturating_add (9) ;"
      },
      {
        "id": 44,
        "label": "b . honey = b . honey / 2 + 11 ;"
      },
      {
        "id": 45,
        "label": "lg . chaos ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"harvest: adjust honey & chaos flip\") ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "for"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 32,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 40,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]