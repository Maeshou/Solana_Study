[
  {
    "name": "init_electorate",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . electorate_data . total_voters = 0 ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . electorate_data . threshold = threshold ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . electorate_data . is_active = true ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . vote_data . count = 0 ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . vote_data . last_vote = 0 ;"
      },
      {
        "id": 6,
        "label": "ctx . accounts . settings . threshold = threshold as u32 ;"
      },
      {
        "id": 7,
        "label": "ctx . accounts . settings . active = true ;"
      },
      {
        "id": 8,
        "label": "ctx . accounts . settings . bump = * ctx . bumps . get (\"electorate_data\") . unwrap () ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "tally_vote",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "require ! (ctx . accounts . electorate_data . key () != ctx . accounts . vote_data . key () , ProgramError :: InvalidArgument) ;"
      },
      {
        "id": 12,
        "label": "let mut count = ctx . accounts . vote_data . count ;"
      },
      {
        "id": 13,
        "label": "let mut sum = 0u64 ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "sum += 1 ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "sum > ctx . accounts . settings . threshold as u64"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "ctx . accounts . electorate_data . total_voters += sum ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Threshold exceeded\") ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . vote_data . count = 0 ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . settings . active = false ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "ctx . accounts . electorate_data . total_voters -= sum ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Below threshold\") ;"
      },
      {
        "id": 28,
        "label": "ctx . accounts . vote_data . count = sum as u32 ;"
      },
      {
        "id": 29,
        "label": "ctx . accounts . settings . active = true ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 16,
        "label": "while"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 17,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]