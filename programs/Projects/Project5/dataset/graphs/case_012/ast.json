[
  {
    "name": "init_hatchery",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitHatchery >",
      "cap: u64"
    ],
    "attributes": [],
    "body": [
      "ctx . accounts . nursery . keeper = ctx . accounts . keeper . key () ;",
      "ctx . accounts . nursery . cap = cap ;",
      "ctx . accounts . nursery . active = true ;",
      "ctx . accounts . gene_pool . rolls = 0 ;",
      "ctx . accounts . gene_pool . heat = 0 ;",
      "ctx . accounts . rules . min_mix = 5 ;",
      "ctx . accounts . rules . max_mix = 300 ;",
      "ctx . accounts . rules . strict = true ;",
      "Ok (())"
    ]
  },
  {
    "name": "breed",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Breed >",
      "eggs: u32"
    ],
    "attributes": [],
    "body": [
      "require ! (ctx . accounts . parent_a . key () != ctx . accounts . gene_pool . key () , HatchErr :: Dup) ;",
      "require ! (ctx . accounts . parent_b . key () != ctx . accounts . gene_pool . key () , HatchErr :: Dup) ;",
      "let mut e = 0 ;",
      "while e < eggs",
      "{",
      "ctx . accounts . parent_a . mutation = ctx . accounts . parent_a . mutation . saturating_add (1) ;",
      "ctx . accounts . parent_b . mutation = ctx . accounts . parent_b . mutation . saturating_add (2) ;",
      "ctx . accounts . gene_pool . rolls = ctx . accounts . gene_pool . rolls . saturating_add (1) ;",
      "e += 1 ;",
      "}",
      "let total = (ctx . accounts . parent_a . mutation as u64) . saturating_add (ctx . accounts . parent_b . mutation as u64) ;",
      "if total > ctx . accounts . nursery . cap",
      "{",
      "ctx . accounts . nursery . active = false ;",
      "ctx . accounts . rules . strict = true ;",
      "ctx . accounts . gene_pool . heat = ctx . accounts . gene_pool . heat . saturating_add (5) ;",
      "msg ! (\"cap exceeded:",
      "{",
      "}\" , total) ;",
      "} else",
      "{",
      "ctx . accounts . nursery . active = true ;",
      "ctx . accounts . rules . strict = false ;",
      "ctx . accounts . gene_pool . heat = ctx . accounts . gene_pool . heat . saturating_add (1) ;",
      "msg ! (\"within cap:",
      "{",
      "}\" , total) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitHatchery",
    "node_type": "struct",
    "fields": [
      {
        "name": "nursery",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 8 + 1 , seeds = [b\"nursery\" , payer . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , Nursery >"
      },
      {
        "name": "gene_pool",
        "attribute": "# [account (init , payer = payer , space = 8 + 8 + 8 , seeds = [b\"pool\" , payer . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , GenePool >"
      },
      {
        "name": "rules",
        "attribute": "# [account (init , payer = payer , space = 8 + 4 + 4 + 1)]",
        "field_type": "Account < 'info , BreedRules >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "keeper",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Breed",
    "node_type": "struct",
    "fields": [
      {
        "name": "nursery",
        "attribute": "# [account (mut , constraint = nursery . key () != gene_pool . key () , error = HatchErr :: Dup)]",
        "field_type": "Account < 'info , Nursery >"
      },
      {
        "name": "gene_pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , GenePool >"
      },
      {
        "name": "rules",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , BreedRules >"
      },
      {
        "name": "parent_a",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Beast >"
      },
      {
        "name": "parent_b",
        "attribute": "# [account (mut , constraint = parent_a . key () != parent_b . key () , error = HatchErr :: Dup)]",
        "field_type": "Account < 'info , Beast >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Nursery",
    "node_type": "struct",
    "fields": [
      {
        "name": "keeper",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "cap",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "active",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "GenePool",
    "node_type": "struct",
    "fields": [
      {
        "name": "rolls",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "heat",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "BreedRules",
    "node_type": "struct",
    "fields": [
      {
        "name": "min_mix",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "max_mix",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "strict",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Beast",
    "node_type": "struct",
    "fields": [
      {
        "name": "dna",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tier",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "mutation",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]