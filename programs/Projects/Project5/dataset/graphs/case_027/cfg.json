[
  {
    "name": "init_track",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let accs = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "accs . track . host = accs . host . key () ;"
      },
      {
        "id": 3,
        "label": "accs . track . laps = laps ;"
      },
      {
        "id": 4,
        "label": "accs . track . state = TrackState :: Active ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "run_heats",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let a = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "assert_ne ! (a . track . key () , a . stats . key () , \"track/stats must differ\") ;"
      },
      {
        "id": 9,
        "label": "let seed = [& a . track . host . as_ref () , & a . stats . total . to_le_bytes ()] . concat () ;"
      },
      {
        "id": 10,
        "label": "let bump = (hashv (& [& seed]) . 0 [0] as u32 % 9) + 3 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "a . racer_a . lap = a . racer_a . lap . saturating_add (10 + bump) ;"
      },
      {
        "id": 13,
        "label": "a . racer_b . lap = a . racer_b . lap . saturating_add (12 + bump) ;"
      },
      {
        "id": 14,
        "label": "a . stats . total = a . stats . total . saturating_add (7 + bump as u64) ;"
      },
      {
        "id": 15,
        "label": "Loop End"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "a . stats . total > (a . track . laps as u64) * 20"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "a . track . state = TrackState :: Cooldown ;"
      },
      {
        "id": 21,
        "label": "a . stats . heats = a . stats . heats . saturating_add (3 + (bump / 2)) ;"
      },
      {
        "id": 22,
        "label": "a . racer_b . flags = a . racer_b . flags . saturating_add (2) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"cooldown: heats & flags raised\") ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "a . track . state = TrackState :: Active ;"
      },
      {
        "id": 26,
        "label": "a . stats . heats = a . stats . heats . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "a . racer_a . flags = a . racer_a . flags . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "msg ! (\"active: keep racing, heats/flags tick\") ;"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 11,
        "to": 15,
        "label": "for"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 16,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 23,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  }
]