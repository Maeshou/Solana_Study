[
  {
    "name": "init_course",
    "inputs": [
      "ctx: Context < InitCourse >",
      "seats: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . course . instructor = ctx . accounts . instructor . key () ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . course . seats = seats ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . course . open = true ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . student . student = ctx . accounts . learner . key () ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . student . credits = 0 ;"
      },
      {
        "id": 6,
        "label": "ctx . accounts . student . active = true ;"
      },
      {
        "id": 7,
        "label": "ctx . accounts . rules . max_load = 20 ;"
      },
      {
        "id": 8,
        "label": "ctx . accounts . rules . pass = 60 ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . rules . bump = * ctx . bumps . get (\"rules\") . unwrap () ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": []
  },
  {
    "name": "enroll",
    "inputs": [
      "ctx: Context < Enroll >",
      "add: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require_keys_neq ! (ctx . accounts . course . key () , ctx . accounts . student . key () , EnrollErr :: Dup) ;"
      },
      {
        "id": 13,
        "label": "require_keys_neq ! (ctx . accounts . course . key () , ctx . accounts . rules . key () , EnrollErr :: Dup) ;"
      },
      {
        "id": 14,
        "label": "require_keys_neq ! (ctx . accounts . student . key () , ctx . accounts . rules . key () , EnrollErr :: Dup) ;"
      },
      {
        "id": 15,
        "label": "for _ in 0 .. add { ctx . accounts . student . credits = ctx . accounts . student . credits . saturating_add (1) ; ctx . accounts . course . seats = ctx . accounts . course . seats . saturating_add (0) ; }"
      },
      {
        "id": 16,
        "label": "ctx . accounts . student . credits = ctx . accounts . student . credits . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "ctx . accounts . course . seats = ctx . accounts . course . seats . saturating_add (0) ;"
      },
      {
        "id": 18,
        "label": "if (ctx . accounts . student . credits as u32) > ctx . accounts . rules . max_load { ctx . accounts . student . active = false ; ctx . accounts . course . open = false ; ctx . accounts . rules . pass = ctx . accounts . rules . pass . saturating_add (5) ; msg ! (\"over load: credits={}\" , ctx . accounts . student . credits) ; } else { ctx . accounts . student . active = true ; ctx . accounts . course . open = true ; ctx . accounts . rules . pass = ctx . accounts . rules . pass . saturating_sub (0) ; msg ! (\"enrolled: credits={}\" , ctx . accounts . student . credits) ; }"
      },
      {
        "id": 19,
        "label": "ctx . accounts . student . active = false ;"
      },
      {
        "id": 20,
        "label": "ctx . accounts . course . open = false ;"
      },
      {
        "id": 21,
        "label": "ctx . accounts . rules . pass = ctx . accounts . rules . pass . saturating_add (5) ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"over load: credits={}\" , ctx . accounts . student . credits) ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . student . active = true ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . course . open = true ;"
      },
      {
        "id": 25,
        "label": "ctx . accounts . rules . pass = ctx . accounts . rules . pass . saturating_sub (0) ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"enrolled: credits={}\" , ctx . accounts . student . credits) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": []
  }
]