[
  {
    "name": "init_arena",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "a . board . judge = a . judge . key () ;"
      },
      {
        "id": 3,
        "label": "a . board . cap = cap ;"
      },
      {
        "id": 4,
        "label": "a . board . state = Queue ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "duel",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let a = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let phi_q16 : u32 = 40503 ;"
      },
      {
        "id": 10,
        "label": "let val = k . wrapping_mul (phi_q16) ;"
      },
      {
        "id": 11,
        "label": "let frac_q16 = val & 0xFFFF ;"
      },
      {
        "id": 12,
        "label": "let contrib = (frac_q16 as u64) + 1 ;"
      },
      {
        "id": 13,
        "label": "a . stats . sum = a . stats . sum . wrapping_add (contrib) ;"
      },
      {
        "id": 14,
        "label": "a . stats . count = a . stats . count . wrapping_add (1) ;"
      },
      {
        "id": 15,
        "label": "a . a . score = a . a . score . wrapping_add (((contrib >> 4) & 0x3FF) as u32) ;"
      },
      {
        "id": 16,
        "label": "a . b . score = a . b . score . wrapping_add (((contrib >> 6) & 0x1FF) as u32) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "a . stats . sum > (a . board . cap as u64) * 100"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "a . board . state = Pause ;"
      },
      {
        "id": 23,
        "label": "a . stats . flags = a . stats . flags . wrapping_add (2) ;"
      },
      {
        "id": 24,
        "label": "a . b . score = a . b . score / 2 + 13 ;"
      },
      {
        "id": 25,
        "label": "a . a . score = a . a . score + 7 ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"pause: flags+2, adjust scores\") ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "a . board . state = Fight ;"
      },
      {
        "id": 29,
        "label": "a . stats . sum = a . stats . sum . wrapping_mul (2) ;"
      },
      {
        "id": 30,
        "label": "a . a . score = a . a . score . rotate_left (1) ;"
      },
      {
        "id": 31,
        "label": "a . b . score = a . b . score . rotate_right (1) ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"fight: sum*2, rotate scores\") ;"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 8,
        "to": 17,
        "label": "for"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 18,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 26,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]