[
  {
    "name": "init_lab",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitLab >",
      "a11: u32",
      "a12: u32",
      "a21: u32",
      "a22: u32"
    ],
    "attributes": [],
    "body": [
      "let lab = & mut ctx . accounts . lab ;",
      "lab . owner = ctx . accounts . chief . key () ;",
      "lab . max = (a11 + a22) * 8 + 200 ;",
      "lab . state = Boot ;",
      "let arm_a = & mut ctx . accounts . arm_a ;",
      "let arm_b = & mut ctx . accounts . arm_b ;",
      "let board = & mut ctx . accounts . board ;",
      "let v1 = a11 . saturating_mul (3) + a12 . saturating_mul (2) ;",
      "let v2 = a21 . saturating_mul (2) + a22 . saturating_mul (3) ;",
      "arm_a . lab = lab . key () ;",
      "arm_a . dock = (a11 & 7) as u8 ;",
      "arm_a . torque = v1 + 13 ;",
      "arm_b . lab = lab . key () ;",
      "arm_b . dock = (a22 & 7) as u8 ;",
      "arm_b . torque = v2 + 11 ;",
      "board . lab = lab . key () ;",
      "board . dock = 9 ;",
      "board . ticks = 0 ;",
      "board . code = (v1 as u64) << 16 | v2 as u64 ;",
      "Ok (())"
    ]
  },
  {
    "name": "assemble",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Assemble >",
      "reps: u32"
    ],
    "attributes": [],
    "body": [
      "let lab = & mut ctx . accounts . lab ;",
      "let a = & mut ctx . accounts . arm_a ;",
      "let b = & mut ctx . accounts . arm_b ;",
      "let brd = & mut ctx . accounts . board ;",
      "for i in 0 .. reps",
      "{",
      "let mix = ((a . torque ^ b . torque) as u64) . wrapping_mul (780291637) ;",
      "a . torque = a . torque . checked_add (((mix & 31) as u32) + 2) . unwrap_or (u32 :: MAX) ;",
      "b . torque = b . torque . saturating_add ((((mix >> 5) & 31) as u32) + 3) ;",
      "brd . ticks = brd . ticks . saturating_add (1) ;",
      "brd . code ^= mix . rotate_left ((i % 13) as u32) ;",
      "}",
      "let total = a . torque + b . torque ;",
      "if total > lab . max",
      "{",
      "lab . state = Halt ;",
      "a . dock ^= 1 ;",
      "b . dock = b . dock . saturating_add (1) ;",
      "brd . dock = brd . dock . saturating_add (1) ;",
      "msg ! (\"halt: dock tweaks & board move\") ;",
      "} else",
      "{",
      "lab . state = Assemble ;",
      "a . torque = a . torque . saturating_add (9) ;",
      "b . torque = b . torque / 2 + 11 ;",
      "brd . code ^= 0x0F0F_F0F0 ;",
      "msg ! (\"assemble: adjust torque & code flip\") ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitLab",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 4 + 1)]",
        "field_type": "Account < 'info , Lab >"
      },
      {
        "name": "arm_a",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Arm >"
      },
      {
        "name": "arm_b",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Arm >"
      },
      {
        "name": "board",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 8 + 8)]",
        "field_type": "Account < 'info , ControlBoard >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "chief",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Assemble",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": "# [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , Lab >"
      },
      {
        "name": "arm_a",
        "attribute": "# [account (mut , has_one = lab , constraint = arm_a . dock != arm_b . dock @ RoboErr :: Dup)]",
        "field_type": "Account < 'info , Arm >"
      },
      {
        "name": "arm_b",
        "attribute": "# [account (mut , has_one = lab , constraint = arm_b . dock != board . dock @ RoboErr :: Dup)]",
        "field_type": "Account < 'info , Arm >"
      },
      {
        "name": "board",
        "attribute": "# [account (mut , has_one = lab)]",
        "field_type": "Account < 'info , ControlBoard >"
      },
      {
        "name": "chief",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Lab",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "max",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "state",
        "attribute": null,
        "field_type": "LabState"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Arm",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "dock",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "torque",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ControlBoard",
    "node_type": "struct",
    "fields": [
      {
        "name": "lab",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "dock",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "ticks",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "code",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]