[
  {
    "name": "init_museum",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "a . museum . curator = a . curator . key () ;"
      },
      {
        "id": 3,
        "label": "a . museum . cap = cap ;"
      },
      {
        "id": 4,
        "label": "a . museum . state = Draft ;"
      },
      {
        "id": 5,
        "label": "a . relic_a . museum = a . museum . key () ;"
      },
      {
        "id": 6,
        "label": "a . relic_b . museum = a . museum . key () ;"
      },
      {
        "id": 7,
        "label": "a . log . museum = a . museum . key () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_exhibit",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let a = & mut ctx . accounts ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let w = 3 + (i % 5) ;"
      },
      {
        "id": 13,
        "label": "a . relic_a . score = a . relic_a . score . wrapping_add (w * 7) ;"
      },
      {
        "id": 14,
        "label": "a . relic_b . score = a . relic_b . score . wrapping_add ((w + 2) * 5) ;"
      },
      {
        "id": 15,
        "label": "a . log . events = a . log . events . wrapping_add (1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "let sum = a . relic_a . score as u64 + a . relic_b . score as u64 ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "sum > a . museum . cap as u64"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "a . museum . state = Seal ;"
      },
      {
        "id": 23,
        "label": "a . log . flags = a . log . flags . wrapping_add (2) ;"
      },
      {
        "id": 24,
        "label": "a . relic_a . score = a . relic_a . score / 2 + 11 ;"
      },
      {
        "id": 25,
        "label": "a . relic_b . score = a . relic_b . score / 2 + 13 ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"sealed: flags+2, both scores halved+adj\") ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "a . museum . state = Open ;"
      },
      {
        "id": 29,
        "label": "a . log . checks = a . log . checks . wrapping_add (1) ;"
      },
      {
        "id": 30,
        "label": "a . relic_a . score = a . relic_a . score . rotate_left (1) ;"
      },
      {
        "id": 31,
        "label": "a . relic_b . score = a . relic_b . score . rotate_right (1) ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"open: checks+1, rotate scores\") ;"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 18,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 26,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]