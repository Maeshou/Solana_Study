[
  {
    "name": "isqrt",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "n == 0"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "return 0 ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "let mut x = n ;"
      },
      {
        "id": 10,
        "label": "let mut y = (x + 1) >> 1 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "x = y ;"
      },
      {
        "id": 13,
        "label": "y = (x + n / x) >> 1 ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "x"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "while"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_listing",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let m = & mut ctx . accounts ;"
      },
      {
        "id": 18,
        "label": "m . listing . seller = m . seller . key () ;"
      },
      {
        "id": 19,
        "label": "m . listing . base = base ;"
      },
      {
        "id": 20,
        "label": "m . listing . state = ListingState :: Live ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "buy",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let m = & mut ctx . accounts ;"
      },
      {
        "id": 24,
        "label": "assert_ne ! (m . listing . key () , m . wallet . key () , \"listing/wallet must differ\") ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let k = 17u128 ;"
      },
      {
        "id": 27,
        "label": "let old = m . stats . price as u128 + 1 ;"
      },
      {
        "id": 28,
        "label": "let newp = isqrt (old . saturating_mul (old + k)) ;"
      },
      {
        "id": 29,
        "label": "m . stats . price = (newp . min (u128 :: from (u64 :: MAX))) as u64 ;"
      },
      {
        "id": 30,
        "label": "m . wallet . lock = m . wallet . lock . wrapping_add (1) ;"
      },
      {
        "id": 31,
        "label": "m . stats . trades = m . stats . trades . wrapping_add (1) ;"
      },
      {
        "id": 32,
        "label": "Loop End"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "m . stats . price > m . listing . base * 20"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "m . listing . state = ListingState :: Closed ;"
      },
      {
        "id": 38,
        "label": "m . wallet . balance = m . wallet . balance . saturating_sub (1) . max (0) ;"
      },
      {
        "id": 39,
        "label": "m . stats . disputes = m . stats . disputes . wrapping_add (1) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"closed: price high; balance-1, disputes+1\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "m . listing . state = ListingState :: Cooling ;"
      },
      {
        "id": 43,
        "label": "m . wallet . balance = m . wallet . balance . saturating_add (2) ;"
      },
      {
        "id": 44,
        "label": "m . stats . trades = m . stats . trades . wrapping_mul (2) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"cooling: balance+2, trades*=2\") ;"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 25,
        "to": 32,
        "label": "for"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 33,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 40,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      }
    ]
  }
]