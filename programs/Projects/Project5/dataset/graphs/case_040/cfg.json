[
  {
    "name": "init_farm",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "f . cfg . owner = f . owner . key () ;"
      },
      {
        "id": 3,
        "label": "f . cfg . cap = cap ;"
      },
      {
        "id": 4,
        "label": "f . cfg . state = FarmState :: Start ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "cultivate",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let f = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "assert_ne ! (f . cfg . key () , f . log . key () , \"cfg/log must differ\") ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "let next = (u128 :: from (f . field . a) + u128 :: from (f . field . b)) & ((1u128 << 40) - 1) ;"
      },
      {
        "id": 11,
        "label": "f . field . a = f . field . b ;"
      },
      {
        "id": 12,
        "label": "f . field . b = next as u64 ;"
      },
      {
        "id": 13,
        "label": "let x = f . field . b as u32 ;"
      },
      {
        "id": 14,
        "label": "let v = x ^ (x >> 1) ^ (x >> 2) ;"
      },
      {
        "id": 15,
        "label": "f . log . events = f . log . events . wrapping_add ((v & 0xFF) as u32) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "f . field . b > f . cfg . cap"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "f . cfg . state = FarmState :: Cap ;"
      },
      {
        "id": 22,
        "label": "f . field . b = f . cfg . cap ;"
      },
      {
        "id": 23,
        "label": "f . log . badges = f . log . badges . wrapping_add (2) ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"cap reached: clip b to cap, badges+2\") ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "f . cfg . state = FarmState :: Grow ;"
      },
      {
        "id": 27,
        "label": "f . field . a = f . field . a + (f . field . b / 3) ;"
      },
      {
        "id": 28,
        "label": "f . log . events = f . log . events . wrapping_add (1) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"grow: a += b/3, events+1\") ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 9,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 17,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]