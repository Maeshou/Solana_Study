[
  {
    "name": "init_dungeon",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 2,
        "label": "d . owner = ctx . accounts . warden . key () ;"
      },
      {
        "id": 3,
        "label": "d . threshold = n * 9 + 200 ;"
      },
      {
        "id": 4,
        "label": "d . state = Locked ;"
      },
      {
        "id": 5,
        "label": "let a = & mut ctx . accounts . key_a ;"
      },
      {
        "id": 6,
        "label": "let b = & mut ctx . accounts . key_b ;"
      },
      {
        "id": 7,
        "label": "let c = & mut ctx . accounts . chest ;"
      },
      {
        "id": 8,
        "label": "let t = n . saturating_mul (n + 1) / 2 ;"
      },
      {
        "id": 9,
        "label": "a . dungeon = d . key () ;"
      },
      {
        "id": 10,
        "label": "a . ring = (n & 7) as u8 ;"
      },
      {
        "id": 11,
        "label": "a . keys = (t % 97) + 7 ;"
      },
      {
        "id": 12,
        "label": "b . dungeon = d . key () ;"
      },
      {
        "id": 13,
        "label": "b . ring = ((n >> 2) & 7) as u8 ;"
      },
      {
        "id": 14,
        "label": "b . keys = (t . rotate_left (3) % 83) + 11 ;"
      },
      {
        "id": 15,
        "label": "c . dungeon = d . key () ;"
      },
      {
        "id": 16,
        "label": "c . ring = 9 ;"
      },
      {
        "id": 17,
        "label": "c . score = (t as u64) & 0xFFFF ;"
      },
      {
        "id": 18,
        "label": "c . code = n ^ 0x2468 ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "solve",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let d = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 22,
        "label": "let a = & mut ctx . accounts . key_a ;"
      },
      {
        "id": 23,
        "label": "let b = & mut ctx . accounts . key_b ;"
      },
      {
        "id": 24,
        "label": "let c = & mut ctx . accounts . chest ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let mut x = (a . keys as u64) + 17 ;"
      },
      {
        "id": 27,
        "label": "let mut y = (b . keys as u64) + 11 ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "let r = x % y ;"
      },
      {
        "id": 30,
        "label": "x = y ;"
      },
      {
        "id": 31,
        "label": "y = r ;"
      },
      {
        "id": 32,
        "label": "Loop End"
      },
      {
        "id": 33,
        "label": "let g = (x as u32) . max (1) ;"
      },
      {
        "id": 34,
        "label": "a . keys = a . keys . checked_add (g % 13) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 35,
        "label": "b . keys = b . keys . saturating_add ((g % 7) + 1) ;"
      },
      {
        "id": 36,
        "label": "c . code ^= ((a . keys ^ b . keys) as u32) . rotate_left ((i % 7) as u32) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "let sum = a . keys + b . keys ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "sum > d . threshold"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "d . state = Open ;"
      },
      {
        "id": 44,
        "label": "a . ring ^= 1 ;"
      },
      {
        "id": 45,
        "label": "b . ring = b . ring . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "c . score = c . score . saturating_add ((sum as u64) & 63) ;"
      },
      {
        "id": 47,
        "label": "msg ! (\"open: ring tweak & score+\") ;"
      },
      {
        "id": 48,
        "label": "False body"
      },
      {
        "id": 49,
        "label": "d . state = Reset ;"
      },
      {
        "id": 50,
        "label": "a . keys = a . keys . saturating_add (7) ;"
      },
      {
        "id": 51,
        "label": "b . keys = b . keys / 2 + 9 ;"
      },
      {
        "id": 52,
        "label": "c . code ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"reset: key adjust & code flip\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 28,
        "to": 32,
        "label": "while"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 25,
        "to": 37,
        "label": "for"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 39,
        "to": 48,
        "label": "false"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 47,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]