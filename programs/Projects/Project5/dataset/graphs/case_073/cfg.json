[
  {
    "name": "init_circuit",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . circuit ;"
      },
      {
        "id": 2,
        "label": "c . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "c . limit = 500 + (seed % 300) ;"
      },
      {
        "id": 4,
        "label": "c . state = Grid ;"
      },
      {
        "id": 5,
        "label": "let mut a0 = 3u32 ;"
      },
      {
        "id": 6,
        "label": "let mut a1 = 5u32 ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "let t = a0 + a1 ;"
      },
      {
        "id": 9,
        "label": "a0 = a1 ;"
      },
      {
        "id": 10,
        "label": "a1 = t . max (1) ;"
      },
      {
        "id": 11,
        "label": "Loop End"
      },
      {
        "id": 12,
        "label": "let a = & mut ctx . accounts . car_a ;"
      },
      {
        "id": 13,
        "label": "let b = & mut ctx . accounts . car_b ;"
      },
      {
        "id": 14,
        "label": "let p = & mut ctx . accounts . pit ;"
      },
      {
        "id": 15,
        "label": "a . parent = c . key () ;"
      },
      {
        "id": 16,
        "label": "a . lane = (seed & 7) as u8 ;"
      },
      {
        "id": 17,
        "label": "a . points = a1 + 13 ;"
      },
      {
        "id": 18,
        "label": "b . parent = c . key () ;"
      },
      {
        "id": 19,
        "label": "b . lane = ((seed >> 2) & 7) as u8 ;"
      },
      {
        "id": 20,
        "label": "b . points = a0 + 17 ;"
      },
      {
        "id": 21,
        "label": "p . parent = c . key () ;"
      },
      {
        "id": 22,
        "label": "p . pit = 7 ;"
      },
      {
        "id": 23,
        "label": "p . count = 0 ;"
      },
      {
        "id": 24,
        "label": "p . hash = seed as u64 ^ 0xDEAD_BEEF ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 7,
        "to": 11,
        "label": "for"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      }
    ]
  },
  {
    "name": "lap",
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "let c = & mut ctx . accounts . circuit ;"
      },
      {
        "id": 28,
        "label": "let a = & mut ctx . accounts . car_a ;"
      },
      {
        "id": 29,
        "label": "let b = & mut ctx . accounts . car_b ;"
      },
      {
        "id": 30,
        "label": "let p = & mut ctx . accounts . pit ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "let z = ((a . points ^ b . points) as u64) . wrapping_mul (11400714819323198485) ;"
      },
      {
        "id": 33,
        "label": "a . points = a . points . checked_add (((z & 31) as u32) + 2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 34,
        "label": "b . points = b . points . saturating_add ((((z >> 5) & 31) as u32) + 3) ;"
      },
      {
        "id": 35,
        "label": "p . count = p . count . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "p . hash ^= z . rotate_left ((i % 13) as u32) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "let total = a . points + b . points ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "total > c . limit"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "c . state = Park ;"
      },
      {
        "id": 44,
        "label": "a . lane ^= 1 ;"
      },
      {
        "id": 45,
        "label": "b . lane = b . lane . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "p . count = p . count . saturating_add (7) ;"
      },
      {
        "id": 47,
        "label": "msg ! (\"park: lane tweaks, count+7\") ;"
      },
      {
        "id": 48,
        "label": "False body"
      },
      {
        "id": 49,
        "label": "c . state = Lap ;"
      },
      {
        "id": 50,
        "label": "a . points = a . points . saturating_add (11) ;"
      },
      {
        "id": 51,
        "label": "b . points = b . points / 2 + 9 ;"
      },
      {
        "id": 52,
        "label": "p . hash ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 53,
        "label": "msg ! (\"lap: points adjust, hash flip\") ;"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "for"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 39,
        "to": 48,
        "label": "false"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 47,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]