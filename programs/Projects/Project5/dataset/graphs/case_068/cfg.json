[
  {
    "name": "init_tome",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . stone_b ;"
      },
      {
        "id": 2,
        "label": "let lg = & mut ctx . accounts . registry ;"
      },
      {
        "id": 3,
        "label": "let p = & mut ctx . accounts . codex ;"
      },
      {
        "id": 4,
        "label": "let a = & mut ctx . accounts . stone_a ;"
      },
      {
        "id": 5,
        "label": "lg . parent = p . key () ;"
      },
      {
        "id": 6,
        "label": "lg . channel = 9 ;"
      },
      {
        "id": 7,
        "label": "lg . mark = 0 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "lg . mark ^= ((seed as u64 + i as u64 * 97) << (i % 13)) & 0x00FF_FFFF ;"
      },
      {
        "id": 10,
        "label": "Loop End"
      },
      {
        "id": 11,
        "label": "p . owner = ctx . accounts . scribe . key () ;"
      },
      {
        "id": 12,
        "label": "p . capacity = 300 + (seed % 50) ;"
      },
      {
        "id": 13,
        "label": "p . stage = Draft ;"
      },
      {
        "id": 14,
        "label": "lg . parent = p . key () ;"
      },
      {
        "id": 15,
        "label": "a . parent = p . key () ;"
      },
      {
        "id": 16,
        "label": "a . slot = (seed & 7) as u8 ;"
      },
      {
        "id": 17,
        "label": "a . power = (seed as u64 % 41) + 10 ;"
      },
      {
        "id": 18,
        "label": "b . parent = p . key () ;"
      },
      {
        "id": 19,
        "label": "b . slot = ((seed >> 3) & 7) as u8 ;"
      },
      {
        "id": 20,
        "label": "b . power = ((seed as u64) . rotate_left (7) % 53) + 11 ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 8,
        "to": 10,
        "label": "for"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "inscribe",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let p = & mut ctx . accounts . codex ;"
      },
      {
        "id": 24,
        "label": "let a = & mut ctx . accounts . stone_a ;"
      },
      {
        "id": 25,
        "label": "let b = & mut ctx . accounts . stone_b ;"
      },
      {
        "id": 26,
        "label": "let lg = & mut ctx . accounts . registry ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let mix = ((a . power ^ b . power) as u64) . wrapping_mul (2654435761) ;"
      },
      {
        "id": 29,
        "label": "a . power = a . power . checked_add ((mix & 15) + (t as u64 & 7)) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 30,
        "label": "b . power = b . power . saturating_add (((mix >> 8) & 31) + 1) ;"
      },
      {
        "id": 31,
        "label": "lg . mark = lg . mark . rotate_left ((t % 31) as u32) ^ (mix & 0x000F_FFFF) ;"
      },
      {
        "id": 32,
        "label": "Loop End"
      },
      {
        "id": 33,
        "label": "let gauge = (a . power as u128 + b . power as u128) / 3 ;"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "gauge as u64 > p . capacity as u64"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "p . stage = Seal ;"
      },
      {
        "id": 39,
        "label": "a . power = a . power / 2 + 5 ;"
      },
      {
        "id": 40,
        "label": "b . power = b . power / 2 + 7 ;"
      },
      {
        "id": 41,
        "label": "lg . channel = lg . channel . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"seal: halve stones, channel++\") ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "p . stage = Engrave ;"
      },
      {
        "id": 45,
        "label": "a . slot ^= 0x3 ;"
      },
      {
        "id": 46,
        "label": "b . slot = b . slot . saturating_add (1) ;"
      },
      {
        "id": 47,
        "label": "lg . mark ^= 0x000F_0FF0 ;"
      },
      {
        "id": 48,
        "label": "msg ! (\"engrave: slot/xor tweaks, mark flip\") ;"
      },
      {
        "id": 49,
        "label": "merge"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "for"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 34,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 42,
        "to": 49,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]