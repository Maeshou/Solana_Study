[
  {
    "name": "init_market",
    "inputs": [
      "ctx: Context < InitMarket >",
      "fee: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "let l1 = & mut ctx . accounts . list_a ;"
      },
      {
        "id": 3,
        "label": "let l2 = & mut ctx . accounts . list_b ;"
      },
      {
        "id": 4,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 5,
        "label": "m . owner = ctx . accounts . operator . key () ;"
      },
      {
        "id": 6,
        "label": "m . fee_bps = fee ;"
      },
      {
        "id": 7,
        "label": "m . state = Dormant ;"
      },
      {
        "id": 8,
        "label": "l1 . parent = m . key () ;"
      },
      {
        "id": 9,
        "label": "l1 . channel = 3 ;"
      },
      {
        "id": 10,
        "label": "l1 . price = 120 ;"
      },
      {
        "id": 11,
        "label": "l2 . parent = m . key () ;"
      },
      {
        "id": 12,
        "label": "l2 . channel = 5 ;"
      },
      {
        "id": 13,
        "label": "l2 . price = 140 ;"
      },
      {
        "id": 14,
        "label": "e . parent = m . key () ;"
      },
      {
        "id": 15,
        "label": "e . channel = 9 ;"
      },
      {
        "id": 16,
        "label": "e . locked = 0 ;"
      },
      {
        "id": 17,
        "label": "e . volume = 0 ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: m"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: l1"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: l2"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: e"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: m"
      },
      {
        "from": 2,
        "to": 8,
        "label": "data_dep: l1"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: m"
      },
      {
        "from": 2,
        "to": 9,
        "label": "data_dep: l1"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: l1"
      },
      {
        "from": 3,
        "to": 11,
        "label": "data_dep: l2"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: m"
      },
      {
        "from": 3,
        "to": 12,
        "label": "data_dep: l2"
      },
      {
        "from": 3,
        "to": 13,
        "label": "data_dep: l2"
      },
      {
        "from": 4,
        "to": 14,
        "label": "data_dep: e"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: m"
      },
      {
        "from": 4,
        "to": 15,
        "label": "data_dep: e"
      },
      {
        "from": 4,
        "to": 16,
        "label": "data_dep: e"
      },
      {
        "from": 4,
        "to": 17,
        "label": "data_dep: e"
      }
    ]
  },
  {
    "name": "rotate_books",
    "inputs": [
      "ctx: Context < RotateBooks >",
      "turns: u32"
    ],
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 21,
        "label": "let l1 = & mut ctx . accounts . list_a ;"
      },
      {
        "id": 22,
        "label": "let l2 = & mut ctx . accounts . list_b ;"
      },
      {
        "id": 23,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 24,
        "label": "for t in 0 .. turns { let spread = (l2 . price as i64 - l1 . price as i64) . unsigned_abs () ; e . locked = e . locked . checked_add (spread) . unwrap_or (u64 :: MAX) ; l1 . price = l1 . price . saturating_add ((t % 7) as u32 + 2) ; l2 . price = l2 . price . saturating_sub (((t * 3) % 11) as u32) ; e . volume ^= ((l1 . price ^ l2 . price) as u64) << (t % 8) ; }"
      },
      {
        "id": 25,
        "label": "let spread = (l2 . price as i64 - l1 . price as i64) . unsigned_abs () ;"
      },
      {
        "id": 26,
        "label": "e . locked = e . locked . checked_add (spread) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "l1 . price = l1 . price . saturating_add ((t % 7) as u32 + 2) ;"
      },
      {
        "id": 28,
        "label": "l2 . price = l2 . price . saturating_sub (((t * 3) % 11) as u32) ;"
      },
      {
        "id": 29,
        "label": "e . volume ^= ((l1 . price ^ l2 . price) as u64) << (t % 8) ;"
      },
      {
        "id": 30,
        "label": "if l1 . price > l2 . price { m . state = Halt ; e . locked = e . locked . saturating_add (100) ; l1 . price = (l1 . price / 2) + 33 ; l2 . price = (l2 . price / 2) + 21 ; msg ! (\"halt: compress prices, add locked\") ; } else { m . state = Open ; e . volume = e . volume . saturating_add (55) ; l1 . price = l1 . price . checked_add (13) . unwrap_or (u32 :: MAX) ; l2 . price ^= 0x0F0F_F0F0 ; msg ! (\"open: price tweak & xor\") ; }"
      },
      {
        "id": 31,
        "label": "m . state = Halt ;"
      },
      {
        "id": 32,
        "label": "e . locked = e . locked . saturating_add (100) ;"
      },
      {
        "id": 33,
        "label": "l1 . price = (l1 . price / 2) + 33 ;"
      },
      {
        "id": 34,
        "label": "l2 . price = (l2 . price / 2) + 21 ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"halt: compress prices, add locked\") ;"
      },
      {
        "id": 36,
        "label": "m . state = Open ;"
      },
      {
        "id": 37,
        "label": "e . volume = e . volume . saturating_add (55) ;"
      },
      {
        "id": 38,
        "label": "l1 . price = l1 . price . checked_add (13) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 39,
        "label": "l2 . price ^= 0x0F0F_F0F0 ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"open: price tweak & xor\") ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 20,
        "label": "def: m"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: l1"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: l2"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: e"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: l2"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: l1"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: l2"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: l2"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: l2"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: spread"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: l2"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: l1"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: e"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: spread"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: l2"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: l2"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 29,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: l2"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: l2"
      },
      {
        "from": 20,
        "to": 30,
        "label": "data_dep: m"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: l2"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: l2"
      },
      {
        "from": 20,
        "to": 30,
        "label": "data_dep: m"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: l2"
      },
      {
        "from": 20,
        "to": 31,
        "label": "data_dep: m"
      },
      {
        "from": 23,
        "to": 32,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 32,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: l2"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: l2"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: m"
      },
      {
        "from": 23,
        "to": 37,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 37,
        "label": "data_dep: e"
      },
      {
        "from": 21,
        "to": 38,
        "label": "data_dep: l1"
      },
      {
        "from": 21,
        "to": 38,
        "label": "data_dep: l1"
      },
      {
        "from": 22,
        "to": 39,
        "label": "data_dep: l2"
      }
    ]
  }
]