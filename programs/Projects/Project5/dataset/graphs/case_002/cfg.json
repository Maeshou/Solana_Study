[
  {
    "name": "init_inventory",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . inventory_record . sku = * ctx . accounts . manager . key ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . inventory_record . stock = 100 ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . inventory_record . active = true ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . stock_metrics . total_in = 100 ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . stock_metrics . total_out = 0 ;"
      },
      {
        "id": 6,
        "label": "ctx . accounts . stock_metrics . bump = * ctx . bumps . get (\"inventory_record\") . unwrap () ;"
      },
      {
        "id": 7,
        "label": "ctx . accounts . reorder_policy . threshold = 20 ;"
      },
      {
        "id": 8,
        "label": "ctx . accounts . reorder_policy . lead_time = 7 ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . reorder_policy . enabled = true ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "adjust_stock",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require_keys_neq ! (ctx . accounts . inventory_record . key () , ctx . accounts . stock_metrics . key () , InventoryError :: DuplicateAccounts) ;"
      },
      {
        "id": 13,
        "label": "let mut available = ctx . accounts . inventory_record . stock ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "available -= 1 ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "available < ctx . accounts . reorder_policy . threshold as u64"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "ctx . accounts . stock_metrics . total_out += used ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Stock low: {}\" , available) ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . reorder_policy . enabled = false ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . stock_metrics . total_in -= used ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "ctx . accounts . stock_metrics . total_out -= used ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Stock sufficient: {}\" , available) ;"
      },
      {
        "id": 28,
        "label": "ctx . accounts . reorder_policy . enabled = true ;"
      },
      {
        "id": 29,
        "label": "ctx . accounts . stock_metrics . total_in += used ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 17,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]