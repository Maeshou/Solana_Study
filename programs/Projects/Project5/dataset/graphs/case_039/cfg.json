[
  {
    "name": "init_orch",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let x = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "x . stage . conductor = x . conductor . key () ;"
      },
      {
        "id": 3,
        "label": "x . stage . bound = bound ;"
      },
      {
        "id": 4,
        "label": "x . stage . state = SessionState :: Warmup ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "perform",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let x = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "x . stats . count = x . stats . count . wrapping_add (1) ;"
      },
      {
        "id": 10,
        "label": "let count = x . stats . count . max (1) ;"
      },
      {
        "id": 11,
        "label": "let sample = (x . section . energy as u64) + (k as u64 * 7) ;"
      },
      {
        "id": 12,
        "label": "let delta = sample as i128 - x . stats . mean as i128 ;"
      },
      {
        "id": 13,
        "label": "x . stats . mean = (x . stats . mean as i128 + delta / count as i128) as u64 ;"
      },
      {
        "id": 14,
        "label": "let delta2 = sample as i128 - x . stats . mean as i128 ;"
      },
      {
        "id": 15,
        "label": "x . stats . m2 = (x . stats . m2 as i128 + (delta * delta2) / count as i128) . max (0) as u64 ;"
      },
      {
        "id": 16,
        "label": "let e = (u128 :: from (x . section . energy) * 3) / 2 + 5 ;"
      },
      {
        "id": 17,
        "label": "x . section . energy = (e . min (u128 :: from (u32 :: MAX))) as u32 ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "x . stats . mean > x . stage . bound as u64"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "x . stage . state = SessionState :: Finale ;"
      },
      {
        "id": 24,
        "label": "x . section . momentum = x . section . momentum . wrapping_add (3) ;"
      },
      {
        "id": 25,
        "label": "x . stats . flags = x . stats . flags . wrapping_add (1) ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"finale: momentum+3 flags+1\") ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "x . stage . state = SessionState :: Playing ;"
      },
      {
        "id": 29,
        "label": "x . section . energy = x . section . energy / 2 + 9 ;"
      },
      {
        "id": 30,
        "label": "x . stats . count = x . stats . count . wrapping_add (2) ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"playing: energy/2+9, count+2\") ;"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 8,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 19,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 26,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  }
]