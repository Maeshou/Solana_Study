[
  {
    "name": "init_dojo",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitDojo >",
      "base: u32"
    ],
    "attributes": [],
    "body": [
      "let d = & mut ctx . accounts . dojo ;",
      "d . owner = ctx . accounts . master . key () ;",
      "d . ceiling = base * 5 + 80 ;",
      "d . flow = Warm ;",
      "let s = & mut ctx . accounts . student_a ;",
      "let t = & mut ctx . accounts . student_b ;",
      "let b = & mut ctx . accounts . board ;",
      "s . parent = d . key () ;",
      "s . mat = (base & 7) as u8 ;",
      "s . exp = (base * 3 + 11) % 257 ;",
      "t . parent = d . key () ;",
      "t . mat = ((base >> 1) & 7) as u8 ;",
      "t . exp = (base * 5 + 17) % 263 ;",
      "b . parent = d . key () ;",
      "b . ring = 9 ;",
      "b . count = 0 ;",
      "b . score = (base as u64) ^ 0xABCD_EF01 ;",
      "Ok (())"
    ]
  },
  {
    "name": "spar",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Spar >",
      "r: u32"
    ],
    "attributes": [],
    "body": [
      "let d = & mut ctx . accounts . dojo ;",
      "let s = & mut ctx . accounts . student_a ;",
      "let t = & mut ctx . accounts . student_b ;",
      "let b = & mut ctx . accounts . board ;",
      "for i in 0 .. r",
      "{",
      "let phase = ((i as i32 - 5) . abs () as u32) + 1 ;",
      "s . exp = s . exp . checked_add (phase + (i & 3)) . unwrap_or (u32 :: MAX) ;",
      "t . exp = t . exp . saturating_add ((phase / 2) + 2) ;",
      "b . count = b . count . saturating_add (1) ;",
      "b . score ^= ((s . exp as u64) << (i % 7)) ^ ((t . exp as u64) << (i % 11)) ;",
      "}",
      "let avg = if b . count == 0 { 0 } else { (b . score / b . count) as u32 } ;",
      "if avg > d . ceiling",
      "{",
      "d . flow = Rest ;",
      "s . mat ^= 1 ;",
      "t . mat = t . mat . saturating_add (1) ;",
      "b . ring = b . ring . saturating_add (1) ;",
      "msg ! (\"rest: ring++ & mat tweaks\") ;",
      "} else",
      "{",
      "d . flow = Spar ;",
      "s . exp = s . exp . saturating_add (9) ;",
      "t . exp = t . exp / 2 + 7 ;",
      "b . score ^= 0x0FF0_FF0F ;",
      "msg ! (\"spar: exp adjust & score flip\") ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitDojo",
    "node_type": "struct",
    "fields": [
      {
        "name": "dojo",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 4 + 1)]",
        "field_type": "Account < 'info , Dojo >"
      },
      {
        "name": "student_a",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Student >"
      },
      {
        "name": "student_b",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 4)]",
        "field_type": "Account < 'info , Student >"
      },
      {
        "name": "board",
        "attribute": "# [account (init , payer = payer , space = 8 + 32 + 1 + 8 + 8)]",
        "field_type": "Account < 'info , BoardTape >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "master",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Spar",
    "node_type": "struct",
    "fields": [
      {
        "name": "dojo",
        "attribute": "# [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , Dojo >"
      },
      {
        "name": "student_a",
        "attribute": "# [account (mut , has_one = dojo , constraint = student_a . mat != student_b . mat @ DojoErr :: Dup)]",
        "field_type": "Account < 'info , Student >"
      },
      {
        "name": "student_b",
        "attribute": "# [account (mut , has_one = dojo , constraint = student_b . mat != board . ring @ DojoErr :: Dup)]",
        "field_type": "Account < 'info , Student >"
      },
      {
        "name": "board",
        "attribute": "# [account (mut , has_one = dojo)]",
        "field_type": "Account < 'info , BoardTape >"
      },
      {
        "name": "master",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Dojo",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "ceiling",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "flow",
        "attribute": null,
        "field_type": "Drill"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Student",
    "node_type": "struct",
    "fields": [
      {
        "name": "parent",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "mat",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "exp",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "BoardTape",
    "node_type": "struct",
    "fields": [
      {
        "name": "parent",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "ring",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "count",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "score",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]