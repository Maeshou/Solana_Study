[
  {
    "name": "init_dojo",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dojo ;"
      },
      {
        "id": 2,
        "label": "d . owner = ctx . accounts . master . key () ;"
      },
      {
        "id": 3,
        "label": "d . ceiling = base * 5 + 80 ;"
      },
      {
        "id": 4,
        "label": "d . flow = Warm ;"
      },
      {
        "id": 5,
        "label": "let s = & mut ctx . accounts . student_a ;"
      },
      {
        "id": 6,
        "label": "let t = & mut ctx . accounts . student_b ;"
      },
      {
        "id": 7,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 8,
        "label": "s . parent = d . key () ;"
      },
      {
        "id": 9,
        "label": "s . mat = (base & 7) as u8 ;"
      },
      {
        "id": 10,
        "label": "s . exp = (base * 3 + 11) % 257 ;"
      },
      {
        "id": 11,
        "label": "t . parent = d . key () ;"
      },
      {
        "id": 12,
        "label": "t . mat = ((base >> 1) & 7) as u8 ;"
      },
      {
        "id": 13,
        "label": "t . exp = (base * 5 + 17) % 263 ;"
      },
      {
        "id": 14,
        "label": "b . parent = d . key () ;"
      },
      {
        "id": 15,
        "label": "b . ring = 9 ;"
      },
      {
        "id": 16,
        "label": "b . count = 0 ;"
      },
      {
        "id": 17,
        "label": "b . score = (base as u64) ^ 0xABCD_EF01 ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "spar",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let d = & mut ctx . accounts . dojo ;"
      },
      {
        "id": 21,
        "label": "let s = & mut ctx . accounts . student_a ;"
      },
      {
        "id": 22,
        "label": "let t = & mut ctx . accounts . student_b ;"
      },
      {
        "id": 23,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let phase = ((i as i32 - 5) . abs () as u32) + 1 ;"
      },
      {
        "id": 26,
        "label": "s . exp = s . exp . checked_add (phase + (i & 3)) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "t . exp = t . exp . saturating_add ((phase / 2) + 2) ;"
      },
      {
        "id": 28,
        "label": "b . count = b . count . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "b . score ^= ((s . exp as u64) << (i % 7)) ^ ((t . exp as u64) << (i % 11)) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let avg = if b . count == 0 { 0 } else { (b . score / b . count) as u32 } ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "avg > d . ceiling"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "d . flow = Rest ;"
      },
      {
        "id": 37,
        "label": "s . mat ^= 1 ;"
      },
      {
        "id": 38,
        "label": "t . mat = t . mat . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "b . ring = b . ring . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"rest: ring++ & mat tweaks\") ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "d . flow = Spar ;"
      },
      {
        "id": 43,
        "label": "s . exp = s . exp . saturating_add (9) ;"
      },
      {
        "id": 44,
        "label": "t . exp = t . exp / 2 + 7 ;"
      },
      {
        "id": 45,
        "label": "b . score ^= 0x0FF0_FF0F ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"spar: exp adjust & score flip\") ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "for"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 32,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 40,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]