[
  {
    "name": "init_orchard",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let o = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "o . cfg . caretaker = o . caretaker . key () ;"
      },
      {
        "id": 3,
        "label": "o . cfg . cap = cap ;"
      },
      {
        "id": 4,
        "label": "o . cfg . state = OrchardState :: Seed ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "irrigate",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let o = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "let rate = rate_q16 . max (1) ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "let g = (u128 :: from (o . tree . growth_q16) * u128 :: from (rate)) >> 16 ;"
      },
      {
        "id": 11,
        "label": "o . tree . growth_q16 = (u128 :: from (o . tree . growth_q16) + g) . min (u128 :: from (u64 :: MAX)) as u64 ;"
      },
      {
        "id": 12,
        "label": "o . tree . color = o . tree . color . rotate_left (3) ^ (o . tree . color >> 5) ;"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "let growth = (o . tree . growth_q16 >> 16) as u32 ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "growth > o . cfg . cap"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "o . cfg . state = OrchardState :: Prune ;"
      },
      {
        "id": 20,
        "label": "o . journal . cuts = o . journal . cuts . wrapping_add (2) ;"
      },
      {
        "id": 21,
        "label": "o . tree . growth_q16 = u64 :: from (o . cfg . cap) << 16 ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"prune: clip growth to cap, cuts+2\") ;"
      },
      {
        "id": 23,
        "label": "False body"
      },
      {
        "id": 24,
        "label": "o . cfg . state = OrchardState :: Bloom ;"
      },
      {
        "id": 25,
        "label": "o . journal . notes = o . journal . notes . wrapping_add (1) ;"
      },
      {
        "id": 26,
        "label": "o . tree . color ^= 0x0F0F ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"bloom: notes+1, color xor\") ;"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 9,
        "to": 13,
        "label": "for"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 15,
        "to": 23,
        "label": "false"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 22,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]