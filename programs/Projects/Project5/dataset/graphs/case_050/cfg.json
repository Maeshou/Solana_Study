[
  {
    "name": "init_forge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "s . board . owner = s . owner . key () ;"
      },
      {
        "id": 3,
        "label": "s . board . state = Prep ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "roll",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let s = & mut ctx . accounts ;"
      },
      {
        "id": 7,
        "label": "let per = period . max (5) ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let t = i % per ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "t <= per / 2"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "let w = t * 2 + 3 ;"
      },
      {
        "id": 15,
        "label": "s . mold . spark = s . mold . spark . wrapping_add (w) ;"
      },
      {
        "id": 16,
        "label": "s . ledger . spikes = s . ledger . spikes . wrapping_add (w / 3 + 1) ;"
      },
      {
        "id": 17,
        "label": "s . ledger . turns = s . ledger . turns . wrapping_add (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"triangle up\") ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "let w = (per - t) * 2 + 3 ;"
      },
      {
        "id": 21,
        "label": "s . mold . spark = s . mold . spark . wrapping_add (w) ;"
      },
      {
        "id": 22,
        "label": "s . ledger . spikes = s . ledger . spikes . wrapping_add (w / 4 + 2) ;"
      },
      {
        "id": 23,
        "label": "s . ledger . turns = s . ledger . turns . wrapping_add (1) ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"triangle down\") ;"
      },
      {
        "id": 25,
        "label": "merge"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "s . mold . spark > 5_000"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "s . board . state = Jackpot ;"
      },
      {
        "id": 32,
        "label": "s . ledger . badges = s . ledger . badges . wrapping_add (5) ;"
      },
      {
        "id": 33,
        "label": "s . mold . spark = s . mold . spark / 2 + 111 ;"
      },
      {
        "id": 34,
        "label": "s . ledger . spikes = s . ledger . spikes . wrapping_mul (2) ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"jackpot: badges+5, spark half+111, spikes*2\") ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "s . board . state = Rolling ;"
      },
      {
        "id": 38,
        "label": "s . ledger . turns = s . ledger . turns . wrapping_add (2) ;"
      },
      {
        "id": 39,
        "label": "s . mold . spark = s . mold . spark + 77 ;"
      },
      {
        "id": 40,
        "label": "s . ledger . spikes ^= 0x3333 ;"
      },
      {
        "id": 41,
        "label": "msg ! (\"rolling: turns+2, spark+77, spikes xor\") ;"
      },
      {
        "id": 42,
        "label": "merge"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 10,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 18,
        "to": 25,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 8,
        "to": 26,
        "label": "for"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 27,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 35,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]