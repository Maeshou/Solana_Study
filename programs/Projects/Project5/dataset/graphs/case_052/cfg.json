[
  {
    "name": "init_market",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts ;"
      },
      {
        "id": 2,
        "label": "m . listing . seller = m . seller . key () ;"
      },
      {
        "id": 3,
        "label": "m . listing . k_q16 = k_q16 . max (1) ;"
      },
      {
        "id": 4,
        "label": "m . listing . state = Live ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "quote",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let m = & mut ctx . accounts ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "let x = m . curve . x_q16 as u128 ;"
      },
      {
        "id": 10,
        "label": "let k = m . listing . k_q16 as u128 ;"
      },
      {
        "id": 11,
        "label": "let one = 1u128 << 16 ;"
      },
      {
        "id": 12,
        "label": "let term = (x * (one - x)) >> 16 ;"
      },
      {
        "id": 13,
        "label": "let nx = x + ((k * term) >> 16) ;"
      },
      {
        "id": 14,
        "label": "m . curve . x_q16 = nx . min (u128 :: from (u32 :: MAX)) as u32 ;"
      },
      {
        "id": 15,
        "label": "m . stats . ticks = m . stats . ticks . wrapping_add ((i & 3) as u32 + 1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "m . curve . x_q16 > (one_u32 () * 3 / 4)"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "m . listing . state = Shut ;"
      },
      {
        "id": 22,
        "label": "m . stats . flags = m . stats . flags . wrapping_add (1) ;"
      },
      {
        "id": 23,
        "label": "m . curve . x_q16 = (m . curve . x_q16 / 2) . max (1 << 8) ;"
      },
      {
        "id": 24,
        "label": "m . wallet . balance = m . wallet . balance . saturating_add (5) ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"shut: x halved, flags+1, balance+5\") ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "m . listing . state = Cool ;"
      },
      {
        "id": 28,
        "label": "m . stats . trades = m . stats . trades . wrapping_add (2) ;"
      },
      {
        "id": 29,
        "label": "m . curve . x_q16 = m . curve . x_q16 + 77 ;"
      },
      {
        "id": 30,
        "label": "m . wallet . lock = m . wallet . lock . wrapping_add (1) ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"cool: trades+2, x+77, lock+1\") ;"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 8,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 17,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 25,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  },
  {
    "name": "one_u32",
    "nodes": [
      {
        "id": 34,
        "label": "Entry"
      },
      {
        "id": 35,
        "label": "1 << 16"
      }
    ],
    "edges": [
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]