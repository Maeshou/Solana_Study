[
  {
    "name": "init_forge",
    "inputs": [
      "ctx: Context < InitForge >",
      "heat: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . anvil . durability = 100 ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . anvil . owner = ctx . accounts . blacksmith . key () ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . anvil . hot = false ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . materials . ore = 0 ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . materials . spark = 0 ;"
      },
      {
        "id": 6,
        "label": "ctx . accounts . materials . ready = true ;"
      },
      {
        "id": 7,
        "label": "ctx . accounts . rules . heat = heat ;"
      },
      {
        "id": 8,
        "label": "ctx . accounts . rules . cost = 3 ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . rules . bump = * ctx . bumps . get (\"rules\") . unwrap () ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": []
  },
  {
    "name": "forge",
    "inputs": [
      "ctx: Context < Forge >",
      "steps: u32"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "assert_ne ! (ctx . accounts . anvil . key () , ctx . accounts . materials . key () , \"dup anvil/materials\") ;"
      },
      {
        "id": 13,
        "label": "assert_ne ! (ctx . accounts . anvil . key () , ctx . accounts . rules . key () , \"dup anvil/rules\") ;"
      },
      {
        "id": 14,
        "label": "assert_ne ! (ctx . accounts . materials . key () , ctx . accounts . rules . key () , \"dup materials/rules\") ;"
      },
      {
        "id": 15,
        "label": "for _ in 0 .. steps { ctx . accounts . anvil . durability = ctx . accounts . anvil . durability . saturating_sub (1) ; ctx . accounts . materials . ore = ctx . accounts . materials . ore . saturating_add (2) ; ctx . accounts . materials . spark = ctx . accounts . materials . spark . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "ctx . accounts . anvil . durability = ctx . accounts . anvil . durability . saturating_sub (1) ;"
      },
      {
        "id": 17,
        "label": "ctx . accounts . materials . ore = ctx . accounts . materials . ore . saturating_add (2) ;"
      },
      {
        "id": 18,
        "label": "ctx . accounts . materials . spark = ctx . accounts . materials . spark . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "if steps > ctx . accounts . rules . heat { ctx . accounts . anvil . hot = true ; ctx . accounts . rules . cost = ctx . accounts . rules . cost . saturating_add (1) ; ctx . accounts . materials . ready = false ; msg ! (\"overheat; cost raised, materials cooling\") ; } else { ctx . accounts . anvil . hot = false ; ctx . accounts . rules . cost = ctx . accounts . rules . cost . saturating_add (0) ; ctx . accounts . materials . ready = true ; msg ! (\"temper ok; materials stable\") ; }"
      },
      {
        "id": 20,
        "label": "ctx . accounts . anvil . hot = true ;"
      },
      {
        "id": 21,
        "label": "ctx . accounts . rules . cost = ctx . accounts . rules . cost . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "ctx . accounts . materials . ready = false ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"overheat; cost raised, materials cooling\") ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . anvil . hot = false ;"
      },
      {
        "id": 25,
        "label": "ctx . accounts . rules . cost = ctx . accounts . rules . cost . saturating_add (0) ;"
      },
      {
        "id": 26,
        "label": "ctx . accounts . materials . ready = true ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"temper ok; materials stable\") ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": []
  }
]