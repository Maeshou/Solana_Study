[
  {
    "name": "transfer_and_update_params",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault_acc = & ctx . accounts . vault_account ;"
      },
      {
        "id": 2,
        "label": "let recipient_acc = & ctx . accounts . recipient_account ;"
      },
      {
        "id": 3,
        "label": "let dup_acc1 = & ctx . accounts . dup_account1 ;"
      },
      {
        "id": 4,
        "label": "let dup_acc2 = & ctx . accounts . dup_account2 ;"
      },
      {
        "id": 5,
        "label": "let settings_acc = & ctx . accounts . settings_account ;"
      },
      {
        "id": 6,
        "label": "let payer = & ctx . accounts . payer ;"
      },
      {
        "id": 7,
        "label": "let (fee , net_amount) = { let mut f = amount / 50 ; if f == 0 { f = 1 ; } let net = amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP1] amount: {}, fee: {}, net_amount: {}\" , amount , f , net) ; (f , net) } ;"
      },
      {
        "id": 8,
        "label": "* * vault_acc . try_borrow_mut_lamports () ? -= amount ;"
      },
      {
        "id": 9,
        "label": "* * recipient_acc . try_borrow_mut_lamports () ? += net_amount ;"
      },
      {
        "id": 10,
        "label": "* * payer . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 11,
        "label": "{ let mut d1 = dup_acc1 . try_borrow_mut_data () ? ; d1 [0] = d1 [0] . wrapping_add (1) ; msg ! (\"[STEP2] dup_acc1 カウンタを +1 した\") ; let mut d2 = dup_acc2 . try_borrow_mut_data () ? ; d2 [0] = d2 [0] . wrapping_add (2) ; msg ! (\"[STEP2] dup_acc2 カウンタを +2 した\") ; }"
      },
      {
        "id": 12,
        "label": "let mut settings_value : u64 = { let raw = settings_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [0 .. 8]) ; let v = u64 :: from_le_bytes (b) ; msg ! (\"[STEP3] 現在の設定値: {}\" , v) ; v } ;"
      },
      {
        "id": 13,
        "label": "{ if new_setting == 0 { msg ! (\"[STEP4] new_setting は 0 を許容しない\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } if new_setting > 5_000 { msg ! (\"[STEP4] new_setting が大きすぎる\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } settings_value = new_setting ; }"
      },
      {
        "id": 14,
        "label": "{ let bytes = settings_value . to_le_bytes () ; let mut raw = settings_acc . try_borrow_mut_data () ? ; for i in 0 .. 8 { raw [i] = bytes [i] ; } msg ! (\"[STEP4] 設定値を {} に更新\" , settings_value) ; }"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "call"
      }
    ]
  }
]