[
  {
    "name": "transfer_and_update_params",
    "inputs": [
      "ctx: Context < TransferAndUpdateParams >",
      "amount: u64",
      "new_setting: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault_acc = & ctx . accounts . vault_account ;"
      },
      {
        "id": 2,
        "label": "let recipient_acc = & ctx . accounts . recipient_account ;"
      },
      {
        "id": 3,
        "label": "let dup_acc1 = & ctx . accounts . dup_account1 ;"
      },
      {
        "id": 4,
        "label": "let dup_acc2 = & ctx . accounts . dup_account2 ;"
      },
      {
        "id": 5,
        "label": "let settings_acc = & ctx . accounts . settings_account ;"
      },
      {
        "id": 6,
        "label": "let payer = & ctx . accounts . payer ;"
      },
      {
        "id": 7,
        "label": "let (fee , net_amount) = { let mut f = amount / 50 ; if f == 0 { f = 1 ; } let net = amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP1] amount: {}, fee: {}, net_amount: {}\" , amount , f , net) ; (f , net) } ;"
      },
      {
        "id": 8,
        "label": "let mut f = amount / 50 ;"
      },
      {
        "id": 9,
        "label": "if f == 0 { f = 1 ; }"
      },
      {
        "id": 10,
        "label": "f = 1 ;"
      },
      {
        "id": 11,
        "label": "let net = amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ;"
      },
      {
        "id": 12,
        "label": "msg ! (\"[STEP1] amount: {}, fee: {}, net_amount: {}\" , amount , f , net) ;"
      },
      {
        "id": 13,
        "label": "(f , net)"
      },
      {
        "id": 14,
        "label": "* * vault_acc . try_borrow_mut_lamports () ? -= amount ;"
      },
      {
        "id": 15,
        "label": "* * recipient_acc . try_borrow_mut_lamports () ? += net_amount ;"
      },
      {
        "id": 16,
        "label": "* * payer . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 17,
        "label": "{ let mut d1 = dup_acc1 . try_borrow_mut_data () ? ; d1 [0] = d1 [0] . wrapping_add (1) ; msg ! (\"[STEP2] dup_acc1 カウンタを +1 した\") ; let mut d2 = dup_acc2 . try_borrow_mut_data () ? ; d2 [0] = d2 [0] . wrapping_add (2) ; msg ! (\"[STEP2] dup_acc2 カウンタを +2 した\") ; }"
      },
      {
        "id": 18,
        "label": "let mut d1 = dup_acc1 . try_borrow_mut_data () ? ;"
      },
      {
        "id": 19,
        "label": "d1 [0] = d1 [0] . wrapping_add (1) ;"
      },
      {
        "id": 20,
        "label": "msg ! (\"[STEP2] dup_acc1 カウンタを +1 した\") ;"
      },
      {
        "id": 21,
        "label": "let mut d2 = dup_acc2 . try_borrow_mut_data () ? ;"
      },
      {
        "id": 22,
        "label": "d2 [0] = d2 [0] . wrapping_add (2) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"[STEP2] dup_acc2 カウンタを +2 した\") ;"
      },
      {
        "id": 24,
        "label": "let mut settings_value : u64 = { let raw = settings_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [0 .. 8]) ; let v = u64 :: from_le_bytes (b) ; msg ! (\"[STEP3] 現在の設定値: {}\" , v) ; v } ;"
      },
      {
        "id": 25,
        "label": "let raw = settings_acc . try_borrow_data () ? ;"
      },
      {
        "id": 26,
        "label": "let mut b = [0u8 ; 8] ;"
      },
      {
        "id": 27,
        "label": "b . copy_from_slice (& raw [0 .. 8]) ;"
      },
      {
        "id": 28,
        "label": "let v = u64 :: from_le_bytes (b) ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"[STEP3] 現在の設定値: {}\" , v) ;"
      },
      {
        "id": 30,
        "label": "v"
      },
      {
        "id": 31,
        "label": "{ if new_setting == 0 { msg ! (\"[STEP4] new_setting は 0 を許容しない\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } if new_setting > 5_000 { msg ! (\"[STEP4] new_setting が大きすぎる\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } settings_value = new_setting ; }"
      },
      {
        "id": 32,
        "label": "if new_setting == 0 { msg ! (\"[STEP4] new_setting は 0 を許容しない\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; }"
      },
      {
        "id": 33,
        "label": "msg ! (\"[STEP4] new_setting は 0 を許容しない\") ;"
      },
      {
        "id": 34,
        "label": "return Err (error ! (ProgramError :: InvalidArgument)) ;"
      },
      {
        "id": 35,
        "label": "if new_setting > 5_000 { msg ! (\"[STEP4] new_setting が大きすぎる\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; }"
      },
      {
        "id": 36,
        "label": "msg ! (\"[STEP4] new_setting が大きすぎる\") ;"
      },
      {
        "id": 37,
        "label": "return Err (error ! (ProgramError :: InvalidArgument)) ;"
      },
      {
        "id": 38,
        "label": "settings_value = new_setting ;"
      },
      {
        "id": 39,
        "label": "{ let bytes = settings_value . to_le_bytes () ; let mut raw = settings_acc . try_borrow_mut_data () ? ; for i in 0 .. 8 { raw [i] = bytes [i] ; } msg ! (\"[STEP4] 設定値を {} に更新\" , settings_value) ; }"
      },
      {
        "id": 40,
        "label": "let bytes = settings_value . to_le_bytes () ;"
      },
      {
        "id": 41,
        "label": "let mut raw = settings_acc . try_borrow_mut_data () ? ;"
      },
      {
        "id": 42,
        "label": "for i in 0 .. 8 { raw [i] = bytes [i] ; }"
      },
      {
        "id": 43,
        "label": "raw [i] = bytes [i] ;"
      },
      {
        "id": 44,
        "label": "msg ! (\"[STEP4] 設定値を {} に更新\" , settings_value) ;"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: vault_acc"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: recipient_acc"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: dup_acc1"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: dup_acc2"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: settings_acc"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: payer"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: f"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: f"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: f"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: f"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: net"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: f"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: f"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: net"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: vault_acc"
      },
      {
        "from": 2,
        "to": 15,
        "label": "data_dep: recipient_acc"
      },
      {
        "from": 6,
        "to": 16,
        "label": "data_dep: payer"
      },
      {
        "from": 3,
        "to": 17,
        "label": "data_dep: dup_acc1"
      },
      {
        "from": 4,
        "to": 17,
        "label": "data_dep: dup_acc2"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: d1"
      },
      {
        "from": 3,
        "to": 18,
        "label": "data_dep: dup_acc1"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: d1"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: d1"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: d2"
      },
      {
        "from": 4,
        "to": 21,
        "label": "data_dep: dup_acc2"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d2"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: d2"
      },
      {
        "from": 5,
        "to": 24,
        "label": "data_dep: settings_acc"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: raw"
      },
      {
        "from": 5,
        "to": 25,
        "label": "data_dep: settings_acc"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: b"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: raw"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: v"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: b"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: v"
      },
      {
        "from": 5,
        "to": 39,
        "label": "data_dep: settings_acc"
      },
      {
        "from": 25,
        "to": 39,
        "label": "data_dep: raw"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: bytes"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: raw"
      },
      {
        "from": 5,
        "to": 41,
        "label": "data_dep: settings_acc"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: raw"
      },
      {
        "from": 40,
        "to": 42,
        "label": "data_dep: bytes"
      },
      {
        "from": 41,
        "to": 43,
        "label": "data_dep: raw"
      },
      {
        "from": 40,
        "to": 43,
        "label": "data_dep: bytes"
      }
    ]
  }
]