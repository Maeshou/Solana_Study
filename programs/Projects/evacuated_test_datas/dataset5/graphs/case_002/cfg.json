[
  {
    "name": "deposit_and_merge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let target_acc = & ctx . accounts . target_account ;"
      },
      {
        "id": 2,
        "label": "let source1 = & ctx . accounts . merge_account1 ;"
      },
      {
        "id": 3,
        "label": "let source2 = & ctx . accounts . merge_account2 ;"
      },
      {
        "id": 4,
        "label": "let fee_acc = & ctx . accounts . fee_account ;"
      },
      {
        "id": 5,
        "label": "let depositor = & ctx . accounts . depositor ;"
      },
      {
        "id": 6,
        "label": "{ if deposit_amount < 10 { msg ! (\"[STEP1] deposit_amount は最低 10 を要求\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } let mut fee = deposit_amount / 20 ; if fee == 0 { fee = 1 ; } let net = deposit_amount . checked_sub (fee) . unwrap () ; msg ! (\"[STEP1] deposit_amount: {}, fee: {}, net: {}\" , deposit_amount , fee , net) ; * * target_acc . try_borrow_mut_lamports () ? += net ; * * fee_acc . try_borrow_mut_lamports () ? += fee ; }"
      },
      {
        "id": 7,
        "label": "{ let mut raw1 = source1 . try_borrow_mut_data () ? ; let mut raw2 = source2 . try_borrow_data () ? ; let v1 = raw1 [0] ; let v2 = raw2 [0] ; let merged = v1 . wrapping_add (v2) ; raw1 [0] = merged ; msg ! (\"[STEP2] source1.meta ({}) + source2.meta ({}) = merged ({})\" , v1 , v2 , merged) ; }"
      },
      {
        "id": 8,
        "label": "{ let mut raw2 = source2 . try_borrow_mut_data () ? ; for i in 0 .. raw2 . len () { raw2 [i] = 0 ; } msg ! (\"[STEP3] source2 をゼロクリア\") ; }"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "call"
      }
    ]
  }
]