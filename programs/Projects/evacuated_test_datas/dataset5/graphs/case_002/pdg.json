[
  {
    "name": "deposit_and_merge",
    "inputs": [
      "ctx: Context < DepositAndMerge >",
      "deposit_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let target_acc = & ctx . accounts . target_account ;"
      },
      {
        "id": 2,
        "label": "let source1 = & ctx . accounts . merge_account1 ;"
      },
      {
        "id": 3,
        "label": "let source2 = & ctx . accounts . merge_account2 ;"
      },
      {
        "id": 4,
        "label": "let fee_acc = & ctx . accounts . fee_account ;"
      },
      {
        "id": 5,
        "label": "let depositor = & ctx . accounts . depositor ;"
      },
      {
        "id": 6,
        "label": "{ if deposit_amount < 10 { msg ! (\"[STEP1] deposit_amount は最低 10 を要求\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; } let mut fee = deposit_amount / 20 ; if fee == 0 { fee = 1 ; } let net = deposit_amount . checked_sub (fee) . unwrap () ; msg ! (\"[STEP1] deposit_amount: {}, fee: {}, net: {}\" , deposit_amount , fee , net) ; * * target_acc . try_borrow_mut_lamports () ? += net ; * * fee_acc . try_borrow_mut_lamports () ? += fee ; }"
      },
      {
        "id": 7,
        "label": "if deposit_amount < 10 { msg ! (\"[STEP1] deposit_amount は最低 10 を要求\") ; return Err (error ! (ProgramError :: InvalidArgument)) ; }"
      },
      {
        "id": 8,
        "label": "msg ! (\"[STEP1] deposit_amount は最低 10 を要求\") ;"
      },
      {
        "id": 9,
        "label": "return Err (error ! (ProgramError :: InvalidArgument)) ;"
      },
      {
        "id": 10,
        "label": "let mut fee = deposit_amount / 20 ;"
      },
      {
        "id": 11,
        "label": "if fee == 0 { fee = 1 ; }"
      },
      {
        "id": 12,
        "label": "fee = 1 ;"
      },
      {
        "id": 13,
        "label": "let net = deposit_amount . checked_sub (fee) . unwrap () ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"[STEP1] deposit_amount: {}, fee: {}, net: {}\" , deposit_amount , fee , net) ;"
      },
      {
        "id": 15,
        "label": "* * target_acc . try_borrow_mut_lamports () ? += net ;"
      },
      {
        "id": 16,
        "label": "* * fee_acc . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 17,
        "label": "{ let mut raw1 = source1 . try_borrow_mut_data () ? ; let mut raw2 = source2 . try_borrow_data () ? ; let v1 = raw1 [0] ; let v2 = raw2 [0] ; let merged = v1 . wrapping_add (v2) ; raw1 [0] = merged ; msg ! (\"[STEP2] source1.meta ({}) + source2.meta ({}) = merged ({})\" , v1 , v2 , merged) ; }"
      },
      {
        "id": 18,
        "label": "let mut raw1 = source1 . try_borrow_mut_data () ? ;"
      },
      {
        "id": 19,
        "label": "let mut raw2 = source2 . try_borrow_data () ? ;"
      },
      {
        "id": 20,
        "label": "let v1 = raw1 [0] ;"
      },
      {
        "id": 21,
        "label": "let v2 = raw2 [0] ;"
      },
      {
        "id": 22,
        "label": "let merged = v1 . wrapping_add (v2) ;"
      },
      {
        "id": 23,
        "label": "raw1 [0] = merged ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"[STEP2] source1.meta ({}) + source2.meta ({}) = merged ({})\" , v1 , v2 , merged) ;"
      },
      {
        "id": 25,
        "label": "{ let mut raw2 = source2 . try_borrow_mut_data () ? ; for i in 0 .. raw2 . len () { raw2 [i] = 0 ; } msg ! (\"[STEP3] source2 をゼロクリア\") ; }"
      },
      {
        "id": 26,
        "label": "let mut raw2 = source2 . try_borrow_mut_data () ? ;"
      },
      {
        "id": 27,
        "label": "for i in 0 .. raw2 . len () { raw2 [i] = 0 ; }"
      },
      {
        "id": 28,
        "label": "raw2 [i] = 0 ;"
      },
      {
        "id": 29,
        "label": "msg ! (\"[STEP3] source2 をゼロクリア\") ;"
      },
      {
        "id": 30,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: target_acc"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: source1"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: source2"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: fee_acc"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: depositor"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: target_acc"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: fee_acc"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: fee"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: fee"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: net"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: fee"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: target_acc"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: net"
      },
      {
        "from": 4,
        "to": 16,
        "label": "data_dep: fee_acc"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: fee"
      },
      {
        "from": 2,
        "to": 17,
        "label": "data_dep: source1"
      },
      {
        "from": 3,
        "to": 17,
        "label": "data_dep: source2"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: raw1"
      },
      {
        "from": 2,
        "to": 18,
        "label": "data_dep: source1"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: raw2"
      },
      {
        "from": 3,
        "to": 19,
        "label": "data_dep: source2"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: v1"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: raw1"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: v2"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: raw2"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: merged"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: v1"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: v2"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: raw1"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: merged"
      },
      {
        "from": 3,
        "to": 25,
        "label": "data_dep: source2"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: raw2"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: raw2"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: raw2"
      },
      {
        "from": 3,
        "to": 26,
        "label": "data_dep: source2"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: raw2"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: raw2"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: raw2"
      }
    ]
  }
]