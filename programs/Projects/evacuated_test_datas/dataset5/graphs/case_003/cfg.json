[
  {
    "name": "withdraw_and_reassign",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault_acc = & ctx . accounts . vault_account ;"
      },
      {
        "id": 2,
        "label": "let receiver = & ctx . accounts . receiver ;"
      },
      {
        "id": 3,
        "label": "let delegate1 = & ctx . accounts . delegate_account1 ;"
      },
      {
        "id": 4,
        "label": "let delegate2 = & ctx . accounts . delegate_account2 ;"
      },
      {
        "id": 5,
        "label": "let admin = & ctx . accounts . admin ;"
      },
      {
        "id": 6,
        "label": "let (fee , net) = { let mut f = withdraw_amount / 100 ; if f < 2 { f = 2 ; } let net_amt = withdraw_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP1] withdraw_amount: {}, fee: {}, net: {}\" , withdraw_amount , f , net_amt) ; (f , net_amt) } ;"
      },
      {
        "id": 7,
        "label": "* * vault_acc . try_borrow_mut_lamports () ? -= withdraw_amount ;"
      },
      {
        "id": 8,
        "label": "* * receiver . try_borrow_mut_lamports () ? += net ;"
      },
      {
        "id": 9,
        "label": "* * admin . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 10,
        "label": "{ let mut d1 = delegate1 . try_borrow_mut_data () ? ; let arr1 = new_delegate_a . to_bytes () ; for i in 0 .. 32 { d1 [i] = arr1 [i] ; } msg ! (\"[STEP2] delegate1 を {}\" , new_delegate_a) ; }"
      },
      {
        "id": 11,
        "label": "{ let mut d2 = delegate2 . try_borrow_mut_data () ? ; let arr2 = new_delegate_b . to_bytes () ; for i in 0 .. 32 { d2 [i] = arr2 [i] ; } msg ! (\"[STEP2] delegate2 を {}\" , new_delegate_b) ; }"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "call"
      }
    ]
  }
]