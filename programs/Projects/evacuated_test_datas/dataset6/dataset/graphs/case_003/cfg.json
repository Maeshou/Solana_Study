[
  {
    "name": "setup_and_swap",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let wallet_acc = & ctx . accounts . wallet_account ;"
      },
      {
        "id": 2,
        "label": "let token_acc = & ctx . accounts . token_account ;"
      },
      {
        "id": 3,
        "label": "let fee_acc = & ctx . accounts . fee_account ;"
      },
      {
        "id": 4,
        "label": "{ let mut raw = wallet_acc . try_borrow_mut_data () ? ; raw [0] = 1 ; let bytes = initial_coins . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP1] wallet_account を再初期化: coins = {}\" , initial_coins) ; }"
      },
      {
        "id": 5,
        "label": "let mut stored_coins : u64 = { let raw = wallet_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [1 .. 9]) ; let c = u64 :: from_le_bytes (b) ; msg ! (\"[STEP2] stored_coins = {}\" , c) ; c } ;"
      },
      {
        "id": 6,
        "label": "if (swap_amount > stored_coins)"
      },
      {
        "id": 7,
        "label": "then"
      },
      {
        "id": 8,
        "label": "msg ! (\"[STEP3] swap_amount が大きすぎる: {}\" , swap_amount) ;"
      },
      {
        "id": 9,
        "label": "return Err (error ! (ProgramError :: InsufficientFunds)) ;"
      },
      {
        "id": 10,
        "label": "else"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let (fee , net) = { let mut f = swap_amount / 25 ; if f < 2 { f = 2 ; } let net_amount = swap_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP4] swap_amount = {}, fee = {}, net_amount = {}\" , swap_amount , f , net_amount) ; (f , net_amount) } ;"
      },
      {
        "id": 14,
        "label": "* * wallet_acc . try_borrow_mut_lamports () ? -= swap_amount ;"
      },
      {
        "id": 15,
        "label": "* * token_acc . try_borrow_mut_lamports () ? += net ;"
      },
      {
        "id": 16,
        "label": "* * fee_acc . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 17,
        "label": "stored_coins = stored_coins . checked_sub (swap_amount) . unwrap () ;"
      },
      {
        "id": 18,
        "label": "{ let mut raw = wallet_acc . try_borrow_mut_data () ? ; let bytes = stored_coins . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP5] wallet_account の新しい coins = {}\" , stored_coins) ; }"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 6,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "call"
      }
    ]
  }
]