[
  {
    "name": "setup_and_swap",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetupAndSwap >",
      "initial_coins: u64",
      "swap_amount: u64"
    ],
    "attributes": [
      "# [doc = \" 1) `WalletAccount` を初期化する（何度でも再初期化可能）  \"]",
      "# [doc = \" 2) トークンスワップ処理を行うが、account_matching を行わず任意のアカウントを読み書きしてしまう\"]"
    ],
    "body": [
      "let wallet_acc = & ctx . accounts . wallet_account ;",
      "let token_acc = & ctx . accounts . token_account ;",
      "let fee_acc = & ctx . accounts . fee_account ;",
      "{ let mut raw = wallet_acc . try_borrow_mut_data () ? ; raw [0] = 1 ; let bytes = initial_coins . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP1] wallet_account を再初期化: coins = {}\" , initial_coins) ; }",
      "let mut stored_coins : u64 = { let raw = wallet_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [1 .. 9]) ; let c = u64 :: from_le_bytes (b) ; msg ! (\"[STEP2] stored_coins = {}\" , c) ; c } ;",
      "if swap_amount > stored_coins { msg ! (\"[STEP3] swap_amount が大きすぎる: {}\" , swap_amount) ; return Err (error ! (ProgramError :: InsufficientFunds)) ; }",
      "let (fee , net) = { let mut f = swap_amount / 25 ; if f < 2 { f = 2 ; } let net_amount = swap_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP4] swap_amount = {}, fee = {}, net_amount = {}\" , swap_amount , f , net_amount) ; (f , net_amount) } ;",
      "* * wallet_acc . try_borrow_mut_lamports () ? -= swap_amount ;",
      "* * token_acc . try_borrow_mut_lamports () ? += net ;",
      "* * fee_acc . try_borrow_mut_lamports () ? += fee ;",
      "stored_coins = stored_coins . checked_sub (swap_amount) . unwrap () ;",
      "{ let mut raw = wallet_acc . try_borrow_mut_data () ? ; let bytes = stored_coins . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP5] wallet_account の新しい coins = {}\" , stored_coins) ; }",
      "Ok (())"
    ]
  },
  {
    "name": "WalletAccount",
    "node_type": "struct",
    "fields": [
      {
        "name": "initialized",
        "attribute": "# [doc = \" 初期化フラグ: 0 = 未初期化, 1 = 初期化済み\"]",
        "field_type": "u8"
      },
      {
        "name": "coins",
        "attribute": "# [doc = \" コイン数\"]",
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SetupAndSwap",
    "node_type": "struct",
    "fields": [
      {
        "name": "wallet_account",
        "attribute": "# [doc = \" AccountMatching をせず再初期化可能\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_account",
        "attribute": "# [doc = \" トークンアカウント（owner / PDA チェックなし）\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "fee_account",
        "attribute": "# [doc = \" 手数料受取先（owner チェック省略）\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]