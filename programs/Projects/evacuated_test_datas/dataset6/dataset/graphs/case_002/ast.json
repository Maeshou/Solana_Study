[
  {
    "name": "config_and_transfer_funds",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ConfigAndTransferFunds >",
      "default_param: u64",
      "transfer_amount: u64"
    ],
    "attributes": [
      "# [doc = \" 1) `ConfigAccount` を初期化する（すでに初期化済みであっても再初期化可能）  \"]",
      "# [doc = \" 2) 資金転送処理をするが、account_matching を行わず任意のアカウントを読み書きしてしまう\"]"
    ],
    "body": [
      "let config_acc = & ctx . accounts . config_account ;",
      "let sender = & ctx . accounts . sender ;",
      "let receiver = & ctx . accounts . receiver ;",
      "let fee_acc = & ctx . accounts . fee_account ;",
      "{ let mut raw = config_acc . try_borrow_mut_data () ? ; raw [0] = 1 ; let bytes = default_param . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP1] config_account を再初期化: param = {}\" , default_param) ; }",
      "let mut stored_param : u64 = { let raw = config_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [1 .. 9]) ; let p = u64 :: from_le_bytes (b) ; msg ! (\"[STEP2] stored_param = {}\" , p) ; p } ;",
      "if transfer_amount > stored_param { msg ! (\"[STEP3] transfer_amount が大きすぎる: {}\" , transfer_amount) ; return Err (error ! (ProgramError :: InsufficientFunds)) ; }",
      "let (fee , net) = { let mut f = transfer_amount / 33 ; if f == 0 { f = 1 ; } let net_amount = transfer_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP4] transfer_amount = {}, fee = {}, net_amount = {}\" , transfer_amount , f , net_amount) ; (f , net_amount) } ;",
      "* * config_acc . try_borrow_mut_lamports () ? -= transfer_amount ;",
      "* * receiver . try_borrow_mut_lamports () ? += net ;",
      "* * sender . try_borrow_mut_lamports () ? += fee ;",
      "stored_param = stored_param . checked_sub (transfer_amount) . unwrap () ;",
      "{ let mut raw = config_acc . try_borrow_mut_data () ? ; let bytes = stored_param . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP5] config_account の新しい param = {}\" , stored_param) ; }",
      "Ok (())"
    ]
  },
  {
    "name": "ConfigAccount",
    "node_type": "struct",
    "fields": [
      {
        "name": "initialized",
        "attribute": "# [doc = \" 初期化フラグ: 0 = 未初期化, 1 = 初期化済み\"]",
        "field_type": "u8"
      },
      {
        "name": "param",
        "attribute": "# [doc = \" 設定パラメータ\"]",
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ConfigAndTransferFunds",
    "node_type": "struct",
    "fields": [
      {
        "name": "config_account",
        "attribute": "# [doc = \" AccountMatching をせず再初期化可能\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "sender",
        "attribute": "# [doc = \" lamports を手数料として受け取るアカウント（owner チェック省略）\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "receiver",
        "attribute": "# [doc = \" lamports を受け取るアカウント（owner チェック省略）\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "fee_account",
        "attribute": "# [doc = \" 手数料受取先（owner チェック省略）\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]