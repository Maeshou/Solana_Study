[
  {
    "name": "initialize_and_process_payment",
    "inputs": [
      "ctx: Context < InitializeAndProcessPayment >",
      "initial_balance: u64",
      "pay_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let data_acc = & ctx . accounts . data_account ;"
      },
      {
        "id": 2,
        "label": "let payer = & ctx . accounts . payer ;"
      },
      {
        "id": 3,
        "label": "let payee = & ctx . accounts . payee ;"
      },
      {
        "id": 4,
        "label": "let system_program = & ctx . accounts . system_program ;"
      },
      {
        "id": 5,
        "label": "{ let mut raw = data_acc . try_borrow_mut_data () ? ; raw [0] = 1 ; let bytes = initial_balance . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP1] data_account を再初期化: balance = {}\" , initial_balance) ; }"
      },
      {
        "id": 6,
        "label": "let mut raw = data_acc . try_borrow_mut_data () ? ;"
      },
      {
        "id": 7,
        "label": "raw [0] = 1 ;"
      },
      {
        "id": 8,
        "label": "let bytes = initial_balance . to_le_bytes () ;"
      },
      {
        "id": 9,
        "label": "for i in 0 .. 8 { raw [1 + i] = bytes [i] ; }"
      },
      {
        "id": 10,
        "label": "raw [1 + i] = bytes [i] ;"
      },
      {
        "id": 11,
        "label": "msg ! (\"[STEP1] data_account を再初期化: balance = {}\" , initial_balance) ;"
      },
      {
        "id": 12,
        "label": "let mut stored_balance : u64 = { let raw = data_acc . try_borrow_data () ? ; let mut b = [0u8 ; 8] ; b . copy_from_slice (& raw [1 .. 9]) ; let bal = u64 :: from_le_bytes (b) ; msg ! (\"[STEP2] stored_balance = {}\" , bal) ; bal } ;"
      },
      {
        "id": 13,
        "label": "let raw = data_acc . try_borrow_data () ? ;"
      },
      {
        "id": 14,
        "label": "let mut b = [0u8 ; 8] ;"
      },
      {
        "id": 15,
        "label": "b . copy_from_slice (& raw [1 .. 9]) ;"
      },
      {
        "id": 16,
        "label": "let bal = u64 :: from_le_bytes (b) ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"[STEP2] stored_balance = {}\" , bal) ;"
      },
      {
        "id": 18,
        "label": "bal"
      },
      {
        "id": 19,
        "label": "if pay_amount > stored_balance { msg ! (\"[STEP3] pay_amount が大きすぎる: {}\" , pay_amount) ; return Err (error ! (ProgramError :: InsufficientFunds)) ; }"
      },
      {
        "id": 20,
        "label": "msg ! (\"[STEP3] pay_amount が大きすぎる: {}\" , pay_amount) ;"
      },
      {
        "id": 21,
        "label": "return Err (error ! (ProgramError :: InsufficientFunds)) ;"
      },
      {
        "id": 22,
        "label": "let (fee , net) = { let mut f = pay_amount / 50 ; if f == 0 { f = 1 ; } let net_amount = pay_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ; msg ! (\"[STEP4] pay_amount = {}, fee = {}, net_amount = {}\" , pay_amount , f , net_amount) ; (f , net_amount) } ;"
      },
      {
        "id": 23,
        "label": "let mut f = pay_amount / 50 ;"
      },
      {
        "id": 24,
        "label": "if f == 0 { f = 1 ; }"
      },
      {
        "id": 25,
        "label": "f = 1 ;"
      },
      {
        "id": 26,
        "label": "let net_amount = pay_amount . checked_sub (f) . ok_or (ProgramError :: InvalidArgument) ? ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"[STEP4] pay_amount = {}, fee = {}, net_amount = {}\" , pay_amount , f , net_amount) ;"
      },
      {
        "id": 28,
        "label": "(f , net_amount)"
      },
      {
        "id": 29,
        "label": "* * data_acc . try_borrow_mut_lamports () ? -= pay_amount ;"
      },
      {
        "id": 30,
        "label": "* * payee . try_borrow_mut_lamports () ? += net ;"
      },
      {
        "id": 31,
        "label": "* * payer . try_borrow_mut_lamports () ? += fee ;"
      },
      {
        "id": 32,
        "label": "stored_balance = stored_balance . checked_sub (pay_amount) . unwrap () ;"
      },
      {
        "id": 33,
        "label": "{ let mut raw = data_acc . try_borrow_mut_data () ? ; let bytes = stored_balance . to_le_bytes () ; for i in 0 .. 8 { raw [1 + i] = bytes [i] ; } msg ! (\"[STEP5] data_account の新しい残高 = {}\" , stored_balance) ; }"
      },
      {
        "id": 34,
        "label": "let mut raw = data_acc . try_borrow_mut_data () ? ;"
      },
      {
        "id": 35,
        "label": "let bytes = stored_balance . to_le_bytes () ;"
      },
      {
        "id": 36,
        "label": "for i in 0 .. 8 { raw [1 + i] = bytes [i] ; }"
      },
      {
        "id": 37,
        "label": "raw [1 + i] = bytes [i] ;"
      },
      {
        "id": 38,
        "label": "msg ! (\"[STEP5] data_account の新しい残高 = {}\" , stored_balance) ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: data_acc"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: payer"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: payee"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: system_program"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: data_acc"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: raw"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: data_acc"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: raw"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: bytes"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: raw"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: bytes"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: raw"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: bytes"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: data_acc"
      },
      {
        "from": 6,
        "to": 12,
        "label": "data_dep: raw"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: raw"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: data_acc"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: b"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: b"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: raw"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: bal"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: b"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: bal"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: f"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: f"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: f"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: f"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: net_amount"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: f"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: f"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: net_amount"
      },
      {
        "from": 1,
        "to": 29,
        "label": "data_dep: data_acc"
      },
      {
        "from": 3,
        "to": 30,
        "label": "data_dep: payee"
      },
      {
        "from": 2,
        "to": 31,
        "label": "data_dep: payer"
      },
      {
        "from": 1,
        "to": 33,
        "label": "data_dep: data_acc"
      },
      {
        "from": 13,
        "to": 33,
        "label": "data_dep: raw"
      },
      {
        "from": 8,
        "to": 33,
        "label": "data_dep: bytes"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: raw"
      },
      {
        "from": 1,
        "to": 34,
        "label": "data_dep: data_acc"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: bytes"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: raw"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: bytes"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: raw"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: bytes"
      }
    ]
  }
]