[
  {
    "name": "lock_nft_for_bridge",
    "inputs": [
      "ctx: Context < LockNFT >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let bridge = & mut ctx . accounts . bridge_account ;"
      },
      {
        "id": 2,
        "label": "bridge . locked = true ;"
      },
      {
        "id": 3,
        "label": "bridge . destination_chain = ctx . accounts . config . chain_id ;"
      },
      {
        "id": 4,
        "label": "bridge . lock_count = bridge . lock_count . saturating_add (1) ;"
      },
      {
        "id": 5,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . user_nft_account . to_account_info () , to : ctx . accounts . vault_nft_account . to_account_info () , authority : ctx . accounts . user . to_account_info () , } ;"
      },
      {
        "id": 6,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 7,
        "label": "token :: transfer (cpi_ctx , 1) ? ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: bridge"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: bridge"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: bridge"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: bridge"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: bridge"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: cpi_accounts"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: cpi_ctx"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: cpi_accounts"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: cpi_ctx"
      }
    ]
  },
  {
    "name": "release_nft_from_bridge",
    "inputs": [
      "ctx: Context < ReleaseNFT >"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let bridge = & mut ctx . accounts . bridge_account ;"
      },
      {
        "id": 11,
        "label": "bridge . locked = false ;"
      },
      {
        "id": 12,
        "label": "bridge . release_count = bridge . release_count . saturating_add (1) ;"
      },
      {
        "id": 13,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . vault_nft_account . to_account_info () , to : ctx . accounts . user_nft_account . to_account_info () , authority : ctx . accounts . service_authority . to_account_info () , } ;"
      },
      {
        "id": 14,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 15,
        "label": "token :: transfer (cpi_ctx , 1) ? ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: bridge"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: bridge"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: bridge"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: bridge"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: cpi_accounts"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: cpi_ctx"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cpi_accounts"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: cpi_ctx"
      }
    ]
  }
]