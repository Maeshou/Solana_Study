[
  {
    "name": "harvest_yield",
    "inputs": [
      "ctx: Context < HarvestYield >",
      "base_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let config = & ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "let farm = & mut ctx . accounts . farm_account ;"
      },
      {
        "id": 3,
        "label": "let amount = calculate_yield (config , base_amount) ;"
      },
      {
        "id": 4,
        "label": "record_harvest (farm , amount) ;"
      },
      {
        "id": 5,
        "label": "distribute_yield (ctx , amount) ? ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: config"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: farm"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: amount"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: config"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: farm"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: amount"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: amount"
      }
    ]
  },
  {
    "name": "calculate_yield",
    "inputs": [
      "config: & Account < FarmConfig >",
      "base: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "base . checked_mul (config . yield_multiplier) . unwrap ()"
      }
    ],
    "edges": []
  },
  {
    "name": "record_harvest",
    "inputs": [
      "farm: & mut FarmAccount",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "farm . total_harvested = farm . total_harvested . saturating_add (amount) ;"
      },
      {
        "id": 11,
        "label": "farm . harvest_count = farm . harvest_count . saturating_add (1) ;"
      }
    ],
    "edges": []
  },
  {
    "name": "distribute_yield",
    "inputs": [
      "ctx: & Context < HarvestYield >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . yield_vault . to_account_info () , to : ctx . accounts . user_vault . to_account_info () , authority : ctx . accounts . service_authority . to_account_info () , } ;"
      },
      {
        "id": 14,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 15,
        "label": "token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: cpi_accounts"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: cpi_ctx"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cpi_accounts"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: cpi_ctx"
      }
    ]
  }
]