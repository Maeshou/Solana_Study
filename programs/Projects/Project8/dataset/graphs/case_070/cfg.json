[
  {
    "name": "create_instance",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 2,
        "label": "let size = party . len () ;"
      },
      {
        "id": 3,
        "label": "require ! (size >= 1 , DungeonError :: PartyTooSmall) ;"
      },
      {
        "id": 4,
        "label": "require ! (size <= 6 , DungeonError :: PartyTooLarge) ;"
      },
      {
        "id": 5,
        "label": "let mut rec_min : u32 = 1 ;"
      },
      {
        "id": 6,
        "label": "let mut rec_max : u32 = 10 ;"
      },
      {
        "id": 7,
        "label": "let mut time_limit : u32 = 1800 ;"
      },
      {
        "id": 8,
        "label": "let mut base_xp : u32 = 500 ;"
      },
      {
        "id": 9,
        "label": "let mut base_mobs : u32 = 15 ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "is_intermediate (difficulty)"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "rec_min = 11 ;"
      },
      {
        "id": 15,
        "label": "rec_max = 25 ;"
      },
      {
        "id": 16,
        "label": "time_limit = 2700 ;"
      },
      {
        "id": 17,
        "label": "base_xp = 1200 ;"
      },
      {
        "id": 18,
        "label": "base_mobs = 25 ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "is_advanced (difficulty)"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "rec_min = 26 ;"
      },
      {
        "id": 27,
        "label": "rec_max = 40 ;"
      },
      {
        "id": 28,
        "label": "time_limit = 3600 ;"
      },
      {
        "id": 29,
        "label": "base_xp = 2500 ;"
      },
      {
        "id": 30,
        "label": "base_mobs = 35 ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "is_expert (difficulty)"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "rec_min = 41 ;"
      },
      {
        "id": 39,
        "label": "rec_max = 60 ;"
      },
      {
        "id": 40,
        "label": "time_limit = 4500 ;"
      },
      {
        "id": 41,
        "label": "base_xp = 4000 ;"
      },
      {
        "id": 42,
        "label": "base_mobs = 50 ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "if statement"
      },
      {
        "id": 47,
        "label": "predicate"
      },
      {
        "id": 48,
        "label": "is_legendary (difficulty)"
      },
      {
        "id": 49,
        "label": "True body"
      },
      {
        "id": 50,
        "label": "rec_min = 61 ;"
      },
      {
        "id": 51,
        "label": "rec_max = 100 ;"
      },
      {
        "id": 52,
        "label": "time_limit = 5400 ;"
      },
      {
        "id": 53,
        "label": "base_xp = 7500 ;"
      },
      {
        "id": 54,
        "label": "base_mobs = 75 ;"
      },
      {
        "id": 55,
        "label": "False body"
      },
      {
        "id": 56,
        "label": "No-op"
      },
      {
        "id": 57,
        "label": "merge"
      },
      {
        "id": 58,
        "label": "let header = & mut ctx . accounts . header ;"
      },
      {
        "id": 59,
        "label": "header . instance_creator = ctx . accounts . party_leader . key () ;"
      },
      {
        "id": 60,
        "label": "header . creation_time = now ;"
      },
      {
        "id": 61,
        "label": "header . difficulty_level = difficulty ;"
      },
      {
        "id": 62,
        "label": "header . party_members = party ;"
      },
      {
        "id": 63,
        "label": "header . entrance_fee = entrance_fee ;"
      },
      {
        "id": 64,
        "label": "header . recommended_level_range = (rec_min , rec_max) ;"
      },
      {
        "id": 65,
        "label": "header . completion_time_limit = time_limit ;"
      },
      {
        "id": 66,
        "label": "header . base_experience_reward = base_xp ;"
      },
      {
        "id": 67,
        "label": "header . base_monster_count = base_mobs ;"
      },
      {
        "id": 68,
        "label": "header . completion_status = CompletionStatus :: InProgress ;"
      },
      {
        "id": 69,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 10,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 22,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 34,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "predicate"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "true"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 46,
        "to": 55,
        "label": "false"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_intermediate",
    "nodes": [
      {
        "id": 70,
        "label": "Entry"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "let DungeonDifficulty :: Intermediate = d"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "return true"
      },
      {
        "id": 76,
        "label": "False body"
      },
      {
        "id": 77,
        "label": "No-op"
      },
      {
        "id": 78,
        "label": "merge"
      },
      {
        "id": 79,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 71,
        "to": 76,
        "label": "false"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_advanced",
    "nodes": [
      {
        "id": 80,
        "label": "Entry"
      },
      {
        "id": 81,
        "label": "if statement"
      },
      {
        "id": 82,
        "label": "predicate"
      },
      {
        "id": 83,
        "label": "let DungeonDifficulty :: Advanced = d"
      },
      {
        "id": 84,
        "label": "True body"
      },
      {
        "id": 85,
        "label": "return true"
      },
      {
        "id": 86,
        "label": "False body"
      },
      {
        "id": 87,
        "label": "No-op"
      },
      {
        "id": 88,
        "label": "merge"
      },
      {
        "id": 89,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "predicate"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "true"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 81,
        "to": 86,
        "label": "false"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 85,
        "to": 88,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_expert",
    "nodes": [
      {
        "id": 90,
        "label": "Entry"
      },
      {
        "id": 91,
        "label": "if statement"
      },
      {
        "id": 92,
        "label": "predicate"
      },
      {
        "id": 93,
        "label": "let DungeonDifficulty :: Expert = d"
      },
      {
        "id": 94,
        "label": "True body"
      },
      {
        "id": 95,
        "label": "return true"
      },
      {
        "id": 96,
        "label": "False body"
      },
      {
        "id": 97,
        "label": "No-op"
      },
      {
        "id": 98,
        "label": "merge"
      },
      {
        "id": 99,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "predicate"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "true"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 91,
        "to": 96,
        "label": "false"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 95,
        "to": 98,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_legendary",
    "nodes": [
      {
        "id": 100,
        "label": "Entry"
      },
      {
        "id": 101,
        "label": "if statement"
      },
      {
        "id": 102,
        "label": "predicate"
      },
      {
        "id": 103,
        "label": "let DungeonDifficulty :: Legendary = d"
      },
      {
        "id": 104,
        "label": "True body"
      },
      {
        "id": 105,
        "label": "return true"
      },
      {
        "id": 106,
        "label": "False body"
      },
      {
        "id": 107,
        "label": "No-op"
      },
      {
        "id": 108,
        "label": "merge"
      },
      {
        "id": 109,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "predicate"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 101,
        "to": 104,
        "label": "true"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 101,
        "to": 106,
        "label": "false"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 105,
        "to": 108,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      }
    ]
  }
]