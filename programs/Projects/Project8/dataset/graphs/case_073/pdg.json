[
  {
    "name": "check_tier_requirements",
    "inputs": [
      "ctx: Context < CheckTier >",
      "total_matches: u64",
      "win_rate: u32",
      "current_skill_rating: u64",
      "stake: u64",
      "tier: TournamentTier"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut min_matches = 10u64 ;"
      },
      {
        "id": 2,
        "label": "let mut min_win = 30u32 ;"
      },
      {
        "id": 3,
        "label": "let mut req_skill = 1000u64 ;"
      },
      {
        "id": 4,
        "label": "let mut min_stake = 1000u64 ;"
      },
      {
        "id": 5,
        "label": "if is_silver (tier) { min_matches = 50 ; min_win = 50 ; req_skill = 1500 ; min_stake = 2500 ; }"
      },
      {
        "id": 6,
        "label": "min_matches = 50 ;"
      },
      {
        "id": 7,
        "label": "min_win = 50 ;"
      },
      {
        "id": 8,
        "label": "req_skill = 1500 ;"
      },
      {
        "id": 9,
        "label": "min_stake = 2500 ;"
      },
      {
        "id": 10,
        "label": "if is_gold (tier) { min_matches = 100 ; min_win = 65 ; req_skill = 2000 ; min_stake = 5000 ; }"
      },
      {
        "id": 11,
        "label": "min_matches = 100 ;"
      },
      {
        "id": 12,
        "label": "min_win = 65 ;"
      },
      {
        "id": 13,
        "label": "req_skill = 2000 ;"
      },
      {
        "id": 14,
        "label": "min_stake = 5000 ;"
      },
      {
        "id": 15,
        "label": "if is_platinum (tier) { min_matches = 200 ; min_win = 75 ; req_skill = 2500 ; min_stake = 10_000 ; }"
      },
      {
        "id": 16,
        "label": "min_matches = 200 ;"
      },
      {
        "id": 17,
        "label": "min_win = 75 ;"
      },
      {
        "id": 18,
        "label": "req_skill = 2500 ;"
      },
      {
        "id": 19,
        "label": "min_stake = 10_000 ;"
      },
      {
        "id": 20,
        "label": "if is_diamond (tier) { min_matches = 500 ; min_win = 80 ; req_skill = 3000 ; min_stake = 25_000 ; }"
      },
      {
        "id": 21,
        "label": "min_matches = 500 ;"
      },
      {
        "id": 22,
        "label": "min_win = 80 ;"
      },
      {
        "id": 23,
        "label": "req_skill = 3000 ;"
      },
      {
        "id": 24,
        "label": "min_stake = 25_000 ;"
      },
      {
        "id": 25,
        "label": "if is_master (tier) { min_matches = 1000 ; min_win = 85 ; req_skill = 3500 ; min_stake = 50_000 ; }"
      },
      {
        "id": 26,
        "label": "min_matches = 1000 ;"
      },
      {
        "id": 27,
        "label": "min_win = 85 ;"
      },
      {
        "id": 28,
        "label": "req_skill = 3500 ;"
      },
      {
        "id": 29,
        "label": "min_stake = 50_000 ;"
      },
      {
        "id": 30,
        "label": "if is_grandmaster (tier) { min_matches = 2000 ; min_win = 90 ; req_skill = 4000 ; min_stake = 100_000 ; }"
      },
      {
        "id": 31,
        "label": "min_matches = 2000 ;"
      },
      {
        "id": 32,
        "label": "min_win = 90 ;"
      },
      {
        "id": 33,
        "label": "req_skill = 4000 ;"
      },
      {
        "id": 34,
        "label": "min_stake = 100_000 ;"
      },
      {
        "id": 35,
        "label": "require ! (total_matches >= min_matches , TierError :: InsufficientExperience) ;"
      },
      {
        "id": 36,
        "label": "require ! (win_rate >= min_win , TierError :: WinRateTooLow) ;"
      },
      {
        "id": 37,
        "label": "require ! (stake >= min_stake , TierError :: InsufficientStake) ;"
      },
      {
        "id": 38,
        "label": "require ! (current_skill_rating >= req_skill , TierError :: SkillRatingTooLow) ;"
      },
      {
        "id": 39,
        "label": "let gate = & mut ctx . accounts . tier_gate ;"
      },
      {
        "id": 40,
        "label": "gate . tier = tier ;"
      },
      {
        "id": 41,
        "label": "gate . required_skill = req_skill ;"
      },
      {
        "id": 42,
        "label": "gate . checked_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: min_matches"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: min_win"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: req_skill"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: min_stake"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 7,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 8,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 9,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 10,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 10,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 12,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 13,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 14,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 15,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 15,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 15,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 17,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 18,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 19,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 20,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 20,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 20,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 20,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 22,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 23,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 24,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 25,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 25,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 25,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 25,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 26,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 27,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 28,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 29,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 30,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 30,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 30,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 30,
        "label": "data_dep: min_stake"
      },
      {
        "from": 1,
        "to": 31,
        "label": "data_dep: min_matches"
      },
      {
        "from": 2,
        "to": 32,
        "label": "data_dep: min_win"
      },
      {
        "from": 3,
        "to": 33,
        "label": "data_dep: req_skill"
      },
      {
        "from": 4,
        "to": 34,
        "label": "data_dep: min_stake"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: gate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: gate"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: gate"
      },
      {
        "from": 3,
        "to": 41,
        "label": "data_dep: req_skill"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: gate"
      }
    ]
  },
  {
    "name": "is_silver",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 44,
        "label": "Entry"
      },
      {
        "id": 45,
        "label": "if let TournamentTier :: Silver = t { return true }"
      },
      {
        "id": 46,
        "label": "return true"
      },
      {
        "id": 47,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_gold",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 48,
        "label": "Entry"
      },
      {
        "id": 49,
        "label": "if let TournamentTier :: Gold = t { return true }"
      },
      {
        "id": 50,
        "label": "return true"
      },
      {
        "id": 51,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_platinum",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 52,
        "label": "Entry"
      },
      {
        "id": 53,
        "label": "if let TournamentTier :: Platinum = t { return true }"
      },
      {
        "id": 54,
        "label": "return true"
      },
      {
        "id": 55,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_diamond",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 56,
        "label": "Entry"
      },
      {
        "id": 57,
        "label": "if let TournamentTier :: Diamond = t { return true }"
      },
      {
        "id": 58,
        "label": "return true"
      },
      {
        "id": 59,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_master",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 60,
        "label": "Entry"
      },
      {
        "id": 61,
        "label": "if let TournamentTier :: Master = t { return true }"
      },
      {
        "id": 62,
        "label": "return true"
      },
      {
        "id": 63,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_grandmaster",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 64,
        "label": "Entry"
      },
      {
        "id": 65,
        "label": "if let TournamentTier :: Grandmaster = t { return true }"
      },
      {
        "id": 66,
        "label": "return true"
      },
      {
        "id": 67,
        "label": "false"
      }
    ],
    "edges": []
  }
]