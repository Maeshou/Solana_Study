[
  {
    "name": "check_tier_requirements",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut min_matches = 10u64 ;"
      },
      {
        "id": 2,
        "label": "let mut min_win = 30u32 ;"
      },
      {
        "id": 3,
        "label": "let mut req_skill = 1000u64 ;"
      },
      {
        "id": 4,
        "label": "let mut min_stake = 1000u64 ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "is_silver (tier)"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "min_matches = 50 ;"
      },
      {
        "id": 10,
        "label": "min_win = 50 ;"
      },
      {
        "id": 11,
        "label": "req_skill = 1500 ;"
      },
      {
        "id": 12,
        "label": "min_stake = 2500 ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "No-op"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "is_gold (tier)"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "min_matches = 100 ;"
      },
      {
        "id": 21,
        "label": "min_win = 65 ;"
      },
      {
        "id": 22,
        "label": "req_skill = 2000 ;"
      },
      {
        "id": 23,
        "label": "min_stake = 5000 ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "is_platinum (tier)"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "min_matches = 200 ;"
      },
      {
        "id": 32,
        "label": "min_win = 75 ;"
      },
      {
        "id": 33,
        "label": "req_skill = 2500 ;"
      },
      {
        "id": 34,
        "label": "min_stake = 10_000 ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "is_diamond (tier)"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "min_matches = 500 ;"
      },
      {
        "id": 43,
        "label": "min_win = 80 ;"
      },
      {
        "id": 44,
        "label": "req_skill = 3000 ;"
      },
      {
        "id": 45,
        "label": "min_stake = 25_000 ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "is_master (tier)"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "min_matches = 1000 ;"
      },
      {
        "id": 54,
        "label": "min_win = 85 ;"
      },
      {
        "id": 55,
        "label": "req_skill = 3500 ;"
      },
      {
        "id": 56,
        "label": "min_stake = 50_000 ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "if statement"
      },
      {
        "id": 61,
        "label": "predicate"
      },
      {
        "id": 62,
        "label": "is_grandmaster (tier)"
      },
      {
        "id": 63,
        "label": "True body"
      },
      {
        "id": 64,
        "label": "min_matches = 2000 ;"
      },
      {
        "id": 65,
        "label": "min_win = 90 ;"
      },
      {
        "id": 66,
        "label": "req_skill = 4000 ;"
      },
      {
        "id": 67,
        "label": "min_stake = 100_000 ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "require ! (total_matches >= min_matches , TierError :: InsufficientExperience) ;"
      },
      {
        "id": 72,
        "label": "require ! (win_rate >= min_win , TierError :: WinRateTooLow) ;"
      },
      {
        "id": 73,
        "label": "require ! (stake >= min_stake , TierError :: InsufficientStake) ;"
      },
      {
        "id": 74,
        "label": "require ! (current_skill_rating >= req_skill , TierError :: SkillRatingTooLow) ;"
      },
      {
        "id": 75,
        "label": "let gate = & mut ctx . accounts . tier_gate ;"
      },
      {
        "id": 76,
        "label": "gate . tier = tier ;"
      },
      {
        "id": 77,
        "label": "gate . required_skill = req_skill ;"
      },
      {
        "id": 78,
        "label": "gate . checked_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 79,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 5,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 16,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 27,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 38,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 49,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "predicate"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 60,
        "to": 63,
        "label": "true"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 60,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_silver",
    "nodes": [
      {
        "id": 80,
        "label": "Entry"
      },
      {
        "id": 81,
        "label": "if statement"
      },
      {
        "id": 82,
        "label": "predicate"
      },
      {
        "id": 83,
        "label": "let TournamentTier :: Silver = t"
      },
      {
        "id": 84,
        "label": "True body"
      },
      {
        "id": 85,
        "label": "return true"
      },
      {
        "id": 86,
        "label": "False body"
      },
      {
        "id": 87,
        "label": "No-op"
      },
      {
        "id": 88,
        "label": "merge"
      },
      {
        "id": 89,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "predicate"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "true"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 81,
        "to": 86,
        "label": "false"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 85,
        "to": 88,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_gold",
    "nodes": [
      {
        "id": 90,
        "label": "Entry"
      },
      {
        "id": 91,
        "label": "if statement"
      },
      {
        "id": 92,
        "label": "predicate"
      },
      {
        "id": 93,
        "label": "let TournamentTier :: Gold = t"
      },
      {
        "id": 94,
        "label": "True body"
      },
      {
        "id": 95,
        "label": "return true"
      },
      {
        "id": 96,
        "label": "False body"
      },
      {
        "id": 97,
        "label": "No-op"
      },
      {
        "id": 98,
        "label": "merge"
      },
      {
        "id": 99,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "predicate"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "true"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 91,
        "to": 96,
        "label": "false"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 95,
        "to": 98,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_platinum",
    "nodes": [
      {
        "id": 100,
        "label": "Entry"
      },
      {
        "id": 101,
        "label": "if statement"
      },
      {
        "id": 102,
        "label": "predicate"
      },
      {
        "id": 103,
        "label": "let TournamentTier :: Platinum = t"
      },
      {
        "id": 104,
        "label": "True body"
      },
      {
        "id": 105,
        "label": "return true"
      },
      {
        "id": 106,
        "label": "False body"
      },
      {
        "id": 107,
        "label": "No-op"
      },
      {
        "id": 108,
        "label": "merge"
      },
      {
        "id": 109,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "predicate"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 101,
        "to": 104,
        "label": "true"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 101,
        "to": 106,
        "label": "false"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 105,
        "to": 108,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_diamond",
    "nodes": [
      {
        "id": 110,
        "label": "Entry"
      },
      {
        "id": 111,
        "label": "if statement"
      },
      {
        "id": 112,
        "label": "predicate"
      },
      {
        "id": 113,
        "label": "let TournamentTier :: Diamond = t"
      },
      {
        "id": 114,
        "label": "True body"
      },
      {
        "id": 115,
        "label": "return true"
      },
      {
        "id": 116,
        "label": "False body"
      },
      {
        "id": 117,
        "label": "No-op"
      },
      {
        "id": 118,
        "label": "merge"
      },
      {
        "id": 119,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 110,
        "to": 111,
        "label": "next"
      },
      {
        "from": 111,
        "to": 112,
        "label": "predicate"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 111,
        "to": 114,
        "label": "true"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 111,
        "to": 116,
        "label": "false"
      },
      {
        "from": 116,
        "to": 117,
        "label": "next"
      },
      {
        "from": 115,
        "to": 118,
        "label": "next"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 118,
        "to": 119,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_master",
    "nodes": [
      {
        "id": 120,
        "label": "Entry"
      },
      {
        "id": 121,
        "label": "if statement"
      },
      {
        "id": 122,
        "label": "predicate"
      },
      {
        "id": 123,
        "label": "let TournamentTier :: Master = t"
      },
      {
        "id": 124,
        "label": "True body"
      },
      {
        "id": 125,
        "label": "return true"
      },
      {
        "id": 126,
        "label": "False body"
      },
      {
        "id": 127,
        "label": "No-op"
      },
      {
        "id": 128,
        "label": "merge"
      },
      {
        "id": 129,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 121,
        "to": 122,
        "label": "predicate"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      },
      {
        "from": 121,
        "to": 124,
        "label": "true"
      },
      {
        "from": 124,
        "to": 125,
        "label": "next"
      },
      {
        "from": 121,
        "to": 126,
        "label": "false"
      },
      {
        "from": 126,
        "to": 127,
        "label": "next"
      },
      {
        "from": 125,
        "to": 128,
        "label": "next"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      },
      {
        "from": 128,
        "to": 129,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_grandmaster",
    "nodes": [
      {
        "id": 130,
        "label": "Entry"
      },
      {
        "id": 131,
        "label": "if statement"
      },
      {
        "id": 132,
        "label": "predicate"
      },
      {
        "id": 133,
        "label": "let TournamentTier :: Grandmaster = t"
      },
      {
        "id": 134,
        "label": "True body"
      },
      {
        "id": 135,
        "label": "return true"
      },
      {
        "id": 136,
        "label": "False body"
      },
      {
        "id": 137,
        "label": "No-op"
      },
      {
        "id": 138,
        "label": "merge"
      },
      {
        "id": 139,
        "label": "false"
      }
    ],
    "edges": [
      {
        "from": 130,
        "to": 131,
        "label": "next"
      },
      {
        "from": 131,
        "to": 132,
        "label": "predicate"
      },
      {
        "from": 132,
        "to": 133,
        "label": "next"
      },
      {
        "from": 131,
        "to": 134,
        "label": "true"
      },
      {
        "from": 134,
        "to": 135,
        "label": "next"
      },
      {
        "from": 131,
        "to": 136,
        "label": "false"
      },
      {
        "from": 136,
        "to": 137,
        "label": "next"
      },
      {
        "from": 135,
        "to": 138,
        "label": "next"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 138,
        "to": 139,
        "label": "next"
      }
    ]
  }
]