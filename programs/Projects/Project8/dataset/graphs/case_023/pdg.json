[
  {
    "name": "init_depot",
    "inputs": [
      "ctx: Context < InitDepot >",
      "batch: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . depot ;"
      },
      {
        "id": 2,
        "label": "d . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "d . batch = batch . rotate_left (1) . wrapping_add (23) ;"
      },
      {
        "id": 4,
        "label": "d . turns = 1 ;"
      },
      {
        "id": 5,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 6,
        "label": "let mut probe = d . batch . rotate_right (2) . wrapping_add (5) ;"
      },
      {
        "id": 7,
        "label": "while i < 4 { let salt = (probe ^ (i as u64 * 13)) . rotate_left (1) . wrapping_add (11) ; probe = probe . rotate_left (1) . wrapping_mul (2) . wrapping_add (salt) ; d . turns = d . turns . saturating_add (((probe % 13) as u32) + 2) ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 8,
        "label": "let salt = (probe ^ (i as u64 * 13)) . rotate_left (1) . wrapping_add (11) ;"
      },
      {
        "id": 9,
        "label": "probe = probe . rotate_left (1) . wrapping_mul (2) . wrapping_add (salt) ;"
      },
      {
        "id": 10,
        "label": "d . turns = d . turns . saturating_add (((probe % 13) as u32) + 2) ;"
      },
      {
        "id": 11,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 12,
        "label": "require ! (d . turns > 3 , E :: Sanity) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: d"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: i"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: probe"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: probe"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: probe"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: probe"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: probe"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: salt"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: probe"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: probe"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: probe"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: salt"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: d"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: probe"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: i"
      }
    ]
  },
  {
    "name": "multi_dispatch",
    "inputs": [
      "ctx: Context < MultiDispatch >",
      "base_lamports: u64",
      "loop_count: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let bump = * ctx . bumps . get (\"depot\") . ok_or (error ! (E :: MissingBump)) ? ;"
      },
      {
        "id": 16,
        "label": "let seeds : & [& [u8]] = & [b\"depot\" , ctx . accounts . supervisor . key . as_ref () , & ctx . accounts . depot . batch . to_le_bytes () , & [bump]] ;"
      },
      {
        "id": 17,
        "label": "let mut ledger : [u64 ; 6] = [0 ; 6] ;"
      },
      {
        "id": 18,
        "label": "let mut rolling = base_lamports . rotate_left (1) . wrapping_add (7) ;"
      },
      {
        "id": 19,
        "label": "let mut k = 0usize ;"
      },
      {
        "id": 20,
        "label": "while k < ledger . len () { ledger [k] = (rolling % base_lamports . saturating_add (97)) . max (1) ; rolling = rolling . rotate_right (1) . wrapping_mul (3) . wrapping_add (9) ; k += 1 ; }"
      },
      {
        "id": 21,
        "label": "ledger [k] = (rolling % base_lamports . saturating_add (97)) . max (1) ;"
      },
      {
        "id": 22,
        "label": "rolling = rolling . rotate_right (1) . wrapping_mul (3) . wrapping_add (9) ;"
      },
      {
        "id": 23,
        "label": "k += 1 ;"
      },
      {
        "id": 24,
        "label": "let mut r = 0u8 ;"
      },
      {
        "id": 25,
        "label": "let mut sent = 0u64 ;"
      },
      {
        "id": 26,
        "label": "while r < loop_count { let take = ledger [(r as usize) % ledger . len ()] ; let ix = system_instruction :: transfer (& ctx . accounts . depot . key () , & ctx . accounts . receiver . key () , take) ; invoke_signed (& ix , & [ctx . accounts . depot . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ; sent = sent . saturating_add (take) ; let pos = (r as usize) % ledger . len () ; let shadow = (take ^ sent) . rotate_left (1) . wrapping_add (3) ; if shadow & 1 > 0 { ledger [pos] = ledger [pos] . rotate_left (1) . wrapping_add (2) ; } else { ledger [pos] = ledger [pos] . rotate_right (1) . wrapping_add (5) ; } r = r . saturating_add (1) ; }"
      },
      {
        "id": 27,
        "label": "let take = ledger [(r as usize) % ledger . len ()] ;"
      },
      {
        "id": 28,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . depot . key () , & ctx . accounts . receiver . key () , take) ;"
      },
      {
        "id": 29,
        "label": "invoke_signed (& ix , & [ctx . accounts . depot . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 30,
        "label": "sent = sent . saturating_add (take) ;"
      },
      {
        "id": 31,
        "label": "let pos = (r as usize) % ledger . len () ;"
      },
      {
        "id": 32,
        "label": "let shadow = (take ^ sent) . rotate_left (1) . wrapping_add (3) ;"
      },
      {
        "id": 33,
        "label": "if shadow & 1 > 0 { ledger [pos] = ledger [pos] . rotate_left (1) . wrapping_add (2) ; } else { ledger [pos] = ledger [pos] . rotate_right (1) . wrapping_add (5) ; }"
      },
      {
        "id": 34,
        "label": "ledger [pos] = ledger [pos] . rotate_left (1) . wrapping_add (2) ;"
      },
      {
        "id": 35,
        "label": "ledger [pos] = ledger [pos] . rotate_right (1) . wrapping_add (5) ;"
      },
      {
        "id": 36,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "let mut digest = 0u64 ;"
      },
      {
        "id": 38,
        "label": "for val in ledger { digest = digest . rotate_left (3) ^ val . wrapping_mul (131) ; digest = digest . wrapping_add (31) ; }"
      },
      {
        "id": 39,
        "label": "digest = digest . rotate_left (3) ^ val . wrapping_mul (131) ;"
      },
      {
        "id": 40,
        "label": "digest = digest . wrapping_add (31) ;"
      },
      {
        "id": 41,
        "label": "require ! (digest != 0 , E :: Digest) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: bump"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: bump"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: rolling"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: k"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: k"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: k"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: rolling"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: rolling"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: rolling"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: k"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: k"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: rolling"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: rolling"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: rolling"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: k"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: r"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: sent"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: sent"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: sent"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: sent"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: take"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: take"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: ix"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: sent"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: sent"
      },
      {
        "from": 27,
        "to": 30,
        "label": "data_dep: take"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: pos"
      },
      {
        "from": 24,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: shadow"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: take"
      },
      {
        "from": 25,
        "to": 32,
        "label": "data_dep: sent"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: shadow"
      },
      {
        "from": 31,
        "to": 33,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 33,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 33,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 33,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 35,
        "label": "data_dep: pos"
      },
      {
        "from": 31,
        "to": 35,
        "label": "data_dep: pos"
      },
      {
        "from": 24,
        "to": 36,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 36,
        "label": "data_dep: r"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: digest"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 40,
        "label": "data_dep: digest"
      },
      {
        "from": 37,
        "to": 40,
        "label": "data_dep: digest"
      }
    ]
  }
]