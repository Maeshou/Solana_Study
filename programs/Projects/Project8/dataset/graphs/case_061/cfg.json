[
  {
    "name": "create_ring",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . ring ;"
      },
      {
        "id": 2,
        "label": "r . owner = ctx . accounts . host . key () ;"
      },
      {
        "id": 3,
        "label": "r . intensity = power . rotate_left (3) . wrapping_add (22) ;"
      },
      {
        "id": 4,
        "label": "r . seats = 4 ;"
      },
      {
        "id": 5,
        "label": "r . stage = 2 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "let g = (w [0] + w [1]) . rotate_left ((i + 1) as u32) ;"
      },
      {
        "id": 8,
        "label": "r . intensity = r . intensity . wrapping_add (g) ;"
      },
      {
        "id": 9,
        "label": "Loop End"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "v . rotate_right (i as u32) > 2"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "r . seats = r . seats . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "let mut k = 1u8 ;"
      },
      {
        "id": 21,
        "label": "loop { r . stage = r . stage . saturating_add (1) ; if k > 1 { break ; } r . intensity = r . intensity . wrapping_add ((k as u64 * 10) . rotate_right (1)) ; k = k . saturating_add (1) ; }"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "for"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 10,
        "to": 19,
        "label": "for"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      }
    ]
  },
  {
    "name": "settle",
    "nodes": [
      {
        "id": 23,
        "label": "Entry"
      },
      {
        "id": 24,
        "label": "let r = & mut ctx . accounts . ring ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "v > 6"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "r . stage = r . stage . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "r . intensity = r . intensity . wrapping_add (v . rotate_left (1)) ;"
      },
      {
        "id": 35,
        "label": "Loop End"
      },
      {
        "id": 36,
        "label": "let seeds : & [& [u8]] = & [b\"ring\" , ctx . accounts . host . key . as_ref () , ctx . accounts . zone . key () . as_ref () , & [ctx . bumps [\"ring\"]] ,] ;"
      },
      {
        "id": 37,
        "label": "let amt = base . saturating_add ((r . intensity % 83) + 7) ;"
      },
      {
        "id": 38,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . ring . key () , & ctx . accounts . pool . key () , amt) ;"
      },
      {
        "id": 39,
        "label": "invoke_signed (& ix , & [ctx . accounts . ring . to_account_info () , ctx . accounts . pool . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 26,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 25,
        "to": 35,
        "label": "for"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]