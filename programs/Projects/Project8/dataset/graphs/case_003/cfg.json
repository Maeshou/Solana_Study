[
  {
    "name": "pay_from_store",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . store . key () , & ctx . accounts . receiver . key () , lamports ,) ;"
      },
      {
        "id": 2,
        "label": "let bump = * ctx . bumps . get (\"store\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 3,
        "label": "let seeds : & [& [u8]] = & [b\"store\" , ctx . accounts . merchant . key . as_ref () , ctx . accounts . store . mint . as_ref () , & [bump] ,] ;"
      },
      {
        "id": 4,
        "label": "invoke_signed (& ix , & [ctx . accounts . store . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay_from_coupon",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . coupon . key () , & ctx . accounts . receiver . key () , lamports ,) ;"
      },
      {
        "id": 8,
        "label": "let bump = * ctx . bumps . get (\"coupon\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 9,
        "label": "let seeds : & [& [u8]] = & [b\"coupon\" , ctx . accounts . merchant . key . as_ref () , & coupon_id . to_le_bytes () , & [bump] ,] ;"
      },
      {
        "id": 10,
        "label": "invoke_signed (& ix , & [ctx . accounts . coupon . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "token_transfer_fixed",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let bump = * ctx . bumps . get (\"store\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 14,
        "label": "let seeds : & [& [u8]] = & [b\"store\" , ctx . accounts . merchant . key . as_ref () , ctx . accounts . store . mint . as_ref () , & [bump] ,] ;"
      },
      {
        "id": 15,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . store_token . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . store . to_account_info () , } ;"
      },
      {
        "id": 16,
        "label": "let cpi_ctx = CpiContext :: new_with_signer (ctx . accounts . token_program . to_account_info () , cpi_accounts , & [seeds] ,) ;"
      },
      {
        "id": 17,
        "label": "token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_ata_for_store",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let bump = * ctx . bumps . get (\"store\") . ok_or (error ! (Errs :: MissingBump)) ? ;"
      },
      {
        "id": 21,
        "label": "let seeds : & [& [u8]] = & [b\"store\" , ctx . accounts . merchant . key . as_ref () , ctx . accounts . store . mint . as_ref () , & [bump] ,] ;"
      },
      {
        "id": 22,
        "label": "let cpi_ctx = CpiContext :: new_with_signer (ctx . accounts . associated_token_program . to_account_info () , anchor_spl :: associated_token :: Create { payer : ctx . accounts . merchant . to_account_info () , associated_token : ctx . accounts . store_token . to_account_info () , authority : ctx . accounts . store . to_account_info () , mint : ctx . accounts . mint . to_account_info () , system_program : ctx . accounts . system_program . to_account_info () , token_program : ctx . accounts . token_program . to_account_info () , } , & [seeds] ,) ;"
      },
      {
        "id": 23,
        "label": "anchor_spl :: associated_token :: create (cpi_ctx) ? ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  },
  {
    "name": "rotate_store_owner",
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let state = & mut ctx . accounts . store ;"
      },
      {
        "id": 27,
        "label": "let mut counter : u32 = 0 ;"
      },
      {
        "id": 28,
        "label": "let mut acc : u64 = state . power . rotate_left (1) . wrapping_add (17) ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "let t = acc ^ state . rounds as u64 ;"
      },
      {
        "id": 31,
        "label": "acc = acc . rotate_right (2) . wrapping_add (t) . wrapping_mul (3) ;"
      },
      {
        "id": 32,
        "label": "counter = counter . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "state . owner = new_owner ;"
      },
      {
        "id": 35,
        "label": "state . power = acc ;"
      },
      {
        "id": 36,
        "label": "state . rounds = state . rounds . saturating_add (5) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 29,
        "to": 33,
        "label": "while"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      }
    ]
  }
]