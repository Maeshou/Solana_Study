[
  {
    "name": "init_depot",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . depot ;"
      },
      {
        "id": 2,
        "label": "d . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "d . batch = batch . rotate_left (1) . wrapping_add (23) ;"
      },
      {
        "id": 4,
        "label": "d . turns = 1 ;"
      },
      {
        "id": 5,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 6,
        "label": "let mut probe = d . batch . rotate_right (2) . wrapping_add (5) ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "probe = probe . rotate_left (1) . wrapping_mul (2) . wrapping_add (11) ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "probe & 3 > 0"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "d . turns = d . turns . saturating_add (((probe % 13) as u32) + 2) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 7,
        "to": 18,
        "label": "while"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "multi_dispatch",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let bump = * ctx . bumps . get (\"depot\") . ok_or (error ! (E :: MissingBump)) ? ;"
      },
      {
        "id": 22,
        "label": "let seeds : & [& [u8]] = & [b\"depot\" , ctx . accounts . supervisor . key . as_ref () , & ctx . accounts . depot . batch . to_le_bytes () , & [bump]] ;"
      },
      {
        "id": 23,
        "label": "let mut r = 0u8 ;"
      },
      {
        "id": 24,
        "label": "let mut rolling = base_lamports . rotate_left (1) . wrapping_add (7) ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let amount = rolling % (base_lamports . saturating_add (41)) ;"
      },
      {
        "id": 27,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . depot . key () , & ctx . accounts . receiver . key () , amount) ;"
      },
      {
        "id": 28,
        "label": "invoke_signed (& ix , & [ctx . accounts . depot . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 29,
        "label": "rolling = rolling . rotate_right (1) . wrapping_mul (3) . wrapping_add (9) ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "rolling % 2 > 0"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "rolling = rolling . rotate_left (1) . wrapping_add (5) ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 25,
        "to": 39,
        "label": "while"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]