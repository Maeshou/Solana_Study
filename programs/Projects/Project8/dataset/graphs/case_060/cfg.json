[
  {
    "name": "init_board",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "b . progress = seed . rotate_right (1) . wrapping_add (27) ;"
      },
      {
        "id": 4,
        "label": "b . capacity = 3 ;"
      },
      {
        "id": 5,
        "label": "b . tier = 1 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "let mut local = 0u64 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "local = local . wrapping_add (* x) ;"
      },
      {
        "id": 10,
        "label": "Loop End"
      },
      {
        "id": 11,
        "label": "b . progress = b . progress . wrapping_add (local ^ b . progress) ;"
      },
      {
        "id": 12,
        "label": "b . capacity = b . capacity . saturating_add (((local % 3) as u16) + 1) ;"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "let acc = [3u64 , 4 , 6] . iter () . fold (0u64 , | a , v | a . wrapping_add (* v)) ;"
      },
      {
        "id": 15,
        "label": "let mut s = 1u8 ;"
      },
      {
        "id": 16,
        "label": "loop { b . tier = b . tier . saturating_add (1) ; b . progress = b . progress . wrapping_add (acc ^ (s as u64 * 9)) ; if s > 2 { break ; } s = s . saturating_add (1) ; }"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 8,
        "to": 10,
        "label": "for"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 6,
        "to": 13,
        "label": "for"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      }
    ]
  },
  {
    "name": "post_reward",
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "let delta = v . rotate_left ((i + 2) as u32) ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "delta > 10"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "b . capacity = b . capacity . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "b . progress = b . progress . wrapping_add (delta) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "let seeds : & [& [u8]] = & [b\"board\" , ctx . accounts . organizer . key . as_ref () , ctx . accounts . world . key () . as_ref () , & [ctx . bumps [\"board\"]] ,] ;"
      },
      {
        "id": 33,
        "label": "let out = base . saturating_add ((b . progress % 91) + 6) ;"
      },
      {
        "id": 34,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . board . key () , & ctx . accounts . treasury . key () , out) ;"
      },
      {
        "id": 35,
        "label": "invoke_signed (& ix , & [ctx . accounts . board . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 20,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]