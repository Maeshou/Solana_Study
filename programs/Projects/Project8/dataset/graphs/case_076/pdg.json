[
  {
    "name": "plan",
    "inputs": [
      "ctx: Context < Plan >",
      "tier: TournamentTier",
      "stake: u64",
      "rating: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 2,
        "label": "let mut table : Vec < (u32 , u64) > = vec ! [(1 , 10_000) , (2 , 5_000) , (3 , 2_500) , (4 , 1_000)] ;"
      },
      {
        "id": 3,
        "label": "if is_silver (tier) { table = vec ! [(1 , 20_000) , (2 , 10_000) , (3 , 5_000) , (4 , 2_000)] ; }"
      },
      {
        "id": 4,
        "label": "table = vec ! [(1 , 20_000) , (2 , 10_000) , (3 , 5_000) , (4 , 2_000)] ;"
      },
      {
        "id": 5,
        "label": "if is_gold (tier) { table = vec ! [(1 , 50_000) , (2 , 25_000) , (3 , 12_500) , (4 , 5_000)] ; }"
      },
      {
        "id": 6,
        "label": "table = vec ! [(1 , 50_000) , (2 , 25_000) , (3 , 12_500) , (4 , 5_000)] ;"
      },
      {
        "id": 7,
        "label": "if is_platinum (tier) { table = vec ! [(1 , 100_000) , (2 , 50_000) , (3 , 25_000) , (4 , 10_000)] ; }"
      },
      {
        "id": 8,
        "label": "table = vec ! [(1 , 100_000) , (2 , 50_000) , (3 , 25_000) , (4 , 10_000)] ;"
      },
      {
        "id": 9,
        "label": "if is_diamond (tier) { table = vec ! [(1 , 250_000) , (2 , 125_000) , (3 , 62_500) , (4 , 25_000)] ; }"
      },
      {
        "id": 10,
        "label": "table = vec ! [(1 , 250_000) , (2 , 125_000) , (3 , 62_500) , (4 , 25_000)] ;"
      },
      {
        "id": 11,
        "label": "if is_master (tier) { table = vec ! [(1 , 500_000) , (2 , 250_000) , (3 , 125_000) , (4 , 50_000)] ; }"
      },
      {
        "id": 12,
        "label": "table = vec ! [(1 , 500_000) , (2 , 250_000) , (3 , 125_000) , (4 , 50_000)] ;"
      },
      {
        "id": 13,
        "label": "if is_grandmaster (tier) { table = vec ! [(1 , 1_000_000) , (2 , 500_000) , (3 , 250_000) , (4 , 100_000)] ; }"
      },
      {
        "id": 14,
        "label": "table = vec ! [(1 , 1_000_000) , (2 , 500_000) , (3 , 250_000) , (4 , 100_000)] ;"
      },
      {
        "id": 15,
        "label": "let mut out : Vec < RewardRow > = Vec :: new () ;"
      },
      {
        "id": 16,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 17,
        "label": "while i < table . len () { let placement = table [i] . 0 ; let base = table [i] . 1 ; let mut tier_bonus = base / 15 ; if is_diamond (tier) { tier_bonus = base / 10 ; } if is_master (tier) { tier_bonus = base / 8 ; } if is_grandmaster (tier) { tier_bonus = base / 5 ; } let seasonal_phase = ((now % (86_400 * 90)) / (86_400 * 30)) as u32 ; let seasonal = 250u32 + seasonal_phase . saturating_mul (100) ; let mut points = 150u32 ; if placement == 1 { points = 500 ; } if placement == 2 { points = 350 ; } if placement == 3 { points = 250 ; } out . push (RewardRow { placement , monetary : base . saturating_add (stake / 10) . saturating_add (tier_bonus) , experience : (base / 100) . saturating_add (rating / 10) , ranking_points : points , seasonal_bonus : seasonal , }) ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 18,
        "label": "let placement = table [i] . 0 ;"
      },
      {
        "id": 19,
        "label": "let base = table [i] . 1 ;"
      },
      {
        "id": 20,
        "label": "let mut tier_bonus = base / 15 ;"
      },
      {
        "id": 21,
        "label": "if is_diamond (tier) { tier_bonus = base / 10 ; }"
      },
      {
        "id": 22,
        "label": "tier_bonus = base / 10 ;"
      },
      {
        "id": 23,
        "label": "if is_master (tier) { tier_bonus = base / 8 ; }"
      },
      {
        "id": 24,
        "label": "tier_bonus = base / 8 ;"
      },
      {
        "id": 25,
        "label": "if is_grandmaster (tier) { tier_bonus = base / 5 ; }"
      },
      {
        "id": 26,
        "label": "tier_bonus = base / 5 ;"
      },
      {
        "id": 27,
        "label": "let seasonal_phase = ((now % (86_400 * 90)) / (86_400 * 30)) as u32 ;"
      },
      {
        "id": 28,
        "label": "let seasonal = 250u32 + seasonal_phase . saturating_mul (100) ;"
      },
      {
        "id": 29,
        "label": "let mut points = 150u32 ;"
      },
      {
        "id": 30,
        "label": "if placement == 1 { points = 500 ; }"
      },
      {
        "id": 31,
        "label": "points = 500 ;"
      },
      {
        "id": 32,
        "label": "if placement == 2 { points = 350 ; }"
      },
      {
        "id": 33,
        "label": "points = 350 ;"
      },
      {
        "id": 34,
        "label": "if placement == 3 { points = 250 ; }"
      },
      {
        "id": 35,
        "label": "points = 250 ;"
      },
      {
        "id": 36,
        "label": "out . push (RewardRow { placement , monetary : base . saturating_add (stake / 10) . saturating_add (tier_bonus) , experience : (base / 100) . saturating_add (rating / 10) , ranking_points : points , seasonal_bonus : seasonal , }) ;"
      },
      {
        "id": 37,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "ctx . accounts . rewards . rows = out ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: now"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: now"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: placement"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: base"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: tier_bonus"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 25,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: base"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: seasonal_phase"
      },
      {
        "from": 1,
        "to": 27,
        "label": "data_dep: now"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: seasonal"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: seasonal_phase"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: points"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: placement"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: points"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: points"
      },
      {
        "from": 18,
        "to": 32,
        "label": "data_dep: placement"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: points"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: points"
      },
      {
        "from": 18,
        "to": 34,
        "label": "data_dep: placement"
      },
      {
        "from": 29,
        "to": 34,
        "label": "data_dep: points"
      },
      {
        "from": 29,
        "to": 35,
        "label": "data_dep: points"
      },
      {
        "from": 18,
        "to": 36,
        "label": "data_dep: placement"
      },
      {
        "from": 19,
        "to": 36,
        "label": "data_dep: base"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: tier_bonus"
      },
      {
        "from": 19,
        "to": 36,
        "label": "data_dep: base"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: points"
      },
      {
        "from": 28,
        "to": 36,
        "label": "data_dep: seasonal"
      },
      {
        "from": 16,
        "to": 37,
        "label": "data_dep: i"
      },
      {
        "from": 16,
        "to": 37,
        "label": "data_dep: i"
      }
    ]
  },
  {
    "name": "is_silver",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 40,
        "label": "Entry"
      },
      {
        "id": 41,
        "label": "if let TournamentTier :: Silver = t { return true }"
      },
      {
        "id": 42,
        "label": "return true"
      },
      {
        "id": 43,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_gold",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 44,
        "label": "Entry"
      },
      {
        "id": 45,
        "label": "if let TournamentTier :: Gold = t { return true }"
      },
      {
        "id": 46,
        "label": "return true"
      },
      {
        "id": 47,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_platinum",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 48,
        "label": "Entry"
      },
      {
        "id": 49,
        "label": "if let TournamentTier :: Platinum = t { return true }"
      },
      {
        "id": 50,
        "label": "return true"
      },
      {
        "id": 51,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_diamond",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 52,
        "label": "Entry"
      },
      {
        "id": 53,
        "label": "if let TournamentTier :: Diamond = t { return true }"
      },
      {
        "id": 54,
        "label": "return true"
      },
      {
        "id": 55,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_master",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 56,
        "label": "Entry"
      },
      {
        "id": 57,
        "label": "if let TournamentTier :: Master = t { return true }"
      },
      {
        "id": 58,
        "label": "return true"
      },
      {
        "id": 59,
        "label": "false"
      }
    ],
    "edges": []
  },
  {
    "name": "is_grandmaster",
    "inputs": [
      "t: TournamentTier"
    ],
    "nodes": [
      {
        "id": 60,
        "label": "Entry"
      },
      {
        "id": 61,
        "label": "if let TournamentTier :: Grandmaster = t { return true }"
      },
      {
        "id": 62,
        "label": "return true"
      },
      {
        "id": 63,
        "label": "false"
      }
    ],
    "edges": []
  }
]