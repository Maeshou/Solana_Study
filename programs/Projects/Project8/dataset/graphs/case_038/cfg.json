[
  {
    "name": "level_up_character",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let character = & mut ctx . accounts . character_stats ;"
      },
      {
        "id": 2,
        "label": "let player = & ctx . accounts . player ;"
      },
      {
        "id": 3,
        "label": "let required_experience = u64 :: from (character . level) * 100 ;"
      },
      {
        "id": 4,
        "label": "require ! (character . experience >= required_experience , GameError :: NotEnoughExperience) ;"
      },
      {
        "id": 5,
        "label": "require ! (new_level > character . level , GameError :: InvalidLevel) ;"
      },
      {
        "id": 6,
        "label": "character . level = new_level ;"
      },
      {
        "id": 7,
        "label": "character . attack_power += 5 * u32 :: from (new_level - character . level) ;"
      },
      {
        "id": 8,
        "label": "character . defense_power += 3 * u32 :: from (new_level - character . level) ;"
      },
      {
        "id": 9,
        "label": "character . experience -= required_experience ;"
      },
      {
        "id": 10,
        "label": "msg ! (\"Character {} leveled up to {}!\" , character . key () , new_level) ;"
      },
      {
        "id": 11,
        "label": "msg ! (\"New Attack: {}, New Defense: {}\" , character . attack_power , character . defense_power) ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "i == 10"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "character . special_abilities . push (1) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Learned new ability at level 10!\") ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "i == 20"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "character . special_abilities . push (2) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"Learned new ability at level 20!\") ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 22,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 12,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      }
    ]
  }
]