[
  {
    "name": "init_badge_forge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "f . owner = ctx . accounts . player . key () ;"
      },
      {
        "id": 3,
        "label": "f . heat = seed . rotate_left (2) . wrapping_add (31) ;"
      },
      {
        "id": 4,
        "label": "f . slots = 2 ;"
      },
      {
        "id": 5,
        "label": "f . rank = 1 ;"
      },
      {
        "id": 6,
        "label": "Loop Start"
      },
      {
        "id": 7,
        "label": "f . heat = f . heat . wrapping_add (v . rotate_left (1) ^ f . heat) ;"
      },
      {
        "id": 8,
        "label": "f . slots = f . slots . saturating_add (1) ;"
      },
      {
        "id": 9,
        "label": "Loop End"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "let g = w [0] . wrapping_add (w [1]) . rotate_right (1) ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "g > 14"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "f . rank = f . rank . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "f . heat = f . heat . wrapping_add (g) ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "let mut t = 1u8 ;"
      },
      {
        "id": 23,
        "label": "loop { f . heat = f . heat . wrapping_add ((t as u64 * 13) . rotate_left (1)) ; if t > 2 { break ; } t = t . saturating_add (1) ; }"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "for"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 10,
        "to": 21,
        "label": "for"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  },
  {
    "name": "craft_badge",
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let f = & mut ctx . accounts . forge ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let inc = v . rotate_left ((i + 1) as u32) ;"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "inc > 8"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "f . rank = f . rank . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "No-op"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "f . heat = f . heat . wrapping_add (inc) ;"
      },
      {
        "id": 38,
        "label": "Loop End"
      },
      {
        "id": 39,
        "label": "let seeds : & [& [u8]] = & [b\"forge\" , ctx . accounts . player . key . as_ref () , ctx . accounts . collection . key () . as_ref () , & [ctx . bumps [\"forge\"]] ,] ;"
      },
      {
        "id": 40,
        "label": "let out = base . saturating_add ((f . heat % 73) + 5) ;"
      },
      {
        "id": 41,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . forge . key () , & ctx . accounts . reward_vault . key () , out) ;"
      },
      {
        "id": 42,
        "label": "invoke_signed (& ix , & [ctx . accounts . forge . to_account_info () , ctx . accounts . reward_vault . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 29,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 27,
        "to": 38,
        "label": "for"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]