[
  {
    "name": "create_character_with_stats",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let character_data = & mut ctx . accounts . character_account ;"
      },
      {
        "id": 2,
        "label": "let timestamp = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "character_data . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 4,
        "label": "character_data . name = character_name ;"
      },
      {
        "id": 5,
        "label": "character_data . creation_timestamp = timestamp ;"
      },
      {
        "id": 6,
        "label": "let total_stats = base_strength + base_agility + base_intelligence ;"
      },
      {
        "id": 7,
        "label": "require ! (total_stats <= 100 , CustomError :: StatsTooHigh) ;"
      },
      {
        "id": 8,
        "label": "character_data . strength = base_strength ;"
      },
      {
        "id": 9,
        "label": "character_data . agility = base_agility ;"
      },
      {
        "id": 10,
        "label": "character_data . intelligence = base_intelligence ;"
      },
      {
        "id": 11,
        "label": "let experience_multiplier = match total_stats { score if score >= 80 => { character_data . rarity = CharacterRarity :: Legendary ; character_data . base_experience_rate = 150 ; character_data . special_abilities = vec ! [\"Critical Strike\" . to_string () , \"Magic Amplification\" . to_string () , \"Speed Boost\" . to_string ()] ; 200 } , score if score >= 60 => { character_data . rarity = CharacterRarity :: Epic ; character_data . base_experience_rate = 125 ; character_data . special_abilities = vec ! [\"Power Attack\" . to_string () , \"Quick Recovery\" . to_string ()] ; 150 } , _ => { character_data . rarity = CharacterRarity :: Common ; character_data . base_experience_rate = 100 ; character_data . special_abilities = vec ! [\"Basic Attack\" . to_string ()] ; 100 } } ;"
      },
      {
        "id": 12,
        "label": "character_data . max_health_points = (base_strength * 10) + (base_agility * 5) + (base_intelligence * 3) ;"
      },
      {
        "id": 13,
        "label": "character_data . current_health_points = character_data . max_health_points ;"
      },
      {
        "id": 14,
        "label": "character_data . mana_points = base_intelligence * 15 ;"
      },
      {
        "id": 15,
        "label": "character_data . experience_points = 0 ;"
      },
      {
        "id": 16,
        "label": "character_data . level = 1 ;"
      },
      {
        "id": 17,
        "label": "let mut equipment_slots = Vec :: new () ;"
      },
      {
        "id": 18,
        "label": "Loop Start"
      },
      {
        "id": 19,
        "label": "equipment_slots . push (EquipmentSlot { slot_type : match slot_index { 0 => SlotType :: Weapon , 1 => SlotType :: Armor , 2 => SlotType :: Helmet , 3 => SlotType :: Boots , 4 => SlotType :: Accessory , _ => SlotType :: Ring , } , equipped_item : None , enhancement_level : 0 , }) ;"
      },
      {
        "id": 20,
        "label": "Loop End"
      },
      {
        "id": 21,
        "label": "character_data . equipment = equipment_slots ;"
      },
      {
        "id": 22,
        "label": "character_data . combat_record = CombatRecord { battles_won : 0 , battles_lost : 0 , total_damage_dealt : 0 , total_damage_received : 0 , highest_critical_damage : 0 , } ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 20,
        "label": "for"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  }
]