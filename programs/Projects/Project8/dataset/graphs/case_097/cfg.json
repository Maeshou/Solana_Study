[
  {
    "name": "init_resource_nodes",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let nodes = & mut ctx . accounts . resource_hub ;"
      },
      {
        "id": 2,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "nodes . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 4,
        "label": "nodes . created_at = now ;"
      },
      {
        "id": 5,
        "label": "nodes . tier = tier . clone () ;"
      },
      {
        "id": 6,
        "label": "let mut list : Vec < ResourceNode > = Vec :: new () ;"
      },
      {
        "id": 7,
        "label": "let start = (now as u64) . rotate_left (5) as usize % 5 ;"
      },
      {
        "id": 8,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "let index = (start + i) % 5 ;"
      },
      {
        "id": 11,
        "label": "let rtype = to_resource_type (index) ;"
      },
      {
        "id": 12,
        "label": "let mut gen = baseline . max (10) ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "matches_city (& tier)"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "gen = gen . saturating_add (20 + (index as u32 * 5)) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "matches_capital (& tier)"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "gen = gen . saturating_add (50 + (index as u32 * 10)) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "matches_outpost (& tier)"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "gen = gen . saturating_add (10 + (index as u32 * 3)) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "No-op"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "let cap = gen . saturating_mul (24) ;"
      },
      {
        "id": 38,
        "label": "list . push (ResourceNode { resource_type : rtype , current_amount : 0 , generation_rate : gen , capacity : cap , last_harvest : now , enhancement_level : 0 , }) ;"
      },
      {
        "id": 39,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "nodes . nodes = list ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 21,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 29,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 9,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  },
  {
    "name": "harvest_and_raid",
    "nodes": [
      {
        "id": 43,
        "label": "Entry"
      },
      {
        "id": 44,
        "label": "let hub = & mut ctx . accounts . resource_hub ;"
      },
      {
        "id": 45,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 46,
        "label": "require ! (party_size >= 1 , ErrorCode :: PartyTooSmall) ;"
      },
      {
        "id": 47,
        "label": "require ! (party_size <= 6 , ErrorCode :: PartyTooLarge) ;"
      },
      {
        "id": 48,
        "label": "require ! (hours_elapsed > 0 , ErrorCode :: InvalidHours) ;"
      },
      {
        "id": 49,
        "label": "let start = ((now as u64) ^ (party_size as u64)) . rotate_left (3) as usize % hub . nodes . len () . max (1) ;"
      },
      {
        "id": 50,
        "label": "let mut j = 0usize ;"
      },
      {
        "id": 51,
        "label": "Loop Start"
      },
      {
        "id": 52,
        "label": "let k = (start + j) % hub . nodes . len () ;"
      },
      {
        "id": 53,
        "label": "let rate = hub . nodes [k] . generation_rate ;"
      },
      {
        "id": 54,
        "label": "let add = rate . saturating_mul (hours_elapsed) ;"
      },
      {
        "id": 55,
        "label": "let new_amt = hub . nodes [k] . current_amount . saturating_add (add) ;"
      },
      {
        "id": 56,
        "label": "let capped = new_amt . min (hub . nodes [k] . capacity) ;"
      },
      {
        "id": 57,
        "label": "hub . nodes [k] . current_amount = capped ;"
      },
      {
        "id": 58,
        "label": "hub . nodes [k] . last_harvest = now ;"
      },
      {
        "id": 59,
        "label": "j = j . saturating_add (1) ;"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "let mut threat = 50u32 ;"
      },
      {
        "id": 62,
        "label": "if statement"
      },
      {
        "id": 63,
        "label": "predicate"
      },
      {
        "id": 64,
        "label": "is_normal (& difficulty)"
      },
      {
        "id": 65,
        "label": "True body"
      },
      {
        "id": 66,
        "label": "threat = threat . saturating_add (30) ;"
      },
      {
        "id": 67,
        "label": "False body"
      },
      {
        "id": 68,
        "label": "No-op"
      },
      {
        "id": 69,
        "label": "merge"
      },
      {
        "id": 70,
        "label": "if statement"
      },
      {
        "id": 71,
        "label": "predicate"
      },
      {
        "id": 72,
        "label": "is_hard (& difficulty)"
      },
      {
        "id": 73,
        "label": "True body"
      },
      {
        "id": 74,
        "label": "threat = threat . saturating_add (60) ;"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "No-op"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "if statement"
      },
      {
        "id": 79,
        "label": "predicate"
      },
      {
        "id": 80,
        "label": "is_mythic (& difficulty)"
      },
      {
        "id": 81,
        "label": "True body"
      },
      {
        "id": 82,
        "label": "threat = threat . saturating_add (120) ;"
      },
      {
        "id": 83,
        "label": "False body"
      },
      {
        "id": 84,
        "label": "No-op"
      },
      {
        "id": 85,
        "label": "merge"
      },
      {
        "id": 86,
        "label": "if statement"
      },
      {
        "id": 87,
        "label": "predicate"
      },
      {
        "id": 88,
        "label": "party_size >= 4"
      },
      {
        "id": 89,
        "label": "True body"
      },
      {
        "id": 90,
        "label": "threat = threat . saturating_add (25) ;"
      },
      {
        "id": 91,
        "label": "False body"
      },
      {
        "id": 92,
        "label": "No-op"
      },
      {
        "id": 93,
        "label": "merge"
      },
      {
        "id": 94,
        "label": "if statement"
      },
      {
        "id": 95,
        "label": "predicate"
      },
      {
        "id": 96,
        "label": "now % 2 == 0"
      },
      {
        "id": 97,
        "label": "True body"
      },
      {
        "id": 98,
        "label": "threat = threat . saturating_add (7) ;"
      },
      {
        "id": 99,
        "label": "False body"
      },
      {
        "id": 100,
        "label": "No-op"
      },
      {
        "id": 101,
        "label": "merge"
      },
      {
        "id": 102,
        "label": "let mut drops : Vec < Loot > = Vec :: new () ;"
      },
      {
        "id": 103,
        "label": "let seed = ((now as u64) . rotate_left (9)) ^ (threat as u64) ;"
      },
      {
        "id": 104,
        "label": "let mut turn = 0u8 ;"
      },
      {
        "id": 105,
        "label": "Loop Start"
      },
      {
        "id": 106,
        "label": "let bias = ((seed >> (turn % 13)) as u32) % 100 ;"
      },
      {
        "id": 107,
        "label": "let rarity = decide_rarity (threat , bias) ;"
      },
      {
        "id": 108,
        "label": "let item = make_item (threat , rarity , turn) ;"
      },
      {
        "id": 109,
        "label": "drops . push (item) ;"
      },
      {
        "id": 110,
        "label": "turn = turn . saturating_add (1) ;"
      },
      {
        "id": 111,
        "label": "Loop End"
      },
      {
        "id": 112,
        "label": "push_drops (& mut ctx . accounts . raid_log , & drops)"
      },
      {
        "id": 113,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 51,
        "to": 60,
        "label": "while"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "predicate"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 62,
        "to": 65,
        "label": "true"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 62,
        "to": 67,
        "label": "false"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 66,
        "to": 69,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "predicate"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 70,
        "to": 73,
        "label": "true"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 70,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "predicate"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 78,
        "to": 81,
        "label": "true"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 78,
        "to": 83,
        "label": "false"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "predicate"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "true"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 86,
        "to": 91,
        "label": "false"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 90,
        "to": 93,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "predicate"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 94,
        "to": 97,
        "label": "true"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 94,
        "to": 99,
        "label": "false"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 105,
        "to": 111,
        "label": "while"
      },
      {
        "from": 111,
        "to": 112,
        "label": "call"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      }
    ]
  },
  {
    "name": "to_resource_type",
    "nodes": [
      {
        "id": 114,
        "label": "Entry"
      },
      {
        "id": 115,
        "label": "let mut t = ResourceType :: Gold ;"
      },
      {
        "id": 116,
        "label": "if statement"
      },
      {
        "id": 117,
        "label": "predicate"
      },
      {
        "id": 118,
        "label": "i == 1"
      },
      {
        "id": 119,
        "label": "True body"
      },
      {
        "id": 120,
        "label": "t = ResourceType :: Crystal ;"
      },
      {
        "id": 121,
        "label": "False body"
      },
      {
        "id": 122,
        "label": "No-op"
      },
      {
        "id": 123,
        "label": "merge"
      },
      {
        "id": 124,
        "label": "if statement"
      },
      {
        "id": 125,
        "label": "predicate"
      },
      {
        "id": 126,
        "label": "i == 2"
      },
      {
        "id": 127,
        "label": "True body"
      },
      {
        "id": 128,
        "label": "t = ResourceType :: Wood ;"
      },
      {
        "id": 129,
        "label": "False body"
      },
      {
        "id": 130,
        "label": "No-op"
      },
      {
        "id": 131,
        "label": "merge"
      },
      {
        "id": 132,
        "label": "if statement"
      },
      {
        "id": 133,
        "label": "predicate"
      },
      {
        "id": 134,
        "label": "i == 3"
      },
      {
        "id": 135,
        "label": "True body"
      },
      {
        "id": 136,
        "label": "t = ResourceType :: Stone ;"
      },
      {
        "id": 137,
        "label": "False body"
      },
      {
        "id": 138,
        "label": "No-op"
      },
      {
        "id": 139,
        "label": "merge"
      },
      {
        "id": 140,
        "label": "if statement"
      },
      {
        "id": 141,
        "label": "predicate"
      },
      {
        "id": 142,
        "label": "i >= 4"
      },
      {
        "id": 143,
        "label": "True body"
      },
      {
        "id": 144,
        "label": "t = ResourceType :: MagicEssence ;"
      },
      {
        "id": 145,
        "label": "False body"
      },
      {
        "id": 146,
        "label": "No-op"
      },
      {
        "id": 147,
        "label": "merge"
      },
      {
        "id": 148,
        "label": "t"
      }
    ],
    "edges": [
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "predicate"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 116,
        "to": 119,
        "label": "true"
      },
      {
        "from": 119,
        "to": 120,
        "label": "next"
      },
      {
        "from": 116,
        "to": 121,
        "label": "false"
      },
      {
        "from": 121,
        "to": 122,
        "label": "next"
      },
      {
        "from": 120,
        "to": 123,
        "label": "next"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      },
      {
        "from": 123,
        "to": 124,
        "label": "next"
      },
      {
        "from": 124,
        "to": 125,
        "label": "predicate"
      },
      {
        "from": 125,
        "to": 126,
        "label": "next"
      },
      {
        "from": 124,
        "to": 127,
        "label": "true"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      },
      {
        "from": 124,
        "to": 129,
        "label": "false"
      },
      {
        "from": 129,
        "to": 130,
        "label": "next"
      },
      {
        "from": 128,
        "to": 131,
        "label": "next"
      },
      {
        "from": 130,
        "to": 131,
        "label": "next"
      },
      {
        "from": 131,
        "to": 132,
        "label": "next"
      },
      {
        "from": 132,
        "to": 133,
        "label": "predicate"
      },
      {
        "from": 133,
        "to": 134,
        "label": "next"
      },
      {
        "from": 132,
        "to": 135,
        "label": "true"
      },
      {
        "from": 135,
        "to": 136,
        "label": "next"
      },
      {
        "from": 132,
        "to": 137,
        "label": "false"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 136,
        "to": 139,
        "label": "next"
      },
      {
        "from": 138,
        "to": 139,
        "label": "next"
      },
      {
        "from": 139,
        "to": 140,
        "label": "next"
      },
      {
        "from": 140,
        "to": 141,
        "label": "predicate"
      },
      {
        "from": 141,
        "to": 142,
        "label": "next"
      },
      {
        "from": 140,
        "to": 143,
        "label": "true"
      },
      {
        "from": 143,
        "to": 144,
        "label": "next"
      },
      {
        "from": 140,
        "to": 145,
        "label": "false"
      },
      {
        "from": 145,
        "to": 146,
        "label": "next"
      },
      {
        "from": 144,
        "to": 147,
        "label": "next"
      },
      {
        "from": 146,
        "to": 147,
        "label": "next"
      },
      {
        "from": 147,
        "to": 148,
        "label": "next"
      }
    ]
  },
  {
    "name": "matches_city",
    "nodes": [
      {
        "id": 149,
        "label": "Entry"
      },
      {
        "id": 150,
        "label": "matches ! (t , TerritoryTier :: City)"
      }
    ],
    "edges": [
      {
        "from": 149,
        "to": 150,
        "label": "next"
      }
    ]
  },
  {
    "name": "matches_capital",
    "nodes": [
      {
        "id": 151,
        "label": "Entry"
      },
      {
        "id": 152,
        "label": "matches ! (t , TerritoryTier :: Capital)"
      }
    ],
    "edges": [
      {
        "from": 151,
        "to": 152,
        "label": "next"
      }
    ]
  },
  {
    "name": "matches_outpost",
    "nodes": [
      {
        "id": 153,
        "label": "Entry"
      },
      {
        "id": 154,
        "label": "matches ! (t , TerritoryTier :: Outpost)"
      }
    ],
    "edges": [
      {
        "from": 153,
        "to": 154,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_normal",
    "nodes": [
      {
        "id": 155,
        "label": "Entry"
      },
      {
        "id": 156,
        "label": "matches ! (d , RaidDifficulty :: Normal)"
      }
    ],
    "edges": [
      {
        "from": 155,
        "to": 156,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_hard",
    "nodes": [
      {
        "id": 157,
        "label": "Entry"
      },
      {
        "id": 158,
        "label": "matches ! (d , RaidDifficulty :: Hard)"
      }
    ],
    "edges": [
      {
        "from": 157,
        "to": 158,
        "label": "next"
      }
    ]
  },
  {
    "name": "is_mythic",
    "nodes": [
      {
        "id": 159,
        "label": "Entry"
      },
      {
        "id": 160,
        "label": "matches ! (d , RaidDifficulty :: Mythic)"
      }
    ],
    "edges": [
      {
        "from": 159,
        "to": 160,
        "label": "next"
      }
    ]
  },
  {
    "name": "decide_rarity",
    "nodes": [
      {
        "id": 161,
        "label": "Entry"
      },
      {
        "id": 162,
        "label": "let mut score = threat . saturating_add (bias) ;"
      },
      {
        "id": 163,
        "label": "if statement"
      },
      {
        "id": 164,
        "label": "predicate"
      },
      {
        "id": 165,
        "label": "score >= 180"
      },
      {
        "id": 166,
        "label": "True body"
      },
      {
        "id": 167,
        "label": "return Rarity :: Mythic ;"
      },
      {
        "id": 168,
        "label": "False body"
      },
      {
        "id": 169,
        "label": "No-op"
      },
      {
        "id": 170,
        "label": "merge"
      },
      {
        "id": 171,
        "label": "if statement"
      },
      {
        "id": 172,
        "label": "predicate"
      },
      {
        "id": 173,
        "label": "score >= 120"
      },
      {
        "id": 174,
        "label": "True body"
      },
      {
        "id": 175,
        "label": "return Rarity :: Legendary ;"
      },
      {
        "id": 176,
        "label": "False body"
      },
      {
        "id": 177,
        "label": "No-op"
      },
      {
        "id": 178,
        "label": "merge"
      },
      {
        "id": 179,
        "label": "if statement"
      },
      {
        "id": 180,
        "label": "predicate"
      },
      {
        "id": 181,
        "label": "score >= 80"
      },
      {
        "id": 182,
        "label": "True body"
      },
      {
        "id": 183,
        "label": "return Rarity :: Epic ;"
      },
      {
        "id": 184,
        "label": "False body"
      },
      {
        "id": 185,
        "label": "No-op"
      },
      {
        "id": 186,
        "label": "merge"
      },
      {
        "id": 187,
        "label": "if statement"
      },
      {
        "id": 188,
        "label": "predicate"
      },
      {
        "id": 189,
        "label": "score >= 40"
      },
      {
        "id": 190,
        "label": "True body"
      },
      {
        "id": 191,
        "label": "return Rarity :: Rare ;"
      },
      {
        "id": 192,
        "label": "False body"
      },
      {
        "id": 193,
        "label": "No-op"
      },
      {
        "id": 194,
        "label": "merge"
      },
      {
        "id": 195,
        "label": "Rarity :: Common"
      }
    ],
    "edges": [
      {
        "from": 161,
        "to": 162,
        "label": "next"
      },
      {
        "from": 162,
        "to": 163,
        "label": "next"
      },
      {
        "from": 163,
        "to": 164,
        "label": "predicate"
      },
      {
        "from": 164,
        "to": 165,
        "label": "next"
      },
      {
        "from": 163,
        "to": 166,
        "label": "true"
      },
      {
        "from": 166,
        "to": 167,
        "label": "next"
      },
      {
        "from": 163,
        "to": 168,
        "label": "false"
      },
      {
        "from": 168,
        "to": 169,
        "label": "next"
      },
      {
        "from": 167,
        "to": 170,
        "label": "next"
      },
      {
        "from": 169,
        "to": 170,
        "label": "next"
      },
      {
        "from": 170,
        "to": 171,
        "label": "next"
      },
      {
        "from": 171,
        "to": 172,
        "label": "predicate"
      },
      {
        "from": 172,
        "to": 173,
        "label": "next"
      },
      {
        "from": 171,
        "to": 174,
        "label": "true"
      },
      {
        "from": 174,
        "to": 175,
        "label": "next"
      },
      {
        "from": 171,
        "to": 176,
        "label": "false"
      },
      {
        "from": 176,
        "to": 177,
        "label": "next"
      },
      {
        "from": 175,
        "to": 178,
        "label": "next"
      },
      {
        "from": 177,
        "to": 178,
        "label": "next"
      },
      {
        "from": 178,
        "to": 179,
        "label": "next"
      },
      {
        "from": 179,
        "to": 180,
        "label": "predicate"
      },
      {
        "from": 180,
        "to": 181,
        "label": "next"
      },
      {
        "from": 179,
        "to": 182,
        "label": "true"
      },
      {
        "from": 182,
        "to": 183,
        "label": "next"
      },
      {
        "from": 179,
        "to": 184,
        "label": "false"
      },
      {
        "from": 184,
        "to": 185,
        "label": "next"
      },
      {
        "from": 183,
        "to": 186,
        "label": "next"
      },
      {
        "from": 185,
        "to": 186,
        "label": "next"
      },
      {
        "from": 186,
        "to": 187,
        "label": "next"
      },
      {
        "from": 187,
        "to": 188,
        "label": "predicate"
      },
      {
        "from": 188,
        "to": 189,
        "label": "next"
      },
      {
        "from": 187,
        "to": 190,
        "label": "true"
      },
      {
        "from": 190,
        "to": 191,
        "label": "next"
      },
      {
        "from": 187,
        "to": 192,
        "label": "false"
      },
      {
        "from": 192,
        "to": 193,
        "label": "next"
      },
      {
        "from": 191,
        "to": 194,
        "label": "next"
      },
      {
        "from": 193,
        "to": 194,
        "label": "next"
      },
      {
        "from": 194,
        "to": 195,
        "label": "next"
      }
    ]
  },
  {
    "name": "make_item",
    "nodes": [
      {
        "id": 196,
        "label": "Entry"
      },
      {
        "id": 197,
        "label": "let mut p = 10u32 ;"
      },
      {
        "id": 198,
        "label": "let mut d = 10u32 ;"
      },
      {
        "id": 199,
        "label": "let mut u = 1u32 ;"
      },
      {
        "id": 200,
        "label": "if statement"
      },
      {
        "id": 201,
        "label": "predicate"
      },
      {
        "id": 202,
        "label": "matches ! (rarity , Rarity :: Rare)"
      },
      {
        "id": 203,
        "label": "True body"
      },
      {
        "id": 204,
        "label": "p = p . saturating_add (20) ;"
      },
      {
        "id": 205,
        "label": "d = d . saturating_add (15) ;"
      },
      {
        "id": 206,
        "label": "u = u . saturating_add (1) ;"
      },
      {
        "id": 207,
        "label": "False body"
      },
      {
        "id": 208,
        "label": "No-op"
      },
      {
        "id": 209,
        "label": "merge"
      },
      {
        "id": 210,
        "label": "if statement"
      },
      {
        "id": 211,
        "label": "predicate"
      },
      {
        "id": 212,
        "label": "matches ! (rarity , Rarity :: Epic)"
      },
      {
        "id": 213,
        "label": "True body"
      },
      {
        "id": 214,
        "label": "p = p . saturating_add (40) ;"
      },
      {
        "id": 215,
        "label": "d = d . saturating_add (35) ;"
      },
      {
        "id": 216,
        "label": "u = u . saturating_add (2) ;"
      },
      {
        "id": 217,
        "label": "False body"
      },
      {
        "id": 218,
        "label": "No-op"
      },
      {
        "id": 219,
        "label": "merge"
      },
      {
        "id": 220,
        "label": "if statement"
      },
      {
        "id": 221,
        "label": "predicate"
      },
      {
        "id": 222,
        "label": "matches ! (rarity , Rarity :: Legendary)"
      },
      {
        "id": 223,
        "label": "True body"
      },
      {
        "id": 224,
        "label": "p = p . saturating_add (70) ;"
      },
      {
        "id": 225,
        "label": "d = d . saturating_add (60) ;"
      },
      {
        "id": 226,
        "label": "u = u . saturating_add (3) ;"
      },
      {
        "id": 227,
        "label": "False body"
      },
      {
        "id": 228,
        "label": "No-op"
      },
      {
        "id": 229,
        "label": "merge"
      },
      {
        "id": 230,
        "label": "if statement"
      },
      {
        "id": 231,
        "label": "predicate"
      },
      {
        "id": 232,
        "label": "matches ! (rarity , Rarity :: Mythic)"
      },
      {
        "id": 233,
        "label": "True body"
      },
      {
        "id": 234,
        "label": "p = p . saturating_add (120) ;"
      },
      {
        "id": 235,
        "label": "d = d . saturating_add (110) ;"
      },
      {
        "id": 236,
        "label": "u = u . saturating_add (4) ;"
      },
      {
        "id": 237,
        "label": "False body"
      },
      {
        "id": 238,
        "label": "No-op"
      },
      {
        "id": 239,
        "label": "merge"
      },
      {
        "id": 240,
        "label": "let spice = ((threat . rotate_left ((turn % 11) as u32)) % 23) as u32 ;"
      },
      {
        "id": 241,
        "label": "Loot { rarity , power : p . saturating_add (spice) , defense : d . saturating_add (spice / 2) , utility : u . saturating_add (spice % 3) , }"
      }
    ],
    "edges": [
      {
        "from": 196,
        "to": 197,
        "label": "next"
      },
      {
        "from": 197,
        "to": 198,
        "label": "next"
      },
      {
        "from": 198,
        "to": 199,
        "label": "next"
      },
      {
        "from": 199,
        "to": 200,
        "label": "next"
      },
      {
        "from": 200,
        "to": 201,
        "label": "predicate"
      },
      {
        "from": 201,
        "to": 202,
        "label": "next"
      },
      {
        "from": 200,
        "to": 203,
        "label": "true"
      },
      {
        "from": 203,
        "to": 204,
        "label": "next"
      },
      {
        "from": 204,
        "to": 205,
        "label": "next"
      },
      {
        "from": 205,
        "to": 206,
        "label": "next"
      },
      {
        "from": 200,
        "to": 207,
        "label": "false"
      },
      {
        "from": 207,
        "to": 208,
        "label": "next"
      },
      {
        "from": 206,
        "to": 209,
        "label": "next"
      },
      {
        "from": 208,
        "to": 209,
        "label": "next"
      },
      {
        "from": 209,
        "to": 210,
        "label": "next"
      },
      {
        "from": 210,
        "to": 211,
        "label": "predicate"
      },
      {
        "from": 211,
        "to": 212,
        "label": "next"
      },
      {
        "from": 210,
        "to": 213,
        "label": "true"
      },
      {
        "from": 213,
        "to": 214,
        "label": "next"
      },
      {
        "from": 214,
        "to": 215,
        "label": "next"
      },
      {
        "from": 215,
        "to": 216,
        "label": "next"
      },
      {
        "from": 210,
        "to": 217,
        "label": "false"
      },
      {
        "from": 217,
        "to": 218,
        "label": "next"
      },
      {
        "from": 216,
        "to": 219,
        "label": "next"
      },
      {
        "from": 218,
        "to": 219,
        "label": "next"
      },
      {
        "from": 219,
        "to": 220,
        "label": "next"
      },
      {
        "from": 220,
        "to": 221,
        "label": "predicate"
      },
      {
        "from": 221,
        "to": 222,
        "label": "next"
      },
      {
        "from": 220,
        "to": 223,
        "label": "true"
      },
      {
        "from": 223,
        "to": 224,
        "label": "next"
      },
      {
        "from": 224,
        "to": 225,
        "label": "next"
      },
      {
        "from": 225,
        "to": 226,
        "label": "next"
      },
      {
        "from": 220,
        "to": 227,
        "label": "false"
      },
      {
        "from": 227,
        "to": 228,
        "label": "next"
      },
      {
        "from": 226,
        "to": 229,
        "label": "next"
      },
      {
        "from": 228,
        "to": 229,
        "label": "next"
      },
      {
        "from": 229,
        "to": 230,
        "label": "next"
      },
      {
        "from": 230,
        "to": 231,
        "label": "predicate"
      },
      {
        "from": 231,
        "to": 232,
        "label": "next"
      },
      {
        "from": 230,
        "to": 233,
        "label": "true"
      },
      {
        "from": 233,
        "to": 234,
        "label": "next"
      },
      {
        "from": 234,
        "to": 235,
        "label": "next"
      },
      {
        "from": 235,
        "to": 236,
        "label": "next"
      },
      {
        "from": 230,
        "to": 237,
        "label": "false"
      },
      {
        "from": 237,
        "to": 238,
        "label": "next"
      },
      {
        "from": 236,
        "to": 239,
        "label": "next"
      },
      {
        "from": 238,
        "to": 239,
        "label": "next"
      },
      {
        "from": 239,
        "to": 240,
        "label": "next"
      },
      {
        "from": 240,
        "to": 241,
        "label": "next"
      }
    ]
  },
  {
    "name": "push_drops",
    "nodes": [
      {
        "id": 242,
        "label": "Entry"
      },
      {
        "id": 243,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 244,
        "label": "Loop Start"
      },
      {
        "id": 245,
        "label": "log . recent . push (new_items [i] . clone ()) ;"
      },
      {
        "id": 246,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 247,
        "label": "Loop End"
      },
      {
        "id": 248,
        "label": "Loop Start"
      },
      {
        "id": 249,
        "label": "log . recent . remove (0) ;"
      },
      {
        "id": 250,
        "label": "Loop End"
      }
    ],
    "edges": [
      {
        "from": 242,
        "to": 243,
        "label": "next"
      },
      {
        "from": 243,
        "to": 244,
        "label": "next"
      },
      {
        "from": 244,
        "to": 245,
        "label": "next"
      },
      {
        "from": 245,
        "to": 246,
        "label": "next"
      },
      {
        "from": 244,
        "to": 247,
        "label": "while"
      },
      {
        "from": 247,
        "to": 248,
        "label": "next"
      },
      {
        "from": 248,
        "to": 249,
        "label": "next"
      },
      {
        "from": 248,
        "to": 250,
        "label": "while"
      }
    ]
  }
]