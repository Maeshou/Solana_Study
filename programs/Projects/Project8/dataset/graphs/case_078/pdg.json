[
  {
    "name": "build",
    "inputs": [
      "ctx: Context < Build >",
      "rating: u64",
      "total_matches: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let slots = [TimeSlot :: Morning , TimeSlot :: Afternoon , TimeSlot :: Evening , TimeSlot :: Night] ;"
      },
      {
        "id": 2,
        "label": "let mut out : Vec < BracketPref > = Vec :: new () ;"
      },
      {
        "id": 3,
        "label": "let mut level = ExperienceLevel :: Novice ;"
      },
      {
        "id": 4,
        "label": "if total_matches >= 100 { level = ExperienceLevel :: Intermediate ; }"
      },
      {
        "id": 5,
        "label": "level = ExperienceLevel :: Intermediate ;"
      },
      {
        "id": 6,
        "label": "if total_matches >= 500 { level = ExperienceLevel :: Experienced ; }"
      },
      {
        "id": 7,
        "label": "level = ExperienceLevel :: Experienced ;"
      },
      {
        "id": 8,
        "label": "if total_matches >= 1000 { level = ExperienceLevel :: Veteran ; }"
      },
      {
        "id": 9,
        "label": "level = ExperienceLevel :: Veteran ;"
      },
      {
        "id": 10,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 11,
        "label": "while i < slots . len () { out . push (BracketPref { slot : slots [i] , min_rating : rating . saturating_sub (200) , max_rating : rating . saturating_add (200) , exp_level : level , format : MatchFormat :: BestOfThree , }) ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "out . push (BracketPref { slot : slots [i] , min_rating : rating . saturating_sub (200) , max_rating : rating . saturating_add (200) , exp_level : level , format : MatchFormat :: BestOfThree , }) ;"
      },
      {
        "id": 13,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 14,
        "label": "ctx . accounts . brackets . prefs = out ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: slots"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: level"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: level"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: level"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: level"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: level"
      },
      {
        "from": 3,
        "to": 8,
        "label": "data_dep: level"
      },
      {
        "from": 3,
        "to": 9,
        "label": "data_dep: level"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: slots"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: slots"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 3,
        "to": 11,
        "label": "data_dep: level"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: slots"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: i"
      },
      {
        "from": 3,
        "to": 12,
        "label": "data_dep: level"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: i"
      }
    ]
  }
]