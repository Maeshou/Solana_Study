[
  {
    "name": "train_pet",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pet = & mut ctx . accounts . pet_nft ;"
      },
      {
        "id": 2,
        "label": "let total_cost = 100 * u64 :: from (training_sessions) ;"
      },
      {
        "id": 3,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . player_token_account . to_account_info () , to : ctx . accounts . treasury_token_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ;"
      },
      {
        "id": 4,
        "label": "let cpi_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 5,
        "label": "let cpi_ctx = CpiContext :: new (cpi_program , cpi_accounts) ;"
      },
      {
        "id": 6,
        "label": "token :: transfer (cpi_ctx , total_cost) ? ;"
      },
      {
        "id": 7,
        "label": "Loop Start"
      },
      {
        "id": 8,
        "label": "pet . loyalty += 1 ;"
      },
      {
        "id": 9,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 10,
        "label": "let pseudo_random = (clock . unix_timestamp as u64) . wrapping_add (i as u64) % 10 ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "pseudo_random < 4"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "pet . agility += 2 ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"Session {}: Agility increased!\" , i + 1) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "pseudo_random > 6"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "pet . intelligence += 2 ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"Session {}: Intelligence increased!\" , i + 1) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "pet . loyalty == 50"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "pet . skills . push (101) ;"
      },
      {
        "id": 34,
        "label": "msg ! (\"Pet learned a new skill due to high loyalty!\") ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "Loop End"
      },
      {
        "id": 39,
        "label": "msg ! (\"Pet training complete. New Agility: {}, New Intelligence: {}\" , pet . agility , pet . intelligence) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 11,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 20,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 29,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 7,
        "to": 38,
        "label": "for"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]