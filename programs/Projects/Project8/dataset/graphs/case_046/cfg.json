[
  {
    "name": "learn_new_skill",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let character = & mut ctx . accounts . character_stats ;"
      },
      {
        "id": 2,
        "label": "let skill_tree = & ctx . accounts . skill_tree ;"
      },
      {
        "id": 3,
        "label": "let mut target_skill_option : Option < Skill > = None ;"
      },
      {
        "id": 4,
        "label": "Loop Start"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "skill . skill_id == skill_id_to_learn"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "target_skill_option = Some (skill . clone ()) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "Loop End"
      },
      {
        "id": 14,
        "label": "let target_skill = target_skill_option . ok_or (GameError :: SkillNotFoundInTree) ? ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "require ! (* learned_skill != skill_id_to_learn , GameError :: SkillAlreadyLearned) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "require ! (character . level >= target_skill . required_level , GameError :: RequiredLevelNotMet) ;"
      },
      {
        "id": 19,
        "label": "require ! (character . skill_points > 0 , GameError :: NotEnoughSkillPoints) ;"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "target_skill . prerequisite_skill_id != 0"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "let mut prerequisite_learned = false ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "* learned_skill == target_skill . prerequisite_skill_id"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "prerequisite_learned = true ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "require ! (prerequisite_learned , GameError :: PrerequisiteSkillNotLearned) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "No-op"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "character . skill_points -= 1 ;"
      },
      {
        "id": 40,
        "label": "character . learned_skills . push (skill_id_to_learn) ;"
      },
      {
        "id": 41,
        "label": "msg ! (\"Character learned a new skill: {}!\" , skill_id_to_learn) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 4,
        "to": 13,
        "label": "for"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 17,
        "label": "for"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 26,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 25,
        "to": 34,
        "label": "for"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 20,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  }
]