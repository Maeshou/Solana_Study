[
  {
    "name": "init_dungeon",
    "inputs": [
      "ctx: Context < InitDungeon >",
      "shard: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dungeon ;"
      },
      {
        "id": 2,
        "label": "d . warden = ctx . accounts . warden . key () ;"
      },
      {
        "id": 3,
        "label": "d . shard = shard . rotate_left (3) . wrapping_add (33) ;"
      },
      {
        "id": 4,
        "label": "d . depth = 1 ;"
      },
      {
        "id": 5,
        "label": "let mut s = d . shard . rotate_right (1) . wrapping_add (5) ;"
      },
      {
        "id": 6,
        "label": "for _ in 0 .. 4 { s = s . rotate_left (1) . wrapping_mul (2) . wrapping_add (7) ; d . depth = d . depth . saturating_add (((s % 19) as u32) + 1) ; }"
      },
      {
        "id": 7,
        "label": "s = s . rotate_left (1) . wrapping_mul (2) . wrapping_add (7) ;"
      },
      {
        "id": 8,
        "label": "d . depth = d . depth . saturating_add (((s % 19) as u32) + 1) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: d"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "loot_drop",
    "inputs": [
      "ctx: Context < LootDrop >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . dungeon . key () , & ctx . accounts . adventurer . key () , lamports) ;"
      },
      {
        "id": 12,
        "label": "let bump = * ctx . bumps . get (\"dungeon\") . ok_or (error ! (DungeonErr :: MissingBump)) ? ;"
      },
      {
        "id": 13,
        "label": "let seeds : & [& [u8]] = & [b\"dungeon\" , ctx . accounts . warden . key . as_ref () , & ctx . accounts . dungeon . shard . to_le_bytes () , & [bump] ,] ;"
      },
      {
        "id": 14,
        "label": "invoke_signed (& ix , & [ctx . accounts . dungeon . to_account_info () , ctx . accounts . adventurer . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 15,
        "label": "emit ! (LootPaid { to : ctx . accounts . adventurer . key () , amount : lamports }) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: ix"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: bump"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: bump"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: ix"
      }
    ]
  }
]