[
  {
    "name": "init_defense_layout",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let layout = & mut ctx . accounts . defense_plan ;"
      },
      {
        "id": 2,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "require ! (size_hint >= 100 , ErrorCode :: TooSmallHint) ;"
      },
      {
        "id": 4,
        "label": "layout . created_at = now ;"
      },
      {
        "id": 5,
        "label": "layout . tier = tier . clone () ;"
      },
      {
        "id": 6,
        "label": "layout . estimated_size = size_hint ;"
      },
      {
        "id": 7,
        "label": "let count = slot_count_from_size (size_hint) ;"
      },
      {
        "id": 8,
        "label": "layout . slot_count = count ;"
      },
      {
        "id": 9,
        "label": "let base = base_stats_for_tier (& tier) ;"
      },
      {
        "id": 10,
        "label": "layout . structures = build_structures (count , order_seed , base , now) ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "slot_count_from_size",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let mut c = 3u32 ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "size_hint >= 2_000"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "c = 5 ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "size_hint >= 5_000"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "c = 8 ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "c"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      }
    ]
  },
  {
    "name": "base_stats_for_tier",
    "nodes": [
      {
        "id": 31,
        "label": "Entry"
      },
      {
        "id": 32,
        "label": "let mut b = BaseStats { hp : 900 , dp : 120 , upkeep : 18 } ;"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "matches ! (t , TerritoryTier :: City)"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "b . hp = b . hp . saturating_add (400) ;"
      },
      {
        "id": 38,
        "label": "b . dp = b . dp . saturating_add (60) ;"
      },
      {
        "id": 39,
        "label": "b . upkeep = b . upkeep . saturating_add (10) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "No-op"
      },
      {
        "id": 42,
        "label": "merge"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "matches ! (t , TerritoryTier :: Capital)"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "b . hp = b . hp . saturating_add (900) ;"
      },
      {
        "id": 48,
        "label": "b . dp = b . dp . saturating_add (180) ;"
      },
      {
        "id": 49,
        "label": "b . upkeep = b . upkeep . saturating_add (30) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "No-op"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "b"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 33,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 43,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  },
  {
    "name": "build_structures",
    "nodes": [
      {
        "id": 54,
        "label": "Entry"
      },
      {
        "id": 55,
        "label": "let mut out = Vec :: new () ;"
      },
      {
        "id": 56,
        "label": "let start = (seed as usize) % (count as usize) ;"
      },
      {
        "id": 57,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 58,
        "label": "Loop Start"
      },
      {
        "id": 59,
        "label": "let idx = (start + i) % (count as usize) ;"
      },
      {
        "id": 60,
        "label": "let kind = choose_kind (idx) ;"
      },
      {
        "id": 61,
        "label": "let tweak = ((seed . rotate_left ((idx as u32) & 13)) as u32) % 37 ;"
      },
      {
        "id": 62,
        "label": "let hp = base . hp . saturating_add (tweak * 10) ;"
      },
      {
        "id": 63,
        "label": "let dp = base . dp . saturating_add ((tweak % 9) * 10) ;"
      },
      {
        "id": 64,
        "label": "let up = base . upkeep . saturating_add (tweak % 7) ;"
      },
      {
        "id": 65,
        "label": "out . push (DefenseStructure { structure_id : idx as u32 , structure_type : kind , health_points : hp , defense_power : dp , maintenance_cost : up , last_upgrade : now , }) ;"
      },
      {
        "id": 66,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 67,
        "label": "Loop End"
      },
      {
        "id": 68,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 58,
        "to": 67,
        "label": "while"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      }
    ]
  },
  {
    "name": "choose_kind",
    "nodes": [
      {
        "id": 69,
        "label": "Entry"
      },
      {
        "id": 70,
        "label": "let mut k = StructureType :: Watchtower ;"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "idx % 4 == 1"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "k = StructureType :: BarricadeWall ;"
      },
      {
        "id": 76,
        "label": "False body"
      },
      {
        "id": 77,
        "label": "No-op"
      },
      {
        "id": 78,
        "label": "merge"
      },
      {
        "id": 79,
        "label": "if statement"
      },
      {
        "id": 80,
        "label": "predicate"
      },
      {
        "id": 81,
        "label": "idx % 4 == 2"
      },
      {
        "id": 82,
        "label": "True body"
      },
      {
        "id": 83,
        "label": "k = StructureType :: MagicBarrier ;"
      },
      {
        "id": 84,
        "label": "False body"
      },
      {
        "id": 85,
        "label": "No-op"
      },
      {
        "id": 86,
        "label": "merge"
      },
      {
        "id": 87,
        "label": "if statement"
      },
      {
        "id": 88,
        "label": "predicate"
      },
      {
        "id": 89,
        "label": "idx % 4 >= 3"
      },
      {
        "id": 90,
        "label": "True body"
      },
      {
        "id": 91,
        "label": "k = StructureType :: TrapField ;"
      },
      {
        "id": 92,
        "label": "False body"
      },
      {
        "id": 93,
        "label": "No-op"
      },
      {
        "id": 94,
        "label": "merge"
      },
      {
        "id": 95,
        "label": "k"
      }
    ],
    "edges": [
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 71,
        "to": 76,
        "label": "false"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "predicate"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 79,
        "to": 82,
        "label": "true"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 79,
        "to": 84,
        "label": "false"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 83,
        "to": 86,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "predicate"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 87,
        "to": 90,
        "label": "true"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 87,
        "to": 92,
        "label": "false"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      }
    ]
  }
]