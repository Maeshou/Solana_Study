[
  {
    "name": "define_territory",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let atlas = & mut ctx . accounts . territory ;"
      },
      {
        "id": 2,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "let area = coords . area () ;"
      },
      {
        "id": 4,
        "label": "require ! (area >= 100 , ErrorCode :: TooSmall) ;"
      },
      {
        "id": 5,
        "label": "require ! (area <= 10_000 , ErrorCode :: TooLarge) ;"
      },
      {
        "id": 6,
        "label": "atlas . owner = ctx . accounts . guild_master . key () ;"
      },
      {
        "id": 7,
        "label": "atlas . coords = coords . clone () ;"
      },
      {
        "id": 8,
        "label": "atlas . created_at = now ;"
      },
      {
        "id": 9,
        "label": "atlas . size = area ;"
      },
      {
        "id": 10,
        "label": "atlas . tier = tier_from_area (area) ;"
      },
      {
        "id": 11,
        "label": "atlas . daily_baseline = blended_daily (coords . clone () , base_daily , & atlas . tier) ;"
      },
      {
        "id": 12,
        "label": "atlas . shuffle_seed = mix_seed (now , area) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "tier_from_area",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let mut t = TerritoryTier :: Outpost ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "area >= 2_000"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "t = TerritoryTier :: City ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "area >= 5_000"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "t = TerritoryTier :: Capital ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "t"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 24,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      }
    ]
  },
  {
    "name": "blended_daily",
    "nodes": [
      {
        "id": 33,
        "label": "Entry"
      },
      {
        "id": 34,
        "label": "let mut daily = base . max (10) ;"
      },
      {
        "id": 35,
        "label": "daily = daily . saturating_add (coord_bias (coords)) ;"
      },
      {
        "id": 36,
        "label": "daily = daily . saturating_add (tier_bias (tier)) ;"
      },
      {
        "id": 37,
        "label": "daily"
      }
    ],
    "edges": [
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      }
    ]
  },
  {
    "name": "coord_bias",
    "nodes": [
      {
        "id": 38,
        "label": "Entry"
      },
      {
        "id": 39,
        "label": "let bias1 = (c . north_boundary as i64 - c . south_boundary as i64) . unsigned_abs () as u32 ;"
      },
      {
        "id": 40,
        "label": "let bias2 = (c . east_boundary as i64 - c . west_boundary as i64) . unsigned_abs () as u32 ;"
      },
      {
        "id": 41,
        "label": "(bias1 % 13) . saturating_add (bias2 % 7)"
      }
    ],
    "edges": [
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      }
    ]
  },
  {
    "name": "tier_bias",
    "nodes": [
      {
        "id": 42,
        "label": "Entry"
      },
      {
        "id": 43,
        "label": "let mut s = 0u32 ;"
      },
      {
        "id": 44,
        "label": "if statement"
      },
      {
        "id": 45,
        "label": "predicate"
      },
      {
        "id": 46,
        "label": "matches ! (t , TerritoryTier :: Capital)"
      },
      {
        "id": 47,
        "label": "True body"
      },
      {
        "id": 48,
        "label": "s = s . saturating_add (200) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "if statement"
      },
      {
        "id": 53,
        "label": "predicate"
      },
      {
        "id": 54,
        "label": "matches ! (t , TerritoryTier :: City)"
      },
      {
        "id": 55,
        "label": "True body"
      },
      {
        "id": 56,
        "label": "s = s . saturating_add (90) ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "if statement"
      },
      {
        "id": 61,
        "label": "predicate"
      },
      {
        "id": 62,
        "label": "matches ! (t , TerritoryTier :: Outpost)"
      },
      {
        "id": 63,
        "label": "True body"
      },
      {
        "id": 64,
        "label": "s = s . saturating_add (30) ;"
      },
      {
        "id": 65,
        "label": "False body"
      },
      {
        "id": 66,
        "label": "No-op"
      },
      {
        "id": 67,
        "label": "merge"
      },
      {
        "id": 68,
        "label": "s"
      }
    ],
    "edges": [
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "predicate"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "true"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 44,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "predicate"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "true"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 52,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "predicate"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 60,
        "to": 63,
        "label": "true"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 60,
        "to": 65,
        "label": "false"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      }
    ]
  },
  {
    "name": "mix_seed",
    "nodes": [
      {
        "id": 69,
        "label": "Entry"
      },
      {
        "id": 70,
        "label": "((now as u64) . rotate_left (11)) ^ ((area as u64) . rotate_left (3))"
      }
    ],
    "edges": [
      {
        "from": 69,
        "to": 70,
        "label": "next"
      }
    ]
  }
]