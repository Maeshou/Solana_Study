[
  {
    "name": "generate_dungeon_instance",
    "inputs": [
      "ctx: Context < GenerateDungeon >",
      "dungeon_difficulty: DungeonDifficulty",
      "party_composition: Vec < PartyMember >",
      "entrance_fee_paid: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let dungeon_instance = & mut ctx . accounts . dungeon_instance ;"
      },
      {
        "id": 2,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 3,
        "label": "let current_timestamp = clock . unix_timestamp ;"
      },
      {
        "id": 4,
        "label": "dungeon_instance . instance_creator = ctx . accounts . party_leader . key () ;"
      },
      {
        "id": 5,
        "label": "dungeon_instance . creation_time = current_timestamp ;"
      },
      {
        "id": 6,
        "label": "dungeon_instance . difficulty_level = dungeon_difficulty . clone () ;"
      },
      {
        "id": 7,
        "label": "dungeon_instance . party_members = party_composition . clone () ;"
      },
      {
        "id": 8,
        "label": "dungeon_instance . entrance_fee = entrance_fee_paid ;"
      },
      {
        "id": 9,
        "label": "let party_size = party_composition . len () ;"
      },
      {
        "id": 10,
        "label": "require ! (party_size >= 1 , DungeonError :: PartyTooSmall) ;"
      },
      {
        "id": 11,
        "label": "require ! (party_size <= 6 , DungeonError :: PartyTooLarge) ;"
      },
      {
        "id": 12,
        "label": "let base_monster_count = match dungeon_difficulty { DungeonDifficulty :: Beginner => { dungeon_instance . recommended_level_range = (1 , 10) ; dungeon_instance . completion_time_limit = 1800 ; dungeon_instance . base_experience_reward = 500 ; 15 } , DungeonDifficulty :: Intermediate => { dungeon_instance . recommended_level_range = (11 , 25) ; dungeon_instance . completion_time_limit = 2700 ; dungeon_instance . base_experience_reward = 1200 ; 25 } , DungeonDifficulty :: Advanced => { dungeon_instance . recommended_level_range = (26 , 40) ; dungeon_instance . completion_time_limit = 3600 ; dungeon_instance . base_experience_reward = 2500 ; 35 } , DungeonDifficulty :: Expert => { dungeon_instance . recommended_level_range = (41 , 60) ; dungeon_instance . completion_time_limit = 4500 ; dungeon_instance . base_experience_reward = 4000 ; 50 } , DungeonDifficulty :: Legendary => { dungeon_instance . recommended_level_range = (61 , 100) ; dungeon_instance . completion_time_limit = 5400 ; dungeon_instance . base_experience_reward = 7500 ; 75 } , } ;"
      },
      {
        "id": 13,
        "label": "dungeon_instance . recommended_level_range = (1 , 10) ;"
      },
      {
        "id": 14,
        "label": "dungeon_instance . completion_time_limit = 1800 ;"
      },
      {
        "id": 15,
        "label": "dungeon_instance . base_experience_reward = 500 ;"
      },
      {
        "id": 16,
        "label": "15"
      },
      {
        "id": 17,
        "label": "dungeon_instance . recommended_level_range = (11 , 25) ;"
      },
      {
        "id": 18,
        "label": "dungeon_instance . completion_time_limit = 2700 ;"
      },
      {
        "id": 19,
        "label": "dungeon_instance . base_experience_reward = 1200 ;"
      },
      {
        "id": 20,
        "label": "25"
      },
      {
        "id": 21,
        "label": "dungeon_instance . recommended_level_range = (26 , 40) ;"
      },
      {
        "id": 22,
        "label": "dungeon_instance . completion_time_limit = 3600 ;"
      },
      {
        "id": 23,
        "label": "dungeon_instance . base_experience_reward = 2500 ;"
      },
      {
        "id": 24,
        "label": "35"
      },
      {
        "id": 25,
        "label": "dungeon_instance . recommended_level_range = (41 , 60) ;"
      },
      {
        "id": 26,
        "label": "dungeon_instance . completion_time_limit = 4500 ;"
      },
      {
        "id": 27,
        "label": "dungeon_instance . base_experience_reward = 4000 ;"
      },
      {
        "id": 28,
        "label": "50"
      },
      {
        "id": 29,
        "label": "dungeon_instance . recommended_level_range = (61 , 100) ;"
      },
      {
        "id": 30,
        "label": "dungeon_instance . completion_time_limit = 5400 ;"
      },
      {
        "id": 31,
        "label": "dungeon_instance . base_experience_reward = 7500 ;"
      },
      {
        "id": 32,
        "label": "75"
      },
      {
        "id": 33,
        "label": "let mut monster_encounters = Vec :: new () ;"
      },
      {
        "id": 34,
        "label": "let monster_types = [MonsterType :: Goblin , MonsterType :: Skeleton , MonsterType :: Orc , MonsterType :: Dragon , MonsterType :: Demon , MonsterType :: Elemental] ;"
      },
      {
        "id": 35,
        "label": "for encounter_id in 0 .. base_monster_count { let monster_type_index = (encounter_id + current_timestamp as u32) % monster_types . len () as u32 ; let selected_monster_type = monster_types [monster_type_index as usize] . clone () ; let (base_health , base_attack , base_defense) = match selected_monster_type { MonsterType :: Goblin => (80 , 25 , 15) , MonsterType :: Skeleton => (120 , 30 , 20) , MonsterType :: Orc => (200 , 45 , 35) , MonsterType :: Dragon => (800 , 120 , 80) , MonsterType :: Demon => (600 , 100 , 60) , MonsterType :: Elemental => (400 , 80 , 40) , } ; let difficulty_multiplier = match dungeon_difficulty { DungeonDifficulty :: Beginner => 100 , DungeonDifficulty :: Intermediate => 150 , DungeonDifficulty :: Advanced => 200 , DungeonDifficulty :: Expert => 300 , DungeonDifficulty :: Legendary => 500 , } ; let adjusted_health = (base_health * difficulty_multiplier) / 100 ; let adjusted_attack = (base_attack * difficulty_multiplier) / 100 ; let adjusted_defense = (base_defense * difficulty_multiplier) / 100 ; let mut special_abilities = Vec :: new () ; match selected_monster_type { MonsterType :: Dragon => { special_abilities . push (\"Fire Breath\" . to_string ()) ; special_abilities . push (\"Wing Buffet\" . to_string ()) ; special_abilities . push (\"Tail Sweep\" . to_string ()) ; } , MonsterType :: Demon => { special_abilities . push (\"Dark Magic\" . to_string ()) ; special_abilities . push (\"Soul Drain\" . to_string ()) ; } , MonsterType :: Elemental => { special_abilities . push (\"Elemental Burst\" . to_string ()) ; special_abilities . push (\"Nature's Wrath\" . to_string ()) ; } , _ => { special_abilities . push (\"Basic Attack\" . to_string ()) ; } } monster_encounters . push (MonsterEncounter { encounter_id , monster_type : selected_monster_type , health_points : adjusted_health , attack_power : adjusted_attack , defense_rating : adjusted_defense , special_abilities , loot_tier : match adjusted_health { hp if hp >= 1000 => LootTier :: Legendary , hp if hp >= 500 => LootTier :: Epic , hp if hp >= 200 => LootTier :: Rare , _ => LootTier :: Common , } , defeated : false , }) ; }"
      },
      {
        "id": 36,
        "label": "let monster_type_index = (encounter_id + current_timestamp as u32) % monster_types . len () as u32 ;"
      },
      {
        "id": 37,
        "label": "let selected_monster_type = monster_types [monster_type_index as usize] . clone () ;"
      },
      {
        "id": 38,
        "label": "let (base_health , base_attack , base_defense) = match selected_monster_type { MonsterType :: Goblin => (80 , 25 , 15) , MonsterType :: Skeleton => (120 , 30 , 20) , MonsterType :: Orc => (200 , 45 , 35) , MonsterType :: Dragon => (800 , 120 , 80) , MonsterType :: Demon => (600 , 100 , 60) , MonsterType :: Elemental => (400 , 80 , 40) , } ;"
      },
      {
        "id": 39,
        "label": "let difficulty_multiplier = match dungeon_difficulty { DungeonDifficulty :: Beginner => 100 , DungeonDifficulty :: Intermediate => 150 , DungeonDifficulty :: Advanced => 200 , DungeonDifficulty :: Expert => 300 , DungeonDifficulty :: Legendary => 500 , } ;"
      },
      {
        "id": 40,
        "label": "let adjusted_health = (base_health * difficulty_multiplier) / 100 ;"
      },
      {
        "id": 41,
        "label": "let adjusted_attack = (base_attack * difficulty_multiplier) / 100 ;"
      },
      {
        "id": 42,
        "label": "let adjusted_defense = (base_defense * difficulty_multiplier) / 100 ;"
      },
      {
        "id": 43,
        "label": "let mut special_abilities = Vec :: new () ;"
      },
      {
        "id": 44,
        "label": "match selected_monster_type { MonsterType :: Dragon => { special_abilities . push (\"Fire Breath\" . to_string ()) ; special_abilities . push (\"Wing Buffet\" . to_string ()) ; special_abilities . push (\"Tail Sweep\" . to_string ()) ; } , MonsterType :: Demon => { special_abilities . push (\"Dark Magic\" . to_string ()) ; special_abilities . push (\"Soul Drain\" . to_string ()) ; } , MonsterType :: Elemental => { special_abilities . push (\"Elemental Burst\" . to_string ()) ; special_abilities . push (\"Nature's Wrath\" . to_string ()) ; } , _ => { special_abilities . push (\"Basic Attack\" . to_string ()) ; } }"
      },
      {
        "id": 45,
        "label": "special_abilities . push (\"Fire Breath\" . to_string ()) ;"
      },
      {
        "id": 46,
        "label": "special_abilities . push (\"Wing Buffet\" . to_string ()) ;"
      },
      {
        "id": 47,
        "label": "special_abilities . push (\"Tail Sweep\" . to_string ()) ;"
      },
      {
        "id": 48,
        "label": "special_abilities . push (\"Dark Magic\" . to_string ()) ;"
      },
      {
        "id": 49,
        "label": "special_abilities . push (\"Soul Drain\" . to_string ()) ;"
      },
      {
        "id": 50,
        "label": "special_abilities . push (\"Elemental Burst\" . to_string ()) ;"
      },
      {
        "id": 51,
        "label": "special_abilities . push (\"Nature's Wrath\" . to_string ()) ;"
      },
      {
        "id": 52,
        "label": "special_abilities . push (\"Basic Attack\" . to_string ()) ;"
      },
      {
        "id": 53,
        "label": "monster_encounters . push (MonsterEncounter { encounter_id , monster_type : selected_monster_type , health_points : adjusted_health , attack_power : adjusted_attack , defense_rating : adjusted_defense , special_abilities , loot_tier : match adjusted_health { hp if hp >= 1000 => LootTier :: Legendary , hp if hp >= 500 => LootTier :: Epic , hp if hp >= 200 => LootTier :: Rare , _ => LootTier :: Common , } , defeated : false , }) ;"
      },
      {
        "id": 54,
        "label": "dungeon_instance . monster_encounters = monster_encounters ;"
      },
      {
        "id": 55,
        "label": "let mut treasure_chests = Vec :: new () ;"
      },
      {
        "id": 56,
        "label": "let chest_count = (party_size * 2) + match dungeon_difficulty { DungeonDifficulty :: Legendary => 8 , DungeonDifficulty :: Expert => 6 , DungeonDifficulty :: Advanced => 4 , DungeonDifficulty :: Intermediate => 3 , DungeonDifficulty :: Beginner => 2 , } ;"
      },
      {
        "id": 57,
        "label": "for chest_id in 0 .. chest_count { let chest_rarity = match (chest_id + current_timestamp as usize) % 100 { value if value >= 95 => ChestRarity :: Mythical , value if value >= 85 => ChestRarity :: Legendary , value if value >= 65 => ChestRarity :: Epic , value if value >= 35 => ChestRarity :: Rare , _ => ChestRarity :: Common , } ; let item_count = match chest_rarity { ChestRarity :: Mythical => 5 , ChestRarity :: Legendary => 4 , ChestRarity :: Epic => 3 , ChestRarity :: Rare => 2 , ChestRarity :: Common => 1 , } ; let mut potential_items = Vec :: new () ; for item_slot in 0 .. item_count { potential_items . push (LootItem { item_name : format ! (\"Item_{}\" , chest_id * item_count + item_slot) , item_type : match item_slot % 5 { 0 => ItemType :: Weapon , 1 => ItemType :: Armor , 2 => ItemType :: Accessory , 3 => ItemType :: Consumable , _ => ItemType :: Material , } , rarity : chest_rarity . clone () , stat_bonuses : StatBonuses { strength_bonus : (chest_id as u32 + 1) * 5 , agility_bonus : (chest_id as u32 + 1) * 3 , intelligence_bonus : (chest_id as u32 + 1) * 4 , defense_bonus : (chest_id as u32 + 1) * 2 , } , market_value : match chest_rarity { ChestRarity :: Mythical => 10000 , ChestRarity :: Legendary => 5000 , ChestRarity :: Epic => 2000 , ChestRarity :: Rare => 800 , ChestRarity :: Common => 200 , } , }) ; } treasure_chests . push (TreasureChest { chest_id : chest_id as u32 , rarity : chest_rarity , location_hint : format ! (\"Hidden near encounter {}\" , chest_id % base_monster_count) , lock_difficulty : match dungeon_difficulty { DungeonDifficulty :: Legendary => 90 , DungeonDifficulty :: Expert => 75 , DungeonDifficulty :: Advanced => 60 , DungeonDifficulty :: Intermediate => 40 , DungeonDifficulty :: Beginner => 25 , } , contained_items : potential_items , discovered : false , opened : false , }) ; }"
      },
      {
        "id": 58,
        "label": "let chest_rarity = match (chest_id + current_timestamp as usize) % 100 { value if value >= 95 => ChestRarity :: Mythical , value if value >= 85 => ChestRarity :: Legendary , value if value >= 65 => ChestRarity :: Epic , value if value >= 35 => ChestRarity :: Rare , _ => ChestRarity :: Common , } ;"
      },
      {
        "id": 59,
        "label": "let item_count = match chest_rarity { ChestRarity :: Mythical => 5 , ChestRarity :: Legendary => 4 , ChestRarity :: Epic => 3 , ChestRarity :: Rare => 2 , ChestRarity :: Common => 1 , } ;"
      },
      {
        "id": 60,
        "label": "let mut potential_items = Vec :: new () ;"
      },
      {
        "id": 61,
        "label": "for item_slot in 0 .. item_count { potential_items . push (LootItem { item_name : format ! (\"Item_{}\" , chest_id * item_count + item_slot) , item_type : match item_slot % 5 { 0 => ItemType :: Weapon , 1 => ItemType :: Armor , 2 => ItemType :: Accessory , 3 => ItemType :: Consumable , _ => ItemType :: Material , } , rarity : chest_rarity . clone () , stat_bonuses : StatBonuses { strength_bonus : (chest_id as u32 + 1) * 5 , agility_bonus : (chest_id as u32 + 1) * 3 , intelligence_bonus : (chest_id as u32 + 1) * 4 , defense_bonus : (chest_id as u32 + 1) * 2 , } , market_value : match chest_rarity { ChestRarity :: Mythical => 10000 , ChestRarity :: Legendary => 5000 , ChestRarity :: Epic => 2000 , ChestRarity :: Rare => 800 , ChestRarity :: Common => 200 , } , }) ; }"
      },
      {
        "id": 62,
        "label": "potential_items . push (LootItem { item_name : format ! (\"Item_{}\" , chest_id * item_count + item_slot) , item_type : match item_slot % 5 { 0 => ItemType :: Weapon , 1 => ItemType :: Armor , 2 => ItemType :: Accessory , 3 => ItemType :: Consumable , _ => ItemType :: Material , } , rarity : chest_rarity . clone () , stat_bonuses : StatBonuses { strength_bonus : (chest_id as u32 + 1) * 5 , agility_bonus : (chest_id as u32 + 1) * 3 , intelligence_bonus : (chest_id as u32 + 1) * 4 , defense_bonus : (chest_id as u32 + 1) * 2 , } , market_value : match chest_rarity { ChestRarity :: Mythical => 10000 , ChestRarity :: Legendary => 5000 , ChestRarity :: Epic => 2000 , ChestRarity :: Rare => 800 , ChestRarity :: Common => 200 , } , }) ;"
      },
      {
        "id": 63,
        "label": "treasure_chests . push (TreasureChest { chest_id : chest_id as u32 , rarity : chest_rarity , location_hint : format ! (\"Hidden near encounter {}\" , chest_id % base_monster_count) , lock_difficulty : match dungeon_difficulty { DungeonDifficulty :: Legendary => 90 , DungeonDifficulty :: Expert => 75 , DungeonDifficulty :: Advanced => 60 , DungeonDifficulty :: Intermediate => 40 , DungeonDifficulty :: Beginner => 25 , } , contained_items : potential_items , discovered : false , opened : false , }) ;"
      },
      {
        "id": 64,
        "label": "dungeon_instance . treasure_chests = treasure_chests ;"
      },
      {
        "id": 65,
        "label": "dungeon_instance . completion_status = CompletionStatus :: InProgress ;"
      },
      {
        "id": 66,
        "label": "dungeon_instance . rooms_cleared = 0 ;"
      },
      {
        "id": 67,
        "label": "dungeon_instance . total_rooms = base_monster_count + (chest_count / 2) ;"
      },
      {
        "id": 68,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: dungeon_instance"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: clock"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: current_timestamp"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: clock"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: current_timestamp"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: party_size"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: base_monster_count"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 19,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 22,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 23,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 25,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 26,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 27,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 29,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 30,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 31,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: monster_encounters"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: monster_types"
      },
      {
        "from": 12,
        "to": 35,
        "label": "data_dep: base_monster_count"
      },
      {
        "from": 3,
        "to": 35,
        "label": "data_dep: current_timestamp"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: monster_types"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: monster_types"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: monster_encounters"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: monster_type_index"
      },
      {
        "from": 3,
        "to": 36,
        "label": "data_dep: current_timestamp"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: monster_types"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: selected_monster_type"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: monster_types"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: monster_type_index"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: selected_monster_type"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: difficulty_multiplier"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: adjusted_health"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: difficulty_multiplier"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: adjusted_attack"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: difficulty_multiplier"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: adjusted_defense"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: difficulty_multiplier"
      },
      {
        "from": 43,
        "to": 43,
        "label": "def: special_abilities"
      },
      {
        "from": 37,
        "to": 44,
        "label": "data_dep: selected_monster_type"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 45,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 46,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 47,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 48,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 49,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 50,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 51,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 43,
        "to": 52,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 33,
        "to": 53,
        "label": "data_dep: monster_encounters"
      },
      {
        "from": 37,
        "to": 53,
        "label": "data_dep: selected_monster_type"
      },
      {
        "from": 40,
        "to": 53,
        "label": "data_dep: adjusted_health"
      },
      {
        "from": 41,
        "to": 53,
        "label": "data_dep: adjusted_attack"
      },
      {
        "from": 42,
        "to": 53,
        "label": "data_dep: adjusted_defense"
      },
      {
        "from": 43,
        "to": 53,
        "label": "data_dep: special_abilities"
      },
      {
        "from": 40,
        "to": 53,
        "label": "data_dep: adjusted_health"
      },
      {
        "from": 1,
        "to": 54,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 33,
        "to": 54,
        "label": "data_dep: monster_encounters"
      },
      {
        "from": 55,
        "to": 55,
        "label": "def: treasure_chests"
      },
      {
        "from": 56,
        "to": 56,
        "label": "def: chest_count"
      },
      {
        "from": 9,
        "to": 56,
        "label": "data_dep: party_size"
      },
      {
        "from": 56,
        "to": 57,
        "label": "data_dep: chest_count"
      },
      {
        "from": 3,
        "to": 57,
        "label": "data_dep: current_timestamp"
      },
      {
        "from": 55,
        "to": 57,
        "label": "data_dep: treasure_chests"
      },
      {
        "from": 58,
        "to": 58,
        "label": "def: chest_rarity"
      },
      {
        "from": 3,
        "to": 58,
        "label": "data_dep: current_timestamp"
      },
      {
        "from": 59,
        "to": 59,
        "label": "def: item_count"
      },
      {
        "from": 58,
        "to": 59,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 60,
        "to": 60,
        "label": "def: potential_items"
      },
      {
        "from": 59,
        "to": 61,
        "label": "data_dep: item_count"
      },
      {
        "from": 60,
        "to": 61,
        "label": "data_dep: potential_items"
      },
      {
        "from": 58,
        "to": 61,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 58,
        "to": 61,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 60,
        "to": 62,
        "label": "data_dep: potential_items"
      },
      {
        "from": 58,
        "to": 62,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 58,
        "to": 62,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 55,
        "to": 63,
        "label": "data_dep: treasure_chests"
      },
      {
        "from": 58,
        "to": 63,
        "label": "data_dep: chest_rarity"
      },
      {
        "from": 60,
        "to": 63,
        "label": "data_dep: potential_items"
      },
      {
        "from": 1,
        "to": 64,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 55,
        "to": 64,
        "label": "data_dep: treasure_chests"
      },
      {
        "from": 1,
        "to": 65,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 66,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 1,
        "to": 67,
        "label": "data_dep: dungeon_instance"
      },
      {
        "from": 12,
        "to": 67,
        "label": "data_dep: base_monster_count"
      },
      {
        "from": 56,
        "to": 67,
        "label": "data_dep: chest_count"
      }
    ]
  }
]