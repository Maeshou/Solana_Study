[
  {
    "name": "analyze",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let n = performance_scores . len () . min (20) ;"
      },
      {
        "id": 2,
        "label": "let mut rows : Vec < PerformanceRow > = Vec :: new () ;"
      },
      {
        "id": 3,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 4,
        "label": "Loop Start"
      },
      {
        "id": 5,
        "label": "let win = performance_scores [i] > 70 ;"
      },
      {
        "id": 6,
        "label": "let draw = performance_scores [i] >= 45 && performance_scores [i] <= 70 ;"
      },
      {
        "id": 7,
        "label": "let window = 5usize . min (i + 1) ;"
      },
      {
        "id": 8,
        "label": "let mut s = 0u32 ;"
      },
      {
        "id": 9,
        "label": "let mut j = i + 1 - window ;"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "s = s . saturating_add (performance_scores [j]) ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "j == i"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "break ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "j = j . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "let avg = s / (window as u32) ;"
      },
      {
        "id": 23,
        "label": "let mut acc = 0u32 ;"
      },
      {
        "id": 24,
        "label": "let mut k = i + 1 - window ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let d = (performance_scores [k] as i32 - avg as i32) . pow (2) as u32 ;"
      },
      {
        "id": 27,
        "label": "acc = acc . saturating_add (d) ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "k == i"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "break ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "let var = acc / (window as u32) ;"
      },
      {
        "id": 39,
        "label": "let consistency = 100 - (var / 10) . min (50) ;"
      },
      {
        "id": 40,
        "label": "let mut trend = 0i32 ;"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "i + 1 >= 3"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let w = 10usize . min (i + 1) ;"
      },
      {
        "id": 46,
        "label": "let half = w / 2 ;"
      },
      {
        "id": 47,
        "label": "let start = i + 1 - w ;"
      },
      {
        "id": 48,
        "label": "let mid = i + 1 - half ;"
      },
      {
        "id": 49,
        "label": "let mut early = 0u32 ;"
      },
      {
        "id": 50,
        "label": "let mut p = start ;"
      },
      {
        "id": 51,
        "label": "Loop Start"
      },
      {
        "id": 52,
        "label": "early = early . saturating_add (performance_scores [p]) ;"
      },
      {
        "id": 53,
        "label": "p = p . saturating_add (1) ;"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "let mut late = 0u32 ;"
      },
      {
        "id": 56,
        "label": "let mut q = mid ;"
      },
      {
        "id": 57,
        "label": "Loop Start"
      },
      {
        "id": 58,
        "label": "late = late . saturating_add (performance_scores [q]) ;"
      },
      {
        "id": 59,
        "label": "if statement"
      },
      {
        "id": 60,
        "label": "predicate"
      },
      {
        "id": 61,
        "label": "q == i"
      },
      {
        "id": 62,
        "label": "True body"
      },
      {
        "id": 63,
        "label": "break ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "No-op"
      },
      {
        "id": 66,
        "label": "merge"
      },
      {
        "id": 67,
        "label": "q = q . saturating_add (1) ;"
      },
      {
        "id": 68,
        "label": "Loop End"
      },
      {
        "id": 69,
        "label": "trend = (late as i32 / (w - half) as i32) - (early as i32 / half as i32) ;"
      },
      {
        "id": 70,
        "label": "False body"
      },
      {
        "id": 71,
        "label": "No-op"
      },
      {
        "id": 72,
        "label": "merge"
      },
      {
        "id": 73,
        "label": "rows . push (PerformanceRow { ts : timestamps . get (i) . copied () . unwrap_or (0) , opponent : opponent_ratings . get (i) . copied () . unwrap_or (0) , score : performance_scores [i] , win_flag : win , draw_flag : draw , consistency_score : consistency , improvement_trend : trend , }) ;"
      },
      {
        "id": 74,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 75,
        "label": "Loop End"
      },
      {
        "id": 76,
        "label": "ctx . accounts . analysis . rows = rows ;"
      },
      {
        "id": 77,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 10,
        "to": 21,
        "label": "while"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 28,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 25,
        "to": 37,
        "label": "while"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "while"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "predicate"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "true"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 59,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 57,
        "to": 68,
        "label": "while"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 41,
        "to": 70,
        "label": "false"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 69,
        "to": 72,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 4,
        "to": 75,
        "label": "while"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      }
    ]
  }
]