[
  {
    "name": "register_guild",
    "inputs": [
      "ctx: Context < RegisterGuild >",
      "guild_name: String",
      "difficulty: DifficultyLevel",
      "initial_treasury: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let base = & mut ctx . accounts . guild_base ;"
      },
      {
        "id": 2,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "require ! (guild_name . len () > 0 , ErrorCode :: EmptyName) ;"
      },
      {
        "id": 4,
        "label": "require ! (guild_name . len () <= 32 , ErrorCode :: NameTooLong) ;"
      },
      {
        "id": 5,
        "label": "require ! (initial_treasury > 0 , ErrorCode :: TreasuryTooLow) ;"
      },
      {
        "id": 6,
        "label": "base . guild_master = ctx . accounts . guild_master . key () ;"
      },
      {
        "id": 7,
        "label": "base . name = guild_name ;"
      },
      {
        "id": 8,
        "label": "base . established_at = now ;"
      },
      {
        "id": 9,
        "label": "base . members = 1 ;"
      },
      {
        "id": 10,
        "label": "base . treasury = initial_treasury ;"
      },
      {
        "id": 11,
        "label": "base . difficulty = difficulty . clone () ;"
      },
      {
        "id": 12,
        "label": "let mut exp = 100u32 ;"
      },
      {
        "id": 13,
        "label": "let mut res = 100u32 ;"
      },
      {
        "id": 14,
        "label": "let mut def = 100u32 ;"
      },
      {
        "id": 15,
        "label": "let mut atk = 100u32 ;"
      },
      {
        "id": 16,
        "label": "if matches_easy (& difficulty) { exp = exp . saturating_add (10) ; res = res . saturating_add (5) ; }"
      },
      {
        "id": 17,
        "label": "exp = exp . saturating_add (10) ;"
      },
      {
        "id": 18,
        "label": "res = res . saturating_add (5) ;"
      },
      {
        "id": 19,
        "label": "if matches_normal (& difficulty) { exp = exp . saturating_add (5) ; def = def . saturating_add (5) ; }"
      },
      {
        "id": 20,
        "label": "exp = exp . saturating_add (5) ;"
      },
      {
        "id": 21,
        "label": "def = def . saturating_add (5) ;"
      },
      {
        "id": 22,
        "label": "if matches_hard (& difficulty) { atk = atk . saturating_add (10) ; def = def . saturating_add (10) ; }"
      },
      {
        "id": 23,
        "label": "atk = atk . saturating_add (10) ;"
      },
      {
        "id": 24,
        "label": "def = def . saturating_add (10) ;"
      },
      {
        "id": 25,
        "label": "if matches_legend (& difficulty) { exp = exp . saturating_add (20) ; res = res . saturating_add (15) ; atk = atk . saturating_add (20) ; }"
      },
      {
        "id": 26,
        "label": "exp = exp . saturating_add (20) ;"
      },
      {
        "id": 27,
        "label": "res = res . saturating_add (15) ;"
      },
      {
        "id": 28,
        "label": "atk = atk . saturating_add (20) ;"
      },
      {
        "id": 29,
        "label": "let name_len = base . name . len () as u32 ;"
      },
      {
        "id": 30,
        "label": "let tick_bias = (now as u64) . rotate_left (7) as u32 % 9 ;"
      },
      {
        "id": 31,
        "label": "base . bonus . experience_multiplier = exp . saturating_add (name_len % 7) ;"
      },
      {
        "id": 32,
        "label": "base . bonus . resource_bonus = res . saturating_add (tick_bias % 5) ;"
      },
      {
        "id": 33,
        "label": "base . bonus . defense_bonus = def . saturating_add ((name_len ^ tick_bias) % 6) ;"
      },
      {
        "id": 34,
        "label": "base . bonus . attack_bonus = atk . saturating_add ((tick_bias ^ 3) % 7) ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: base"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: now"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: base"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: base"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: base"
      },
      {
        "from": 2,
        "to": 8,
        "label": "data_dep: now"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: base"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: base"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: base"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: exp"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: res"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: def"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: atk"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: exp"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: res"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: res"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: exp"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: res"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: res"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: exp"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: def"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: def"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: exp"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: def"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: def"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: atk"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: atk"
      },
      {
        "from": 14,
        "to": 22,
        "label": "data_dep: def"
      },
      {
        "from": 14,
        "to": 22,
        "label": "data_dep: def"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: atk"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: atk"
      },
      {
        "from": 14,
        "to": 24,
        "label": "data_dep: def"
      },
      {
        "from": 14,
        "to": 24,
        "label": "data_dep: def"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: exp"
      },
      {
        "from": 13,
        "to": 25,
        "label": "data_dep: res"
      },
      {
        "from": 13,
        "to": 25,
        "label": "data_dep: res"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: atk"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: atk"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: exp"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: exp"
      },
      {
        "from": 13,
        "to": 27,
        "label": "data_dep: res"
      },
      {
        "from": 13,
        "to": 27,
        "label": "data_dep: res"
      },
      {
        "from": 15,
        "to": 28,
        "label": "data_dep: atk"
      },
      {
        "from": 15,
        "to": 28,
        "label": "data_dep: atk"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: name_len"
      },
      {
        "from": 1,
        "to": 29,
        "label": "data_dep: base"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: tick_bias"
      },
      {
        "from": 2,
        "to": 30,
        "label": "data_dep: now"
      },
      {
        "from": 1,
        "to": 31,
        "label": "data_dep: base"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: exp"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: name_len"
      },
      {
        "from": 1,
        "to": 32,
        "label": "data_dep: base"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: res"
      },
      {
        "from": 30,
        "to": 32,
        "label": "data_dep: tick_bias"
      },
      {
        "from": 1,
        "to": 33,
        "label": "data_dep: base"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: def"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: name_len"
      },
      {
        "from": 30,
        "to": 33,
        "label": "data_dep: tick_bias"
      },
      {
        "from": 1,
        "to": 34,
        "label": "data_dep: base"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: atk"
      },
      {
        "from": 30,
        "to": 34,
        "label": "data_dep: tick_bias"
      }
    ]
  },
  {
    "name": "matches_easy",
    "inputs": [
      "d: & DifficultyLevel"
    ],
    "nodes": [
      {
        "id": 36,
        "label": "Entry"
      },
      {
        "id": 37,
        "label": "matches ! (d , DifficultyLevel :: Easy)"
      }
    ],
    "edges": []
  },
  {
    "name": "matches_normal",
    "inputs": [
      "d: & DifficultyLevel"
    ],
    "nodes": [
      {
        "id": 38,
        "label": "Entry"
      },
      {
        "id": 39,
        "label": "matches ! (d , DifficultyLevel :: Normal)"
      }
    ],
    "edges": []
  },
  {
    "name": "matches_hard",
    "inputs": [
      "d: & DifficultyLevel"
    ],
    "nodes": [
      {
        "id": 40,
        "label": "Entry"
      },
      {
        "id": 41,
        "label": "matches ! (d , DifficultyLevel :: Hard)"
      }
    ],
    "edges": []
  },
  {
    "name": "matches_legend",
    "inputs": [
      "d: & DifficultyLevel"
    ],
    "nodes": [
      {
        "id": 42,
        "label": "Entry"
      },
      {
        "id": 43,
        "label": "matches ! (d , DifficultyLevel :: Legend)"
      }
    ],
    "edges": []
  }
]