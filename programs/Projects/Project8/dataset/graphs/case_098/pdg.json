[
  {
    "name": "init_defense_layout",
    "inputs": [
      "ctx: Context < InitDefenseLayout >",
      "size_hint: u32",
      "tier: TerritoryTier",
      "order_seed: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let layout = & mut ctx . accounts . defense_plan ;"
      },
      {
        "id": 2,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 3,
        "label": "require ! (size_hint >= 100 , ErrorCode :: TooSmallHint) ;"
      },
      {
        "id": 4,
        "label": "layout . created_at = now ;"
      },
      {
        "id": 5,
        "label": "layout . tier = tier . clone () ;"
      },
      {
        "id": 6,
        "label": "layout . estimated_size = size_hint ;"
      },
      {
        "id": 7,
        "label": "let mut count = 3u32 ;"
      },
      {
        "id": 8,
        "label": "if size_hint >= 2_000 { count = 5 ; }"
      },
      {
        "id": 9,
        "label": "count = 5 ;"
      },
      {
        "id": 10,
        "label": "if size_hint >= 5_000 { count = 8 ; }"
      },
      {
        "id": 11,
        "label": "count = 8 ;"
      },
      {
        "id": 12,
        "label": "layout . slot_count = count ;"
      },
      {
        "id": 13,
        "label": "let start = (order_seed as usize) % (count as usize) ;"
      },
      {
        "id": 14,
        "label": "let mut built : Vec < DefenseStructure > = Vec :: new () ;"
      },
      {
        "id": 15,
        "label": "let mut hp_base = 900u32 ;"
      },
      {
        "id": 16,
        "label": "let mut def_base = 120u32 ;"
      },
      {
        "id": 17,
        "label": "let mut upkeep = 18u32 ;"
      },
      {
        "id": 18,
        "label": "if matches_city (& tier) { hp_base = hp_base . saturating_add (400) ; def_base = def_base . saturating_add (60) ; upkeep = upkeep . saturating_add (10) ; }"
      },
      {
        "id": 19,
        "label": "hp_base = hp_base . saturating_add (400) ;"
      },
      {
        "id": 20,
        "label": "def_base = def_base . saturating_add (60) ;"
      },
      {
        "id": 21,
        "label": "upkeep = upkeep . saturating_add (10) ;"
      },
      {
        "id": 22,
        "label": "if matches_capital (& tier) { hp_base = hp_base . saturating_add (900) ; def_base = def_base . saturating_add (180) ; upkeep = upkeep . saturating_add (30) ; }"
      },
      {
        "id": 23,
        "label": "hp_base = hp_base . saturating_add (900) ;"
      },
      {
        "id": 24,
        "label": "def_base = def_base . saturating_add (180) ;"
      },
      {
        "id": 25,
        "label": "upkeep = upkeep . saturating_add (30) ;"
      },
      {
        "id": 26,
        "label": "let mut index = 0usize ;"
      },
      {
        "id": 27,
        "label": "while index < count as usize { let idx = (start + index) % (count as usize) ; let mut kind = StructureType :: Watchtower ; if idx % 4 == 1 { kind = StructureType :: BarricadeWall ; } if idx % 4 == 2 { kind = StructureType :: MagicBarrier ; } if idx % 4 >= 3 { kind = StructureType :: TrapField ; } let tweak = ((order_seed . rotate_left ((idx as u32) & 13)) as u32) % 37 ; let hp = hp_base . saturating_add (tweak * 10) ; let dp = def_base . saturating_add ((tweak % 9) * 10) ; let m = upkeep . saturating_add (tweak % 7) ; built . push (DefenseStructure { structure_id : idx as u32 , structure_type : kind , health_points : hp , defense_power : dp , maintenance_cost : m , last_upgrade : now , }) ; index = index . saturating_add (1) ; }"
      },
      {
        "id": 28,
        "label": "let idx = (start + index) % (count as usize) ;"
      },
      {
        "id": 29,
        "label": "let mut kind = StructureType :: Watchtower ;"
      },
      {
        "id": 30,
        "label": "if idx % 4 == 1 { kind = StructureType :: BarricadeWall ; }"
      },
      {
        "id": 31,
        "label": "kind = StructureType :: BarricadeWall ;"
      },
      {
        "id": 32,
        "label": "if idx % 4 == 2 { kind = StructureType :: MagicBarrier ; }"
      },
      {
        "id": 33,
        "label": "kind = StructureType :: MagicBarrier ;"
      },
      {
        "id": 34,
        "label": "if idx % 4 >= 3 { kind = StructureType :: TrapField ; }"
      },
      {
        "id": 35,
        "label": "kind = StructureType :: TrapField ;"
      },
      {
        "id": 36,
        "label": "let tweak = ((order_seed . rotate_left ((idx as u32) & 13)) as u32) % 37 ;"
      },
      {
        "id": 37,
        "label": "let hp = hp_base . saturating_add (tweak * 10) ;"
      },
      {
        "id": 38,
        "label": "let dp = def_base . saturating_add ((tweak % 9) * 10) ;"
      },
      {
        "id": 39,
        "label": "let m = upkeep . saturating_add (tweak % 7) ;"
      },
      {
        "id": 40,
        "label": "built . push (DefenseStructure { structure_id : idx as u32 , structure_type : kind , health_points : hp , defense_power : dp , maintenance_cost : m , last_upgrade : now , }) ;"
      },
      {
        "id": 41,
        "label": "index = index . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "layout . structures = built ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: layout"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: now"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: layout"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: now"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: layout"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: layout"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: count"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: count"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: count"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: count"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: count"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: layout"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: count"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: start"
      },
      {
        "from": 7,
        "to": 13,
        "label": "data_dep: count"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: hp_base"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: def_base"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: upkeep"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: hp_base"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: hp_base"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: def_base"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: def_base"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: upkeep"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: upkeep"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: hp_base"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: hp_base"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: def_base"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: def_base"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: upkeep"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: upkeep"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: hp_base"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: hp_base"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: def_base"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: def_base"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: upkeep"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: upkeep"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: hp_base"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: hp_base"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: def_base"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: def_base"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: upkeep"
      },
      {
        "from": 17,
        "to": 25,
        "label": "data_dep: upkeep"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: index"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: index"
      },
      {
        "from": 7,
        "to": 27,
        "label": "data_dep: count"
      },
      {
        "from": 13,
        "to": 27,
        "label": "data_dep: start"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: index"
      },
      {
        "from": 7,
        "to": 27,
        "label": "data_dep: count"
      },
      {
        "from": 15,
        "to": 27,
        "label": "data_dep: hp_base"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: def_base"
      },
      {
        "from": 17,
        "to": 27,
        "label": "data_dep: upkeep"
      },
      {
        "from": 2,
        "to": 27,
        "label": "data_dep: now"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: index"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: index"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: idx"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: start"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: index"
      },
      {
        "from": 7,
        "to": 28,
        "label": "data_dep: count"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: kind"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: idx"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: kind"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: kind"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: idx"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: kind"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: kind"
      },
      {
        "from": 28,
        "to": 34,
        "label": "data_dep: idx"
      },
      {
        "from": 29,
        "to": 34,
        "label": "data_dep: kind"
      },
      {
        "from": 29,
        "to": 35,
        "label": "data_dep: kind"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: tweak"
      },
      {
        "from": 28,
        "to": 36,
        "label": "data_dep: idx"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: hp"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: hp_base"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: tweak"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: dp"
      },
      {
        "from": 16,
        "to": 38,
        "label": "data_dep: def_base"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: tweak"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: m"
      },
      {
        "from": 17,
        "to": 39,
        "label": "data_dep: upkeep"
      },
      {
        "from": 36,
        "to": 39,
        "label": "data_dep: tweak"
      },
      {
        "from": 28,
        "to": 40,
        "label": "data_dep: idx"
      },
      {
        "from": 29,
        "to": 40,
        "label": "data_dep: kind"
      },
      {
        "from": 37,
        "to": 40,
        "label": "data_dep: hp"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: dp"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: m"
      },
      {
        "from": 2,
        "to": 40,
        "label": "data_dep: now"
      },
      {
        "from": 26,
        "to": 41,
        "label": "data_dep: index"
      },
      {
        "from": 26,
        "to": 41,
        "label": "data_dep: index"
      },
      {
        "from": 1,
        "to": 42,
        "label": "data_dep: layout"
      }
    ]
  },
  {
    "name": "matches_city",
    "inputs": [
      "t: & TerritoryTier"
    ],
    "nodes": [
      {
        "id": 44,
        "label": "Entry"
      },
      {
        "id": 45,
        "label": "matches ! (t , TerritoryTier :: City)"
      }
    ],
    "edges": []
  },
  {
    "name": "matches_capital",
    "inputs": [
      "t: & TerritoryTier"
    ],
    "nodes": [
      {
        "id": 46,
        "label": "Entry"
      },
      {
        "id": 47,
        "label": "matches ! (t , TerritoryTier :: Capital)"
      }
    ],
    "edges": []
  }
]