[
  {
    "name": "init_box",
    "inputs": [
      "ctx: Context < InitBox >",
      "series: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . cashbox ;"
      },
      {
        "id": 2,
        "label": "b . vendor = ctx . accounts . vendor . key () ;"
      },
      {
        "id": 3,
        "label": "b . series = series . rotate_left (1) . wrapping_add (5) ;"
      },
      {
        "id": 4,
        "label": "b . turn = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: b"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: b"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: b"
      }
    ]
  },
  {
    "name": "disperse",
    "inputs": [
      "ctx: Context < Disperse >",
      "amount_each: u64",
      "loops: u8"
    ],
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let bump = * ctx . bumps . get (\"cashbox\") . ok_or (error ! (E :: MissingBump)) ? ;"
      },
      {
        "id": 8,
        "label": "let seeds : & [& [u8]] = & [b\"cashbox\" , ctx . accounts . vendor . key . as_ref () , & ctx . accounts . cashbox . series . to_le_bytes () , & [bump]] ;"
      },
      {
        "id": 9,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 10,
        "label": "while i < loops { let val = amount_each . rotate_left ((i % 4) as u32) . wrapping_add (7) ; let ix = system_instruction :: transfer (& ctx . accounts . cashbox . key () , & ctx . accounts . receiver . key () , val) ; invoke_signed (& ix , & [ctx . accounts . cashbox . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let val = amount_each . rotate_left ((i % 4) as u32) . wrapping_add (7) ;"
      },
      {
        "id": 12,
        "label": "let ix = system_instruction :: transfer (& ctx . accounts . cashbox . key () , & ctx . accounts . receiver . key () , val) ;"
      },
      {
        "id": 13,
        "label": "invoke_signed (& ix , & [ctx . accounts . cashbox . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . system_program . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 14,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 7,
        "label": "def: bump"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: bump"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: val"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: ix"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: val"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: ix"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: i"
      }
    ]
  }
]