[
  {
    "name": "init_user",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ud = & mut ctx . accounts . user_cap ;"
      },
      {
        "id": 2,
        "label": "ud . authority = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "ud . cap = 1_000 ;"
      },
      {
        "id": 4,
        "label": "ud . earned = 0 ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"Initialized cap={} for {}\" , ud . cap , ud . authority) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "earn",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "require ! (ctx . accounts . user . is_signer , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 9,
        "label": "let ud = & mut ctx . accounts . user_cap ;"
      },
      {
        "id": 10,
        "label": "let new_earned = ud . earned . checked_add (amount) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 11,
        "label": "require ! (new_earned <= ud . cap , ErrorCode :: CapExceeded) ;"
      },
      {
        "id": 12,
        "label": "ud . earned = new_earned ;"
      },
      {
        "id": 13,
        "label": "msg ! (\"Earned {} (total {}) / cap {}\" , amount , ud . earned , ud . cap) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "burn_to_extend",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "require ! (ctx . accounts . user . is_signer , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 17,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Burn { mint : ctx . accounts . mint . to_account_info () , from : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . user . to_account_info () , } ,) ;"
      },
      {
        "id": 18,
        "label": "token :: burn (cpi_ctx , amount) ? ;"
      },
      {
        "id": 19,
        "label": "let ud = & mut ctx . accounts . user_cap ;"
      },
      {
        "id": 20,
        "label": "let add = amount . checked_mul (10) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 21,
        "label": "ud . cap = ud . cap . checked_add (add) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Burned {} tokens, cap extended by {} â†’ {}\" , amount , add , ud . cap) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  }
]