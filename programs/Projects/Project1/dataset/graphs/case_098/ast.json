[
  {
    "name": "init_user",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitUser >"
    ],
    "attributes": [
      "# [doc = \" 初回呼び出し時にユーザー用データ口座を初期化\"]"
    ],
    "body": [
      "let ud = & mut ctx . accounts . user_cap ;",
      "ud . authority = ctx . accounts . user . key () ;",
      "ud . cap = 1_000 ;",
      "ud . earned = 0 ;",
      "msg ! (\"Initialized cap={} for {}\" , ud . cap , ud . authority) ;",
      "Ok (())"
    ]
  },
  {
    "name": "earn",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Earn >",
      "amount: u64"
    ],
    "attributes": [
      "# [doc = \" 通常のアーニング処理。earned+amount が cap 以下であることを保証\"]"
    ],
    "body": [
      "require ! (ctx . accounts . user . is_signer , ErrorCode :: Unauthorized) ;",
      "let ud = & mut ctx . accounts . user_cap ;",
      "let new_earned = ud . earned . checked_add (amount) . ok_or (ErrorCode :: Overflow) ? ;",
      "require ! (new_earned <= ud . cap , ErrorCode :: CapExceeded) ;",
      "ud . earned = new_earned ;",
      "msg ! (\"Earned {} (total {}) / cap {}\" , amount , ud . earned , ud . cap) ;",
      "Ok (())"
    ]
  },
  {
    "name": "burn_to_extend",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < BurnExtend >",
      "amount: u64"
    ],
    "attributes": [
      "# [doc = \" トークンをバーンして cap を amount × 10 だけ拡張\"]"
    ],
    "body": [
      "require ! (ctx . accounts . user . is_signer , ErrorCode :: Unauthorized) ;",
      "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Burn { mint : ctx . accounts . mint . to_account_info () , from : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . user . to_account_info () , } ,) ;",
      "token :: burn (cpi_ctx , amount) ? ;",
      "let ud = & mut ctx . accounts . user_cap ;",
      "let add = amount . checked_mul (10) . ok_or (ErrorCode :: Overflow) ? ;",
      "ud . cap = ud . cap . checked_add (add) . ok_or (ErrorCode :: Overflow) ? ;",
      "msg ! (\"Burned {} tokens, cap extended by {} → {}\" , amount , add , ud . cap) ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitUser",
    "node_type": "struct",
    "fields": [
      {
        "name": "user_cap",
        "attribute": "# [account (init , payer = user , space = 8 + 32 + 8 + 8 , seeds = [b\"user_cap\" , user . key () . as_ref ()] , bump)]",
        "field_type": "Account < 'info , UserCap >"
      },
      {
        "name": "user",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Earn",
    "node_type": "struct",
    "fields": [
      {
        "name": "user_cap",
        "attribute": "# [account (mut , seeds = [b\"user_cap\" , user . key () . as_ref ()] , bump , has_one = authority @ ErrorCode :: Unauthorized)]",
        "field_type": "Account < 'info , UserCap >"
      },
      {
        "name": "authority",
        "attribute": "# [doc = \" Authority = 同じく user\"]",
        "field_type": "SystemAccount < 'info >"
      },
      {
        "name": "user",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "BurnExtend",
    "node_type": "struct",
    "fields": [
      {
        "name": "user_cap",
        "attribute": "# [account (mut , seeds = [b\"user_cap\" , user . key () . as_ref ()] , bump , has_one = authority @ ErrorCode :: Unauthorized)]",
        "field_type": "Account < 'info , UserCap >"
      },
      {
        "name": "user",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "user_token",
        "attribute": "# [doc = \" ユーザーの保有するトークン口座\"] # [account (mut , constraint = user_token . owner == user . key () , constraint = user_token . mint == mint . key ())]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "mint",
        "attribute": null,
        "field_type": "Account < 'info , Mint >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "UserCap",
    "node_type": "struct",
    "fields": [
      {
        "name": "authority",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "cap",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "earned",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]