[
  {
    "name": "transfer_tokens",
    "inputs": [
      "ctx: Context < TransferTokens >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if ! ctx . accounts . authority . is_signer { return Err (ErrorCode :: UnauthorizedSigner . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: UnauthorizedSigner . into ()) ;"
      },
      {
        "id": 3,
        "label": "if ctx . accounts . authority . key () != ctx . accounts . user_token_account . owner { return Err (ErrorCode :: InvalidOwner . into ()) ; }"
      },
      {
        "id": 4,
        "label": "return Err (ErrorCode :: InvalidOwner . into ()) ;"
      },
      {
        "id": 5,
        "label": "let cpi_accounts = anchor_spl :: token :: Transfer { from : ctx . accounts . user_token_account . to_account_info () , to : ctx . accounts . destination_token_account . to_account_info () , authority : ctx . accounts . authority . to_account_info () , } ;"
      },
      {
        "id": 6,
        "label": "let cpi_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 7,
        "label": "let cpi_ctx = CpiContext :: new (cpi_program , cpi_accounts) ;"
      },
      {
        "id": 8,
        "label": "anchor_spl :: token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 9,
        "label": "msg ! (\"Successfully transferred {} tokens\" , amount) ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: cpi_accounts"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: cpi_program"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: cpi_ctx"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: cpi_program"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: cpi_accounts"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: cpi_ctx"
      }
    ]
  },
  {
    "name": "update_user_data",
    "inputs": [
      "ctx: Context < UpdateUserData >",
      "new_data: String"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "if ! ctx . accounts . user . is_signer { return Err (ErrorCode :: UnauthorizedSigner . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (ErrorCode :: UnauthorizedSigner . into ()) ;"
      },
      {
        "id": 14,
        "label": "if ctx . accounts . user_data . owner != ctx . accounts . user . key () { return Err (ErrorCode :: InvalidDataOwner . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (ErrorCode :: InvalidDataOwner . into ()) ;"
      },
      {
        "id": 16,
        "label": "ctx . accounts . user_data . data = new_data ;"
      },
      {
        "id": 17,
        "label": "ctx . accounts . user_data . last_updated = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"User data updated successfully\") ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": []
  }
]