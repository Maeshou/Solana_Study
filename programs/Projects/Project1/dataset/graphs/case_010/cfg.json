[
  {
    "name": "transfer_tokens",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "! ctx . accounts . authority . is_signer"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "return Err (ErrorCode :: UnauthorizedSigner . into ()) ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "ctx . accounts . authority . key () != ctx . accounts . user_token_account . owner"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "return Err (ErrorCode :: InvalidOwner . into ()) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "let cpi_accounts = anchor_spl :: token :: Transfer { from : ctx . accounts . user_token_account . to_account_info () , to : ctx . accounts . destination_token_account . to_account_info () , authority : ctx . accounts . authority . to_account_info () , } ;"
      },
      {
        "id": 18,
        "label": "let cpi_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 19,
        "label": "let cpi_ctx = CpiContext :: new (cpi_program , cpi_accounts) ;"
      },
      {
        "id": 20,
        "label": "anchor_spl :: token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 21,
        "label": "msg ! (\"Successfully transferred {} tokens\" , amount) ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_user_data",
    "nodes": [
      {
        "id": 23,
        "label": "Entry"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "! ctx . accounts . user . is_signer"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "return Err (ErrorCode :: UnauthorizedSigner . into ()) ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "ctx . accounts . user_data . owner != ctx . accounts . user . key ()"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "return Err (ErrorCode :: InvalidDataOwner . into ()) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "ctx . accounts . user_data . data = new_data ;"
      },
      {
        "id": 41,
        "label": "ctx . accounts . user_data . last_updated = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"User data updated successfully\") ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 24,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]