[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "limit: u64"
    ],
    "attributes": [],
    "body": [
      "let st = & mut ctx . accounts . state ;",
      "st . admin = ctx . accounts . admin . key () ;",
      "st . limit = limit ;",
      "st . routed = 3 ;",
      "st . score = limit % 13 ;",
      "st . alt_program = Pubkey :: new_from_array ([8u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "set_alt",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetAlt >",
      "pid: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let st = & mut ctx . accounts . state ;",
      "require_keys_eq ! (st . admin , ctx . accounts . admin . key () , ErrorCode :: Denied) ;",
      "st . alt_program = pid ;",
      "st . routed += 2 ;",
      "st . score = st . score . wrapping_add (5) ;",
      "Ok (())"
    ]
  },
  {
    "name": "distribute",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Distribute >",
      "amount: u64",
      "rounds: u8"
    ],
    "attributes": [],
    "body": [
      "let st = & mut ctx . accounts . state ;",
      "if amount > st . limit",
      "{",
      "st . routed += 1 ;",
      "st . score = st . score . wrapping_mul (2) . wrapping_add (7) ;",
      "return Ok (()) ;",
      "}",
      "let mut remain = amount ;",
      "let mut executed = 0u8 ;",
      "while executed < rounds",
      "{",
      "let step = (remain / 2) . max (3) ;",
      "if step >= remain",
      "{",
      "break ;",
      "} let ix = token_ix :: transfer (& st . alt_program , & ctx . accounts . pool . key () , & ctx . accounts . receiver . key () , & ctx . accounts . admin . key () , & [] , step ,) ? ;",
      "let prog = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix , & [prog . clone () , ctx . accounts . pool . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "remain -= step ;",
      "executed += 1 ;",
      "st . routed += 1 ;",
      "if remain < st . limit / 4",
      "{",
      "st . score = st . score . wrapping_add (step % 11) ;",
      "} else",
      "{",
      "st . score = st . score . wrapping_sub (step % 5) . wrapping_add (9) ;",
      "}",
      "}",
      "if remain > 2",
      "{",
      "let ix2 = token_ix :: transfer (& st . alt_program , & ctx . accounts . pool . key () , & ctx . accounts . receiver . key () , & ctx . accounts . admin . key () , & [] , remain - 2 ,) ? ;",
      "let prog = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix2 , & [prog . clone () , ctx . accounts . pool . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "st . score = st . score . wrapping_add (remain - 2) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "State",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "limit",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "routed",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "score",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "alt_program",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SetAlt",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Distribute",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "receiver",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]