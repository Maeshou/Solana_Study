[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let airdrop_state = & mut ctx . accounts . airdrop_state ;"
      },
      {
        "id": 2,
        "label": "airdrop_state . admin_authority = ctx . accounts . admin_authority . key () ;"
      },
      {
        "id": 3,
        "label": "airdrop_state . drop_cap = cap ;"
      },
      {
        "id": 4,
        "label": "airdrop_state . history_ticks = 10 ;"
      },
      {
        "id": 5,
        "label": "airdrop_state . gain_accumulator = 1u64 . wrapping_add (cap % 17) ;"
      },
      {
        "id": 6,
        "label": "airdrop_state . route_program_id = Pubkey :: new_from_array ([3u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: airdrop_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: airdrop_state"
      }
    ]
  },
  {
    "name": "route_to",
    "inputs": [
      "ctx: Context < RouteTo >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let airdrop_state = & mut ctx . accounts . airdrop_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (airdrop_state . admin_authority , ctx . accounts . admin_authority . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "airdrop_state . route_program_id = pid ;"
      },
      {
        "id": 12,
        "label": "airdrop_state . history_ticks = airdrop_state . history_ticks . wrapping_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: airdrop_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: airdrop_state"
      }
    ]
  },
  {
    "name": "airdrop",
    "inputs": [
      "ctx: Context < Airdrop >",
      "drop: u64",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let airdrop_state = & mut ctx . accounts . airdrop_state ;"
      },
      {
        "id": 16,
        "label": "if drop < 6 { airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (3) ; airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . rotate_left (1) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (3) ;"
      },
      {
        "id": 18,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . rotate_left (1) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut remaining_drop = drop ;"
      },
      {
        "id": 21,
        "label": "let mut turn_index : u8 = 0 ;"
      },
      {
        "id": 22,
        "label": "while turn_index < rounds { let transfer_part = (remaining_drop / 5) . max (2) ; if transfer_part >= remaining_drop { break ; } let transfer_ix = token_ix :: transfer (& airdrop_state . route_program_id , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; remaining_drop = remaining_drop . saturating_sub (transfer_part) ; airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (1) ; airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (transfer_part ^ 29) ; turn_index = turn_index . saturating_add (1) ; if airdrop_state . gain_accumulator % 3 == 0 { airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (13) ; } else { airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_sub (2) . wrapping_add (21) ; } }"
      },
      {
        "id": 23,
        "label": "let transfer_part = (remaining_drop / 5) . max (2) ;"
      },
      {
        "id": 24,
        "label": "if transfer_part >= remaining_drop { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let transfer_ix = token_ix :: transfer (& airdrop_state . route_program_id , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 27,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "remaining_drop = remaining_drop . saturating_sub (transfer_part) ;"
      },
      {
        "id": 30,
        "label": "airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (transfer_part ^ 29) ;"
      },
      {
        "id": 32,
        "label": "turn_index = turn_index . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "if airdrop_state . gain_accumulator % 3 == 0 { airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (13) ; } else { airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_sub (2) . wrapping_add (21) ; }"
      },
      {
        "id": 34,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (13) ;"
      },
      {
        "id": 35,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_sub (2) . wrapping_add (21) ;"
      },
      {
        "id": 36,
        "label": "if remaining_drop > 3 { let final_ix = token_ix :: transfer (& airdrop_state . route_program_id , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_drop - 3 ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (remaining_drop - 3) ; }"
      },
      {
        "id": 37,
        "label": "let final_ix = token_ix :: transfer (& airdrop_state . route_program_id , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_drop - 3 ,) ? ;"
      },
      {
        "id": 38,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 39,
        "label": "invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 40,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . wrapping_add (remaining_drop - 3) ;"
      },
      {
        "id": 41,
        "label": "let mut tail_index : u8 = 1 ;"
      },
      {
        "id": 42,
        "label": "while tail_index < 4 { airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (1) ; airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . rotate_right (tail_index as u32) ; tail_index = tail_index . saturating_add (1) ; }"
      },
      {
        "id": 43,
        "label": "airdrop_state . history_ticks = airdrop_state . history_ticks . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "airdrop_state . gain_accumulator = airdrop_state . gain_accumulator . rotate_right (tail_index as u32) ;"
      },
      {
        "id": 45,
        "label": "tail_index = tail_index . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: airdrop_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: remaining_drop"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: transfer_part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: transfer_ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: external_program_ai"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: transfer_ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: final_ix"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: external_program_ai"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: final_ix"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: remaining_drop"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: airdrop_state"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: airdrop_state"
      }
    ]
  }
]