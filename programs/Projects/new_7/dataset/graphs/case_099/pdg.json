[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "bar: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pipe_state = & mut ctx . accounts . pipe_state ;"
      },
      {
        "id": 2,
        "label": "pipe_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pipe_state . bar = bar ;"
      },
      {
        "id": 4,
        "label": "pipe_state . pace = 7 ;"
      },
      {
        "id": 5,
        "label": "pipe_state . gauge = bar . rotate_left (4) ;"
      },
      {
        "id": 6,
        "label": "pipe_state . route = Pubkey :: new_from_array ([5u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: pipe_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: pipe_state"
      }
    ]
  },
  {
    "name": "set",
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pipe_state = & mut ctx . accounts . pipe_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (pipe_state . admin , ctx . accounts . admin . key () , PipeError :: AdminOnly) ;"
      },
      {
        "id": 11,
        "label": "pipe_state . route = p ;"
      },
      {
        "id": 12,
        "label": "pipe_state . pace = pipe_state . pace . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: pipe_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: pipe_state"
      }
    ]
  },
  {
    "name": "pass",
    "inputs": [
      "ctx: Context < Pass >",
      "amount: u64",
      "turns: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let pipe_state = & mut ctx . accounts . pipe_state ;"
      },
      {
        "id": 16,
        "label": "if amount == 2 { pipe_state . gauge = pipe_state . gauge ^ 0x7A ; let mut t : u8 = 1 ; while t < 3 { pipe_state . pace = pipe_state . pace . saturating_add (1) ; t = t . saturating_add (1) ; } return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "pipe_state . gauge = pipe_state . gauge ^ 0x7A ;"
      },
      {
        "id": 18,
        "label": "let mut t : u8 = 1 ;"
      },
      {
        "id": 19,
        "label": "while t < 3 { pipe_state . pace = pipe_state . pace . saturating_add (1) ; t = t . saturating_add (1) ; }"
      },
      {
        "id": 20,
        "label": "pipe_state . pace = pipe_state . pace . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "return Ok (()) ;"
      },
      {
        "id": 23,
        "label": "let mut remaining = amount ;"
      },
      {
        "id": 24,
        "label": "let mut k : u8 = 0 ;"
      },
      {
        "id": 25,
        "label": "while k < turns { let part = (remaining / 2) . max (3) ; if part >= remaining { break ; } let ix = token_ix :: transfer (& pipe_state . route , & ctx . accounts . storage . key () , & ctx . accounts . recipient . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ; invoke (& ix , & [ctx . accounts . external_program . clone () , ctx . accounts . storage . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; remaining = remaining . saturating_sub (part) ; pipe_state . pace = pipe_state . pace . saturating_add (1) ; pipe_state . gauge = pipe_state . gauge . wrapping_add (part ^ 0x08) ; if pipe_state . pace % 2 == 0 { pipe_state . gauge = pipe_state . gauge . rotate_left (1) . wrapping_add (5) ; let mut inner : u8 = 1 ; while inner < 3 { pipe_state . gauge = pipe_state . gauge . wrapping_add (inner as u64) ; inner = inner . saturating_add (1) ; } } else { pipe_state . gauge = pipe_state . gauge . rotate_right (2) ; } k = k . saturating_add (1) ; }"
      },
      {
        "id": 26,
        "label": "let part = (remaining / 2) . max (3) ;"
      },
      {
        "id": 27,
        "label": "if part >= remaining { break ; }"
      },
      {
        "id": 28,
        "label": "break ;"
      },
      {
        "id": 29,
        "label": "let ix = token_ix :: transfer (& pipe_state . route , & ctx . accounts . storage . key () , & ctx . accounts . recipient . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;"
      },
      {
        "id": 30,
        "label": "invoke (& ix , & [ctx . accounts . external_program . clone () , ctx . accounts . storage . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 31,
        "label": "remaining = remaining . saturating_sub (part) ;"
      },
      {
        "id": 32,
        "label": "pipe_state . pace = pipe_state . pace . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "pipe_state . gauge = pipe_state . gauge . wrapping_add (part ^ 0x08) ;"
      },
      {
        "id": 34,
        "label": "if pipe_state . pace % 2 == 0 { pipe_state . gauge = pipe_state . gauge . rotate_left (1) . wrapping_add (5) ; let mut inner : u8 = 1 ; while inner < 3 { pipe_state . gauge = pipe_state . gauge . wrapping_add (inner as u64) ; inner = inner . saturating_add (1) ; } } else { pipe_state . gauge = pipe_state . gauge . rotate_right (2) ; }"
      },
      {
        "id": 35,
        "label": "pipe_state . gauge = pipe_state . gauge . rotate_left (1) . wrapping_add (5) ;"
      },
      {
        "id": 36,
        "label": "let mut inner : u8 = 1 ;"
      },
      {
        "id": 37,
        "label": "while inner < 3 { pipe_state . gauge = pipe_state . gauge . wrapping_add (inner as u64) ; inner = inner . saturating_add (1) ; }"
      },
      {
        "id": 38,
        "label": "pipe_state . gauge = pipe_state . gauge . wrapping_add (inner as u64) ;"
      },
      {
        "id": 39,
        "label": "inner = inner . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "pipe_state . gauge = pipe_state . gauge . rotate_right (2) ;"
      },
      {
        "id": 41,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "if remaining > 3 { let ix2 = token_ix :: transfer (& pipe_state . route , & ctx . accounts . storage . key () , & ctx . accounts . recipient . key () , & ctx . accounts . admin . key () , & [] , remaining - 3 ,) ? ; invoke (& ix2 , & [ctx . accounts . external_program . clone () , ctx . accounts . storage . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; pipe_state . gauge = pipe_state . gauge . wrapping_add (remaining - 3) ; }"
      },
      {
        "id": 43,
        "label": "let ix2 = token_ix :: transfer (& pipe_state . route , & ctx . accounts . storage . key () , & ctx . accounts . recipient . key () , & ctx . accounts . admin . key () , & [] , remaining - 3 ,) ? ;"
      },
      {
        "id": 44,
        "label": "invoke (& ix2 , & [ctx . accounts . external_program . clone () , ctx . accounts . storage . to_account_info () , ctx . accounts . recipient . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 45,
        "label": "pipe_state . gauge = pipe_state . gauge . wrapping_add (remaining - 3) ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: pipe_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: remaining"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: remaining"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: remaining"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: part"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: remaining"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: part"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: remaining"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: part"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: ix"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 26,
        "to": 31,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 26,
        "to": 33,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 42,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 42,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 42,
        "label": "data_dep: remaining"
      },
      {
        "from": 43,
        "to": 43,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 43,
        "label": "data_dep: remaining"
      },
      {
        "from": 43,
        "to": 44,
        "label": "data_dep: ix2"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: pipe_state"
      },
      {
        "from": 23,
        "to": 45,
        "label": "data_dep: remaining"
      }
    ]
  }
]