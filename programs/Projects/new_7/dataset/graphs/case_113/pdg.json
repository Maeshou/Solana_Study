[
  {
    "name": "merge",
    "inputs": [
      "ctx: Context < Merge >",
      "tiles: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . merge_state ;"
      },
      {
        "id": 2,
        "label": "st . round += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . pipe_prog . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { st . path_a += tiles ; program = ctx . remaining_accounts [0] . clone () ; } else { st . path_b += tiles ; }"
      },
      {
        "id": 5,
        "label": "st . path_a += tiles ;"
      },
      {
        "id": 6,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 7,
        "label": "st . path_b += tiles ;"
      },
      {
        "id": 8,
        "label": "let mut payload = vec ! [0u8 ; 16] ;"
      },
      {
        "id": 9,
        "label": "payload [0 .. 8] . copy_from_slice (& (tiles + st . round) . to_le_bytes ()) ;"
      },
      {
        "id": 10,
        "label": "payload [8 .. 16] . copy_from_slice (& st . round . to_le_bytes ()) ;"
      },
      {
        "id": 11,
        "label": "let br = MergeBridge { a : ctx . accounts . input_buf . to_account_info () , b : ctx . accounts . output_buf . to_account_info () } ;"
      },
      {
        "id": 12,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 13,
        "label": "br . transfer (cx , payload) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: payload"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: payload"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: payload"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: st"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: br"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: cx"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 12,
        "label": "data_dep: program"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: cx"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: payload"
      }
    ]
  }
]