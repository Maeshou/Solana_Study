[
  {
    "name": "setup",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 2,
        "label": "s . moderator = ctx . accounts . moderator . key () ;"
      },
      {
        "id": 3,
        "label": "s . stride = stride ;"
      },
      {
        "id": 4,
        "label": "s . queue = 0 ;"
      },
      {
        "id": 5,
        "label": "s . done = 0 ;"
      },
      {
        "id": 6,
        "label": "s . pool = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "review_and_pay",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 10,
        "label": "require ! (s . moderator == ctx . accounts . moderator . key () , Errs :: Mod) ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "status"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "let mut hops = 0 ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "s . pool = s . pool . saturating_add (2) ;"
      },
      {
        "id": 18,
        "label": "hops = hops . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "hint . len () > 3"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "s . pool = s . pool . saturating_add (hint . len () as u32) ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "No-op"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "s . done = s . done . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "let mut r = 0 ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "s . queue = s . queue . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "if statement"
      },
      {
        "id": 36,
        "label": "predicate"
      },
      {
        "id": 37,
        "label": "s . pool > 0"
      },
      {
        "id": 38,
        "label": "True body"
      },
      {
        "id": 39,
        "label": "s . pool = s . pool . saturating_sub (1) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "No-op"
      },
      {
        "id": 42,
        "label": "merge"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "let payout = (s . pool as u64) . saturating_add ((s . done as u64) * 3) ;"
      },
      {
        "id": 45,
        "label": "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . fund . key () , ctx . accounts . reviewer_ata . key () , ctx . accounts . moderator . key () , & [] , payout ,) ? ;"
      },
      {
        "id": 46,
        "label": "invoke (& ix , & [ctx . accounts . fund . to_account_info () , ctx . accounts . reviewer_ata . to_account_info () , ctx . accounts . moderator . to_account_info () ,]) ? ;"
      },
      {
        "id": 47,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 20,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 11,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "while"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "predicate"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "true"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 28,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      }
    ]
  }
]