[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < Setup >",
      "day_id: Pubkey",
      "night_id: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . day = day_id ;"
      },
      {
        "id": 4,
        "label": "s . night = night_id ;"
      },
      {
        "id": 5,
        "label": "s . counter = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "pay",
    "inputs": [
      "ctx: Context < Pay >",
      "base: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;"
      },
      {
        "id": 10,
        "label": "let clock = & ctx . accounts . clock ;"
      },
      {
        "id": 11,
        "label": "let mut chosen = s . day ;"
      },
      {
        "id": 12,
        "label": "if clock . slot % 2 == 1 { chosen = s . night ; } else { s . counter = s . counter . saturating_add (1) ; }"
      },
      {
        "id": 13,
        "label": "chosen = s . night ;"
      },
      {
        "id": 14,
        "label": "s . counter = s . counter . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "let mut amt = base ;"
      },
      {
        "id": 16,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 17,
        "label": "while k < 5 { amt = amt . saturating_add ((k as u64) + ((s . counter % 7) as u64)) ; k = k . saturating_add (1) ; }"
      },
      {
        "id": 18,
        "label": "amt = amt . saturating_add ((k as u64) + ((s . counter % 7) as u64)) ;"
      },
      {
        "id": 19,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "let ix = spl_token :: instruction :: transfer (chosen , ctx . accounts . treasury . key () , ctx . accounts . recipient_ata . key () , ctx . accounts . admin . key () , & [] , amt ,) ? ;"
      },
      {
        "id": 21,
        "label": "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . recipient_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,]) ? ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: s"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: clock"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: chosen"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: clock"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: chosen"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: chosen"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: amt"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: k"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: k"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: k"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: k"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: k"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: k"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: k"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: k"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: ix"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: chosen"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: amt"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: ix"
      }
    ]
  }
]