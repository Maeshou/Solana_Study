[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "soft_cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let relayer_state = & mut ctx . accounts . relayer_state ;"
      },
      {
        "id": 2,
        "label": "relayer_state . admin_authority = ctx . accounts . admin_authority . key () ;"
      },
      {
        "id": 3,
        "label": "relayer_state . soft_cap = soft_cap ;"
      },
      {
        "id": 4,
        "label": "relayer_state . batch_counter = 3 ;"
      },
      {
        "id": 5,
        "label": "relayer_state . quality_meter = soft_cap ^ 0xBEEF ;"
      },
      {
        "id": 6,
        "label": "relayer_state . route_program_id = Pubkey :: new_unique () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: relayer_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: relayer_state"
      }
    ]
  },
  {
    "name": "set_route",
    "inputs": [
      "ctx: Context < SetRoute >",
      "new_route: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let relayer_state = & mut ctx . accounts . relayer_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (relayer_state . admin_authority , ctx . accounts . admin_authority . key () , RelayError :: NotAuthorized) ;"
      },
      {
        "id": 11,
        "label": "relayer_state . route_program_id = new_route ;"
      },
      {
        "id": 12,
        "label": "relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . rotate_left (1) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: relayer_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: relayer_state"
      }
    ]
  },
  {
    "name": "relay",
    "inputs": [
      "ctx: Context < Relay >",
      "total: u64",
      "passes: u8"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let relayer_state = & mut ctx . accounts . relayer_state ;"
      },
      {
        "id": 17,
        "label": "if total < 5 { relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ; relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (17) ; let mut warmup_round : u8 = 1 ; while warmup_round < 3 { relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (warmup_round as u32) ; warmup_round = warmup_round . saturating_add (1) ; } return Ok (()) ; }"
      },
      {
        "id": 18,
        "label": "relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (17) ;"
      },
      {
        "id": 20,
        "label": "let mut warmup_round : u8 = 1 ;"
      },
      {
        "id": 21,
        "label": "while warmup_round < 3 { relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (warmup_round as u32) ; warmup_round = warmup_round . saturating_add (1) ; }"
      },
      {
        "id": 22,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (warmup_round as u32) ;"
      },
      {
        "id": 23,
        "label": "warmup_round = warmup_round . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "return Ok (()) ;"
      },
      {
        "id": 25,
        "label": "if total > relayer_state . soft_cap { relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (total ^ 0x99) ; relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (4) ; return Err (RelayError :: LimitBreached . into ()) ; }"
      },
      {
        "id": 26,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (total ^ 0x99) ;"
      },
      {
        "id": 27,
        "label": "relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (4) ;"
      },
      {
        "id": 28,
        "label": "return Err (RelayError :: LimitBreached . into ()) ;"
      },
      {
        "id": 29,
        "label": "let mut remaining = total ;"
      },
      {
        "id": 30,
        "label": "let mut pass_index : u8 = 0 ;"
      },
      {
        "id": 31,
        "label": "while pass_index < passes { let transfer_part = (remaining / 3) . max (3) ; if transfer_part >= remaining { break ; } let transfer_ix = token_ix :: transfer (& relayer_state . route_program_id , & ctx . accounts . bounty_vault . key () , & ctx . accounts . hunter_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (RelayError :: ProgramAccountMissing) ? ; invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . bounty_vault . to_account_info () , ctx . accounts . hunter_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; remaining = remaining . saturating_sub (transfer_part) ; relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ; relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (transfer_part ^ 0x2D) ; let mut checkpoint_turn : u8 = 1 ; while checkpoint_turn < 4 { relayer_state . quality_meter = relayer_state . quality_meter . rotate_left ((checkpoint_turn % 3) as u32) ; relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add ((transfer_part % 7) as u64) ; checkpoint_turn = checkpoint_turn . saturating_add (1) ; } if remaining < relayer_state . soft_cap / 4 { relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (11) . rotate_right (2) ; } else { relayer_state . quality_meter = relayer_state . quality_meter . wrapping_sub (5) . wrapping_add (19) ; } pass_index = pass_index . saturating_add (1) ; }"
      },
      {
        "id": 32,
        "label": "let transfer_part = (remaining / 3) . max (3) ;"
      },
      {
        "id": 33,
        "label": "if transfer_part >= remaining { break ; }"
      },
      {
        "id": 34,
        "label": "break ;"
      },
      {
        "id": 35,
        "label": "let transfer_ix = token_ix :: transfer (& relayer_state . route_program_id , & ctx . accounts . bounty_vault . key () , & ctx . accounts . hunter_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 36,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (RelayError :: ProgramAccountMissing) ? ;"
      },
      {
        "id": 37,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . bounty_vault . to_account_info () , ctx . accounts . hunter_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 38,
        "label": "remaining = remaining . saturating_sub (transfer_part) ;"
      },
      {
        "id": 39,
        "label": "relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (transfer_part ^ 0x2D) ;"
      },
      {
        "id": 41,
        "label": "let mut checkpoint_turn : u8 = 1 ;"
      },
      {
        "id": 42,
        "label": "while checkpoint_turn < 4 { relayer_state . quality_meter = relayer_state . quality_meter . rotate_left ((checkpoint_turn % 3) as u32) ; relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add ((transfer_part % 7) as u64) ; checkpoint_turn = checkpoint_turn . saturating_add (1) ; }"
      },
      {
        "id": 43,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . rotate_left ((checkpoint_turn % 3) as u32) ;"
      },
      {
        "id": 44,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add ((transfer_part % 7) as u64) ;"
      },
      {
        "id": 45,
        "label": "checkpoint_turn = checkpoint_turn . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "if remaining < relayer_state . soft_cap / 4 { relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (11) . rotate_right (2) ; } else { relayer_state . quality_meter = relayer_state . quality_meter . wrapping_sub (5) . wrapping_add (19) ; }"
      },
      {
        "id": 47,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (11) . rotate_right (2) ;"
      },
      {
        "id": 48,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_sub (5) . wrapping_add (19) ;"
      },
      {
        "id": 49,
        "label": "pass_index = pass_index . saturating_add (1) ;"
      },
      {
        "id": 50,
        "label": "if remaining > 2 { let final_ix = token_ix :: transfer (& relayer_state . route_program_id , & ctx . accounts . bounty_vault . key () , & ctx . accounts . hunter_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining - 2 ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (RelayError :: ProgramAccountMissing) ? ; invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . bounty_vault . to_account_info () , ctx . accounts . hunter_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (remaining - 2) . rotate_left (1) ; let mut polish_round : u8 = 1 ; while polish_round < 3 { relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ; relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (polish_round as u32) ; polish_round = polish_round . saturating_add (1) ; } }"
      },
      {
        "id": 51,
        "label": "let final_ix = token_ix :: transfer (& relayer_state . route_program_id , & ctx . accounts . bounty_vault . key () , & ctx . accounts . hunter_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining - 2 ,) ? ;"
      },
      {
        "id": 52,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (RelayError :: ProgramAccountMissing) ? ;"
      },
      {
        "id": 53,
        "label": "invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . bounty_vault . to_account_info () , ctx . accounts . hunter_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 54,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . wrapping_add (remaining - 2) . rotate_left (1) ;"
      },
      {
        "id": 55,
        "label": "let mut polish_round : u8 = 1 ;"
      },
      {
        "id": 56,
        "label": "while polish_round < 3 { relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ; relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (polish_round as u32) ; polish_round = polish_round . saturating_add (1) ; }"
      },
      {
        "id": 57,
        "label": "relayer_state . batch_counter = relayer_state . batch_counter . saturating_add (1) ;"
      },
      {
        "id": 58,
        "label": "relayer_state . quality_meter = relayer_state . quality_meter . rotate_right (polish_round as u32) ;"
      },
      {
        "id": 59,
        "label": "polish_round = polish_round . saturating_add (1) ;"
      },
      {
        "id": 60,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: remaining"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 31,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: transfer_part"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: remaining"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: remaining"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: transfer_ix"
      },
      {
        "from": 16,
        "to": 35,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: external_program_ai"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: transfer_ix"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: remaining"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: remaining"
      },
      {
        "from": 32,
        "to": 38,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 16,
        "to": 39,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 39,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 40,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 40,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 32,
        "to": 42,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 16,
        "to": 43,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 43,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 44,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 44,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 32,
        "to": 44,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 29,
        "to": 46,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 46,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 46,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 46,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 46,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 46,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 47,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 47,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 48,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 48,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 50,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 50,
        "label": "data_dep: remaining"
      },
      {
        "from": 36,
        "to": 50,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 50,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 50,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 51,
        "to": 51,
        "label": "def: final_ix"
      },
      {
        "from": 16,
        "to": 51,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 51,
        "label": "data_dep: remaining"
      },
      {
        "from": 52,
        "to": 52,
        "label": "def: external_program_ai"
      },
      {
        "from": 51,
        "to": 53,
        "label": "data_dep: final_ix"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 16,
        "to": 54,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 54,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 29,
        "to": 54,
        "label": "data_dep: remaining"
      },
      {
        "from": 16,
        "to": 56,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 56,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 56,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 56,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 57,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 57,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 58,
        "label": "data_dep: relayer_state"
      },
      {
        "from": 16,
        "to": 58,
        "label": "data_dep: relayer_state"
      }
    ]
  }
]