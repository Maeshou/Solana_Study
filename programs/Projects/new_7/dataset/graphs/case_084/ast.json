[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "ceiling: u64"
    ],
    "attributes": [],
    "body": [
      "let splitter_state = & mut ctx . accounts . splitter_state ;",
      "splitter_state . chair_authority = ctx . accounts . chair_authority . key () ;",
      "splitter_state . cashback_ceiling = ceiling ;",
      "splitter_state . round_counter = 6 ;",
      "splitter_state . audit_accumulator = ceiling . wrapping_mul (3) ;",
      "splitter_state . route_plug = Pubkey :: new_from_array ([5u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "plug",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Plug >",
      "id: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let splitter_state = & mut ctx . accounts . splitter_state ;",
      "require_keys_eq ! (splitter_state . chair_authority , ctx . accounts . chair_authority . key () , ErrorCode :: Denied) ;",
      "splitter_state . route_plug = id ;",
      "splitter_state . round_counter = splitter_state . round_counter . wrapping_add (4) ;",
      "Ok (())"
    ]
  },
  {
    "name": "run",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Run >",
      "cash: u64",
      "rounds: u8"
    ],
    "attributes": [],
    "body": [
      "let splitter_state = & mut ctx . accounts . splitter_state ;",
      "if cash >= splitter_state . cashback_ceiling",
      "{",
      "splitter_state . round_counter = splitter_state . round_counter . saturating_add (2) ;",
      "splitter_state . audit_accumulator = splitter_state . audit_accumulator ^ 0x33 ;",
      "return Ok (()) ;",
      "}",
      "let mut remaining_cash = cash ;",
      "let mut round_index : u8 = 0 ;",
      "while round_index < rounds",
      "{",
      "let transfer_part = (remaining_cash / 3) . max (2) ;",
      "if transfer_part >= remaining_cash",
      "{",
      "break ;",
      "} let transfer_ix = token_ix :: transfer (& splitter_state . route_plug , & ctx . accounts . market_treasury . key () , & ctx . accounts . customer_wallet . key () , & ctx . accounts . chair_authority . key () , & [] , transfer_part ,) ? ;",
      "invoke (& transfer_ix , & [ctx . accounts . external_program . clone () , ctx . accounts . market_treasury . to_account_info () , ctx . accounts . customer_wallet . to_account_info () , ctx . accounts . chair_authority . to_account_info () ,] ,) ? ;",
      "remaining_cash = remaining_cash . saturating_sub (transfer_part) ;",
      "splitter_state . round_counter = splitter_state . round_counter . saturating_add (1) ;",
      "splitter_state . audit_accumulator = splitter_state . audit_accumulator . wrapping_add (transfer_part) . rotate_left (1) ;",
      "round_index = round_index . saturating_add (1) ;",
      "if splitter_state . round_counter % 2 == 1",
      "{",
      "splitter_state . audit_accumulator = splitter_state . audit_accumulator . wrapping_add (7) ;",
      "} else",
      "{",
      "splitter_state . audit_accumulator = splitter_state . audit_accumulator . wrapping_sub (3) ;",
      "}",
      "}",
      "if remaining_cash > 1",
      "{",
      "let final_ix = token_ix :: transfer (& splitter_state . route_plug , & ctx . accounts . market_treasury . key () , & ctx . accounts . customer_wallet . key () , & ctx . accounts . chair_authority . key () , & [] , remaining_cash - 1 ,) ? ;",
      "invoke (& final_ix , & [ctx . accounts . external_program . clone () , ctx . accounts . market_treasury . to_account_info () , ctx . accounts . customer_wallet . to_account_info () , ctx . accounts . chair_authority . to_account_info () ,] ,) ? ;",
      "splitter_state . audit_accumulator = splitter_state . audit_accumulator . wrapping_add (remaining_cash - 1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "SplitterState",
    "node_type": "struct",
    "fields": [
      {
        "name": "chair_authority",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "cashback_ceiling",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "round_counter",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "audit_accumulator",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "route_plug",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "splitter_state",
        "attribute": "# [account (init , payer = chair_authority , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , SplitterState >"
      },
      {
        "name": "chair_authority",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "market_treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "customer_wallet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Plug",
    "node_type": "struct",
    "fields": [
      {
        "name": "splitter_state",
        "attribute": "# [account (mut , has_one = chair_authority)]",
        "field_type": "Account < 'info , SplitterState >"
      },
      {
        "name": "chair_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Run",
    "node_type": "struct",
    "fields": [
      {
        "name": "splitter_state",
        "attribute": "# [account (mut , has_one = chair_authority)]",
        "field_type": "Account < 'info , SplitterState >"
      },
      {
        "name": "chair_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "market_treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "customer_wallet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "external_program",
        "attribute": "# [doc = \" CHECK: 外部プログラム口座を直接受け取る\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]