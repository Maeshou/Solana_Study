[
  {
    "name": "start",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 2,
        "label": "w . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "w . stock = stock ;"
      },
      {
        "id": 4,
        "label": "w . logs = 0 ;"
      },
      {
        "id": 5,
        "label": "w . sent = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "grant",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let w = & mut ctx . accounts . workshop ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "w . stock == 0"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "w . logs = w . logs . saturating_add (1) ;"
      },
      {
        "id": 14,
        "label": "return Ok (()) ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "No-op"
      },
      {
        "id": 17,
        "label": "merge"
      },
      {
        "id": 18,
        "label": "let give = if w . stock > want { want } else { w . stock } ;"
      },
      {
        "id": 19,
        "label": "w . stock = w . stock . saturating_sub (give) ;"
      },
      {
        "id": 20,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . storage . key () , & ctx . accounts . crafter_vault . key () , & ctx . accounts . manager . key () , & [] , give ,) ? ;"
      },
      {
        "id": 21,
        "label": "invoke (& ix , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . storage . to_account_info () , ctx . accounts . crafter_vault . to_account_info () , ctx . accounts . manager . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 22,
        "label": "let mut t = 0 ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "w . logs = w . logs . saturating_add (2) ;"
      },
      {
        "id": 25,
        "label": "t += 1 ;"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "w . sent = w . sent . saturating_add (give) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 9,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "while"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  }
]