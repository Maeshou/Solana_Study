[
  {
    "name": "grow",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let expanded = [1u64 , 3 , 7 , 9] . iter () . fold (Vec :: new () , | mut acc , m | { acc . extend_from_slice (& seed . wrapping_mul (* m) . to_le_bytes ()) ; acc }) ;"
      },
      {
        "id": 2,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . tree_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . planter . key () , false) ,] ;"
      },
      {
        "id": 3,
        "label": "invoke (& Instruction { program_id : FIXED_GROVE_ID , accounts : metas , data : expanded } , & [ctx . accounts . grove_hint . to_account_info () , ctx . accounts . tree_slot . to_account_info () , ctx . accounts . planter . to_account_info ()]) ? ;"
      },
      {
        "id": 4,
        "label": "let mut program_ai = ctx . accounts . signal_hint . to_account_info () ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "program_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "invoke (& Instruction { program_id : * program_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . planter . key () , false) ,] , data : gift . to_le_bytes () . to_vec () , } , & [program_ai , ctx . accounts . signal_pad . to_account_info () , ctx . accounts . planter . to_account_info ()]) ? ;"
      },
      {
        "id": 14,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . pool . to_account_info () , to : ctx . accounts . planter_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () }) , gift) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  }
]