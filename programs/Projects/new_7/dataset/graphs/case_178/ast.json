[
  {
    "name": "grow",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Grow >",
      "seed: u64",
      "gift: u64"
    ],
    "attributes": [],
    "body": [
      "let expanded = [1u64 , 3 , 7 , 9] . iter () . fold (Vec :: new () , | mut acc , m | { acc . extend_from_slice (& seed . wrapping_mul (* m) . to_le_bytes ()) ; acc }) ;",
      "let metas = vec ! [AccountMeta :: new (ctx . accounts . tree_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . planter . key () , false) ,] ;",
      "invoke (& Instruction { program_id : FIXED_GROVE_ID , accounts : metas , data : expanded } , & [ctx . accounts . grove_hint . to_account_info () , ctx . accounts . tree_slot . to_account_info () , ctx . accounts . planter . to_account_info ()]) ? ;",
      "let mut program_ai = ctx . accounts . signal_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "program_ai = ctx . remaining_accounts [0] . clone () ;",
      "}",
      "invoke (& Instruction { program_id : * program_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . planter . key () , false) ,] , data : gift . to_le_bytes () . to_vec () , } , & [program_ai , ctx . accounts . signal_pad . to_account_info () , ctx . accounts . planter . to_account_info ()]) ? ;",
      "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . pool . to_account_info () , to : ctx . accounts . planter_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () }) , gift) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Grow",
    "node_type": "struct",
    "fields": [
      {
        "name": "tree_slot",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "planter",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "grove_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signal_pad",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signal_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "planter_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "pool_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]