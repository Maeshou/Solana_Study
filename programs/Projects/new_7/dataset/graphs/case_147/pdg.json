[
  {
    "name": "enter",
    "inputs": [
      "ctx: Context < Enter >",
      "ticket: u64",
      "allowance: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "for _ in 0 .. (ticket % 4) { ctx . accounts . pool . hash ^= Clock :: get () ? . slot ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . pool . hash ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 3,
        "label": "ctx . accounts . pool . count = ctx . accounts . pool . count . wrapping_add (1) ;"
      },
      {
        "id": 4,
        "label": "let a = Approve { to : ctx . accounts . player_token . to_account_info () , delegate : ctx . accounts . raffle_delegate . to_account_info () , authority : ctx . accounts . player_wallet . to_account_info () , } ;"
      },
      {
        "id": 5,
        "label": "let a_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , a) ;"
      },
      {
        "id": 6,
        "label": "token :: approve (a_ctx , allowance) ? ;"
      },
      {
        "id": 7,
        "label": "if ctx . accounts . pool . count % 2 == 1 { ctx . accounts . pool . journal . push (ticket as u32) ; }"
      },
      {
        "id": 8,
        "label": "ctx . accounts . pool . journal . push (ticket as u32) ;"
      },
      {
        "id": 9,
        "label": "let mut store = ctx . accounts . result_program . to_account_info () ;"
      },
      {
        "id": 10,
        "label": "if ctx . remaining_accounts . len () > 0 { store = ctx . remaining_accounts [0] . clone () ; ctx . accounts . pool . switch += 1 ; }"
      },
      {
        "id": 11,
        "label": "store = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 12,
        "label": "ctx . accounts . pool . switch += 1 ;"
      },
      {
        "id": 13,
        "label": "let rb = ResultBridge { table : ctx . accounts . result_table . to_account_info () , signer : ctx . accounts . player_wallet . to_account_info () } ;"
      },
      {
        "id": 14,
        "label": "let cx = rb . as_cpi (store . clone ()) ;"
      },
      {
        "id": 15,
        "label": "rb . save (cx , ticket . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 4,
        "to": 4,
        "label": "def: a"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: a_ctx"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: a"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: a_ctx"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: store"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: store"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: store"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: rb"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: cx"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: rb"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: store"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: rb"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: cx"
      }
    ]
  }
]