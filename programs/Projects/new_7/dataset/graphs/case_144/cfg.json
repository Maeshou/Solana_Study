[
  {
    "name": "settle_and_notify",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . vault_token_account . to_account_info () , to : ctx . accounts . winner_token_account . to_account_info () , authority : ctx . accounts . vault_authority . to_account_info () , } ;"
      },
      {
        "id": 2,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 3,
        "label": "token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 4,
        "label": "let mut router = ctx . accounts . notify_program . to_account_info () ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "router = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "ctx . accounts . settlement_meta . switched += 1 ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "No-op"
      },
      {
        "id": 13,
        "label": "merge"
      },
      {
        "id": 14,
        "label": "let br = NotifyBridge { board : ctx . accounts . notice_board . to_account_info () , actor : ctx . accounts . winner_wallet . to_account_info () , } ;"
      },
      {
        "id": 15,
        "label": "let payload = note_code . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 16,
        "label": "let cx = br . as_cpi (router . clone ()) ;"
      },
      {
        "id": 17,
        "label": "br . post (cx , payload) ? ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 5,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  }
]