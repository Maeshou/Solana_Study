[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . mx ;"
      },
      {
        "id": 2,
        "label": "m . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "m . a = id_a ;"
      },
      {
        "id": 4,
        "label": "m . b = id_b ;"
      },
      {
        "id": 5,
        "label": "m . threshold = 5000 ;"
      },
      {
        "id": 6,
        "label": "m . score = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let m = & mut ctx . accounts . mx ;"
      },
      {
        "id": 10,
        "label": "require ! (m . admin == ctx . accounts . admin . key () , Errs :: Admin) ;"
      },
      {
        "id": 11,
        "label": "let b = text . as_bytes () ;"
      },
      {
        "id": 12,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 13,
        "label": "let mut pref : u64 = 0 ;"
      },
      {
        "id": 14,
        "label": "let mut suff : u64 = 0 ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "pref = pref . saturating_add (((b [i] as u64) % 23) + 1) ;"
      },
      {
        "id": 17,
        "label": "i += 1 ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "let mut j = b . len () ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "j -= 1 ;"
      },
      {
        "id": 22,
        "label": "suff = suff . saturating_add (((b [j] as u64) % 29) + 1) ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "j % 4 == 0"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "m . score = m . score . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "let mut mixed = pref . saturating_mul (3) . saturating_add (suff * 2) ;"
      },
      {
        "id": 33,
        "label": "let mut t = 0u8 ;"
      },
      {
        "id": 34,
        "label": "Loop Start"
      },
      {
        "id": 35,
        "label": "mixed = mixed ^ (((m . score as u64) + (t as u64)) << (t % 5)) ;"
      },
      {
        "id": 36,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "let amt = base . saturating_add (mixed % 50_000) ;"
      },
      {
        "id": 39,
        "label": "let mut chosen = m . a ;"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "mixed > m . threshold as u64"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "chosen = m . b ;"
      },
      {
        "id": 45,
        "label": "m . threshold = m . threshold . saturating_add (17) ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "m . threshold > 10"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "m . threshold = m . threshold . saturating_sub (9) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "let ix = spl_token :: instruction :: transfer (chosen , ctx . accounts . vault . key () , ctx . accounts . receiver_ata . key () , ctx . accounts . admin . key () , & [] , amt ,) ? ;"
      },
      {
        "id": 57,
        "label": "invoke (& ix , & [ctx . accounts . vault . to_account_info () , ctx . accounts . receiver_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,]) ? ;"
      },
      {
        "id": 58,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "while"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 20,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "while"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 40,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 45,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      }
    ]
  }
]