[
  {
    "name": "reward_flow",
    "inputs": [
      "ctx: Context < RewardFlow >",
      "stage: u64",
      "payout: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if stage >= 3 { ctx . accounts . journal . progress = ctx . accounts . journal . progress . saturating_add (2) ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . journal . progress = ctx . accounts . journal . progress . saturating_add (2) ;"
      },
      {
        "id": 3,
        "label": "if stage < 2 { ctx . accounts . journal . retries = ctx . accounts . journal . retries . wrapping_add (1) ; }"
      },
      {
        "id": 4,
        "label": "ctx . accounts . journal . retries = ctx . accounts . journal . retries . wrapping_add (1) ;"
      },
      {
        "id": 5,
        "label": "let sb_ix = Instruction { program_id : SCOREBOARD_ID , accounts : [AccountMeta :: new (ctx . accounts . score_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] . into () , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 6,
        "label": "invoke (& sb_ix , & [ctx . accounts . scoreboard_hint . to_account_info () , ctx . accounts . score_slot . to_account_info () , ctx . accounts . participant . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 7,
        "label": "let mut report_program = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "if ! ctx . remaining_accounts . is_empty () { report_program = ctx . remaining_accounts [0] . clone () ; ctx . accounts . journal . routes = ctx . accounts . journal . routes . wrapping_add (1) ; }"
      },
      {
        "id": 9,
        "label": "report_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "ctx . accounts . journal . routes = ctx . accounts . journal . routes . wrapping_add (1) ;"
      },
      {
        "id": 11,
        "label": "let mut rp_metas = Vec :: with_capacity (2) ;"
      },
      {
        "id": 12,
        "label": "rp_metas . extend_from_slice (& [AccountMeta :: new (ctx . accounts . report_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,]) ;"
      },
      {
        "id": 13,
        "label": "let tag = stage . wrapping_mul (2654435761) ;"
      },
      {
        "id": 14,
        "label": "let mut rp_data = stage . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 15,
        "label": "rp_data . extend_from_slice (& tag . to_le_bytes ()) ;"
      },
      {
        "id": 16,
        "label": "let rp_ix = Instruction { program_id : * report_program . key , accounts : rp_metas , data : rp_data , } ;"
      },
      {
        "id": 17,
        "label": "let rp_infos = [report_program . clone () , ctx . accounts . report_board . to_account_info () , ctx . accounts . participant . to_account_info () ,] ;"
      },
      {
        "id": 18,
        "label": "invoke (& rp_ix , & rp_infos) ? ;"
      },
      {
        "id": 19,
        "label": "let t = Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . winner_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ;"
      },
      {
        "id": 20,
        "label": "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;"
      },
      {
        "id": 21,
        "label": "token :: transfer (tctx , payout) ? ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: sb_ix"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: sb_ix"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: report_program"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: report_program"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: report_program"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: rp_metas"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: rp_metas"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: tag"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: rp_data"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: rp_data"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: tag"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: rp_ix"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: report_program"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: rp_metas"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: rp_data"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: rp_infos"
      },
      {
        "from": 7,
        "to": 17,
        "label": "data_dep: report_program"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: rp_ix"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: rp_infos"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: t"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: tctx"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: t"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: tctx"
      }
    ]
  }
]