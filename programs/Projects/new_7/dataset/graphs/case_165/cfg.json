[
  {
    "name": "reward_flow",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "stage >= 3"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "ctx . accounts . journal . progress = ctx . accounts . journal . progress . saturating_add (2) ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "stage < 2"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "ctx . accounts . journal . retries = ctx . accounts . journal . retries . wrapping_add (1) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "let sb_ix = Instruction { program_id : SCOREBOARD_ID , accounts : [AccountMeta :: new (ctx . accounts . score_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] . into () , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 18,
        "label": "invoke (& sb_ix , & [ctx . accounts . scoreboard_hint . to_account_info () , ctx . accounts . score_slot . to_account_info () , ctx . accounts . participant . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 19,
        "label": "let mut report_program = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "report_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 25,
        "label": "ctx . accounts . journal . routes = ctx . accounts . journal . routes . wrapping_add (1) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "let mut rp_metas = Vec :: with_capacity (2) ;"
      },
      {
        "id": 30,
        "label": "rp_metas . extend_from_slice (& [AccountMeta :: new (ctx . accounts . report_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,]) ;"
      },
      {
        "id": 31,
        "label": "let tag = stage . wrapping_mul (2654435761) ;"
      },
      {
        "id": 32,
        "label": "let mut rp_data = stage . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 33,
        "label": "rp_data . extend_from_slice (& tag . to_le_bytes ()) ;"
      },
      {
        "id": 34,
        "label": "let rp_ix = Instruction { program_id : * report_program . key , accounts : rp_metas , data : rp_data , } ;"
      },
      {
        "id": 35,
        "label": "let rp_infos = [report_program . clone () , ctx . accounts . report_board . to_account_info () , ctx . accounts . participant . to_account_info () ,] ;"
      },
      {
        "id": 36,
        "label": "invoke (& rp_ix , & rp_infos) ? ;"
      },
      {
        "id": 37,
        "label": "let t = Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . winner_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ;"
      },
      {
        "id": 38,
        "label": "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;"
      },
      {
        "id": 39,
        "label": "token :: transfer (tctx , payout) ? ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 20,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]