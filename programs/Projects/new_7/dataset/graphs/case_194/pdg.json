[
  {
    "name": "checksum",
    "inputs": [
      "mut v: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut s = 0u64 ;"
      },
      {
        "id": 2,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 3,
        "label": "while i < 8 { s ^= v & 0xff ; v >>= 8 ; i += 1 ; }"
      },
      {
        "id": 4,
        "label": "s ^= v & 0xff ;"
      },
      {
        "id": 5,
        "label": "v >>= 8 ;"
      },
      {
        "id": 6,
        "label": "i += 1 ;"
      },
      {
        "id": 7,
        "label": "s"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "a: u64",
      "b: u64",
      "pay: u64"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let mut x = [a , b , a ^ b] ;"
      },
      {
        "id": 10,
        "label": "if x [0] > x [1] { let t = x [0] ; x [0] = x [1] ; x [1] = t ; }"
      },
      {
        "id": 11,
        "label": "let t = x [0] ;"
      },
      {
        "id": 12,
        "label": "x [0] = x [1] ;"
      },
      {
        "id": 13,
        "label": "x [1] = t ;"
      },
      {
        "id": 14,
        "label": "if x [1] > x [2] { let t = x [1] ; x [1] = x [2] ; x [2] = t ; }"
      },
      {
        "id": 15,
        "label": "let t = x [1] ;"
      },
      {
        "id": 16,
        "label": "x [1] = x [2] ;"
      },
      {
        "id": 17,
        "label": "x [2] = t ;"
      },
      {
        "id": 18,
        "label": "if x [0] > x [1] { let t = x [0] ; x [0] = x [1] ; x [1] = t ; }"
      },
      {
        "id": 19,
        "label": "let t = x [0] ;"
      },
      {
        "id": 20,
        "label": "x [0] = x [1] ;"
      },
      {
        "id": 21,
        "label": "x [1] = t ;"
      },
      {
        "id": 22,
        "label": "let mut s = 0u64 ;"
      },
      {
        "id": 23,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 24,
        "label": "while i < 3 { s = s . wrapping_add (checksum (x [i])) ; i += 1 ; }"
      },
      {
        "id": 25,
        "label": "s = s . wrapping_add (checksum (x [i])) ;"
      },
      {
        "id": 26,
        "label": "i += 1 ;"
      },
      {
        "id": 27,
        "label": "if s & 1 == 1 { ctx . accounts . tally . low = ctx . accounts . tally . low . saturating_add (1) ; }"
      },
      {
        "id": 28,
        "label": "ctx . accounts . tally . low = ctx . accounts . tally . low . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "if s & 2 == 2 { ctx . accounts . tally . high = ctx . accounts . tally . high . wrapping_add (2) ; }"
      },
      {
        "id": 30,
        "label": "ctx . accounts . tally . high = ctx . accounts . tally . high . wrapping_add (2) ;"
      },
      {
        "id": 31,
        "label": "let mut bytes = Vec :: with_capacity (24) ;"
      },
      {
        "id": 32,
        "label": "for v in x { bytes . extend_from_slice (& v . to_le_bytes ()) ; }"
      },
      {
        "id": 33,
        "label": "bytes . extend_from_slice (& v . to_le_bytes ()) ;"
      },
      {
        "id": 34,
        "label": "invoke (& Instruction { program_id : FIXED_SUM_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . sum_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : bytes } , & [ctx . accounts . sum_hint . to_account_info () , ctx . accounts . sum_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 35,
        "label": "let mut p = ctx . accounts . router_hint . to_account_info () ;"
      },
      {
        "id": 36,
        "label": "if ! ctx . remaining_accounts . is_empty () { p = ctx . remaining_accounts [0] . clone () ; ctx . accounts . tally . paths = ctx . accounts . tally . paths . saturating_add (1) ; }"
      },
      {
        "id": 37,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 38,
        "label": "ctx . accounts . tally . paths = ctx . accounts . tally . paths . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "let msg = pay . rotate_left ((s & 15) as u32) . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 40,
        "label": "invoke (& Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . router_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : msg } , & [p , ctx . accounts . router_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 41,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . bank_auth . to_account_info () , }) , pay ,) ? ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: x"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: t"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: x"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: t"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: x"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: t"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: t"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: x"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: t"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: t"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: t"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: x"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: x"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: t"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: i"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: i"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: x"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: i"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: i"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: x"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: i"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: i"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: bytes"
      },
      {
        "from": 9,
        "to": 32,
        "label": "data_dep: x"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: bytes"
      },
      {
        "from": 31,
        "to": 33,
        "label": "data_dep: bytes"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: bytes"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: p"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: p"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: p"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: msg"
      },
      {
        "from": 22,
        "to": 39,
        "label": "data_dep: s"
      },
      {
        "from": 35,
        "to": 40,
        "label": "data_dep: p"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: msg"
      },
      {
        "from": 35,
        "to": 40,
        "label": "data_dep: p"
      }
    ]
  }
]