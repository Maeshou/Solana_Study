[
  {
    "name": "submit",
    "inputs": [
      "ctx: Context < Submit >",
      "n: u64",
      "tip: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut seq = Vec :: new () ;"
      },
      {
        "id": 2,
        "label": "let mut i = 0u64 ;"
      },
      {
        "id": 3,
        "label": "while i < 3 { seq . extend_from_slice (& (n . wrapping_mul (i + 1)) . to_le_bytes ()) ; i = i + 1 ; }"
      },
      {
        "id": 4,
        "label": "seq . extend_from_slice (& (n . wrapping_mul (i + 1)) . to_le_bytes ()) ;"
      },
      {
        "id": 5,
        "label": "i = i + 1 ;"
      },
      {
        "id": 6,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . tally_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . member . key () , false) ,] ;"
      },
      {
        "id": 7,
        "label": "invoke (& Instruction { program_id : FIXED_TALLY_ID , accounts : metas , data : seq } , & [ctx . accounts . tally_hint . to_account_info () , ctx . accounts . tally_cell . to_account_info () , ctx . accounts . member . to_account_info ()]) ? ;"
      },
      {
        "id": 8,
        "label": "let mut program_ai = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "if ! ctx . remaining_accounts . is_empty () { program_ai = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 10,
        "label": "program_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "invoke (& Instruction { program_id : * program_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . report_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . member . key () , false) ,] , data : tip . to_le_bytes () . to_vec () , } , & [program_ai , ctx . accounts . report_pad . to_account_info () , ctx . accounts . member . to_account_info ()]) ? ;"
      },
      {
        "id": 12,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . member_token . to_account_info () , authority : ctx . accounts . bank_authority . to_account_info () }) , tip) ? ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: seq"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: seq"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: seq"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: metas"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: metas"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: seq"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: program_ai"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: program_ai"
      }
    ]
  }
]