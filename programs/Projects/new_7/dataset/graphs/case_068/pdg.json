[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < Configure >",
      "dst_program: Pubkey",
      "fee_bps: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let cfg = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "cfg . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "cfg . delegate_program = dst_program ;"
      },
      {
        "id": 4,
        "label": "cfg . fee_bps = fee_bps . min (1800) ;"
      },
      {
        "id": 5,
        "label": "cfg . sent = 0 ;"
      },
      {
        "id": 6,
        "label": "cfg . steps = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: cfg"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: cfg"
      }
    ]
  },
  {
    "name": "payout",
    "inputs": [
      "ctx: Context < Payout >",
      "gross: u64",
      "chunk_count: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let cfg = & mut ctx . accounts . config ;"
      },
      {
        "id": 10,
        "label": "let fee = gross * cfg . fee_bps as u64 / 10_000 ;"
      },
      {
        "id": 11,
        "label": "let mut net = if gross > fee { gross - fee } else { 0 } ;"
      },
      {
        "id": 12,
        "label": "gross - fee"
      },
      {
        "id": 13,
        "label": "0"
      },
      {
        "id": 14,
        "label": "if net == 0 { cfg . steps += 1 ; return Ok (()) ; }"
      },
      {
        "id": 15,
        "label": "cfg . steps += 1 ;"
      },
      {
        "id": 16,
        "label": "return Ok (()) ;"
      },
      {
        "id": 17,
        "label": "let mut factor = (seed % 11) as u64 + 1 ;"
      },
      {
        "id": 18,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 19,
        "label": "while i < chunk_count { let part = (net / 2) . max (1) ; if part > net { break ; } let ix = token_ix :: transfer (& cfg . delegate_program , & ctx . accounts . treasury_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: MissingProgram) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . treasury_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; net -= part ; cfg . sent += part ; cfg . steps += 1 ; let mut k = 0u8 ; while k < 3 { cfg . sent += factor % 3 ; k += 1 ; } factor += 1 ; if net == 0 { break ; } i += 1 ; }"
      },
      {
        "id": 20,
        "label": "let part = (net / 2) . max (1) ;"
      },
      {
        "id": 21,
        "label": "if part > net { break ; }"
      },
      {
        "id": 22,
        "label": "break ;"
      },
      {
        "id": 23,
        "label": "let ix = token_ix :: transfer (& cfg . delegate_program , & ctx . accounts . treasury_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;"
      },
      {
        "id": 24,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: MissingProgram) ? ;"
      },
      {
        "id": 25,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . treasury_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 26,
        "label": "net -= part ;"
      },
      {
        "id": 27,
        "label": "cfg . sent += part ;"
      },
      {
        "id": 28,
        "label": "cfg . steps += 1 ;"
      },
      {
        "id": 29,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 30,
        "label": "while k < 3 { cfg . sent += factor % 3 ; k += 1 ; }"
      },
      {
        "id": 31,
        "label": "cfg . sent += factor % 3 ;"
      },
      {
        "id": 32,
        "label": "k += 1 ;"
      },
      {
        "id": 33,
        "label": "factor += 1 ;"
      },
      {
        "id": 34,
        "label": "if net == 0 { break ; }"
      },
      {
        "id": 35,
        "label": "break ;"
      },
      {
        "id": 36,
        "label": "i += 1 ;"
      },
      {
        "id": 37,
        "label": "if net > 0 { let ix2 = token_ix :: transfer (& cfg . delegate_program , & ctx . accounts . treasury_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , net ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: MissingProgram) ? ; invoke (& ix2 , & [program_ai . clone () , ctx . accounts . treasury_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; cfg . sent += net ; }"
      },
      {
        "id": 38,
        "label": "let ix2 = token_ix :: transfer (& cfg . delegate_program , & ctx . accounts . treasury_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , net ,) ? ;"
      },
      {
        "id": 39,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: MissingProgram) ? ;"
      },
      {
        "id": 40,
        "label": "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . treasury_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 41,
        "label": "cfg . sent += net ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: cfg"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: fee"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: net"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: fee"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: net"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: cfg"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: factor"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: i"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: net"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: net"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: net"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: cfg"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: cfg"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: cfg"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: factor"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: factor"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: net"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: part"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: net"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: part"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: net"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: ix"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: cfg"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: part"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: program_ai"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: ix"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 11,
        "to": 26,
        "label": "data_dep: net"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: part"
      },
      {
        "from": 9,
        "to": 27,
        "label": "data_dep: cfg"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: part"
      },
      {
        "from": 9,
        "to": 28,
        "label": "data_dep: cfg"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: k"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: k"
      },
      {
        "from": 9,
        "to": 30,
        "label": "data_dep: cfg"
      },
      {
        "from": 17,
        "to": 30,
        "label": "data_dep: factor"
      },
      {
        "from": 29,
        "to": 30,
        "label": "data_dep: k"
      },
      {
        "from": 9,
        "to": 31,
        "label": "data_dep: cfg"
      },
      {
        "from": 17,
        "to": 31,
        "label": "data_dep: factor"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: k"
      },
      {
        "from": 17,
        "to": 33,
        "label": "data_dep: factor"
      },
      {
        "from": 11,
        "to": 34,
        "label": "data_dep: net"
      },
      {
        "from": 18,
        "to": 36,
        "label": "data_dep: i"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: net"
      },
      {
        "from": 9,
        "to": 37,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: net"
      },
      {
        "from": 24,
        "to": 37,
        "label": "data_dep: program_ai"
      },
      {
        "from": 9,
        "to": 37,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 37,
        "label": "data_dep: net"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: ix2"
      },
      {
        "from": 9,
        "to": 38,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 38,
        "label": "data_dep: net"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: program_ai"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: ix2"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: program_ai"
      },
      {
        "from": 9,
        "to": 41,
        "label": "data_dep: cfg"
      },
      {
        "from": 11,
        "to": 41,
        "label": "data_dep: net"
      }
    ]
  }
]