[
  {
    "name": "breed",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . lab ;"
      },
      {
        "id": 2,
        "label": "st . sessions += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . router . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "st . alt_paths += 1 ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "st . quarantine += 1 ;"
      },
      {
        "id": 12,
        "label": "st . fail_notes . push (((dna_a ^ dna_b) & 0xffff) as u16) ;"
      },
      {
        "id": 13,
        "label": "st . mix_bias = st . mix_bias . wrapping_add ((dna_a . wrapping_add (dna_b)) & 7) ;"
      },
      {
        "id": 14,
        "label": "merge"
      },
      {
        "id": 15,
        "label": "let scale = ((Clock :: get () ? . slot & 15) + 1) as u64 ;"
      },
      {
        "id": 16,
        "label": "let mut mixed : u128 = 0 ;"
      },
      {
        "id": 17,
        "label": "let mut i = 0u64 ;"
      },
      {
        "id": 18,
        "label": "Loop Start"
      },
      {
        "id": 19,
        "label": "mixed = mixed . wrapping_add (((dna_a ^ (i + st . mix_bias)) as u128) * ((dna_b + scale) as u128)) ;"
      },
      {
        "id": 20,
        "label": "i += 1 ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "let br = BreedBridge { parent_a : ctx . accounts . parent_a . to_account_info () , parent_b : ctx . accounts . parent_b . to_account_info () } ;"
      },
      {
        "id": 23,
        "label": "let mut payload = Vec :: with_capacity (24) ;"
      },
      {
        "id": 24,
        "label": "payload . extend_from_slice (& st . sessions . to_le_bytes ()) ;"
      },
      {
        "id": 25,
        "label": "payload . extend_from_slice (& (mixed as u64) . to_le_bytes ()) ;"
      },
      {
        "id": 26,
        "label": "payload . extend_from_slice (& tries . to_le_bytes ()) ;"
      },
      {
        "id": 27,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 28,
        "label": "br . send_mix (cx , payload) ? ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "while"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]