[
  {
    "name": "craft",
    "inputs": [
      "ctx: Context < Craft >",
      "seed: u64",
      "reward: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if seed % 3 == 1 { ctx . accounts . state . quality = 2 ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . state . quality = 2 ;"
      },
      {
        "id": 3,
        "label": "if seed % 4 == 2 { ctx . accounts . state . rolls = ctx . accounts . state . rolls . wrapping_add (1) ; }"
      },
      {
        "id": 4,
        "label": "ctx . accounts . state . rolls = ctx . accounts . state . rolls . wrapping_add (1) ;"
      },
      {
        "id": 5,
        "label": "let fixed_ix = Instruction { program_id : FIXED_LOG_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . log_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 6,
        "label": "invoke (& fixed_ix , & [ctx . accounts . log_marker . to_account_info () , ctx . accounts . log_slot . to_account_info () , ctx . accounts . crafter . to_account_info () ,]) ? ;"
      },
      {
        "id": 7,
        "label": "let mut prog = ctx . accounts . external_hint . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "if ! ctx . remaining_accounts . is_empty () { prog = ctx . remaining_accounts [0] . clone () ; ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (1) ; }"
      },
      {
        "id": 9,
        "label": "prog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (1) ;"
      },
      {
        "id": 11,
        "label": "let dyn_ix = Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . external_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : reward . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 12,
        "label": "invoke (& dyn_ix , & [prog , ctx . accounts . external_board . to_account_info () , ctx . accounts . crafter . to_account_info () ,]) ? ;"
      },
      {
        "id": 13,
        "label": "let t = Transfer { from : ctx . accounts . pool . to_account_info () , to : ctx . accounts . crafter_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ;"
      },
      {
        "id": 14,
        "label": "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;"
      },
      {
        "id": 15,
        "label": "token :: transfer (tctx , reward) ? ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: fixed_ix"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: prog"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: prog"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: prog"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: dyn_ix"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: prog"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: prog"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: t"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: tctx"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: t"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: tctx"
      }
    ]
  }
]