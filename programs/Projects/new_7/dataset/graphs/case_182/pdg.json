[
  {
    "name": "pay_reward",
    "inputs": [
      "tp: & Program < Token >",
      "from: & Account < TokenAccount >",
      "to: & Account < TokenAccount >",
      "auth: & AccountInfo",
      "amt: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "token :: transfer (CpiContext :: new (tp . to_account_info () , Transfer { from : from . to_account_info () , to : to . to_account_info () , authority : auth . clone () }) , amt)"
      }
    ],
    "edges": []
  },
  {
    "name": "act",
    "inputs": [
      "ctx: Context < Act >",
      "stage: u64",
      "reward: u64"
    ],
    "nodes": [
      {
        "id": 2,
        "label": "Entry"
      },
      {
        "id": 3,
        "label": "if stage > 3 { ctx . accounts . local . note = ctx . accounts . local . note . saturating_add (stage) ; }"
      },
      {
        "id": 4,
        "label": "ctx . accounts . local . note = ctx . accounts . local . note . saturating_add (stage) ;"
      },
      {
        "id": 5,
        "label": "let ix_fixed = Instruction { program_id : FIXED_PING_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . slot_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . runner . key () , false) ,] , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 6,
        "label": "invoke (& ix_fixed , & [ctx . accounts . slot_hint . to_account_info () , ctx . accounts . slot_cell . to_account_info () , ctx . accounts . runner . to_account_info () ,]) ? ;"
      },
      {
        "id": 7,
        "label": "let mut host = ctx . accounts . board_hint . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "if ! ctx . remaining_accounts . is_empty () { host = ctx . remaining_accounts [0] . clone () ; ctx . accounts . local . paths = ctx . accounts . local . paths . wrapping_add (1) ; }"
      },
      {
        "id": 9,
        "label": "host = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "ctx . accounts . local . paths = ctx . accounts . local . paths . wrapping_add (1) ;"
      },
      {
        "id": 11,
        "label": "let ix_dyn = Instruction { program_id : * host . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . board_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . runner . key () , false) ,] , data : reward . rotate_left (3) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 12,
        "label": "invoke (& ix_dyn , & [host , ctx . accounts . board_pad . to_account_info () , ctx . accounts . runner . to_account_info () ,]) ? ;"
      },
      {
        "id": 13,
        "label": "pay_reward (& ctx . accounts . token_program , & ctx . accounts . treasury , & ctx . accounts . user_token , & ctx . accounts . treasury_authority , reward)"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: ix_fixed"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: ix_fixed"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: host"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: host"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: host"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: ix_dyn"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: host"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: ix_dyn"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: host"
      }
    ]
  }
]