[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "bar: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "st . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "st . bar = bar ;"
      },
      {
        "id": 4,
        "label": "st . count = 12 ;"
      },
      {
        "id": 5,
        "label": "st . hash = bar . rotate_left (2) ;"
      },
      {
        "id": 6,
        "label": "st . alt = Pubkey :: new_from_array ([4u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "bind",
    "inputs": [
      "ctx: Context < Bind >",
      "id: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (st . admin , ctx . accounts . admin . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "st . alt = id ;"
      },
      {
        "id": 12,
        "label": "st . count = st . count . wrapping_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "process",
    "inputs": [
      "ctx: Context < Process >",
      "n: u64",
      "r: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "if n < 3 { st . hash = st . hash ^ 0xFA ; st . count += 1 ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "st . hash = st . hash ^ 0xFA ;"
      },
      {
        "id": 18,
        "label": "st . count += 1 ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut left = n ;"
      },
      {
        "id": 21,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 22,
        "label": "while i < r { let part = (left / 3) . max (2) ; if part >= left { break ; } let ix = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; left -= part ; st . count += 1 ; st . hash = st . hash . wrapping_add (part) . rotate_right (2) ; i += 1 ; if st . count % 3 == 1 { st . hash = st . hash . wrapping_add (15) ; } else { st . hash = st . hash . wrapping_sub (6) . wrapping_add (2) ; } }"
      },
      {
        "id": 23,
        "label": "let part = (left / 3) . max (2) ;"
      },
      {
        "id": 24,
        "label": "if part >= left { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let ix = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;"
      },
      {
        "id": 27,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& ix , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "left -= part ;"
      },
      {
        "id": 30,
        "label": "st . count += 1 ;"
      },
      {
        "id": 31,
        "label": "st . hash = st . hash . wrapping_add (part) . rotate_right (2) ;"
      },
      {
        "id": 32,
        "label": "i += 1 ;"
      },
      {
        "id": 33,
        "label": "if st . count % 3 == 1 { st . hash = st . hash . wrapping_add (15) ; } else { st . hash = st . hash . wrapping_sub (6) . wrapping_add (2) ; }"
      },
      {
        "id": 34,
        "label": "st . hash = st . hash . wrapping_add (15) ;"
      },
      {
        "id": 35,
        "label": "st . hash = st . hash . wrapping_sub (6) . wrapping_add (2) ;"
      },
      {
        "id": 36,
        "label": "if left > 2 { let half = left / 2 ; let ix2 = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , half ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; let ix3 = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , left - half ,) ? ; invoke (& ix3 , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; st . hash = st . hash . wrapping_add (left) ; }"
      },
      {
        "id": 37,
        "label": "let half = left / 2 ;"
      },
      {
        "id": 38,
        "label": "let ix2 = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , half ,) ? ;"
      },
      {
        "id": 39,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 40,
        "label": "invoke (& ix2 , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 41,
        "label": "let ix3 = token_ix :: transfer (& st . alt , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , left - half ,) ? ;"
      },
      {
        "id": 42,
        "label": "invoke (& ix3 , & [p . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 43,
        "label": "st . hash = st . hash . wrapping_add (left) ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: st"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: left"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: i"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: left"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: st"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: part"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: p"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: left"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: part"
      },
      {
        "from": 21,
        "to": 32,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: half"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: left"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: st"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: half"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: p"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: ix2"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: p"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: ix3"
      },
      {
        "from": 15,
        "to": 41,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 41,
        "label": "data_dep: left"
      },
      {
        "from": 37,
        "to": 41,
        "label": "data_dep: half"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: ix3"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 43,
        "label": "data_dep: left"
      }
    ]
  }
]