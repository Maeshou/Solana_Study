[
  {
    "name": "settle",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . arena ;"
      },
      {
        "id": 2,
        "label": "st . rounds += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . match_program . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "st . fast_lane += 1 ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "st . forfeit_count += 1 ;"
      },
      {
        "id": 12,
        "label": "st . abandon_log . push ((Clock :: get () ? . slot as u32 , (winner_score ^ loser_score) as u32)) ;"
      },
      {
        "id": 13,
        "label": "let jitter = (Clock :: get () ? . slot & 7) as i64 - 3 ;"
      },
      {
        "id": 14,
        "label": "st . elo = st . elo . saturating_add_signed (jitter) ;"
      },
      {
        "id": 15,
        "label": "st . lose_streak += 1 ;"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "let br = ArenaBridge { winner_nft : ctx . accounts . winner_nft . to_account_info () , loser_nft : ctx . accounts . loser_nft . to_account_info () , arena_vault : ctx . accounts . arena_vault . to_account_info () , } ;"
      },
      {
        "id": 18,
        "label": "let bonus = (winner_score . saturating_sub (loser_score) + 3) as u64 ;"
      },
      {
        "id": 19,
        "label": "let fee = ((winner_score + loser_score) / 10) as u64 ;"
      },
      {
        "id": 20,
        "label": "let mut p1 = Vec :: with_capacity (24) ;"
      },
      {
        "id": 21,
        "label": "p1 . extend_from_slice (& st . rounds . to_le_bytes ()) ;"
      },
      {
        "id": 22,
        "label": "p1 . extend_from_slice (& bonus . to_le_bytes ()) ;"
      },
      {
        "id": 23,
        "label": "p1 . extend_from_slice (& st . elo . to_le_bytes ()) ;"
      },
      {
        "id": 24,
        "label": "let cx1 = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 25,
        "label": "br . reward (cx1 , p1) ? ;"
      },
      {
        "id": 26,
        "label": "let mut p2 = Vec :: with_capacity (16) ;"
      },
      {
        "id": 27,
        "label": "p2 . extend_from_slice (& fee . to_le_bytes ()) ;"
      },
      {
        "id": 28,
        "label": "p2 . extend_from_slice (& (st . fast_lane + st . forfeit_count) . to_le_bytes ()) ;"
      },
      {
        "id": 29,
        "label": "let cx2 = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 30,
        "label": "br . fee (cx2 , p2) ? ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 9,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]