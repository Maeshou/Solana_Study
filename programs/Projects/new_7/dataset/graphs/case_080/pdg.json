[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "hard: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "s . hard = hard ;"
      },
      {
        "id": 4,
        "label": "s . round = 9 ;"
      },
      {
        "id": 5,
        "label": "s . note = hard . rotate_right (3) ;"
      },
      {
        "id": 6,
        "label": "s . prog_id = Pubkey :: new_from_array ([2u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "switch",
    "inputs": [
      "ctx: Context < Switch >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (s . operator , ctx . accounts . operator . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "s . prog_id = pid ;"
      },
      {
        "id": 12,
        "label": "s . round = s . round . wrapping_add (6) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "pay",
    "inputs": [
      "ctx: Context < Pay >",
      "tickets: u64",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "if tickets < 8 { s . round += 2 ; s . note = s . note . wrapping_add (100) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "s . round += 2 ;"
      },
      {
        "id": 18,
        "label": "s . note = s . note . wrapping_add (100) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut rest = tickets ;"
      },
      {
        "id": 21,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 22,
        "label": "let mut checksum = 17u64 ;"
      },
      {
        "id": 23,
        "label": "while i < times { let step = (rest / 3) . max (4) ; if step >= rest { break ; } let ix = token_ix :: transfer (& s . prog_id , & ctx . accounts . reserve . key () , & ctx . accounts . gamer . key () , & ctx . accounts . operator . key () , & [] , step ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [p . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . gamer . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; rest -= step ; i += 1 ; s . round += 1 ; checksum = checksum . wrapping_add (step ^ 0xAA) ; if checksum % 5 == 0 { s . note = s . note . wrapping_add (checksum) ; } else { s . note = s . note . wrapping_sub (13) . wrapping_add (3) ; } if rest <= s . hard / 3 { s . note = s . note . rotate_left (2) ; } else { s . note = s . note . rotate_right (1) ; } }"
      },
      {
        "id": 24,
        "label": "let step = (rest / 3) . max (4) ;"
      },
      {
        "id": 25,
        "label": "if step >= rest { break ; }"
      },
      {
        "id": 26,
        "label": "break ;"
      },
      {
        "id": 27,
        "label": "let ix = token_ix :: transfer (& s . prog_id , & ctx . accounts . reserve . key () , & ctx . accounts . gamer . key () , & ctx . accounts . operator . key () , & [] , step ,) ? ;"
      },
      {
        "id": 28,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 29,
        "label": "invoke (& ix , & [p . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . gamer . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 30,
        "label": "rest -= step ;"
      },
      {
        "id": 31,
        "label": "i += 1 ;"
      },
      {
        "id": 32,
        "label": "s . round += 1 ;"
      },
      {
        "id": 33,
        "label": "checksum = checksum . wrapping_add (step ^ 0xAA) ;"
      },
      {
        "id": 34,
        "label": "if checksum % 5 == 0 { s . note = s . note . wrapping_add (checksum) ; } else { s . note = s . note . wrapping_sub (13) . wrapping_add (3) ; }"
      },
      {
        "id": 35,
        "label": "s . note = s . note . wrapping_add (checksum) ;"
      },
      {
        "id": 36,
        "label": "s . note = s . note . wrapping_sub (13) . wrapping_add (3) ;"
      },
      {
        "id": 37,
        "label": "if rest <= s . hard / 3 { s . note = s . note . rotate_left (2) ; } else { s . note = s . note . rotate_right (1) ; }"
      },
      {
        "id": 38,
        "label": "s . note = s . note . rotate_left (2) ;"
      },
      {
        "id": 39,
        "label": "s . note = s . note . rotate_right (1) ;"
      },
      {
        "id": 40,
        "label": "if rest > 5 { let ix2 = token_ix :: transfer (& s . prog_id , & ctx . accounts . reserve . key () , & ctx . accounts . gamer . key () , & ctx . accounts . operator . key () , & [] , rest - 5 ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [p . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . gamer . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; s . note = s . note . wrapping_add (rest - 5) ; }"
      },
      {
        "id": 41,
        "label": "let ix2 = token_ix :: transfer (& s . prog_id , & ctx . accounts . reserve . key () , & ctx . accounts . gamer . key () , & ctx . accounts . operator . key () , & [] , rest - 5 ,) ? ;"
      },
      {
        "id": 42,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 43,
        "label": "invoke (& ix2 , & [p . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . gamer . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 44,
        "label": "s . note = s . note . wrapping_add (rest - 5) ;"
      },
      {
        "id": 45,
        "label": "let mut z = 1u8 ;"
      },
      {
        "id": 46,
        "label": "while z < 4 { s . round += 1 ; s . note = s . note . rotate_right (z as u32) . wrapping_add (7) ; z += 1 ; }"
      },
      {
        "id": 47,
        "label": "s . round += 1 ;"
      },
      {
        "id": 48,
        "label": "s . note = s . note . rotate_right (z as u32) . wrapping_add (7) ;"
      },
      {
        "id": 49,
        "label": "z += 1 ;"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: rest"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: i"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: checksum"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: checksum"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: checksum"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: checksum"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: checksum"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: step"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: rest"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: step"
      },
      {
        "from": 20,
        "to": 25,
        "label": "data_dep: rest"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: step"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: p"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: ix"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 30,
        "label": "data_dep: rest"
      },
      {
        "from": 24,
        "to": 30,
        "label": "data_dep: step"
      },
      {
        "from": 21,
        "to": 31,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: checksum"
      },
      {
        "from": 22,
        "to": 33,
        "label": "data_dep: checksum"
      },
      {
        "from": 24,
        "to": 33,
        "label": "data_dep: step"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: checksum"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 34,
        "label": "data_dep: checksum"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 35,
        "label": "data_dep: checksum"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: rest"
      },
      {
        "from": 28,
        "to": 40,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: rest"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 41,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 41,
        "label": "data_dep: rest"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: p"
      },
      {
        "from": 41,
        "to": 43,
        "label": "data_dep: ix2"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 44,
        "label": "data_dep: rest"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: z"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: z"
      },
      {
        "from": 15,
        "to": 46,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 46,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 46,
        "label": "data_dep: s"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: z"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: z"
      },
      {
        "from": 15,
        "to": 47,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 48,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 48,
        "label": "data_dep: s"
      },
      {
        "from": 45,
        "to": 48,
        "label": "data_dep: z"
      },
      {
        "from": 45,
        "to": 49,
        "label": "data_dep: z"
      }
    ]
  }
]