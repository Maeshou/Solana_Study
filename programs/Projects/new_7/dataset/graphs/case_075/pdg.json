[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . cap = cap ;"
      },
      {
        "id": 4,
        "label": "s . hist = 10 ;"
      },
      {
        "id": 5,
        "label": "s . gain = 1u64 . wrapping_add (cap % 17) ;"
      },
      {
        "id": 6,
        "label": "s . route = Pubkey :: new_from_array ([3u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "route_to",
    "inputs": [
      "ctx: Context < RouteTo >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (s . admin , ctx . accounts . admin . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "s . route = pid ;"
      },
      {
        "id": 12,
        "label": "s . hist = s . hist . wrapping_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "airdrop",
    "inputs": [
      "ctx: Context < Airdrop >",
      "drop: u64",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "if drop < 6 { s . hist += 3 ; s . gain = s . gain . rotate_left (1) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "s . hist += 3 ;"
      },
      {
        "id": 18,
        "label": "s . gain = s . gain . rotate_left (1) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut rest = drop ;"
      },
      {
        "id": 21,
        "label": "let mut turn = 0u8 ;"
      },
      {
        "id": 22,
        "label": "while turn < rounds { let chunk = (rest / 5) . max (2) ; if chunk >= rest { break ; } let ix = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , chunk ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; rest -= chunk ; s . hist += 1 ; s . gain = s . gain . wrapping_add (chunk ^ 29) ; turn += 1 ; if s . gain % 3 == 0 { s . gain = s . gain . wrapping_add (13) ; } else { s . gain = s . gain . wrapping_sub (2) . wrapping_add (21) ; } }"
      },
      {
        "id": 23,
        "label": "let chunk = (rest / 5) . max (2) ;"
      },
      {
        "id": 24,
        "label": "if chunk >= rest { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let ix = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , chunk ,) ? ;"
      },
      {
        "id": 27,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "rest -= chunk ;"
      },
      {
        "id": 30,
        "label": "s . hist += 1 ;"
      },
      {
        "id": 31,
        "label": "s . gain = s . gain . wrapping_add (chunk ^ 29) ;"
      },
      {
        "id": 32,
        "label": "turn += 1 ;"
      },
      {
        "id": 33,
        "label": "if s . gain % 3 == 0 { s . gain = s . gain . wrapping_add (13) ; } else { s . gain = s . gain . wrapping_sub (2) . wrapping_add (21) ; }"
      },
      {
        "id": 34,
        "label": "s . gain = s . gain . wrapping_add (13) ;"
      },
      {
        "id": 35,
        "label": "s . gain = s . gain . wrapping_sub (2) . wrapping_add (21) ;"
      },
      {
        "id": 36,
        "label": "if rest > 3 { let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , rest - 3 ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; s . gain = s . gain . wrapping_add (rest - 3) ; }"
      },
      {
        "id": 37,
        "label": "let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , rest - 3 ,) ? ;"
      },
      {
        "id": 38,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 39,
        "label": "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 40,
        "label": "s . gain = s . gain . wrapping_add (rest - 3) ;"
      },
      {
        "id": 41,
        "label": "let mut j = 1u8 ;"
      },
      {
        "id": 42,
        "label": "while j < 4 { s . hist += 1 ; s . gain = s . gain . rotate_right (j as u32) ; j += 1 ; }"
      },
      {
        "id": 43,
        "label": "s . hist += 1 ;"
      },
      {
        "id": 44,
        "label": "s . gain = s . gain . rotate_right (j as u32) ;"
      },
      {
        "id": 45,
        "label": "j += 1 ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: rest"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: turn"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: turn"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: turn"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: chunk"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: chunk"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: rest"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: chunk"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: program_ai"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: rest"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: chunk"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: chunk"
      },
      {
        "from": 21,
        "to": 32,
        "label": "data_dep: turn"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: rest"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: program_ai"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: ix2"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: rest"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: j"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: j"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: j"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: j"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 41,
        "to": 44,
        "label": "data_dep: j"
      },
      {
        "from": 41,
        "to": 45,
        "label": "data_dep: j"
      }
    ]
  }
]