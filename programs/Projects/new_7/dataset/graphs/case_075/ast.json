[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "cap: u64"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "s . admin = ctx . accounts . admin . key () ;",
      "s . cap = cap ;",
      "s . hist = 10 ;",
      "s . gain = 1u64 . wrapping_add (cap % 17) ;",
      "s . route = Pubkey :: new_from_array ([3u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "route_to",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RouteTo >",
      "pid: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "require_keys_eq ! (s . admin , ctx . accounts . admin . key () , ErrorCode :: Denied) ;",
      "s . route = pid ;",
      "s . hist = s . hist . wrapping_add (2) ;",
      "Ok (())"
    ]
  },
  {
    "name": "airdrop",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Airdrop >",
      "drop: u64",
      "rounds: u8"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "if drop < 6",
      "{",
      "s . hist += 3 ;",
      "s . gain = s . gain . rotate_left (1) ;",
      "return Ok (()) ;",
      "}",
      "let mut rest = drop ;",
      "let mut turn = 0u8 ;",
      "while turn < rounds",
      "{",
      "let chunk = (rest / 5) . max (2) ;",
      "if chunk >= rest",
      "{",
      "break ;",
      "} let ix = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , chunk ,) ? ;",
      "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "rest -= chunk ;",
      "s . hist += 1 ;",
      "s . gain = s . gain . wrapping_add (chunk ^ 29) ;",
      "turn += 1 ;",
      "if s . gain % 3 == 0",
      "{",
      "s . gain = s . gain . wrapping_add (13) ;",
      "} else",
      "{",
      "s . gain = s . gain . wrapping_sub (2) . wrapping_add (21) ;",
      "}",
      "}",
      "if rest > 3",
      "{",
      "let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . palette_bank . key () , & ctx . accounts . artist_wallet . key () , & ctx . accounts . admin . key () , & [] , rest - 3 ,) ? ;",
      "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "s . gain = s . gain . wrapping_add (rest - 3) ;",
      "}",
      "let mut j = 1u8 ;",
      "while j < 4",
      "{",
      "s . hist += 1 ;",
      "s . gain = s . gain . rotate_right (j as u32) ;",
      "j += 1 ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "State",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "cap",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "hist",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "gain",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "route",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RouteTo",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Airdrop",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "palette_bank",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "artist_wallet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]