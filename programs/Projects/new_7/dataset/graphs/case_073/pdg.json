[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "ceiling: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . chair = ctx . accounts . chair . key () ;"
      },
      {
        "id": 3,
        "label": "s . ceiling = ceiling ;"
      },
      {
        "id": 4,
        "label": "s . rounded = 6 ;"
      },
      {
        "id": 5,
        "label": "s . audit = ceiling . wrapping_mul (3) ;"
      },
      {
        "id": 6,
        "label": "s . plug = Pubkey :: new_from_array ([5u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "plug",
    "inputs": [
      "ctx: Context < Plug >",
      "id: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (s . chair , ctx . accounts . chair . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "s . plug = id ;"
      },
      {
        "id": 12,
        "label": "s . rounded = s . rounded . wrapping_add (4) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "cash: u64",
      "n: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "if cash >= s . ceiling { s . rounded += 2 ; s . audit = s . audit ^ 0x33 ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "s . rounded += 2 ;"
      },
      {
        "id": 18,
        "label": "s . audit = s . audit ^ 0x33 ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut left = cash ;"
      },
      {
        "id": 21,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 22,
        "label": "while i < n { let part = (left / 3) . max (2) ; if part >= left { break ; } let ix = token_ix :: transfer (& s . plug , & ctx . accounts . treasury . key () , & ctx . accounts . customer . key () , & ctx . accounts . chair . key () , & [] , part ,) ? ; invoke (& ix , & [ctx . accounts . external_program . clone () , ctx . accounts . treasury . to_account_info () , ctx . accounts . customer . to_account_info () , ctx . accounts . chair . to_account_info () ,] ,) ? ; left -= part ; s . rounded += 1 ; s . audit = s . audit . wrapping_add (part) . rotate_left (1) ; i += 1 ; if s . rounded % 2 == 1 { s . audit = s . audit . wrapping_add (7) ; } else { s . audit = s . audit . wrapping_sub (3) ; } }"
      },
      {
        "id": 23,
        "label": "let part = (left / 3) . max (2) ;"
      },
      {
        "id": 24,
        "label": "if part >= left { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let ix = token_ix :: transfer (& s . plug , & ctx . accounts . treasury . key () , & ctx . accounts . customer . key () , & ctx . accounts . chair . key () , & [] , part ,) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [ctx . accounts . external_program . clone () , ctx . accounts . treasury . to_account_info () , ctx . accounts . customer . to_account_info () , ctx . accounts . chair . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "left -= part ;"
      },
      {
        "id": 29,
        "label": "s . rounded += 1 ;"
      },
      {
        "id": 30,
        "label": "s . audit = s . audit . wrapping_add (part) . rotate_left (1) ;"
      },
      {
        "id": 31,
        "label": "i += 1 ;"
      },
      {
        "id": 32,
        "label": "if s . rounded % 2 == 1 { s . audit = s . audit . wrapping_add (7) ; } else { s . audit = s . audit . wrapping_sub (3) ; }"
      },
      {
        "id": 33,
        "label": "s . audit = s . audit . wrapping_add (7) ;"
      },
      {
        "id": 34,
        "label": "s . audit = s . audit . wrapping_sub (3) ;"
      },
      {
        "id": 35,
        "label": "if left > 1 { let ix2 = token_ix :: transfer (& s . plug , & ctx . accounts . treasury . key () , & ctx . accounts . customer . key () , & ctx . accounts . chair . key () , & [] , left - 1 ,) ? ; invoke (& ix2 , & [ctx . accounts . external_program . clone () , ctx . accounts . treasury . to_account_info () , ctx . accounts . customer . to_account_info () , ctx . accounts . chair . to_account_info () ,] ,) ? ; s . audit = s . audit . wrapping_add (left - 1) ; }"
      },
      {
        "id": 36,
        "label": "let ix2 = token_ix :: transfer (& s . plug , & ctx . accounts . treasury . key () , & ctx . accounts . customer . key () , & ctx . accounts . chair . key () , & [] , left - 1 ,) ? ;"
      },
      {
        "id": 37,
        "label": "invoke (& ix2 , & [ctx . accounts . external_program . clone () , ctx . accounts . treasury . to_account_info () , ctx . accounts . customer . to_account_info () , ctx . accounts . chair . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 38,
        "label": "s . audit = s . audit . wrapping_add (left - 1) ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: left"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: i"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: left"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: part"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 20,
        "to": 28,
        "label": "data_dep: left"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 30,
        "label": "data_dep: part"
      },
      {
        "from": 21,
        "to": 31,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 35,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 35,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 35,
        "label": "data_dep: left"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: ix2"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 38,
        "label": "data_dep: left"
      }
    ]
  }
]