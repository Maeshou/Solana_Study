[
  {
    "name": "submit",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Submit >",
      "score: u64",
      "gift: u64"
    ],
    "attributes": [],
    "body": [
      "if score > 90",
      "{",
      "ctx . accounts . journal . stars = ctx . accounts . journal . stars . saturating_add (1) ;",
      "}",
      "if score < 50",
      "{",
      "ctx . accounts . journal . warnings = ctx . accounts . journal . warnings . wrapping_add (1) ;",
      "}",
      "let fixed_ix = Instruction { program_id : FIXED_GAUGE , accounts : vec ! [AccountMeta :: new (ctx . accounts . gauge_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data : score . to_le_bytes () . to_vec () , } ;",
      "invoke (& fixed_ix , & [ctx . accounts . gauge_marker . to_account_info () , ctx . accounts . gauge_slot . to_account_info () , ctx . accounts . student . to_account_info () ,]) ? ;",
      "let mut prog = ctx . accounts . signal_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "prog = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . journal . paths = ctx . accounts . journal . paths . saturating_add (5) ;",
      "}",
      "let dyn_ix = Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data : gift . to_le_bytes () . to_vec () , } ;",
      "invoke (& dyn_ix , & [prog , ctx . accounts . signal_board . to_account_info () , ctx . accounts . student . to_account_info () ,]) ? ;",
      "let t = Transfer { from : ctx . accounts . reward_pool . to_account_info () , to : ctx . accounts . student_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ;",
      "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;",
      "token :: transfer (tctx , gift) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Submit",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , GradeJournal >"
      },
      {
        "name": "gauge_slot",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "student",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "gauge_marker",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signal_board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signal_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "reward_pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "student_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "pool_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "GradeJournal",
    "node_type": "struct",
    "fields": [
      {
        "name": "stars",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "warnings",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "paths",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]