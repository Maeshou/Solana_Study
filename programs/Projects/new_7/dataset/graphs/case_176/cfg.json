[
  {
    "name": "open",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut metas = Vec :: with_capacity (2) ;"
      },
      {
        "id": 2,
        "label": "metas . push (AccountMeta :: new (ctx . accounts . incubator . key () , false)) ;"
      },
      {
        "id": 3,
        "label": "metas . push (AccountMeta :: new_readonly (ctx . accounts . owner . key () , false)) ;"
      },
      {
        "id": 4,
        "label": "let mix = seed . rotate_right (13) . wrapping_add (777) ;"
      },
      {
        "id": 5,
        "label": "let mut data = seed . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 6,
        "label": "data . extend_from_slice (& mix . to_le_bytes ()) ;"
      },
      {
        "id": 7,
        "label": "invoke (& Instruction { program_id : FIXED_HATCH_ID , accounts : metas , data } , & [ctx . accounts . hatch_hint . to_account_info () , ctx . accounts . incubator . to_account_info () , ctx . accounts . owner . to_account_info ()]) ? ;"
      },
      {
        "id": 8,
        "label": "let mut p = ctx . accounts . notify_hint . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "invoke (& Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : grant . to_le_bytes () . to_vec () , } , & [p , ctx . accounts . notice_board . to_account_info () , ctx . accounts . owner . to_account_info ()]) ? ;"
      },
      {
        "id": 18,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . chest . to_account_info () , to : ctx . accounts . owner_token . to_account_info () , authority : ctx . accounts . chest_authority . to_account_info () }) , grant) ? ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  }
]