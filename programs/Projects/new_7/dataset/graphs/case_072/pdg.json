[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "quota: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "st . quota = quota ;"
      },
      {
        "id": 4,
        "label": "st . turn = 7 ;"
      },
      {
        "id": 5,
        "label": "st . metric = quota . wrapping_add (29) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "set_flag",
    "inputs": [
      "ctx: Context < SetFlag >",
      "tag: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "require_keys_eq ! (st . owner , ctx . accounts . owner . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 10,
        "label": "st . flag = tag ;"
      },
      {
        "id": 11,
        "label": "st . turn = st . turn . wrapping_add (5) ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: st"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "route",
    "inputs": [
      "ctx: Context < Route >",
      "energy: u64",
      "cycles: u8"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 15,
        "label": "if energy < 5 { st . turn = st . turn . wrapping_mul (2) ; st . metric = st . metric ^ 0x55 ; return Ok (()) ; }"
      },
      {
        "id": 16,
        "label": "st . turn = st . turn . wrapping_mul (2) ;"
      },
      {
        "id": 17,
        "label": "st . metric = st . metric ^ 0x55 ;"
      },
      {
        "id": 18,
        "label": "return Ok (()) ;"
      },
      {
        "id": 19,
        "label": "let mut remain = energy ;"
      },
      {
        "id": 20,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 21,
        "label": "while i < cycles { let part = (remain / 4) . max (5) ; if part >= remain { break ; } let ix = token_ix :: transfer (& st . flag , & ctx . accounts . tank . key () , & ctx . accounts . consumer . key () , & ctx . accounts . owner . key () , & [] , part ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [p . clone () , ctx . accounts . tank . to_account_info () , ctx . accounts . consumer . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; remain -= part ; st . turn = st . turn . wrapping_add (1) ; st . metric = st . metric . wrapping_add (part % 23) ; i += 1 ; if remain <= st . quota / 2 { st . metric = st . metric . rotate_left (2) ; } else { st . metric = st . metric . rotate_right (1) ; } }"
      },
      {
        "id": 22,
        "label": "let part = (remain / 4) . max (5) ;"
      },
      {
        "id": 23,
        "label": "if part >= remain { break ; }"
      },
      {
        "id": 24,
        "label": "break ;"
      },
      {
        "id": 25,
        "label": "let ix = token_ix :: transfer (& st . flag , & ctx . accounts . tank . key () , & ctx . accounts . consumer . key () , & ctx . accounts . owner . key () , & [] , part ,) ? ;"
      },
      {
        "id": 26,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [p . clone () , ctx . accounts . tank . to_account_info () , ctx . accounts . consumer . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "remain -= part ;"
      },
      {
        "id": 29,
        "label": "st . turn = st . turn . wrapping_add (1) ;"
      },
      {
        "id": 30,
        "label": "st . metric = st . metric . wrapping_add (part % 23) ;"
      },
      {
        "id": 31,
        "label": "i += 1 ;"
      },
      {
        "id": 32,
        "label": "if remain <= st . quota / 2 { st . metric = st . metric . rotate_left (2) ; } else { st . metric = st . metric . rotate_right (1) ; }"
      },
      {
        "id": 33,
        "label": "st . metric = st . metric . rotate_left (2) ;"
      },
      {
        "id": 34,
        "label": "st . metric = st . metric . rotate_right (1) ;"
      },
      {
        "id": 35,
        "label": "if remain > 4 { let ix2 = token_ix :: transfer (& st . flag , & ctx . accounts . tank . key () , & ctx . accounts . consumer . key () , & ctx . accounts . owner . key () , & [] , remain - 4 ,) ? ; let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [p . clone () , ctx . accounts . tank . to_account_info () , ctx . accounts . consumer . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; st . metric = st . metric . wrapping_add (remain - 4) ; }"
      },
      {
        "id": 36,
        "label": "let ix2 = token_ix :: transfer (& st . flag , & ctx . accounts . tank . key () , & ctx . accounts . consumer . key () , & ctx . accounts . owner . key () , & [] , remain - 4 ,) ? ;"
      },
      {
        "id": 37,
        "label": "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 38,
        "label": "invoke (& ix2 , & [p . clone () , ctx . accounts . tank . to_account_info () , ctx . accounts . consumer . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 39,
        "label": "st . metric = st . metric . wrapping_add (remain - 4) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: remain"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: i"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: part"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: remain"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: part"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: remain"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: ix"
      },
      {
        "from": 14,
        "to": 25,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: part"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: p"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remain"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: part"
      },
      {
        "from": 14,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: part"
      },
      {
        "from": 20,
        "to": 31,
        "label": "data_dep: i"
      },
      {
        "from": 19,
        "to": 32,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remain"
      },
      {
        "from": 26,
        "to": 35,
        "label": "data_dep: p"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remain"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: ix2"
      },
      {
        "from": 14,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 36,
        "label": "data_dep: remain"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: p"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: ix2"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: p"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      }
    ]
  }
]