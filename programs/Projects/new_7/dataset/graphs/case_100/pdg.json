[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let hub_state = & mut ctx . accounts . hub_state ;"
      },
      {
        "id": 2,
        "label": "hub_state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "hub_state . cap = cap ;"
      },
      {
        "id": 4,
        "label": "hub_state . tick = 12 ;"
      },
      {
        "id": 5,
        "label": "hub_state . marker = 0x9090 ;"
      },
      {
        "id": 6,
        "label": "hub_state . route = Pubkey :: new_from_array ([6u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: hub_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: hub_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: hub_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: hub_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: hub_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: hub_state"
      }
    ]
  },
  {
    "name": "set",
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let hub_state = & mut ctx . accounts . hub_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (hub_state . operator , ctx . accounts . operator . key () , HubError :: OperatorOnly) ;"
      },
      {
        "id": 11,
        "label": "hub_state . route = p ;"
      },
      {
        "id": 12,
        "label": "hub_state . tick = hub_state . tick . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: hub_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: hub_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: hub_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: hub_state"
      }
    ]
  },
  {
    "name": "send",
    "inputs": [
      "ctx: Context < Send >",
      "units: u64",
      "loops: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let hub_state = & mut ctx . accounts . hub_state ;"
      },
      {
        "id": 16,
        "label": "if units > hub_state . cap { hub_state . marker = hub_state . marker . wrapping_add (units ^ 0x44) ; return Err (HubError :: OverCap . into ()) ; }"
      },
      {
        "id": 17,
        "label": "hub_state . marker = hub_state . marker . wrapping_add (units ^ 0x44) ;"
      },
      {
        "id": 18,
        "label": "return Err (HubError :: OverCap . into ()) ;"
      },
      {
        "id": 19,
        "label": "let mut remain = units ;"
      },
      {
        "id": 20,
        "label": "let mut round : u8 = 0 ;"
      },
      {
        "id": 21,
        "label": "while round < loops { let part = (remain / 3) . max (3) ; if part >= remain { break ; } let ix = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , part ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (HubError :: NoProgram) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; remain = remain . saturating_sub (part) ; hub_state . tick = hub_state . tick . saturating_add (1) ; hub_state . marker = hub_state . marker . wrapping_add (part ^ 0x06) ; if hub_state . tick % 2 == 1 { hub_state . marker = hub_state . marker . rotate_left (1) . wrapping_add (3) ; let mut c : u8 = 1 ; while c < 3 { hub_state . tick = hub_state . tick . saturating_add (1) ; c = c . saturating_add (1) ; } } else { hub_state . marker = hub_state . marker . rotate_right (2) . wrapping_add (9) ; } round = round . saturating_add (1) ; }"
      },
      {
        "id": 22,
        "label": "let part = (remain / 3) . max (3) ;"
      },
      {
        "id": 23,
        "label": "if part >= remain { break ; }"
      },
      {
        "id": 24,
        "label": "break ;"
      },
      {
        "id": 25,
        "label": "let ix = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , part ,) ? ;"
      },
      {
        "id": 26,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (HubError :: NoProgram) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "remain = remain . saturating_sub (part) ;"
      },
      {
        "id": 29,
        "label": "hub_state . tick = hub_state . tick . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "hub_state . marker = hub_state . marker . wrapping_add (part ^ 0x06) ;"
      },
      {
        "id": 31,
        "label": "if hub_state . tick % 2 == 1 { hub_state . marker = hub_state . marker . rotate_left (1) . wrapping_add (3) ; let mut c : u8 = 1 ; while c < 3 { hub_state . tick = hub_state . tick . saturating_add (1) ; c = c . saturating_add (1) ; } } else { hub_state . marker = hub_state . marker . rotate_right (2) . wrapping_add (9) ; }"
      },
      {
        "id": 32,
        "label": "hub_state . marker = hub_state . marker . rotate_left (1) . wrapping_add (3) ;"
      },
      {
        "id": 33,
        "label": "let mut c : u8 = 1 ;"
      },
      {
        "id": 34,
        "label": "while c < 3 { hub_state . tick = hub_state . tick . saturating_add (1) ; c = c . saturating_add (1) ; }"
      },
      {
        "id": 35,
        "label": "hub_state . tick = hub_state . tick . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "c = c . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "hub_state . marker = hub_state . marker . rotate_right (2) . wrapping_add (9) ;"
      },
      {
        "id": 38,
        "label": "round = round . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "if remain > 2 { let first = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , remain / 2 ,) ? ; let second = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , remain - (remain / 2) ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (HubError :: NoProgram) ? ; invoke (& first , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; invoke (& second , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; hub_state . marker = hub_state . marker . wrapping_add (remain) . rotate_left (1) ; }"
      },
      {
        "id": 40,
        "label": "let first = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , remain / 2 ,) ? ;"
      },
      {
        "id": 41,
        "label": "let second = token_ix :: transfer (& hub_state . route , & ctx . accounts . vault . key () , & ctx . accounts . beneficiary . key () , & ctx . accounts . operator . key () , & [] , remain - (remain / 2) ,) ? ;"
      },
      {
        "id": 42,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (HubError :: NoProgram) ? ;"
      },
      {
        "id": 43,
        "label": "invoke (& first , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 44,
        "label": "invoke (& second , & [program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . beneficiary . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 45,
        "label": "hub_state . marker = hub_state . marker . wrapping_add (remain) . rotate_left (1) ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: hub_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: remain"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remain"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: hub_state"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: part"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: remain"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: part"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: remain"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: hub_state"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: part"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remain"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: hub_state"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      },
      {
        "from": 26,
        "to": 39,
        "label": "data_dep: program_ai"
      },
      {
        "from": 26,
        "to": 39,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remain"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: first"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 40,
        "label": "data_dep: remain"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: second"
      },
      {
        "from": 15,
        "to": 41,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 41,
        "label": "data_dep: remain"
      },
      {
        "from": 19,
        "to": 41,
        "label": "data_dep: remain"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: program_ai"
      },
      {
        "from": 40,
        "to": 43,
        "label": "data_dep: first"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: program_ai"
      },
      {
        "from": 41,
        "to": 44,
        "label": "data_dep: second"
      },
      {
        "from": 42,
        "to": 44,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: hub_state"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: hub_state"
      },
      {
        "from": 19,
        "to": 45,
        "label": "data_dep: remain"
      }
    ]
  }
]