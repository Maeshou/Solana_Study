[
  {
    "name": "craft_mix",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . counter_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 2,
        "label": "invoke (& ix , & [ctx . accounts . counter_hint . to_account_info () , ctx . accounts . counter_cell . to_account_info () , ctx . accounts . crafter . to_account_info () ,]) ? ;"
      },
      {
        "id": 3,
        "label": "let mut prog = ctx . accounts . feed_hint . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "prog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "let dyn_ix = Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . feed_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : reward . rotate_left (3) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 13,
        "label": "invoke (& dyn_ix , & [prog , ctx . accounts . feed_board . to_account_info () , ctx . accounts . crafter . to_account_info () ,]) ? ;"
      },
      {
        "id": 14,
        "label": "ctx . accounts . pay_with_tokens (reward) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  }
]