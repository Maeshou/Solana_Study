[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "seed_tag: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let stipend_state = & mut ctx . accounts . stipend_state ;"
      },
      {
        "id": 2,
        "label": "stipend_state . guild_master = ctx . accounts . guild_master . key () ;"
      },
      {
        "id": 3,
        "label": "stipend_state . seed_tag = seed_tag ;"
      },
      {
        "id": 4,
        "label": "stipend_state . bump = * ctx . bumps . get (\"dispatcher\") . unwrap () ;"
      },
      {
        "id": 5,
        "label": "stipend_state . total_rounds = 6 ;"
      },
      {
        "id": 6,
        "label": "stipend_state . telemetry = 123 ;"
      },
      {
        "id": 7,
        "label": "stipend_state . route_program_id = Pubkey :: new_unique () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: stipend_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: stipend_state"
      }
    ]
  },
  {
    "name": "rekey",
    "inputs": [
      "ctx: Context < Rekey >",
      "new_pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let stipend_state = & mut ctx . accounts . stipend_state ;"
      },
      {
        "id": 11,
        "label": "require_keys_eq ! (stipend_state . guild_master , ctx . accounts . guild_master . key () , StipendError :: MasterOnly) ;"
      },
      {
        "id": 12,
        "label": "stipend_state . route_program_id = new_pid ;"
      },
      {
        "id": 13,
        "label": "stipend_state . total_rounds = stipend_state . total_rounds . saturating_add (3) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: stipend_state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: stipend_state"
      }
    ]
  },
  {
    "name": "drop_fund",
    "inputs": [
      "ctx: Context < DropFund >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let stipend_state = & mut ctx . accounts . stipend_state ;"
      },
      {
        "id": 17,
        "label": "if amount < 4 { stipend_state . telemetry = stipend_state . telemetry . wrapping_add (7) ; return Ok (()) ; }"
      },
      {
        "id": 18,
        "label": "stipend_state . telemetry = stipend_state . telemetry . wrapping_add (7) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let ix = Instruction { program_id : stipend_state . route_program_id , accounts : vec ! [AccountMeta :: new (ctx . accounts . treasury . key () , false) , AccountMeta :: new (ctx . accounts . member_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . dispatcher . key () , true) ,] , data : { let mut payload = vec ! [0x33] ; payload . extend_from_slice (& amount . to_le_bytes ()) ; payload } , } ;"
      },
      {
        "id": 21,
        "label": "let mut payload = vec ! [0x33] ;"
      },
      {
        "id": 22,
        "label": "payload . extend_from_slice (& amount . to_le_bytes ()) ;"
      },
      {
        "id": 23,
        "label": "payload"
      },
      {
        "id": 24,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (StipendError :: RouteProgramMissing) ? ;"
      },
      {
        "id": 25,
        "label": "let seeds : & [& [u8]] = & [b\"dispatcher\" , & stipend_state . guild_master . to_bytes () , & [stipend_state . seed_tag] , & [stipend_state . bump] ,] ;"
      },
      {
        "id": 26,
        "label": "invoke_signed (& ix , & [program_ai . clone () , ctx . accounts . treasury . to_account_info () , ctx . accounts . member_wallet . to_account_info () , ctx . accounts . dispatcher . to_account_info () ,] , & [seeds] ,) ? ;"
      },
      {
        "id": 27,
        "label": "stipend_state . total_rounds = stipend_state . total_rounds . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "stipend_state . telemetry = stipend_state . telemetry . rotate_left (2) ;"
      },
      {
        "id": 29,
        "label": "let mut micro : u8 = 1 ;"
      },
      {
        "id": 30,
        "label": "while micro < 4 { stipend_state . telemetry = stipend_state . telemetry . wrapping_add ((micro as u64) * 9) ; micro = micro . saturating_add (1) ; }"
      },
      {
        "id": 31,
        "label": "stipend_state . telemetry = stipend_state . telemetry . wrapping_add ((micro as u64) * 9) ;"
      },
      {
        "id": 32,
        "label": "micro = micro . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: stipend_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: ix"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: payload"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: payload"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: payload"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: program_ai"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: ix"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 28,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 28,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 30,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 30,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: stipend_state"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: stipend_state"
      }
    ]
  }
]