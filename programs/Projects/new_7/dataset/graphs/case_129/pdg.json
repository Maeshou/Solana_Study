[
  {
    "name": "craft",
    "inputs": [
      "ctx: Context < Craft >",
      "material_a: u64",
      "material_b: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . bench ;"
      },
      {
        "id": 2,
        "label": "st . attempts += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . recipe_program . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { program = ctx . remaining_accounts [0] . clone () ; st . route_custom += 1 ; } else { st . loss_rate = (st . loss_rate + (material_a & 3) + (material_b & 1)) . min (100) ; st . recipe_fail += 1 ; st . backup_recipes . push (((material_a ^ material_b) & 0xffff) as u16) ; }"
      },
      {
        "id": 5,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 6,
        "label": "st . route_custom += 1 ;"
      },
      {
        "id": 7,
        "label": "st . loss_rate = (st . loss_rate + (material_a & 3) + (material_b & 1)) . min (100) ;"
      },
      {
        "id": 8,
        "label": "st . recipe_fail += 1 ;"
      },
      {
        "id": 9,
        "label": "st . backup_recipes . push (((material_a ^ material_b) & 0xffff) as u16) ;"
      },
      {
        "id": 10,
        "label": "let br = CraftBridge { mat_a : ctx . accounts . material_a . to_account_info () , mat_b : ctx . accounts . material_b . to_account_info () } ;"
      },
      {
        "id": 11,
        "label": "let quality = ((material_a | material_b) & 31) + st . attempts as u64 ;"
      },
      {
        "id": 12,
        "label": "let mut data = Vec :: with_capacity (24) ;"
      },
      {
        "id": 13,
        "label": "data . extend_from_slice (& st . attempts . to_le_bytes ()) ;"
      },
      {
        "id": 14,
        "label": "data . extend_from_slice (& quality . to_le_bytes ()) ;"
      },
      {
        "id": 15,
        "label": "data . extend_from_slice (& st . loss_rate . to_le_bytes ()) ;"
      },
      {
        "id": 16,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 17,
        "label": "br . invoke_recipe (cx , data) ? ;"
      },
      {
        "id": 18,
        "label": "st . last_quality = quality ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: br"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: quality"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: data"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: data"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: st"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: data"
      },
      {
        "from": 11,
        "to": 14,
        "label": "data_dep: quality"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: data"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: cx"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 16,
        "label": "data_dep: program"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: br"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: cx"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: data"
      },
      {
        "from": 1,
        "to": 18,
        "label": "data_dep: st"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: quality"
      }
    ]
  }
]