[
  {
    "name": "reward_flow",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RewardFlow >",
      "stage: u64",
      "payout: u64"
    ],
    "attributes": [],
    "body": [
      "if stage >= 3",
      "{",
      "ctx . accounts . journal . progress = ctx . accounts . journal . progress . saturating_add (2) ;",
      "}",
      "if stage < 2",
      "{",
      "ctx . accounts . journal . retries = ctx . accounts . journal . retries . wrapping_add (1) ;",
      "}",
      "let sb_metas = vec ! [AccountMeta :: new (ctx . accounts . score_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] ;",
      "let sb_infos = vec ! [ctx . accounts . scoreboard_hint . to_account_info () , ctx . accounts . score_slot . to_account_info () , ctx . accounts . participant . to_account_info () ,] ;",
      "let sb_ix = Instruction { program_id : SCOREBOARD_ID , accounts : sb_metas , data : stage . to_le_bytes () . to_vec () , } ;",
      "invoke (& sb_ix , & sb_infos) ? ;",
      "let mut report_program = ctx . accounts . report_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "report_program = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . journal . routes = ctx . accounts . journal . routes . wrapping_add (1) ;",
      "}",
      "let rp_metas = vec ! [AccountMeta :: new (ctx . accounts . report_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] ;",
      "let rp_infos = vec ! [report_program . clone () , ctx . accounts . report_board . to_account_info () , ctx . accounts . participant . to_account_info () ,] ;",
      "let rp_ix = Instruction { program_id : * report_program . key , accounts : rp_metas , data : payout . to_le_bytes () . to_vec () , } ;",
      "invoke (& rp_ix , & rp_infos) ? ;",
      "let t = Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . winner_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ;",
      "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;",
      "token :: transfer (tctx , payout) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "RewardFlow",
    "node_type": "struct",
    "fields": [
      {
        "name": "journal",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , QuestJournal >"
      },
      {
        "name": "score_slot",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "participant",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "scoreboard_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "report_board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "report_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "winner_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "treasury_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "QuestJournal",
    "node_type": "struct",
    "fields": [
      {
        "name": "progress",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "retries",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "routes",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]