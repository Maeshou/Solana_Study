[
  {
    "name": "hop",
    "inputs": [
      "ctx: Context < Hop >",
      "n: u64",
      "pay: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let data = Vec :: from ([n . to_le_bytes () , n . wrapping_add (5) . to_le_bytes ()] . concat ()) ;"
      },
      {
        "id": 2,
        "label": "invoke (& Instruction { program_id : FIXED_RAIL_ID , accounts : [AccountMeta :: new (ctx . accounts . rail_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] . into () , data , } , & [ctx . accounts . rail_hint . to_account_info () , ctx . accounts . rail_cell . to_account_info () , ctx . accounts . rider . to_account_info ()]) ? ;"
      },
      {
        "id": 3,
        "label": "let mut prog = ctx . accounts . cast_hint . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ! ctx . remaining_accounts . is_empty () { prog = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 5,
        "label": "prog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 6,
        "label": "invoke (& Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stage . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : pay . to_le_bytes () . to_vec () , } , & [prog , ctx . accounts . stage . to_account_info () , ctx . accounts . rider . to_account_info ()]) ? ;"
      },
      {
        "id": 7,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . rider_token . to_account_info () , authority : ctx . accounts . bank_authority . to_account_info () }) , pay) ? ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: data"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: prog"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: prog"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: prog"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: prog"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: prog"
      }
    ]
  }
]