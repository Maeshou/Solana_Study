[
  {
    "name": "hop",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Hop >",
      "n: u64",
      "pay: u64"
    ],
    "attributes": [],
    "body": [
      "let data = Vec :: from ([n . to_le_bytes () , n . wrapping_add (5) . to_le_bytes ()] . concat ()) ;",
      "invoke (& Instruction { program_id : FIXED_RAIL_ID , accounts : [AccountMeta :: new (ctx . accounts . rail_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] . into () , data , } , & [ctx . accounts . rail_hint . to_account_info () , ctx . accounts . rail_cell . to_account_info () , ctx . accounts . rider . to_account_info ()]) ? ;",
      "let mut prog = ctx . accounts . cast_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "prog = ctx . remaining_accounts [0] . clone () ;",
      "}",
      "invoke (& Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stage . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : pay . to_le_bytes () . to_vec () , } , & [prog , ctx . accounts . stage . to_account_info () , ctx . accounts . rider . to_account_info ()]) ? ;",
      "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . rider_token . to_account_info () , authority : ctx . accounts . bank_authority . to_account_info () }) , pay) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Hop",
    "node_type": "struct",
    "fields": [
      {
        "name": "rail_cell",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "rider",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "rail_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "stage",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "cast_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "bank",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "rider_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "bank_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]