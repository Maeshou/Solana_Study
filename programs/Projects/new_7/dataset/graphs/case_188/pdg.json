[
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "n: u64",
      "amt: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "invoke (& Instruction :: new_with_bytes (FIXED_ID , & n . to_le_bytes () , vec ! [AccountMeta :: new (ctx . accounts . fixed_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] ,) , & [ctx . accounts . fixed_hint . to_account_info () , ctx . accounts . fixed_cell . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 2,
        "label": "let mut dyn_prog = ctx . accounts . hint . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "if ! ctx . remaining_accounts . is_empty () { dyn_prog = ctx . remaining_accounts [0] . clone () ; ctx . accounts . book . ticks = ctx . accounts . book . ticks . saturating_add (1) ; }"
      },
      {
        "id": 4,
        "label": "dyn_prog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 5,
        "label": "ctx . accounts . book . ticks = ctx . accounts . book . ticks . saturating_add (1) ;"
      },
      {
        "id": 6,
        "label": "invoke (& Instruction :: new_with_bytes (* dyn_prog . key , & amt . rotate_left (5) . to_le_bytes () , vec ! [AccountMeta :: new (ctx . accounts . board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] ,) , & [dyn_prog , ctx . accounts . board . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 7,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . vault . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_auth . to_account_info () , } ,) , amt ,) ? ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 2,
        "to": 2,
        "label": "def: dyn_prog"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: dyn_prog"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: dyn_prog"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: dyn_prog"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: dyn_prog"
      }
    ]
  }
]