[
  {
    "name": "run",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Run >",
      "n: u64",
      "amt: u64"
    ],
    "attributes": [],
    "body": [
      "invoke (& Instruction :: new_with_bytes (FIXED_ID , & n . to_le_bytes () , vec ! [AccountMeta :: new (ctx . accounts . fixed_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] ,) , & [ctx . accounts . fixed_hint . to_account_info () , ctx . accounts . fixed_cell . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;",
      "let mut dyn_prog = ctx . accounts . hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "dyn_prog = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . book . ticks = ctx . accounts . book . ticks . saturating_add (1) ;",
      "}",
      "invoke (& Instruction :: new_with_bytes (* dyn_prog . key , & amt . rotate_left (5) . to_le_bytes () , vec ! [AccountMeta :: new (ctx . accounts . board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] ,) , & [dyn_prog , ctx . accounts . board . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;",
      "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . vault . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_auth . to_account_info () , } ,) , amt ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Run",
    "node_type": "struct",
    "fields": [
      {
        "name": "book",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Book >"
      },
      {
        "name": "fixed_cell",
        "attribute": "# [doc = \" CHECK: \"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "fixed_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "actor",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "vault_auth",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Book",
    "node_type": "struct",
    "fields": [
      {
        "name": "ticks",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]