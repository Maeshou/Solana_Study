[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "bar: u64"
    ],
    "attributes": [],
    "body": [
      "let mileage_state = & mut ctx . accounts . mileage_state ;",
      "mileage_state . owner_authority = ctx . accounts . owner_authority . key () ;",
      "mileage_state . threshold_bar = bar ;",
      "mileage_state . tick_counter = 11 ;",
      "mileage_state . seed_accumulator = 77 ;",
      "mileage_state . route_program_id = Pubkey :: new_from_array ([9u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "set",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let mileage_state = & mut ctx . accounts . mileage_state ;",
      "require_keys_eq ! (mileage_state . owner_authority , ctx . accounts . owner_authority . key () , ErrorCode :: Denied) ;",
      "mileage_state . route_program_id = p ;",
      "mileage_state . tick_counter = mileage_state . tick_counter . saturating_add (2) ;",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator . wrapping_add (5) ;",
      "Ok (())"
    ]
  },
  {
    "name": "relay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Relay >",
      "amt: u64",
      "loops: u8"
    ],
    "attributes": [],
    "body": [
      "let mileage_state = & mut ctx . accounts . mileage_state ;",
      "if amt <= 4",
      "{",
      "mileage_state . tick_counter = mileage_state . tick_counter . saturating_add (3) ;",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator ^ 0xB7 ;",
      "return Ok (()) ;",
      "}",
      "let mut remaining_amt = amt ;",
      "let mut loop_index : u8 = 0 ;",
      "while loop_index < loops",
      "{",
      "let transfer_part = (remaining_amt / 4) . max (3) ;",
      "if transfer_part >= remaining_amt",
      "{",
      "break ;",
      "} let transfer_ix = token_ix :: transfer (& mileage_state . route_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . destination_vault . key () , & ctx . accounts . owner_authority . key () , & [] , transfer_part ,) ? ;",
      "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . destination_vault . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;",
      "remaining_amt = remaining_amt . saturating_sub (transfer_part) ;",
      "mileage_state . tick_counter = mileage_state . tick_counter . saturating_add (1) ;",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator . wrapping_add ((transfer_part % 19) as u64) ;",
      "loop_index = loop_index . saturating_add (1) ;",
      "if mileage_state . seed_accumulator % 2 == 0",
      "{",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator . rotate_left (3) ;",
      "} else",
      "{",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator . rotate_right (2) ;",
      "}",
      "}",
      "if remaining_amt > 2",
      "{",
      "let first_half = remaining_amt / 2 ;",
      "let first_ix = token_ix :: transfer (& mileage_state . route_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . destination_vault . key () , & ctx . accounts . owner_authority . key () , & [] , first_half ,) ? ;",
      "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& first_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . destination_vault . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;",
      "let second_ix = token_ix :: transfer (& mileage_state . route_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . destination_vault . key () , & ctx . accounts . owner_authority . key () , & [] , remaining_amt - first_half ,) ? ;",
      "invoke (& second_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . destination_vault . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;",
      "mileage_state . seed_accumulator = mileage_state . seed_accumulator . wrapping_add (remaining_amt) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "MileageState",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner_authority",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "threshold_bar",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tick_counter",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "seed_accumulator",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "route_program_id",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "mileage_state",
        "attribute": "# [account (init , payer = owner_authority , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , MileageState >"
      },
      {
        "name": "owner_authority",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "source_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "destination_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Set",
    "node_type": "struct",
    "fields": [
      {
        "name": "mileage_state",
        "attribute": "# [account (mut , has_one = owner_authority)]",
        "field_type": "Account < 'info , MileageState >"
      },
      {
        "name": "owner_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Relay",
    "node_type": "struct",
    "fields": [
      {
        "name": "mileage_state",
        "attribute": "# [account (mut , has_one = owner_authority)]",
        "field_type": "Account < 'info , MileageState >"
      },
      {
        "name": "owner_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "source_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "destination_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]