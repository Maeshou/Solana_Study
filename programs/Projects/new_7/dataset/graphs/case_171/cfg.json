[
  {
    "name": "dynamic_signal",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      }
    ]
  },
  {
    "name": "safe_transfer",
    "nodes": [
      {
        "id": 2,
        "label": "Entry"
      },
      {
        "id": 3,
        "label": "token :: transfer (CpiContext :: new (token_program . to_account_info () , Transfer { from : from . to_account_info () , to : to . to_account_info () , authority : auth . clone () , } ,) , amount ,)"
      }
    ],
    "edges": [
      {
        "from": 2,
        "to": 3,
        "label": "call"
      }
    ]
  },
  {
    "name": "signal_and_pay",
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "seed > 100"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "ctx . accounts . sheet . high = ctx . accounts . sheet . high . saturating_add (1) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "seed % 2 != 0"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "ctx . accounts . sheet . odd = ctx . accounts . sheet . odd . wrapping_add (1) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "safe_transfer (& ctx . accounts . token_program , & ctx . accounts . treasury , & ctx . accounts . user_token , & ctx . accounts . treasury_authority , tip ,) ? ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . signal_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "program_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 28,
        "label": "ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (3) ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "let mut payload = [0u8 ; 16] ;"
      },
      {
        "id": 33,
        "label": "payload [0 .. 8] . copy_from_slice (& seed . rotate_left (7) . to_le_bytes ()) ;"
      },
      {
        "id": 34,
        "label": "payload [8 .. 16] . copy_from_slice (& tip . rotate_right (5) . to_le_bytes ()) ;"
      },
      {
        "id": 35,
        "label": "let cpi_ctx = CpiContext :: new (program_ai , DynSignalAccounts { board : ctx . accounts . signal_board . to_account_info () , user : ctx . accounts . user . to_account_info () , } ,) ;"
      },
      {
        "id": 36,
        "label": "dynamic_signal (cpi_ctx , payload) ? ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 23,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      }
    ]
  }
]