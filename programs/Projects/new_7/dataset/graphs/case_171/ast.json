[
  {
    "name": "DynSignalAccounts",
    "node_type": "struct",
    "fields": [
      {
        "name": "board",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "dynamic_signal",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "_ctx: CpiContext < '_ , '_ , '_ , 'info , DynSignalAccounts < 'info > >",
      "_payload: [u8 ; 16]"
    ],
    "attributes": [],
    "body": [
      "Ok (())"
    ]
  },
  {
    "name": "safe_transfer",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "token_program: & Program < Token >",
      "from: & Account < TokenAccount >",
      "to: & Account < TokenAccount >",
      "auth: & AccountInfo",
      "amount: u64"
    ],
    "attributes": [],
    "body": [
      "token :: transfer (CpiContext :: new (token_program . to_account_info () , Transfer { from : from . to_account_info () , to : to . to_account_info () , authority : auth . clone () , } ,) , amount ,)"
    ]
  },
  {
    "name": "signal_and_pay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SignalAndPay >",
      "seed: u64",
      "tip: u64"
    ],
    "attributes": [],
    "body": [
      "if seed > 100",
      "{",
      "ctx . accounts . sheet . high = ctx . accounts . sheet . high . saturating_add (1) ;",
      "}",
      "if seed % 2 != 0",
      "{",
      "ctx . accounts . sheet . odd = ctx . accounts . sheet . odd . wrapping_add (1) ;",
      "}",
      "safe_transfer (& ctx . accounts . token_program , & ctx . accounts . treasury , & ctx . accounts . user_token , & ctx . accounts . treasury_authority , tip ,) ? ;",
      "let mut program_ai = ctx . accounts . signal_program . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "program_ai = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (3) ;",
      "}",
      "let mut payload = [0u8 ; 16] ;",
      "payload [0 .. 8] . copy_from_slice (& seed . rotate_left (7) . to_le_bytes ()) ;",
      "payload [8 .. 16] . copy_from_slice (& tip . rotate_right (5) . to_le_bytes ()) ;",
      "let cpi_ctx = CpiContext :: new (program_ai , DynSignalAccounts { board : ctx . accounts . signal_board . to_account_info () , user : ctx . accounts . user . to_account_info () , } ,) ;",
      "dynamic_signal (cpi_ctx , payload) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "SignalAndPay",
    "node_type": "struct",
    "fields": [
      {
        "name": "sheet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , LocalSheet >"
      },
      {
        "name": "signal_program",
        "attribute": "# [doc = \" CHECK: 動的に差し替え可能な“外部プログラム”口座\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signal_board",
        "attribute": "# [doc = \" CHECK: 呼び先が要求する任意のボード\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" CHECK: 呼び出し主体\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "treasury_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "LocalSheet",
    "node_type": "struct",
    "fields": [
      {
        "name": "high",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "odd",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "paths",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]