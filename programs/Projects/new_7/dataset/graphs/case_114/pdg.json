[
  {
    "name": "redeem",
    "inputs": [
      "ctx: Context < Redeem >",
      "qty: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . tier_state ;"
      },
      {
        "id": 2,
        "label": "st . level += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . bridge_prog . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { st . sent_a += qty ; program = ctx . remaining_accounts [0] . clone () ; } else { st . sent_b += qty ; }"
      },
      {
        "id": 5,
        "label": "st . sent_a += qty ;"
      },
      {
        "id": 6,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 7,
        "label": "st . sent_b += qty ;"
      },
      {
        "id": 8,
        "label": "let br = TierBridge { src : ctx . accounts . ticket_buf . to_account_info () , dst : ctx . accounts . reward_buf . to_account_info () } ;"
      },
      {
        "id": 9,
        "label": "let payload = build_payload (st . level as u64 , qty) ;"
      },
      {
        "id": 10,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 11,
        "label": "br . emit (cx , payload) ? ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: br"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: payload"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: cx"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 10,
        "label": "data_dep: program"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: br"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: cx"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: payload"
      }
    ]
  },
  {
    "name": "build_payload",
    "inputs": [
      "h: u64",
      "v: u64"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let mut out = h . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 15,
        "label": "out . extend_from_slice (& v . to_le_bytes ()) ;"
      },
      {
        "id": 16,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: out"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: out"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: out"
      }
    ]
  }
]