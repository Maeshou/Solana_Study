[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "max_value: u64"
    ],
    "attributes": [],
    "body": [
      "let relay_state = & mut ctx . accounts . relay_state ;",
      "relay_state . admin_authority = ctx . accounts . admin_authority . key () ;",
      "relay_state . max_value = max_value ;",
      "relay_state . frame_counter = 14 ;",
      "relay_state . cursor_accumulator = (max_value % 23) + 2 ;",
      "relay_state . route_program_id = Pubkey :: new_from_array ([6u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "set",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let relay_state = & mut ctx . accounts . relay_state ;",
      "require_keys_eq ! (relay_state . admin_authority , ctx . accounts . admin_authority . key () , ErrorCode :: Denied) ;",
      "relay_state . route_program_id = p ;",
      "relay_state . frame_counter = relay_state . frame_counter . saturating_add (1) ;",
      "Ok (())"
    ]
  },
  {
    "name": "relay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Relay >",
      "v: u64",
      "iter: u8"
    ],
    "attributes": [],
    "body": [
      "let relay_state = & mut ctx . accounts . relay_state ;",
      "if v > relay_state . max_value",
      "{",
      "relay_state . frame_counter = relay_state . frame_counter . saturating_add (2) ;",
      "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (9) ;",
      "return Ok (()) ;",
      "}",
      "let mut remaining_value = v ;",
      "let mut loop_index : u8 = 0 ;",
      "while loop_index < iter",
      "{",
      "let transfer_part = (remaining_value / 2) . max (3) ;",
      "if transfer_part >= remaining_value",
      "{",
      "break ;",
      "} let transfer_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ;",
      "let external_program_ai = ctx . remaining_accounts . get (2) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;",
      "remaining_value = remaining_value . saturating_sub (transfer_part) ;",
      "relay_state . frame_counter = relay_state . frame_counter . saturating_add (1) ;",
      "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (transfer_part % 13) ;",
      "loop_index = loop_index . saturating_add (1) ;",
      "if loop_index % 2 == 0",
      "{",
      "relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_left (1) ;",
      "} else",
      "{",
      "relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_right (2) ;",
      "}",
      "}",
      "if remaining_value > 2",
      "{",
      "let final_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_value - 2 ,) ? ;",
      "let external_program_ai_tail = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& final_ix , & [external_program_ai_tail . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;",
      "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (remaining_value - 2) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "RelayState",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin_authority",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "max_value",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "frame_counter",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "cursor_accumulator",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "route_program_id",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "relay_state",
        "attribute": "# [account (init , payer = admin_authority , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , RelayState >"
      },
      {
        "name": "admin_authority",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "cabinet_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "client_wallet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Set",
    "node_type": "struct",
    "fields": [
      {
        "name": "relay_state",
        "attribute": "# [account (mut , has_one = admin_authority)]",
        "field_type": "Account < 'info , RelayState >"
      },
      {
        "name": "admin_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Relay",
    "node_type": "struct",
    "fields": [
      {
        "name": "relay_state",
        "attribute": "# [account (mut , has_one = admin_authority)]",
        "field_type": "Account < 'info , RelayState >"
      },
      {
        "name": "admin_authority",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "cabinet_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "client_wallet",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]