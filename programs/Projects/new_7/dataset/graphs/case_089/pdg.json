[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "max_value: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let relay_state = & mut ctx . accounts . relay_state ;"
      },
      {
        "id": 2,
        "label": "relay_state . admin_authority = ctx . accounts . admin_authority . key () ;"
      },
      {
        "id": 3,
        "label": "relay_state . max_value = max_value ;"
      },
      {
        "id": 4,
        "label": "relay_state . frame_counter = 14 ;"
      },
      {
        "id": 5,
        "label": "relay_state . cursor_accumulator = (max_value % 23) + 2 ;"
      },
      {
        "id": 6,
        "label": "relay_state . route_program_id = Pubkey :: new_from_array ([6u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: relay_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: relay_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: relay_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: relay_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: relay_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: relay_state"
      }
    ]
  },
  {
    "name": "set",
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let relay_state = & mut ctx . accounts . relay_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (relay_state . admin_authority , ctx . accounts . admin_authority . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "relay_state . route_program_id = p ;"
      },
      {
        "id": 12,
        "label": "relay_state . frame_counter = relay_state . frame_counter . saturating_add (1) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: relay_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: relay_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: relay_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: relay_state"
      }
    ]
  },
  {
    "name": "relay",
    "inputs": [
      "ctx: Context < Relay >",
      "v: u64",
      "iter: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let relay_state = & mut ctx . accounts . relay_state ;"
      },
      {
        "id": 16,
        "label": "if v > relay_state . max_value { relay_state . frame_counter = relay_state . frame_counter . saturating_add (2) ; relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (9) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "relay_state . frame_counter = relay_state . frame_counter . saturating_add (2) ;"
      },
      {
        "id": 18,
        "label": "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (9) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut remaining_value = v ;"
      },
      {
        "id": 21,
        "label": "let mut loop_index : u8 = 0 ;"
      },
      {
        "id": 22,
        "label": "while loop_index < iter { let transfer_part = (remaining_value / 2) . max (3) ; if transfer_part >= remaining_value { break ; } let transfer_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ; let external_program_ai = ctx . remaining_accounts . get (2) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; remaining_value = remaining_value . saturating_sub (transfer_part) ; relay_state . frame_counter = relay_state . frame_counter . saturating_add (1) ; relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (transfer_part % 13) ; loop_index = loop_index . saturating_add (1) ; if loop_index % 2 == 0 { relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_left (1) ; } else { relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_right (2) ; } }"
      },
      {
        "id": 23,
        "label": "let transfer_part = (remaining_value / 2) . max (3) ;"
      },
      {
        "id": 24,
        "label": "if transfer_part >= remaining_value { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let transfer_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 27,
        "label": "let external_program_ai = ctx . remaining_accounts . get (2) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "remaining_value = remaining_value . saturating_sub (transfer_part) ;"
      },
      {
        "id": 30,
        "label": "relay_state . frame_counter = relay_state . frame_counter . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (transfer_part % 13) ;"
      },
      {
        "id": 32,
        "label": "loop_index = loop_index . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "if loop_index % 2 == 0 { relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_left (1) ; } else { relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_right (2) ; }"
      },
      {
        "id": 34,
        "label": "relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_left (1) ;"
      },
      {
        "id": 35,
        "label": "relay_state . cursor_accumulator = relay_state . cursor_accumulator . rotate_right (2) ;"
      },
      {
        "id": 36,
        "label": "if remaining_value > 2 { let final_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_value - 2 ,) ? ; let external_program_ai_tail = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& final_ix , & [external_program_ai_tail . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (remaining_value - 2) ; }"
      },
      {
        "id": 37,
        "label": "let final_ix = token_ix :: transfer (& relay_state . route_program_id , & ctx . accounts . cabinet_vault . key () , & ctx . accounts . client_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_value - 2 ,) ? ;"
      },
      {
        "id": 38,
        "label": "let external_program_ai_tail = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 39,
        "label": "invoke (& final_ix , & [external_program_ai_tail . clone () , ctx . accounts . cabinet_vault . to_account_info () , ctx . accounts . client_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 40,
        "label": "relay_state . cursor_accumulator = relay_state . cursor_accumulator . wrapping_add (remaining_value - 2) ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: relay_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: remaining_value"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: relay_state"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: transfer_part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: transfer_ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: relay_state"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: external_program_ai"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: transfer_ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: relay_state"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: final_ix"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: remaining_value"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: external_program_ai_tail"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: final_ix"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: external_program_ai_tail"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: relay_state"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: relay_state"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: remaining_value"
      }
    ]
  }
]