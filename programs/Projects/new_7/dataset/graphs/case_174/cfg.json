[
  {
    "name": "note",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut d = value . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 2,
        "label": "d . insert (0 , 8) ;"
      },
      {
        "id": 3,
        "label": "invoke (& Instruction { program_id : FIXED_MARK_ID , accounts : [AccountMeta :: new (ctx . accounts . mark_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] . into () , data : d , } , & [ctx . accounts . mark_hint . to_account_info () , ctx . accounts . mark_slot . to_account_info () , ctx . accounts . user . to_account_info ()]) ? ;"
      },
      {
        "id": 4,
        "label": "let mut prog = ctx . accounts . push_hint . to_account_info () ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "prog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "invoke (& Instruction { program_id : * prog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stream . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : pay . to_le_bytes () . to_vec () , } , & [prog , ctx . accounts . stream . to_account_info () , ctx . accounts . user . to_account_info ()]) ? ;"
      },
      {
        "id": 14,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . reserve . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . reserve_authority . to_account_info () }) , pay) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  }
]