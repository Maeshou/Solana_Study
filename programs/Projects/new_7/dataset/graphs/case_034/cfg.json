[
  {
    "name": "open",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . settle ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . min = min ;"
      },
      {
        "id": 4,
        "label": "s . live = true ;"
      },
      {
        "id": 5,
        "label": "s . cnt = 0 ;"
      },
      {
        "id": 6,
        "label": "s . acc = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "run",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . settle ;"
      },
      {
        "id": 10,
        "label": "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;"
      },
      {
        "id": 11,
        "label": "require ! (s . live , Errs :: Stop) ;"
      },
      {
        "id": 12,
        "label": "require ! (stake >= s . min , Errs :: Small) ;"
      },
      {
        "id": 13,
        "label": "let mut w : u64 = 8 ;"
      },
      {
        "id": 14,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "i % 2 == 0"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "w = w . saturating_add (2) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "w = w . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "tag . len () > 0"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "let b = tag . as_bytes () ;"
      },
      {
        "id": 31,
        "label": "let mut k = 0usize ;"
      },
      {
        "id": 32,
        "label": "let mut extra = 0u64 ;"
      },
      {
        "id": 33,
        "label": "Loop Start"
      },
      {
        "id": 34,
        "label": "extra = extra . saturating_add ((b [k] as u64) % 7 + 1) ;"
      },
      {
        "id": 35,
        "label": "if statement"
      },
      {
        "id": 36,
        "label": "predicate"
      },
      {
        "id": 37,
        "label": "k % 4 == 0"
      },
      {
        "id": 38,
        "label": "True body"
      },
      {
        "id": 39,
        "label": "s . cnt = s . cnt . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "False body"
      },
      {
        "id": 41,
        "label": "No-op"
      },
      {
        "id": 42,
        "label": "merge"
      },
      {
        "id": 43,
        "label": "k += 1 ;"
      },
      {
        "id": 44,
        "label": "Loop End"
      },
      {
        "id": 45,
        "label": "w = w . saturating_add (extra % 5) ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let gross = stake . saturating_mul (w) ;"
      },
      {
        "id": 50,
        "label": "let mut fee = gross / 100 ;"
      },
      {
        "id": 51,
        "label": "let mut net = 0u64 ;"
      },
      {
        "id": 52,
        "label": "if statement"
      },
      {
        "id": 53,
        "label": "predicate"
      },
      {
        "id": 54,
        "label": "gross > fee"
      },
      {
        "id": 55,
        "label": "True body"
      },
      {
        "id": 56,
        "label": "net = gross - fee ;"
      },
      {
        "id": 57,
        "label": "let mut add = 0u64 ;"
      },
      {
        "id": 58,
        "label": "let mut r = 0u8 ;"
      },
      {
        "id": 59,
        "label": "Loop Start"
      },
      {
        "id": 60,
        "label": "add = add . saturating_add ((r as u64) + ((s . cnt % 9) as u64)) ;"
      },
      {
        "id": 61,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 62,
        "label": "Loop End"
      },
      {
        "id": 63,
        "label": "net = net . saturating_add (add) ;"
      },
      {
        "id": 64,
        "label": "False body"
      },
      {
        "id": 65,
        "label": "s . live = false ;"
      },
      {
        "id": 66,
        "label": "net = 0 ;"
      },
      {
        "id": 67,
        "label": "merge"
      },
      {
        "id": 68,
        "label": "let ix = spl_token :: instruction :: transfer (claimed_id , ctx . accounts . treasury . key () , ctx . accounts . receiver_ata . key () , ctx . accounts . admin . key () , & [] , net ,) ? ;"
      },
      {
        "id": 69,
        "label": "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . receiver_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,]) ? ;"
      },
      {
        "id": 70,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 15,
        "to": 25,
        "label": "while"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "predicate"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "true"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "false"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 33,
        "to": 44,
        "label": "while"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 26,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "predicate"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "true"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "while"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 52,
        "to": 64,
        "label": "false"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 63,
        "to": 67,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      }
    ]
  }
]