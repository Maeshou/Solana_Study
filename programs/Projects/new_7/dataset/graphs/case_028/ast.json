[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "cap_bps: u16"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "s . admin = ctx . accounts . admin . key () ;",
      "s . cap_bps = if cap_bps > 2500 { 2500 } else { cap_bps } ;",
      "s . round = 0 ;",
      "s . last_note = 0 ;",
      "s . tally = 0 ;",
      "let mut w = 0u8 ;",
      "while w < 6",
      "{",
      "s . round = s . round . saturating_add ((w as u32) + 1) ;",
      "if s . last_note > 0",
      "{",
      "s . last_note = s . last_note . saturating_sub (1) ;",
      "} else",
      "{",
      "s . last_note = s . last_note . saturating_add (2) ;",
      "} w = w . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "pay_without_using_typed_program",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Pay >",
      "arbitrary_program_id: Pubkey",
      "base: u64",
      "epochs: u8",
      "note: String"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "require ! (s . admin == ctx . accounts . admin . key () , Errs :: BadAdmin) ;",
      "let mut weight : u64 = 9 ;",
      "let mut e = 0u8 ;",
      "while e < epochs",
      "{",
      "if e % 2 == 0",
      "{",
      "weight = weight . saturating_add (2) ;",
      "} else",
      "{",
      "weight = weight . saturating_add (1) ;",
      "} if e < 4",
      "{",
      "weight = weight . saturating_add ((note . len () as u64) % 3) ;",
      "} e = e . saturating_add (1) ;",
      "}",
      "if note . len () > 0",
      "{",
      "s . last_note = note . len () as u32 ;",
      "let b = note . as_bytes () ;",
      "let mut i = 0usize ;",
      "let mut rolling : u64 = 0 ;",
      "while i < b . len ()",
      "{",
      "let inc = (b [i] as u64) % 11 ;",
      "rolling = rolling . saturating_add (inc) ;",
      "if i % 3 == 0",
      "{",
      "rolling = rolling . saturating_add (1) ;",
      "} i += 1 ;",
      "} weight = weight . saturating_add (rolling % 7) ;",
      "}",
      "let gross = base . saturating_mul (weight) ;",
      "let fee = gross . saturating_mul (s . cap_bps as u64) / 10_000 ;",
      "let mut pay = 0u64 ;",
      "if gross > fee",
      "{",
      "pay = gross - fee ;",
      "let mut shards = [0u64 ;",
      "3] ;",
      "let mut t = 0usize ;",
      "while t < shards . len ()",
      "{",
      "shards [t] = (pay / 3) . saturating_add ((t as u64) * 2) ;",
      "t += 1 ;",
      "} let mut recon = 0u64 ;",
      "let mut k = 0usize ;",
      "while k < shards . len ()",
      "{",
      "let mut block = shards [k] ;",
      "let mut hop = 0u8 ;",
      "while hop < 5",
      "{",
      "block = block . saturating_add (((hop as u64) + (k as u64)) % 9) ;",
      "hop = hop . saturating_add (1) ;",
      "} recon = recon . saturating_add (block) ;",
      "k += 1 ;",
      "} s . tally = s . tally . saturating_add (recon % 101) ;",
      "s . round = s . round . saturating_add (1) ;",
      "pay = recon ;",
      "} else",
      "{",
      "let mut d = 0u8 ;",
      "while d < 7",
      "{",
      "if s . round > 0 { s . round = s . round . saturating_sub (1) ;",
      "} if s . last_note > 1",
      "{",
      "s . last_note = s . last_note . saturating_sub (2) ;",
      "} d = d . saturating_add (1) ;",
      "} pay = 0 ;",
      "}",
      "let ix = spl_token :: instruction :: transfer (arbitrary_program_id , ctx . accounts . treasury . key () , ctx . accounts . user_ata . key () , ctx . accounts . payer . key () , & [] , pay ,) ? ;",
      "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . user_ata . to_account_info () , ctx . accounts . payer . to_account_info () ,] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "State",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "cap_bps",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "round",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "last_note",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "tally",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 2 + 4 + 4 + 8)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Pay",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_ata",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "payer",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]