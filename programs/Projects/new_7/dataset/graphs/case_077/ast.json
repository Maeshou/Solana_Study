[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "bar: u64"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "s . owner = ctx . accounts . owner . key () ;",
      "s . bar = bar ;",
      "s . tick = 11 ;",
      "s . seed = 77 ;",
      "s . route = Pubkey :: new_from_array ([9u8 ; 32]) ;",
      "Ok (())"
    ]
  },
  {
    "name": "set",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "require_keys_eq ! (s . owner , ctx . accounts . owner . key () , ErrorCode :: Denied) ;",
      "s . route = p ;",
      "s . tick += 2 ;",
      "s . seed = s . seed . wrapping_add (5) ;",
      "Ok (())"
    ]
  },
  {
    "name": "relay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Relay >",
      "amt: u64",
      "n: u8"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "if amt <= 4",
      "{",
      "s . tick += 3 ;",
      "s . seed = s . seed ^ 0xB7 ;",
      "return Ok (()) ;",
      "}",
      "let mut rest = amt ;",
      "let mut i = 0u8 ;",
      "while i < n",
      "{",
      "let part = (rest / 4) . max (3) ;",
      "if part >= rest",
      "{",
      "break ;",
      "} let ix = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . dest . key () , & ctx . accounts . owner . key () , & [] , part ,) ? ;",
      "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix , & [p . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . dest . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;",
      "rest -= part ;",
      "s . tick += 1 ;",
      "s . seed = s . seed . wrapping_add ((part % 19) as u64) ;",
      "i += 1 ;",
      "if s . seed % 2 == 0",
      "{",
      "s . seed = s . seed . rotate_left (3) ;",
      "} else",
      "{",
      "s . seed = s . seed . rotate_right (2) ;",
      "}",
      "}",
      "if rest > 2",
      "{",
      "let half = rest / 2 ;",
      "let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . dest . key () , & ctx . accounts . owner . key () , & [] , half ,) ? ;",
      "let p = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;",
      "invoke (& ix2 , & [p . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . dest . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;",
      "let ix3 = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . dest . key () , & ctx . accounts . owner . key () , & [] , rest - half ,) ? ;",
      "invoke (& ix3 , & [p . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . dest . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;",
      "s . seed = s . seed . wrapping_add (rest) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "State",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "bar",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tick",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "seed",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "route",
        "attribute": null,
        "field_type": "Pubkey"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 8 + 8 + 8 + 32)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Set",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Relay",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "source",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "dest",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]