[
  {
    "name": "scramble",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut buf = Vec :: with_capacity (40) ;"
      },
      {
        "id": 2,
        "label": "buf . extend_from_slice (& seed . to_le_bytes ()) ;"
      },
      {
        "id": 3,
        "label": "buf . extend_from_slice (salt . as_ref ()) ;"
      },
      {
        "id": 4,
        "label": "keccak :: hash (& buf) . 0"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "run",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let salt = ctx . accounts . user . key () ;"
      },
      {
        "id": 7,
        "label": "let h = scramble (seed , salt) ;"
      },
      {
        "id": 8,
        "label": "let mut sum = 0u64 ;"
      },
      {
        "id": 9,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "let mut w = [0u8 ; 8] ;"
      },
      {
        "id": 12,
        "label": "w . copy_from_slice (& h [i * 4 .. i * 4 + 8 . min (h . len () - i * 4)]) ;"
      },
      {
        "id": 13,
        "label": "sum = sum . wrapping_add (u64 :: from_le_bytes (w)) ;"
      },
      {
        "id": 14,
        "label": "i += 1 ;"
      },
      {
        "id": 15,
        "label": "Loop End"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "sum & 1 == 1"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "ctx . accounts . stat . a = ctx . accounts . stat . a . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "sum & 2 == 2"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "ctx . accounts . stat . b = ctx . accounts . stat . b . wrapping_add (2) ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "let mut data = Vec :: with_capacity (16) ;"
      },
      {
        "id": 33,
        "label": "data . extend_from_slice (& h [0 .. 8]) ;"
      },
      {
        "id": 34,
        "label": "data . extend_from_slice (& h [24 .. 32]) ;"
      },
      {
        "id": 35,
        "label": "invoke (& Instruction { program_id : FIXED_STAT_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . stat_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data } , & [ctx . accounts . stat_hint . to_account_info () , ctx . accounts . stat_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 36,
        "label": "let mut prg = ctx . accounts . feed_hint . to_account_info () ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 42,
        "label": "ctx . accounts . stat . paths = ctx . accounts . stat . paths . saturating_add (4) ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let bytes = pay . rotate_left ((sum & 31) as u32) . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 47,
        "label": "invoke (& Instruction { program_id : * prg . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . feed_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : bytes } , & [prg , ctx . accounts . feed_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 48,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . treasury_auth . to_account_info () , }) , pay ,) ? ;"
      },
      {
        "id": 49,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "while"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 24,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      }
    ]
  }
]