[
  {
    "name": "cascade",
    "inputs": [
      "ctx: Context < Cascade >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . cascade_state ;"
      },
      {
        "id": 2,
        "label": "let mut left = amount ;"
      },
      {
        "id": 3,
        "label": "let chosen_program ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 1 { chosen_program = ctx . remaining_accounts [1] . clone () ; state . branches += 1 ; } else { chosen_program = ctx . accounts . backup_program . to_account_info () ; state . recoveries += 1 ; state . last_cascade = amount ; state . notes . push (\"backup path taken\" . to_string ()) ; state . retry_count += 2 ; state . flow_marker = state . flow_marker . wrapping_add (amount) ; }"
      },
      {
        "id": 5,
        "label": "chosen_program = ctx . remaining_accounts [1] . clone () ;"
      },
      {
        "id": 6,
        "label": "state . branches += 1 ;"
      },
      {
        "id": 7,
        "label": "chosen_program = ctx . accounts . backup_program . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "state . recoveries += 1 ;"
      },
      {
        "id": 9,
        "label": "state . last_cascade = amount ;"
      },
      {
        "id": 10,
        "label": "state . notes . push (\"backup path taken\" . to_string ()) ;"
      },
      {
        "id": 11,
        "label": "state . retry_count += 2 ;"
      },
      {
        "id": 12,
        "label": "state . flow_marker = state . flow_marker . wrapping_add (amount) ;"
      },
      {
        "id": 13,
        "label": "let bridge = CascadeBridge { initiator : ctx . accounts . operator . clone () , vault : ctx . accounts . vault . clone () } ;"
      },
      {
        "id": 14,
        "label": "while left > 0 { let portion = if left > state . unit { state . unit } else { left } ; let cx = bridge . as_cpi (chosen_program . clone ()) ; bridge . pass (cx , portion) ? ; state . total_sent += portion ; left -= portion ; }"
      },
      {
        "id": 15,
        "label": "let portion = if left > state . unit { state . unit } else { left } ;"
      },
      {
        "id": 16,
        "label": "state . unit"
      },
      {
        "id": 17,
        "label": "left"
      },
      {
        "id": 18,
        "label": "let cx = bridge . as_cpi (chosen_program . clone ()) ;"
      },
      {
        "id": 19,
        "label": "bridge . pass (cx , portion) ? ;"
      },
      {
        "id": 20,
        "label": "state . total_sent += portion ;"
      },
      {
        "id": 21,
        "label": "left -= portion ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: state"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: left"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: chosen_program"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: bridge"
      },
      {
        "from": 2,
        "to": 14,
        "label": "data_dep: left"
      },
      {
        "from": 2,
        "to": 14,
        "label": "data_dep: left"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 2,
        "to": 14,
        "label": "data_dep: left"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: bridge"
      },
      {
        "from": 3,
        "to": 14,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: bridge"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 2,
        "to": 14,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: portion"
      },
      {
        "from": 2,
        "to": 15,
        "label": "data_dep: left"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 2,
        "to": 15,
        "label": "data_dep: left"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: state"
      },
      {
        "from": 2,
        "to": 17,
        "label": "data_dep: left"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: cx"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: bridge"
      },
      {
        "from": 3,
        "to": 18,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: bridge"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: cx"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: portion"
      },
      {
        "from": 1,
        "to": 20,
        "label": "data_dep: state"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: portion"
      },
      {
        "from": 2,
        "to": 21,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: portion"
      }
    ]
  }
]