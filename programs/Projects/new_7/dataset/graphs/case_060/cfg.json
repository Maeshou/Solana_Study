[
  {
    "name": "setup_guild",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let guild = & mut ctx . accounts . guild_state ;"
      },
      {
        "id": 2,
        "label": "guild . leader = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "guild . total_fund = initial_fund . saturating_add (seed % 10 + 1) ;"
      },
      {
        "id": 4,
        "label": "guild . share_count = (seed / 2) % 5 + 2 ;"
      },
      {
        "id": 5,
        "label": "guild . history_index = initial_fund / 3 + 1 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "distribute_share",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let guild = & mut ctx . accounts . guild_state ;"
      },
      {
        "id": 9,
        "label": "let mut base_amount = contribution_factor . saturating_mul (guild . share_count as u64) ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "base_amount < 1"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "base_amount = guild . share_count as u64 + 1 ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "No-op"
      },
      {
        "id": 17,
        "label": "merge"
      },
      {
        "id": 18,
        "label": "let mut total_amount = base_amount . saturating_mul (members as u64) ;"
      },
      {
        "id": 19,
        "label": "let mut round_counter = 0 ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "let portion = (total_amount / (members as u64)) . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . token_program . key () , & ctx . accounts . guild_vault . key () , & ctx . accounts . member_vault . key () , & ctx . accounts . leader . key () , & [] , portion ,) ? ;"
      },
      {
        "id": 23,
        "label": "invoke (& ix , & [ctx . accounts . token_program . to_account_info () , ctx . accounts . guild_vault . to_account_info () , ctx . accounts . member_vault . to_account_info () , ctx . accounts . leader . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 24,
        "label": "total_amount = total_amount . saturating_sub (portion) ;"
      },
      {
        "id": 25,
        "label": "round_counter = round_counter . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "total_amount > 0"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "let ix2 = token_ix :: transfer (& ctx . accounts . token_program . key () , & ctx . accounts . guild_vault . key () , & ctx . accounts . member_vault . key () , & ctx . accounts . leader . key () , & [] , total_amount ,) ? ;"
      },
      {
        "id": 32,
        "label": "invoke (& ix2 , & [ctx . accounts . token_program . to_account_info () , ctx . accounts . guild_vault . to_account_info () , ctx . accounts . member_vault . to_account_info () , ctx . accounts . leader . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "guild . total_fund = guild . total_fund . saturating_sub (base_amount) ;"
      },
      {
        "id": 37,
        "label": "guild . history_index = guild . history_index . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "guild . share_count = guild . share_count . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 20,
        "to": 26,
        "label": "while"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 27,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      }
    ]
  }
]