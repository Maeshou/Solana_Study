[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . smithy ;"
      },
      {
        "id": 2,
        "label": "s . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "s . floor = floor ;"
      },
      {
        "id": 4,
        "label": "s . energy = 100 ;"
      },
      {
        "id": 5,
        "label": "s . sessions = 0 ;"
      },
      {
        "id": 6,
        "label": "s . total_bonus = 0 ;"
      },
      {
        "id": 7,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "s . energy = s . energy . saturating_add (5) ;"
      },
      {
        "id": 10,
        "label": "i += 1 ;"
      },
      {
        "id": 11,
        "label": "Loop End"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "while"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      }
    ]
  },
  {
    "name": "craft_and_tip",
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let s = & mut ctx . accounts . smithy ;"
      },
      {
        "id": 15,
        "label": "require ! (s . manager == ctx . accounts . manager . key () , Errs :: BadManager) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "s . energy > 10"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "let mut k = 0 ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "s . energy = s . energy . saturating_sub (1) ;"
      },
      {
        "id": 23,
        "label": "s . sessions = s . sessions . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "label . len () > 5"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "s . total_bonus = s . total_bonus . saturating_add ((label . len () as u64) * 2) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "let mut r = 0 ;"
      },
      {
        "id": 36,
        "label": "Loop Start"
      },
      {
        "id": 37,
        "label": "s . energy = s . energy . saturating_add (3) ;"
      },
      {
        "id": 38,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "s . floor > 0"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "s . floor = s . floor . saturating_sub (1) ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "let mut reward = base ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "reward < s . floor"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "let mut acc = 0u64 ;"
      },
      {
        "id": 55,
        "label": "let mut z = 0 ;"
      },
      {
        "id": 56,
        "label": "Loop Start"
      },
      {
        "id": 57,
        "label": "acc = acc . saturating_add (s . floor / 3) ;"
      },
      {
        "id": 58,
        "label": "z += 1 ;"
      },
      {
        "id": 59,
        "label": "Loop End"
      },
      {
        "id": 60,
        "label": "reward = acc ;"
      },
      {
        "id": 61,
        "label": "False body"
      },
      {
        "id": 62,
        "label": "let mut gain = 0u64 ;"
      },
      {
        "id": 63,
        "label": "let mut w = 0 ;"
      },
      {
        "id": 64,
        "label": "Loop Start"
      },
      {
        "id": 65,
        "label": "gain = gain . saturating_add ((w as u64) + 1) ;"
      },
      {
        "id": 66,
        "label": "w = w . saturating_add (1) ;"
      },
      {
        "id": 67,
        "label": "Loop End"
      },
      {
        "id": 68,
        "label": "reward = reward . saturating_add (gain) ;"
      },
      {
        "id": 69,
        "label": "merge"
      },
      {
        "id": 70,
        "label": "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . pool . key () , ctx . accounts . crafter_ata . key () , ctx . accounts . manager . key () , & [] , reward ,) ? ;"
      },
      {
        "id": 71,
        "label": "invoke (& ix , & [ctx . accounts . pool . to_account_info () , ctx . accounts . crafter_ata . to_account_info () , ctx . accounts . manager . to_account_info () ,]) ? ;"
      },
      {
        "id": 72,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 21,
        "to": 25,
        "label": "while"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 26,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 16,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "while"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 40,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 33,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "while"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 50,
        "to": 61,
        "label": "false"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "while"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 60,
        "to": 69,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      }
    ]
  }
]