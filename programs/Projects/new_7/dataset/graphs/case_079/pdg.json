[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "maxv: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . maxv = maxv ;"
      },
      {
        "id": 4,
        "label": "s . frame = 14 ;"
      },
      {
        "id": 5,
        "label": "s . cursor = (maxv % 23) + 2 ;"
      },
      {
        "id": 6,
        "label": "s . route = Pubkey :: new_from_array ([6u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "set",
    "inputs": [
      "ctx: Context < Set >",
      "p: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (s . admin , ctx . accounts . admin . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "s . route = p ;"
      },
      {
        "id": 12,
        "label": "s . frame += 1 ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "relay",
    "inputs": [
      "ctx: Context < Relay >",
      "v: u64",
      "iter: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "if v > s . maxv { s . frame += 2 ; s . cursor = s . cursor . wrapping_add (9) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "s . frame += 2 ;"
      },
      {
        "id": 18,
        "label": "s . cursor = s . cursor . wrapping_add (9) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut rest = v ;"
      },
      {
        "id": 21,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 22,
        "label": "while i < iter { let part = (rest / 2) . max (3) ; if part >= rest { break ; } let ix = token_ix :: transfer (& s . route , & ctx . accounts . cabinet . key () , & ctx . accounts . client . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ; let p = ctx . remaining_accounts . get (2) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [p . clone () , ctx . accounts . cabinet . to_account_info () , ctx . accounts . client . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; rest -= part ; s . frame += 1 ; s . cursor = s . cursor . wrapping_add (part % 13) ; i += 1 ; if i % 2 == 0 { s . cursor = s . cursor . rotate_left (1) ; } else { s . cursor = s . cursor . rotate_right (2) ; } }"
      },
      {
        "id": 23,
        "label": "let part = (rest / 2) . max (3) ;"
      },
      {
        "id": 24,
        "label": "if part >= rest { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let ix = token_ix :: transfer (& s . route , & ctx . accounts . cabinet . key () , & ctx . accounts . client . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;"
      },
      {
        "id": 27,
        "label": "let p = ctx . remaining_accounts . get (2) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& ix , & [p . clone () , ctx . accounts . cabinet . to_account_info () , ctx . accounts . client . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "rest -= part ;"
      },
      {
        "id": 30,
        "label": "s . frame += 1 ;"
      },
      {
        "id": 31,
        "label": "s . cursor = s . cursor . wrapping_add (part % 13) ;"
      },
      {
        "id": 32,
        "label": "i += 1 ;"
      },
      {
        "id": 33,
        "label": "if i % 2 == 0 { s . cursor = s . cursor . rotate_left (1) ; } else { s . cursor = s . cursor . rotate_right (2) ; }"
      },
      {
        "id": 34,
        "label": "s . cursor = s . cursor . rotate_left (1) ;"
      },
      {
        "id": 35,
        "label": "s . cursor = s . cursor . rotate_right (2) ;"
      },
      {
        "id": 36,
        "label": "if rest > 2 { let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . cabinet . key () , & ctx . accounts . client . key () , & ctx . accounts . admin . key () , & [] , rest - 2 ,) ? ; let p2 = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [p2 . clone () , ctx . accounts . cabinet . to_account_info () , ctx . accounts . client . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ; s . cursor = s . cursor . wrapping_add (rest - 2) ; }"
      },
      {
        "id": 37,
        "label": "let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . cabinet . key () , & ctx . accounts . client . key () , & ctx . accounts . admin . key () , & [] , rest - 2 ,) ? ;"
      },
      {
        "id": 38,
        "label": "let p2 = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 39,
        "label": "invoke (& ix2 , & [p2 . clone () , ctx . accounts . cabinet . to_account_info () , ctx . accounts . client . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 40,
        "label": "s . cursor = s . cursor . wrapping_add (rest - 2) ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: rest"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: i"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: rest"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: part"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: p"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: rest"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: part"
      },
      {
        "from": 21,
        "to": 32,
        "label": "data_dep: i"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: rest"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: p2"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: ix2"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: p2"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 40,
        "label": "data_dep: rest"
      }
    ]
  }
]