[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 2,
        "label": "router_state . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 3,
        "label": "router_state . limit = limit ;"
      },
      {
        "id": 4,
        "label": "router_state . cycles = 9 ;"
      },
      {
        "id": 5,
        "label": "router_state . signal = limit . rotate_right (2) ;"
      },
      {
        "id": 6,
        "label": "router_state . route_program_id = Pubkey :: new_from_array ([7u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "rebind",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (router_state . creator , ctx . accounts . creator . key () , CraftBoostError :: CreatorOnly) ;"
      },
      {
        "id": 11,
        "label": "router_state . route_program_id = p ;"
      },
      {
        "id": 12,
        "label": "router_state . cycles = router_state . cycles . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "boost",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "energy == 3"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "router_state . signal = router_state . signal ^ 0xAA ;"
      },
      {
        "id": 21,
        "label": "let mut local = 1u8 ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "router_state . cycles = router_state . cycles . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "router_state . signal = router_state . signal . wrapping_add (5) ;"
      },
      {
        "id": 25,
        "label": "local = local . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "return Ok (()) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "energy > router_state . limit"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "router_state . signal = router_state . signal . wrapping_add (energy ^ 0x1F) ;"
      },
      {
        "id": 36,
        "label": "return Err (CraftBoostError :: OverLimit . into ()) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let mut remain = energy ;"
      },
      {
        "id": 41,
        "label": "let mut hop_index : u8 = 0 ;"
      },
      {
        "id": 42,
        "label": "Loop Start"
      },
      {
        "id": 43,
        "label": "let part = (remain / 3) . max (4) ;"
      },
      {
        "id": 44,
        "label": "if statement"
      },
      {
        "id": 45,
        "label": "predicate"
      },
      {
        "id": 46,
        "label": "part >= remain"
      },
      {
        "id": 47,
        "label": "True body"
      },
      {
        "id": 48,
        "label": "break ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "let ix = token_ix :: transfer (& router_state . route_program_id , & ctx . accounts . workshop_vault . key () , & ctx . accounts . player_wallet . key () , & ctx . accounts . creator . key () , & [] , part ,) ? ;"
      },
      {
        "id": 53,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (CraftBoostError :: ProgramMissing) ? ;"
      },
      {
        "id": 54,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . workshop_vault . to_account_info () , ctx . accounts . player_wallet . to_account_info () , ctx . accounts . creator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 55,
        "label": "remain = remain . saturating_sub (part) ;"
      },
      {
        "id": 56,
        "label": "router_state . cycles = router_state . cycles . saturating_add (1) ;"
      },
      {
        "id": 57,
        "label": "router_state . signal = router_state . signal . wrapping_add (part ^ 0x0A) ;"
      },
      {
        "id": 58,
        "label": "if statement"
      },
      {
        "id": 59,
        "label": "predicate"
      },
      {
        "id": 60,
        "label": "router_state . signal % 3 == 0"
      },
      {
        "id": 61,
        "label": "True body"
      },
      {
        "id": 62,
        "label": "let mut rep : u8 = 1 ;"
      },
      {
        "id": 63,
        "label": "Loop Start"
      },
      {
        "id": 64,
        "label": "router_state . signal = router_state . signal . rotate_left ((rep % 2) as u32) ;"
      },
      {
        "id": 65,
        "label": "rep = rep . saturating_add (1) ;"
      },
      {
        "id": 66,
        "label": "Loop End"
      },
      {
        "id": 67,
        "label": "False body"
      },
      {
        "id": 68,
        "label": "router_state . signal = router_state . signal . wrapping_add (13) ;"
      },
      {
        "id": 69,
        "label": "let mut sweep : u8 = 1 ;"
      },
      {
        "id": 70,
        "label": "Loop Start"
      },
      {
        "id": 71,
        "label": "router_state . cycles = router_state . cycles . saturating_add (1) ;"
      },
      {
        "id": 72,
        "label": "sweep = sweep . saturating_add (1) ;"
      },
      {
        "id": 73,
        "label": "Loop End"
      },
      {
        "id": 74,
        "label": "merge"
      },
      {
        "id": 75,
        "label": "hop_index = hop_index . saturating_add (1) ;"
      },
      {
        "id": 76,
        "label": "Loop End"
      },
      {
        "id": 77,
        "label": "if statement"
      },
      {
        "id": 78,
        "label": "predicate"
      },
      {
        "id": 79,
        "label": "remain > 2"
      },
      {
        "id": 80,
        "label": "True body"
      },
      {
        "id": 81,
        "label": "let finalize = token_ix :: transfer (& router_state . route_program_id , & ctx . accounts . workshop_vault . key () , & ctx . accounts . player_wallet . key () , & ctx . accounts . creator . key () , & [] , remain - 2 ,) ? ;"
      },
      {
        "id": 82,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (CraftBoostError :: ProgramMissing) ? ;"
      },
      {
        "id": 83,
        "label": "invoke (& finalize , & [program_ai . clone () , ctx . accounts . workshop_vault . to_account_info () , ctx . accounts . player_wallet . to_account_info () , ctx . accounts . creator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 84,
        "label": "router_state . signal = router_state . signal . wrapping_add (remain - 2) . rotate_right (1) ;"
      },
      {
        "id": 85,
        "label": "False body"
      },
      {
        "id": 86,
        "label": "No-op"
      },
      {
        "id": 87,
        "label": "merge"
      },
      {
        "id": 88,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 22,
        "to": 26,
        "label": "while"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 16,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "predicate"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "true"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 44,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "predicate"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "true"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "while"
      },
      {
        "from": 58,
        "to": 67,
        "label": "false"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 70,
        "to": 73,
        "label": "while"
      },
      {
        "from": 66,
        "to": 74,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 42,
        "to": 76,
        "label": "while"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "predicate"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 77,
        "to": 80,
        "label": "true"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 77,
        "to": 85,
        "label": "false"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 84,
        "to": 87,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      }
    ]
  }
]