[
  {
    "name": "count_like_primes",
    "inputs": [
      "n: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut c = 0u64 ;"
      },
      {
        "id": 2,
        "label": "let mut i = 2u64 ;"
      },
      {
        "id": 3,
        "label": "while i <= n { let mut d = 2u64 ; let mut ok = true ; while d * d <= i { if i % d == 0 { ok = false ; } d += 1 ; } if ok { c = c . saturating_add (1) ; } i += 1 ; }"
      },
      {
        "id": 4,
        "label": "let mut d = 2u64 ;"
      },
      {
        "id": 5,
        "label": "let mut ok = true ;"
      },
      {
        "id": 6,
        "label": "while d * d <= i { if i % d == 0 { ok = false ; } d += 1 ; }"
      },
      {
        "id": 7,
        "label": "if i % d == 0 { ok = false ; }"
      },
      {
        "id": 8,
        "label": "ok = false ;"
      },
      {
        "id": 9,
        "label": "d += 1 ;"
      },
      {
        "id": 10,
        "label": "if ok { c = c . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "c = c . saturating_add (1) ;"
      },
      {
        "id": 12,
        "label": "i += 1 ;"
      },
      {
        "id": 13,
        "label": "c"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: i"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: d"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: ok"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: i"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: ok"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 2,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 4,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: ok"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: ok"
      },
      {
        "from": 4,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: ok"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 2,
        "to": 12,
        "label": "data_dep: i"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "n: u64",
      "reward: u64"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let k = count_like_primes (n) ;"
      },
      {
        "id": 16,
        "label": "if k > 0 { ctx . accounts . book . primes = ctx . accounts . book . primes . saturating_add (k) ; }"
      },
      {
        "id": 17,
        "label": "ctx . accounts . book . primes = ctx . accounts . book . primes . saturating_add (k) ;"
      },
      {
        "id": 18,
        "label": "let blob = k . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 19,
        "label": "invoke (& Instruction { program_id : FIXED_BOOK_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . book_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : blob } , & [ctx . accounts . book_hint . to_account_info () , ctx . accounts . book_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 20,
        "label": "let mut nprg = ctx . accounts . notice_hint . to_account_info () ;"
      },
      {
        "id": 21,
        "label": "if ! ctx . remaining_accounts . is_empty () { nprg = ctx . remaining_accounts [0] . clone () ; ctx . accounts . book . paths = ctx . accounts . book . paths . saturating_add (2) ; }"
      },
      {
        "id": 22,
        "label": "nprg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . book . paths = ctx . accounts . book . paths . saturating_add (2) ;"
      },
      {
        "id": 24,
        "label": "invoke (& Instruction { program_id : * nprg . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : reward . rotate_left ((k & 31) as u32) . to_le_bytes () . to_vec () } , & [nprg , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . bank_auth . to_account_info () , }) , reward ,) ? ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: k"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: k"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: k"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: k"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: blob"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: k"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: blob"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: nprg"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: nprg"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: nprg"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: nprg"
      },
      {
        "from": 15,
        "to": 24,
        "label": "data_dep: k"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: nprg"
      }
    ]
  }
]