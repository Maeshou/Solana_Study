[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . master = ctx . accounts . master . key () ;"
      },
      {
        "id": 3,
        "label": "s . cap = cap ;"
      },
      {
        "id": 4,
        "label": "s . steps = 5 ;"
      },
      {
        "id": 5,
        "label": "s . acc = (cap ^ 0xA5A5) as u64 ;"
      },
      {
        "id": 6,
        "label": "s . route = Pubkey :: new_unique () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "rebind",
    "inputs": [
      "ctx: Context < Rebind >",
      "new_route: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (s . master , ctx . accounts . master . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "s . route = new_route ;"
      },
      {
        "id": 12,
        "label": "s . steps += 3 ;"
      },
      {
        "id": 13,
        "label": "s . acc = s . acc . rotate_left (3) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "stream",
    "inputs": [
      "ctx: Context < Stream >",
      "value: u64",
      "loops: u8"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 17,
        "label": "if value <= 3 { s . steps += 1 ; s . acc = s . acc . wrapping_add (19) ; return Ok (()) ; }"
      },
      {
        "id": 18,
        "label": "s . steps += 1 ;"
      },
      {
        "id": 19,
        "label": "s . acc = s . acc . wrapping_add (19) ;"
      },
      {
        "id": 20,
        "label": "return Ok (()) ;"
      },
      {
        "id": 21,
        "label": "let mut rest = value ;"
      },
      {
        "id": 22,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 23,
        "label": "while i < loops { let part = (rest / 3) . max (4) ; if part >= rest { break ; } let ix = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . sink . key () , & ctx . accounts . master . key () , & [] , part ,) ? ; let prog = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [prog . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . sink . to_account_info () , ctx . accounts . master . to_account_info () ,] ,) ? ; rest -= part ; s . steps += 1 ; i += 1 ; if rest < s . cap / 3 { s . acc = s . acc . wrapping_add (part ^ 17) ; } else { s . acc = s . acc . wrapping_mul (3) . wrapping_add (23) ; } }"
      },
      {
        "id": 24,
        "label": "let part = (rest / 3) . max (4) ;"
      },
      {
        "id": 25,
        "label": "if part >= rest { break ; }"
      },
      {
        "id": 26,
        "label": "break ;"
      },
      {
        "id": 27,
        "label": "let ix = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . sink . key () , & ctx . accounts . master . key () , & [] , part ,) ? ;"
      },
      {
        "id": 28,
        "label": "let prog = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 29,
        "label": "invoke (& ix , & [prog . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . sink . to_account_info () , ctx . accounts . master . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 30,
        "label": "rest -= part ;"
      },
      {
        "id": 31,
        "label": "s . steps += 1 ;"
      },
      {
        "id": 32,
        "label": "i += 1 ;"
      },
      {
        "id": 33,
        "label": "if rest < s . cap / 3 { s . acc = s . acc . wrapping_add (part ^ 17) ; } else { s . acc = s . acc . wrapping_mul (3) . wrapping_add (23) ; }"
      },
      {
        "id": 34,
        "label": "s . acc = s . acc . wrapping_add (part ^ 17) ;"
      },
      {
        "id": 35,
        "label": "s . acc = s . acc . wrapping_mul (3) . wrapping_add (23) ;"
      },
      {
        "id": 36,
        "label": "if rest > 3 { let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . sink . key () , & ctx . accounts . master . key () , & [] , rest - 3 ,) ? ; let prog = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [prog . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . sink . to_account_info () , ctx . accounts . master . to_account_info () ,] ,) ? ; s . acc = s . acc . wrapping_add (rest - 3) ; }"
      },
      {
        "id": 37,
        "label": "let ix2 = token_ix :: transfer (& s . route , & ctx . accounts . source . key () , & ctx . accounts . sink . key () , & ctx . accounts . master . key () , & [] , rest - 3 ,) ? ;"
      },
      {
        "id": 38,
        "label": "let prog = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 39,
        "label": "invoke (& ix2 , & [prog . clone () , ctx . accounts . source . to_account_info () , ctx . accounts . sink . to_account_info () , ctx . accounts . master . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 40,
        "label": "s . acc = s . acc . wrapping_add (rest - 3) ;"
      },
      {
        "id": 41,
        "label": "let mut t = 1u8 ;"
      },
      {
        "id": 42,
        "label": "while t < 3 { s . steps += 2 ; s . acc = s . acc . rotate_right (t as u32) ; t += 1 ; }"
      },
      {
        "id": 43,
        "label": "s . steps += 2 ;"
      },
      {
        "id": 44,
        "label": "s . acc = s . acc . rotate_right (t as u32) ;"
      },
      {
        "id": 45,
        "label": "t += 1 ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: rest"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: i"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: i"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: i"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: rest"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: part"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: rest"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: part"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: rest"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: ix"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: part"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: prog"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: ix"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: prog"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: rest"
      },
      {
        "from": 24,
        "to": 30,
        "label": "data_dep: part"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 32,
        "label": "data_dep: i"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: rest"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 33,
        "label": "data_dep: part"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: s"
      },
      {
        "from": 24,
        "to": 34,
        "label": "data_dep: part"
      },
      {
        "from": 16,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 35,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 16,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 28,
        "to": 36,
        "label": "data_dep: prog"
      },
      {
        "from": 16,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 36,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: rest"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: ix2"
      },
      {
        "from": 16,
        "to": 37,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 37,
        "label": "data_dep: rest"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: prog"
      },
      {
        "from": 37,
        "to": 39,
        "label": "data_dep: ix2"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: prog"
      },
      {
        "from": 16,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 40,
        "label": "data_dep: s"
      },
      {
        "from": 21,
        "to": 40,
        "label": "data_dep: rest"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: t"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: t"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 42,
        "label": "data_dep: s"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: t"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: t"
      },
      {
        "from": 16,
        "to": 43,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 44,
        "label": "data_dep: s"
      },
      {
        "from": 41,
        "to": 44,
        "label": "data_dep: t"
      },
      {
        "from": 41,
        "to": 45,
        "label": "data_dep: t"
      }
    ]
  }
]