[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pipeline_state = & mut ctx . accounts . pipeline_state ;"
      },
      {
        "id": 2,
        "label": "pipeline_state . master_authority = ctx . accounts . master_authority . key () ;"
      },
      {
        "id": 3,
        "label": "pipeline_state . cap_value = cap_value ;"
      },
      {
        "id": 4,
        "label": "pipeline_state . step_counter = 5 ;"
      },
      {
        "id": 5,
        "label": "pipeline_state . accumulator = (cap_value ^ 0xA5A5) as u64 ;"
      },
      {
        "id": 6,
        "label": "pipeline_state . route_program_id = Pubkey :: new_unique () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "rebind",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pipeline_state = & mut ctx . accounts . pipeline_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (pipeline_state . master_authority , ctx . accounts . master_authority . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "pipeline_state . route_program_id = new_route ;"
      },
      {
        "id": 12,
        "label": "pipeline_state . step_counter = pipeline_state . step_counter . saturating_add (3) ;"
      },
      {
        "id": 13,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . rotate_left (3) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "stream",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let pipeline_state = & mut ctx . accounts . pipeline_state ;"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "value <= 3"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "pipeline_state . step_counter = pipeline_state . step_counter . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . wrapping_add (19) ;"
      },
      {
        "id": 23,
        "label": "return Ok (()) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "let mut remaining_value = value ;"
      },
      {
        "id": 28,
        "label": "let mut round_index : u8 = 0 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "let transfer_part = (remaining_value / 3) . max (4) ;"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "transfer_part >= remaining_value"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "break ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "No-op"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "let transfer_ix = token_ix :: transfer (& pipeline_state . route_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . sink_vault . key () , & ctx . accounts . master_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 40,
        "label": "let external_program_ai = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 41,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . sink_vault . to_account_info () , ctx . accounts . master_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 42,
        "label": "remaining_value = remaining_value . saturating_sub (transfer_part) ;"
      },
      {
        "id": 43,
        "label": "pipeline_state . step_counter = pipeline_state . step_counter . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "round_index = round_index . saturating_add (1) ;"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "remaining_value < pipeline_state . cap_value / 3"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . wrapping_add (transfer_part ^ 17) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . wrapping_mul (3) . wrapping_add (23) ;"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "Loop End"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "remaining_value > 3"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "let final_ix = token_ix :: transfer (& pipeline_state . route_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . sink_vault . key () , & ctx . accounts . master_authority . key () , & [] , remaining_value - 3 ,) ? ;"
      },
      {
        "id": 59,
        "label": "let external_program_ai = ctx . remaining_accounts . get (1) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 60,
        "label": "invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . sink_vault . to_account_info () , ctx . accounts . master_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 61,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . wrapping_add (remaining_value - 3) ;"
      },
      {
        "id": 62,
        "label": "False body"
      },
      {
        "id": 63,
        "label": "No-op"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "let mut tail_turn : u8 = 1 ;"
      },
      {
        "id": 66,
        "label": "Loop Start"
      },
      {
        "id": 67,
        "label": "pipeline_state . step_counter = pipeline_state . step_counter . saturating_add (2) ;"
      },
      {
        "id": 68,
        "label": "pipeline_state . accumulator = pipeline_state . accumulator . rotate_right (tail_turn as u32) ;"
      },
      {
        "id": 69,
        "label": "tail_turn = tail_turn . saturating_add (1) ;"
      },
      {
        "id": 70,
        "label": "Loop End"
      },
      {
        "id": 71,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 17,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 31,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 45,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 29,
        "to": 53,
        "label": "while"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 54,
        "to": 62,
        "label": "false"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 66,
        "to": 70,
        "label": "while"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      }
    ]
  }
]