[
  {
    "name": "initialize",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . settings ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "st . threshold = threshold ;"
      },
      {
        "id": 4,
        "label": "st . processed = 0 ;"
      },
      {
        "id": 5,
        "label": "st . sent = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "bridge_points",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . settings ;"
      },
      {
        "id": 9,
        "label": "let mut remain = amount ;"
      },
      {
        "id": 10,
        "label": "let mut loop_count = 0u8 ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "remain < st . threshold"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "st . processed += 1 ;"
      },
      {
        "id": 16,
        "label": "return Ok (()) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let chosen = if (seed % 2) == 0 { & ctx . accounts . program_a } else { & ctx . accounts . program_b } ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "let slice = (remain / 4) . max (1) ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "slice > remain"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "break ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "let ix = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , slice ,) ? ;"
      },
      {
        "id": 32,
        "label": "invoke (& ix , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 33,
        "label": "remain -= slice ;"
      },
      {
        "id": 34,
        "label": "st . sent += slice ;"
      },
      {
        "id": 35,
        "label": "st . processed += 1 ;"
      },
      {
        "id": 36,
        "label": "let mut j = 0u8 ;"
      },
      {
        "id": 37,
        "label": "Loop Start"
      },
      {
        "id": 38,
        "label": "st . sent += (seed % 3) as u64 ;"
      },
      {
        "id": 39,
        "label": "j += 1 ;"
      },
      {
        "id": 40,
        "label": "Loop End"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "remain == 0"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "break ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 50,
        "label": "Loop End"
      },
      {
        "id": 51,
        "label": "if statement"
      },
      {
        "id": 52,
        "label": "predicate"
      },
      {
        "id": 53,
        "label": "remain > 0"
      },
      {
        "id": 54,
        "label": "True body"
      },
      {
        "id": 55,
        "label": "let ix2 = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , remain ,) ? ;"
      },
      {
        "id": 56,
        "label": "invoke (& ix2 , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 57,
        "label": "st . sent += remain ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "No-op"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 11,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "while"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 41,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 21,
        "to": 50,
        "label": "while"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "predicate"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "true"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 51,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      }
    ]
  }
]