[
  {
    "name": "initialize",
    "inputs": [
      "ctx: Context < Initialize >",
      "threshold: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . settings ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "st . threshold = threshold ;"
      },
      {
        "id": 4,
        "label": "st . processed = 0 ;"
      },
      {
        "id": 5,
        "label": "st . sent = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "bridge_points",
    "inputs": [
      "ctx: Context < BridgePoints >",
      "amount: u64",
      "tick: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . settings ;"
      },
      {
        "id": 9,
        "label": "let mut remain = amount ;"
      },
      {
        "id": 10,
        "label": "let mut loop_count = 0u8 ;"
      },
      {
        "id": 11,
        "label": "if remain < st . threshold { st . processed += 1 ; return Ok (()) ; }"
      },
      {
        "id": 12,
        "label": "st . processed += 1 ;"
      },
      {
        "id": 13,
        "label": "return Ok (()) ;"
      },
      {
        "id": 14,
        "label": "let chosen = if (seed % 2) == 0 { & ctx . accounts . program_a } else { & ctx . accounts . program_b } ;"
      },
      {
        "id": 15,
        "label": "& ctx . accounts . program_a"
      },
      {
        "id": 16,
        "label": "& ctx . accounts . program_b"
      },
      {
        "id": 17,
        "label": "while loop_count < tick { let slice = (remain / 4) . max (1) ; if slice > remain { break ; } let ix = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , slice ,) ? ; invoke (& ix , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; remain -= slice ; st . sent += slice ; st . processed += 1 ; let mut j = 0u8 ; while j < 2 { st . sent += (seed % 3) as u64 ; j += 1 ; } if remain == 0 { break ; } loop_count += 1 ; }"
      },
      {
        "id": 18,
        "label": "let slice = (remain / 4) . max (1) ;"
      },
      {
        "id": 19,
        "label": "if slice > remain { break ; }"
      },
      {
        "id": 20,
        "label": "break ;"
      },
      {
        "id": 21,
        "label": "let ix = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , slice ,) ? ;"
      },
      {
        "id": 22,
        "label": "invoke (& ix , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 23,
        "label": "remain -= slice ;"
      },
      {
        "id": 24,
        "label": "st . sent += slice ;"
      },
      {
        "id": 25,
        "label": "st . processed += 1 ;"
      },
      {
        "id": 26,
        "label": "let mut j = 0u8 ;"
      },
      {
        "id": 27,
        "label": "while j < 2 { st . sent += (seed % 3) as u64 ; j += 1 ; }"
      },
      {
        "id": 28,
        "label": "st . sent += (seed % 3) as u64 ;"
      },
      {
        "id": 29,
        "label": "j += 1 ;"
      },
      {
        "id": 30,
        "label": "if remain == 0 { break ; }"
      },
      {
        "id": 31,
        "label": "break ;"
      },
      {
        "id": 32,
        "label": "loop_count += 1 ;"
      },
      {
        "id": 33,
        "label": "if remain > 0 { let ix2 = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , remain ,) ? ; invoke (& ix2 , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; st . sent += remain ; }"
      },
      {
        "id": 34,
        "label": "let ix2 = token_ix :: transfer (& chosen . key () , & ctx . accounts . source_vault . key () , & ctx . accounts . dest_vault . key () , & ctx . accounts . owner . key () , & [] , remain ,) ? ;"
      },
      {
        "id": 35,
        "label": "invoke (& ix2 , & [chosen . to_account_info () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . dest_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 36,
        "label": "st . sent += remain ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: st"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: remain"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: loop_count"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: remain"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: chosen"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: loop_count"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: chosen"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: chosen"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: loop_count"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: slice"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: remain"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: slice"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: remain"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: ix"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: chosen"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: slice"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: ix"
      },
      {
        "from": 14,
        "to": 22,
        "label": "data_dep: chosen"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: remain"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: slice"
      },
      {
        "from": 8,
        "to": 24,
        "label": "data_dep: st"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: slice"
      },
      {
        "from": 8,
        "to": 25,
        "label": "data_dep: st"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: j"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: j"
      },
      {
        "from": 8,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: j"
      },
      {
        "from": 8,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 30,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 32,
        "label": "data_dep: loop_count"
      },
      {
        "from": 9,
        "to": 33,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: chosen"
      },
      {
        "from": 9,
        "to": 33,
        "label": "data_dep: remain"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: chosen"
      },
      {
        "from": 8,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 33,
        "label": "data_dep: remain"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: ix2"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: chosen"
      },
      {
        "from": 9,
        "to": 34,
        "label": "data_dep: remain"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: ix2"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: chosen"
      },
      {
        "from": 8,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 36,
        "label": "data_dep: remain"
      }
    ]
  }
]