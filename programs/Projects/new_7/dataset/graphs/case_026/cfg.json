[
  {
    "name": "config",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "p . host = ctx . accounts . host . key () ;"
      },
      {
        "id": 3,
        "label": "p . cap = cap ;"
      },
      {
        "id": 4,
        "label": "p . games = 0 ;"
      },
      {
        "id": 5,
        "label": "p . paid = 0 ;"
      },
      {
        "id": 6,
        "label": "p . acc = 0 ;"
      },
      {
        "id": 7,
        "label": "let mut warm = 0u8 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "p . acc = p . acc . saturating_add (((cap % 11) as u32) + (warm as u32)) ;"
      },
      {
        "id": 10,
        "label": "warm = warm . saturating_add (1) ;"
      },
      {
        "id": 11,
        "label": "Loop End"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "while"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      }
    ]
  },
  {
    "name": "record_and_pay",
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let p = & mut ctx . accounts . pool ;"
      },
      {
        "id": 15,
        "label": "require ! (p . host == ctx . accounts . host . key () , Errs :: Host) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "place == 1"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "let b = label . as_bytes () ;"
      },
      {
        "id": 21,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 22,
        "label": "let mut bonus = 0u64 ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "bonus = bonus . saturating_add ((b [i] as u64) % 13 + 1) ;"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "i % 4 == 0"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "p . acc = p . acc . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "No-op"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "i += 1 ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "p . paid = p . paid . saturating_add (bonus) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "let mut cool = 0u8 ;"
      },
      {
        "id": 38,
        "label": "Loop Start"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "p . acc > 0"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "p . acc = p . acc . saturating_sub (1) ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "cool % 3 == 0"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "p . games = p . games . saturating_add (1) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "cool = cool . saturating_add (1) ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "merge"
      },
      {
        "id": 58,
        "label": "let mut award = (p . cap / 10) . saturating_mul ((4 - (place as u64) . min (3))) ;"
      },
      {
        "id": 59,
        "label": "let mut add = 0u64 ;"
      },
      {
        "id": 60,
        "label": "let mut s = 0u8 ;"
      },
      {
        "id": 61,
        "label": "Loop Start"
      },
      {
        "id": 62,
        "label": "add = add . saturating_add (((p . acc % 9) as u64) + (s as u64)) ;"
      },
      {
        "id": 63,
        "label": "s = s . saturating_add (1) ;"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "award = award . saturating_add (add) ;"
      },
      {
        "id": 66,
        "label": "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . fund . key () , ctx . accounts . winner_ata . key () , ctx . accounts . host . key () , & [] , award ,) ? ;"
      },
      {
        "id": 67,
        "label": "invoke (& ix , & [ctx . accounts . fund . to_account_info () , ctx . accounts . winner_ata . to_account_info () , ctx . accounts . host . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 68,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 25,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 23,
        "to": 34,
        "label": "while"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 16,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 39,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 38,
        "to": 56,
        "label": "while"
      },
      {
        "from": 35,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "while"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      }
    ]
  }
]