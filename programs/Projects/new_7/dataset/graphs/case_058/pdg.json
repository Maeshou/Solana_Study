[
  {
    "name": "open",
    "inputs": [
      "ctx: Context < Open >",
      "fee_bps: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "m . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "m . fee_bps = fee_bps . min (1200) ;"
      },
      {
        "id": 4,
        "label": "m . turnover = 0 ;"
      },
      {
        "id": 5,
        "label": "m . orders = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: m"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: m"
      }
    ]
  },
  {
    "name": "settle",
    "inputs": [
      "ctx: Context < Settle >",
      "gross: u64",
      "parts: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 9,
        "label": "let fee = gross . saturating_mul (m . fee_bps as u64) / 10_000 ;"
      },
      {
        "id": 10,
        "label": "let mut remain = if gross > fee { gross - fee } else { 0 } ;"
      },
      {
        "id": 11,
        "label": "gross - fee"
      },
      {
        "id": 12,
        "label": "0"
      },
      {
        "id": 13,
        "label": "if remain == 0 { m . orders = m . orders . saturating_add (1) ; return Ok (()) ; }"
      },
      {
        "id": 14,
        "label": "m . orders = m . orders . saturating_add (1) ;"
      },
      {
        "id": 15,
        "label": "return Ok (()) ;"
      },
      {
        "id": 16,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 17,
        "label": "while i < parts { let chunk = remain / 2 ; if chunk == 0 { break ; } let ix = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . treasury . key () , & ctx . accounts . seller_vault . key () , & ctx . accounts . owner . key () , & [] , chunk ,) ? ; invoke (& ix , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . seller_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; remain = remain . saturating_sub (chunk) ; i += 1 ; }"
      },
      {
        "id": 18,
        "label": "let chunk = remain / 2 ;"
      },
      {
        "id": 19,
        "label": "if chunk == 0 { break ; }"
      },
      {
        "id": 20,
        "label": "break ;"
      },
      {
        "id": 21,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . treasury . key () , & ctx . accounts . seller_vault . key () , & ctx . accounts . owner . key () , & [] , chunk ,) ? ;"
      },
      {
        "id": 22,
        "label": "invoke (& ix , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . seller_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 23,
        "label": "remain = remain . saturating_sub (chunk) ;"
      },
      {
        "id": 24,
        "label": "i += 1 ;"
      },
      {
        "id": 25,
        "label": "if remain > 0 { let ix2 = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . treasury . key () , & ctx . accounts . seller_vault . key () , & ctx . accounts . owner . key () , & [] , remain ,) ? ; invoke (& ix2 , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . seller_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ; }"
      },
      {
        "id": 26,
        "label": "let ix2 = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . treasury . key () , & ctx . accounts . seller_vault . key () , & ctx . accounts . owner . key () , & [] , remain ,) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix2 , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . seller_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "m . turnover = m . turnover . saturating_add (gross) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: m"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: fee"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: m"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: remain"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: fee"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: fee"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: remain"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: m"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: remain"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: chunk"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: remain"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: chunk"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: ix"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: chunk"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: ix"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: remain"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: chunk"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: remain"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: remain"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix2"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: remain"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: ix2"
      },
      {
        "from": 8,
        "to": 28,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 28,
        "label": "data_dep: m"
      }
    ]
  }
]