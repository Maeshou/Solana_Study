[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let faucet_state = & mut ctx . accounts . faucet_state ;"
      },
      {
        "id": 2,
        "label": "faucet_state . owner_authority = ctx . accounts . owner_authority . key () ;"
      },
      {
        "id": 3,
        "label": "faucet_state . quota = quota ;"
      },
      {
        "id": 4,
        "label": "faucet_state . trace = quota . rotate_left (3) ;"
      },
      {
        "id": 5,
        "label": "faucet_state . turns = 5 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "spray",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let faucet_state = & mut ctx . accounts . faucet_state ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "paint_units == 1"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "faucet_state . turns = faucet_state . turns . saturating_add (2) ;"
      },
      {
        "id": 14,
        "label": "faucet_state . trace = faucet_state . trace ^ 0x77 ;"
      },
      {
        "id": 15,
        "label": "let mut tick : u8 = 1 ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "faucet_state . trace = faucet_state . trace . wrapping_add ((tick as u64) * 3) ;"
      },
      {
        "id": 18,
        "label": "tick = tick . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "return Ok (()) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "paint_units > faucet_state . quota"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "faucet_state . trace = faucet_state . trace . wrapping_add (paint_units ^ 0x55) ;"
      },
      {
        "id": 29,
        "label": "return Err (FaucetError :: QuotaExceeded . into ()) ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "No-op"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "let mut remaining = paint_units ;"
      },
      {
        "id": 34,
        "label": "let mut wave_index : u8 = 0 ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "let chunk = (remaining / 2) . max (4) ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "chunk >= remaining"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "break ;"
      },
      {
        "id": 42,
        "label": "False body"
      },
      {
        "id": 43,
        "label": "No-op"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "let ix = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . palette_bank . key () , false) , AccountMeta :: new (ctx . accounts . artist_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner_authority . key () , true) ,] , data : { let mut bytes = Vec :: with_capacity (16) ; bytes . push (9) ; bytes . extend_from_slice (& chunk . to_le_bytes ()) ; bytes . extend_from_slice (& faucet_state . turns . to_le_bytes ()) ; bytes } , } ;"
      },
      {
        "id": 46,
        "label": "let pick_slot = if (pick_index as usize) < ctx . remaining_accounts . len () { pick_index as usize } else { 0usize } ;"
      },
      {
        "id": 47,
        "label": "let external_program_ai = ctx . remaining_accounts . get (pick_slot) . ok_or (FaucetError :: ExternalMissing) ? ;"
      },
      {
        "id": 48,
        "label": "invoke (& ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 49,
        "label": "remaining = remaining . saturating_sub (chunk) ;"
      },
      {
        "id": 50,
        "label": "faucet_state . turns = faucet_state . turns . saturating_add (1) ;"
      },
      {
        "id": 51,
        "label": "faucet_state . trace = faucet_state . trace . wrapping_add (chunk ^ 0x2B) ;"
      },
      {
        "id": 52,
        "label": "if statement"
      },
      {
        "id": 53,
        "label": "predicate"
      },
      {
        "id": 54,
        "label": "faucet_state . trace % 2 == 0"
      },
      {
        "id": 55,
        "label": "True body"
      },
      {
        "id": 56,
        "label": "faucet_state . trace = faucet_state . trace . rotate_left (2) ;"
      },
      {
        "id": 57,
        "label": "let mut inner = 1u8 ;"
      },
      {
        "id": 58,
        "label": "Loop Start"
      },
      {
        "id": 59,
        "label": "faucet_state . trace = faucet_state . trace . wrapping_add ((inner as u64) * 5) ;"
      },
      {
        "id": 60,
        "label": "inner = inner . saturating_add (1) ;"
      },
      {
        "id": 61,
        "label": "Loop End"
      },
      {
        "id": 62,
        "label": "False body"
      },
      {
        "id": 63,
        "label": "faucet_state . trace = faucet_state . trace . rotate_right (3) . wrapping_add (7) ;"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "wave_index = wave_index . saturating_add (1) ;"
      },
      {
        "id": 66,
        "label": "Loop End"
      },
      {
        "id": 67,
        "label": "if statement"
      },
      {
        "id": 68,
        "label": "predicate"
      },
      {
        "id": 69,
        "label": "remaining > 3"
      },
      {
        "id": 70,
        "label": "True body"
      },
      {
        "id": 71,
        "label": "let finalize_ix = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . palette_bank . key () , false) , AccountMeta :: new (ctx . accounts . artist_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner_authority . key () , true) ,] , data : { let mut d = vec ! [0xAB] ; d . extend_from_slice (& (remaining - 3) . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 72,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (FaucetError :: ExternalMissing) ? ;"
      },
      {
        "id": 73,
        "label": "invoke (& finalize_ix , & [external_program_ai . clone () , ctx . accounts . palette_bank . to_account_info () , ctx . accounts . artist_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 74,
        "label": "faucet_state . trace = faucet_state . trace . wrapping_add (remaining - 3) . rotate_left (1) ;"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "No-op"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 9,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 37,
        "to": 42,
        "label": "false"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "predicate"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "true"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "while"
      },
      {
        "from": 52,
        "to": 62,
        "label": "false"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 35,
        "to": 66,
        "label": "while"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "predicate"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "true"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 67,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      }
    ]
  }
]