[
  {
    "name": "ring",
    "inputs": [
      "ctx: Context < Ring >",
      "tone: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . score ;"
      },
      {
        "id": 2,
        "label": "let mut next = ctx . accounts . effect_prog . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "for _ in 0 .. (tone % 2 + 1) { s . left += tone ; }"
      },
      {
        "id": 4,
        "label": "s . left += tone ;"
      },
      {
        "id": 5,
        "label": "if s . left & 1 == 0 { s . right = s . right . wrapping_add (3) ; }"
      },
      {
        "id": 6,
        "label": "s . right = s . right . wrapping_add (3) ;"
      },
      {
        "id": 7,
        "label": "for _ in 0 .. (tone % 3) { s . beat ^= Clock :: get () ? . slot ; }"
      },
      {
        "id": 8,
        "label": "s . beat ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 9,
        "label": "if ctx . remaining_accounts . len () > 0 { next = ctx . remaining_accounts [0] . clone () ; s . routes += 1 ; }"
      },
      {
        "id": 10,
        "label": "next = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "s . routes += 1 ;"
      },
      {
        "id": 12,
        "label": "let br = EffectBridge { altar : ctx . accounts . altar . to_account_info () , speaker : ctx . accounts . speaker . to_account_info () } ;"
      },
      {
        "id": 13,
        "label": "let cx = br . as_cpi (next . clone ()) ;"
      },
      {
        "id": 14,
        "label": "br . fire (cx , tone . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: next"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 9,
        "label": "data_dep: next"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: next"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: br"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: cx"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: next"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: br"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cx"
      }
    ]
  }
]