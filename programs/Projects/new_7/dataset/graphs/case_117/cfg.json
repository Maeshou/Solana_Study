[
  {
    "name": "submit",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . board ;"
      },
      {
        "id": 2,
        "label": "s . submits += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . default_prog . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "s . path_a += pts ;"
      },
      {
        "id": 9,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "s . path_b += pts ;"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let br = ScoreBridge { player : ctx . accounts . player_acct . to_account_info () , table : ctx . accounts . table_acct . to_account_info () , } ;"
      },
      {
        "id": 14,
        "label": "let block = (pts / 2) + 3 ;"
      },
      {
        "id": 15,
        "label": "let mut left = pts ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "let take = if left > block { block } else { left } ;"
      },
      {
        "id": 18,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 19,
        "label": "br . push (cx , take + s . submits) ? ;"
      },
      {
        "id": 20,
        "label": "left -= take ;"
      },
      {
        "id": 21,
        "label": "Loop End"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "while"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      }
    ]
  }
]