[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "max_batch: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let forward_state = & mut ctx . accounts . forward_state ;"
      },
      {
        "id": 2,
        "label": "forward_state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "forward_state . max_batch = max_batch ;"
      },
      {
        "id": 4,
        "label": "forward_state . pulses = 8 ;"
      },
      {
        "id": 5,
        "label": "forward_state . score = max_batch ^ 0x5151 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: forward_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: forward_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: forward_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: forward_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: forward_state"
      }
    ]
  },
  {
    "name": "push",
    "inputs": [
      "ctx: Context < Push >",
      "route_program: Pubkey",
      "tickets: u64",
      "steps: u8",
      "program_slot: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let forward_state = & mut ctx . accounts . forward_state ;"
      },
      {
        "id": 9,
        "label": "if tickets > forward_state . max_batch { forward_state . pulses = forward_state . pulses . saturating_add (3) ; forward_state . score = forward_state . score . wrapping_add (tickets) ; return Err (ForwardError :: BatchTooLarge . into ()) ; }"
      },
      {
        "id": 10,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (3) ;"
      },
      {
        "id": 11,
        "label": "forward_state . score = forward_state . score . wrapping_add (tickets) ;"
      },
      {
        "id": 12,
        "label": "return Err (ForwardError :: BatchTooLarge . into ()) ;"
      },
      {
        "id": 13,
        "label": "if tickets == 2 { forward_state . score = forward_state . score . rotate_right (1) ; let mut light = 1u8 ; while light < 3 { forward_state . pulses = forward_state . pulses . saturating_add (1) ; forward_state . score = forward_state . score . wrapping_add (light as u64) ; light = light . saturating_add (1) ; } return Ok (()) ; }"
      },
      {
        "id": 14,
        "label": "forward_state . score = forward_state . score . rotate_right (1) ;"
      },
      {
        "id": 15,
        "label": "let mut light = 1u8 ;"
      },
      {
        "id": 16,
        "label": "while light < 3 { forward_state . pulses = forward_state . pulses . saturating_add (1) ; forward_state . score = forward_state . score . wrapping_add (light as u64) ; light = light . saturating_add (1) ; }"
      },
      {
        "id": 17,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "forward_state . score = forward_state . score . wrapping_add (light as u64) ;"
      },
      {
        "id": 19,
        "label": "light = light . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "return Ok (()) ;"
      },
      {
        "id": 21,
        "label": "let mut left = tickets ;"
      },
      {
        "id": 22,
        "label": "let mut step_index : u8 = 0 ;"
      },
      {
        "id": 23,
        "label": "while step_index < steps { let chunk = (left / 2) . max (3) ; if chunk >= left { break ; } let ix = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0x01] ; d . extend_from_slice (& chunk . to_le_bytes ()) ; d } , } ; let selected = if (program_slot as usize) < ctx . remaining_accounts . len () { program_slot as usize } else { 0usize } ; let program_ai = ctx . remaining_accounts . get (selected) . ok_or (ForwardError :: NoTargetProgram) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; left = left . saturating_sub (chunk) ; forward_state . pulses = forward_state . pulses . saturating_add (1) ; forward_state . score = forward_state . score . wrapping_add (chunk ^ 0x0D) ; let mut micro = 1u8 ; while micro < 4 { forward_state . score = forward_state . score . rotate_left ((micro % 2) as u32) . wrapping_add (5) ; micro = micro . saturating_add (1) ; } if left < forward_state . max_batch / 2 { forward_state . score = forward_state . score . wrapping_add (21) ; } else { forward_state . score = forward_state . score . wrapping_sub (9) . wrapping_add (3) ; } step_index = step_index . saturating_add (1) ; }"
      },
      {
        "id": 24,
        "label": "let chunk = (left / 2) . max (3) ;"
      },
      {
        "id": 25,
        "label": "if chunk >= left { break ; }"
      },
      {
        "id": 26,
        "label": "break ;"
      },
      {
        "id": 27,
        "label": "let ix = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0x01] ; d . extend_from_slice (& chunk . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 28,
        "label": "let mut d = vec ! [0x01] ;"
      },
      {
        "id": 29,
        "label": "d . extend_from_slice (& chunk . to_le_bytes ()) ;"
      },
      {
        "id": 30,
        "label": "d"
      },
      {
        "id": 31,
        "label": "let selected = if (program_slot as usize) < ctx . remaining_accounts . len () { program_slot as usize } else { 0usize } ;"
      },
      {
        "id": 32,
        "label": "program_slot as usize"
      },
      {
        "id": 33,
        "label": "0usize"
      },
      {
        "id": 34,
        "label": "let program_ai = ctx . remaining_accounts . get (selected) . ok_or (ForwardError :: NoTargetProgram) ? ;"
      },
      {
        "id": 35,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 36,
        "label": "left = left . saturating_sub (chunk) ;"
      },
      {
        "id": 37,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "forward_state . score = forward_state . score . wrapping_add (chunk ^ 0x0D) ;"
      },
      {
        "id": 39,
        "label": "let mut micro = 1u8 ;"
      },
      {
        "id": 40,
        "label": "while micro < 4 { forward_state . score = forward_state . score . rotate_left ((micro % 2) as u32) . wrapping_add (5) ; micro = micro . saturating_add (1) ; }"
      },
      {
        "id": 41,
        "label": "forward_state . score = forward_state . score . rotate_left ((micro % 2) as u32) . wrapping_add (5) ;"
      },
      {
        "id": 42,
        "label": "micro = micro . saturating_add (1) ;"
      },
      {
        "id": 43,
        "label": "if left < forward_state . max_batch / 2 { forward_state . score = forward_state . score . wrapping_add (21) ; } else { forward_state . score = forward_state . score . wrapping_sub (9) . wrapping_add (3) ; }"
      },
      {
        "id": 44,
        "label": "forward_state . score = forward_state . score . wrapping_add (21) ;"
      },
      {
        "id": 45,
        "label": "forward_state . score = forward_state . score . wrapping_sub (9) . wrapping_add (3) ;"
      },
      {
        "id": 46,
        "label": "step_index = step_index . saturating_add (1) ;"
      },
      {
        "id": 47,
        "label": "if left > 3 { let finalize = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0xFE] ; d . extend_from_slice (& (left - 3) . to_le_bytes ()) ; d } , } ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ForwardError :: NoTargetProgram) ? ; invoke (& finalize , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ; forward_state . score = forward_state . score . wrapping_add (left - 3) ; }"
      },
      {
        "id": 48,
        "label": "let finalize = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0xFE] ; d . extend_from_slice (& (left - 3) . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 49,
        "label": "let mut d = vec ! [0xFE] ;"
      },
      {
        "id": 50,
        "label": "d . extend_from_slice (& (left - 3) . to_le_bytes ()) ;"
      },
      {
        "id": 51,
        "label": "d"
      },
      {
        "id": 52,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ForwardError :: NoTargetProgram) ? ;"
      },
      {
        "id": 53,
        "label": "invoke (& finalize , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 54,
        "label": "forward_state . score = forward_state . score . wrapping_add (left - 3) ;"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: forward_state"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: forward_state"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: light"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: light"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: forward_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: light"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: light"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: light"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: forward_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: light"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: light"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: light"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: left"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: left"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: forward_state"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: chunk"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: left"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: chunk"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: left"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: ix"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: chunk"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: d"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: d"
      },
      {
        "from": 24,
        "to": 29,
        "label": "data_dep: chunk"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: d"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: selected"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: program_ai"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: selected"
      },
      {
        "from": 27,
        "to": 35,
        "label": "data_dep: ix"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: program_ai"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: left"
      },
      {
        "from": 24,
        "to": 36,
        "label": "data_dep: chunk"
      },
      {
        "from": 8,
        "to": 37,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 37,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 38,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 38,
        "label": "data_dep: forward_state"
      },
      {
        "from": 24,
        "to": 38,
        "label": "data_dep: chunk"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: micro"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: micro"
      },
      {
        "from": 8,
        "to": 40,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 40,
        "label": "data_dep: forward_state"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: micro"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: micro"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: micro"
      },
      {
        "from": 8,
        "to": 41,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 41,
        "label": "data_dep: forward_state"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: micro"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: micro"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: micro"
      },
      {
        "from": 21,
        "to": 43,
        "label": "data_dep: left"
      },
      {
        "from": 8,
        "to": 43,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 43,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 43,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 43,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 43,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 44,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 44,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 45,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 45,
        "label": "data_dep: forward_state"
      },
      {
        "from": 21,
        "to": 47,
        "label": "data_dep: left"
      },
      {
        "from": 28,
        "to": 47,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 47,
        "label": "data_dep: left"
      },
      {
        "from": 28,
        "to": 47,
        "label": "data_dep: d"
      },
      {
        "from": 34,
        "to": 47,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 47,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 47,
        "label": "data_dep: forward_state"
      },
      {
        "from": 21,
        "to": 47,
        "label": "data_dep: left"
      },
      {
        "from": 48,
        "to": 48,
        "label": "def: finalize"
      },
      {
        "from": 28,
        "to": 48,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 48,
        "label": "data_dep: left"
      },
      {
        "from": 28,
        "to": 48,
        "label": "data_dep: d"
      },
      {
        "from": 49,
        "to": 49,
        "label": "def: d"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 50,
        "label": "data_dep: left"
      },
      {
        "from": 49,
        "to": 51,
        "label": "data_dep: d"
      },
      {
        "from": 52,
        "to": 52,
        "label": "def: program_ai"
      },
      {
        "from": 48,
        "to": 53,
        "label": "data_dep: finalize"
      },
      {
        "from": 52,
        "to": 53,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 54,
        "label": "data_dep: forward_state"
      },
      {
        "from": 8,
        "to": 54,
        "label": "data_dep: forward_state"
      },
      {
        "from": 21,
        "to": 54,
        "label": "data_dep: left"
      }
    ]
  }
]