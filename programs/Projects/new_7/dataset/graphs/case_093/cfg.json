[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let forward_state = & mut ctx . accounts . forward_state ;"
      },
      {
        "id": 2,
        "label": "forward_state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "forward_state . max_batch = max_batch ;"
      },
      {
        "id": 4,
        "label": "forward_state . pulses = 8 ;"
      },
      {
        "id": 5,
        "label": "forward_state . score = max_batch ^ 0x5151 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "push",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let forward_state = & mut ctx . accounts . forward_state ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "tickets > forward_state . max_batch"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (3) ;"
      },
      {
        "id": 14,
        "label": "forward_state . score = forward_state . score . wrapping_add (tickets) ;"
      },
      {
        "id": 15,
        "label": "return Err (ForwardError :: BatchTooLarge . into ()) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "tickets == 2"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "forward_state . score = forward_state . score . rotate_right (1) ;"
      },
      {
        "id": 24,
        "label": "let mut light = 1u8 ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "forward_state . score = forward_state . score . wrapping_add (light as u64) ;"
      },
      {
        "id": 28,
        "label": "light = light . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "Loop End"
      },
      {
        "id": 30,
        "label": "return Ok (()) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "let mut left = tickets ;"
      },
      {
        "id": 35,
        "label": "let mut step_index : u8 = 0 ;"
      },
      {
        "id": 36,
        "label": "Loop Start"
      },
      {
        "id": 37,
        "label": "let chunk = (left / 2) . max (3) ;"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "chunk >= left"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "break ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let ix = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0x01] ; d . extend_from_slice (& chunk . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 47,
        "label": "let selected = if (program_slot as usize) < ctx . remaining_accounts . len () { program_slot as usize } else { 0usize } ;"
      },
      {
        "id": 48,
        "label": "let program_ai = ctx . remaining_accounts . get (selected) . ok_or (ForwardError :: NoTargetProgram) ? ;"
      },
      {
        "id": 49,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 50,
        "label": "left = left . saturating_sub (chunk) ;"
      },
      {
        "id": 51,
        "label": "forward_state . pulses = forward_state . pulses . saturating_add (1) ;"
      },
      {
        "id": 52,
        "label": "forward_state . score = forward_state . score . wrapping_add (chunk ^ 0x0D) ;"
      },
      {
        "id": 53,
        "label": "let mut micro = 1u8 ;"
      },
      {
        "id": 54,
        "label": "Loop Start"
      },
      {
        "id": 55,
        "label": "forward_state . score = forward_state . score . rotate_left ((micro % 2) as u32) . wrapping_add (5) ;"
      },
      {
        "id": 56,
        "label": "micro = micro . saturating_add (1) ;"
      },
      {
        "id": 57,
        "label": "Loop End"
      },
      {
        "id": 58,
        "label": "if statement"
      },
      {
        "id": 59,
        "label": "predicate"
      },
      {
        "id": 60,
        "label": "left < forward_state . max_batch / 2"
      },
      {
        "id": 61,
        "label": "True body"
      },
      {
        "id": 62,
        "label": "forward_state . score = forward_state . score . wrapping_add (21) ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "forward_state . score = forward_state . score . wrapping_sub (9) . wrapping_add (3) ;"
      },
      {
        "id": 65,
        "label": "merge"
      },
      {
        "id": 66,
        "label": "step_index = step_index . saturating_add (1) ;"
      },
      {
        "id": 67,
        "label": "Loop End"
      },
      {
        "id": 68,
        "label": "if statement"
      },
      {
        "id": 69,
        "label": "predicate"
      },
      {
        "id": 70,
        "label": "left > 3"
      },
      {
        "id": 71,
        "label": "True body"
      },
      {
        "id": 72,
        "label": "let finalize = Instruction { program_id : route_program , accounts : vec ! [AccountMeta :: new (ctx . accounts . reserve . key () , false) , AccountMeta :: new (ctx . accounts . user_wallet . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : { let mut d = vec ! [0xFE] ; d . extend_from_slice (& (left - 3) . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 73,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ForwardError :: NoTargetProgram) ? ;"
      },
      {
        "id": 74,
        "label": "invoke (& finalize , & [program_ai . clone () , ctx . accounts . reserve . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 75,
        "label": "forward_state . score = forward_state . score . wrapping_add (left - 3) ;"
      },
      {
        "id": 76,
        "label": "False body"
      },
      {
        "id": 77,
        "label": "No-op"
      },
      {
        "id": 78,
        "label": "merge"
      },
      {
        "id": 79,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 9,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 25,
        "to": 29,
        "label": "while"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 19,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 38,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "while"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "predicate"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "true"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 58,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 62,
        "to": 65,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 36,
        "to": 67,
        "label": "while"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "predicate"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "true"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 68,
        "to": 76,
        "label": "false"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      }
    ]
  }
]