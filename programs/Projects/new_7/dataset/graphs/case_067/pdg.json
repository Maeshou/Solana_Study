[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < Setup >",
      "fee_bps: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "st . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "st . fee_bps = fee_bps . min (2500) ;"
      },
      {
        "id": 4,
        "label": "st . rebated_total = 0 ;"
      },
      {
        "id": 5,
        "label": "st . rounds_run = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "rebate_stream",
    "inputs": [
      "ctx: Context < RebateStream >",
      "base_amount: u64",
      "cycles: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "let fee = base_amount * st . fee_bps as u64 / 10_000 ;"
      },
      {
        "id": 10,
        "label": "let mut sendable = if base_amount > fee { base_amount - fee } else { 0 } ;"
      },
      {
        "id": 11,
        "label": "base_amount - fee"
      },
      {
        "id": 12,
        "label": "0"
      },
      {
        "id": 13,
        "label": "let mut weight = (seed % 17) as u64 ;"
      },
      {
        "id": 14,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 15,
        "label": "while i < cycles { weight += 1 ; i += 1 ; }"
      },
      {
        "id": 16,
        "label": "weight += 1 ;"
      },
      {
        "id": 17,
        "label": "i += 1 ;"
      },
      {
        "id": 18,
        "label": "if sendable == 0 { st . rounds_run += 1 ; return Ok (()) ; }"
      },
      {
        "id": 19,
        "label": "st . rounds_run += 1 ;"
      },
      {
        "id": 20,
        "label": "return Ok (()) ;"
      },
      {
        "id": 21,
        "label": "let mut round = 0u8 ;"
      },
      {
        "id": 22,
        "label": "while round < cycles { let part = (sendable / 3) . max (1) ; if part > sendable { break ; } let ix = token_ix :: transfer (& ctx . accounts . exec_program . key () , & ctx . accounts . pool_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . controller . key () , & [] , part ,) ? ; invoke (& ix , & [ctx . accounts . exec_program . to_account_info () , ctx . accounts . pool_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . controller . to_account_info () ,] ,) ? ; sendable -= part ; st . rebated_total += part ; st . rounds_run += 1 ; let mut k = 0u8 ; while k < 2 { st . rebated_total += (weight % 2) ; k += 1 ; } if sendable == 0 { break ; } round += 1 ; }"
      },
      {
        "id": 23,
        "label": "let part = (sendable / 3) . max (1) ;"
      },
      {
        "id": 24,
        "label": "if part > sendable { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . exec_program . key () , & ctx . accounts . pool_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . controller . key () , & [] , part ,) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [ctx . accounts . exec_program . to_account_info () , ctx . accounts . pool_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . controller . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "sendable -= part ;"
      },
      {
        "id": 29,
        "label": "st . rebated_total += part ;"
      },
      {
        "id": 30,
        "label": "st . rounds_run += 1 ;"
      },
      {
        "id": 31,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 32,
        "label": "while k < 2 { st . rebated_total += (weight % 2) ; k += 1 ; }"
      },
      {
        "id": 33,
        "label": "st . rebated_total += (weight % 2) ;"
      },
      {
        "id": 34,
        "label": "k += 1 ;"
      },
      {
        "id": 35,
        "label": "if sendable == 0 { break ; }"
      },
      {
        "id": 36,
        "label": "break ;"
      },
      {
        "id": 37,
        "label": "round += 1 ;"
      },
      {
        "id": 38,
        "label": "if sendable > 0 { let ix2 = token_ix :: transfer (& ctx . accounts . exec_program . key () , & ctx . accounts . pool_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . controller . key () , & [] , sendable ,) ? ; invoke (& ix2 , & [ctx . accounts . exec_program . to_account_info () , ctx . accounts . pool_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . controller . to_account_info () ,] ,) ? ; st . rebated_total += sendable ; }"
      },
      {
        "id": 39,
        "label": "let ix2 = token_ix :: transfer (& ctx . accounts . exec_program . key () , & ctx . accounts . pool_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . controller . key () , & [] , sendable ,) ? ;"
      },
      {
        "id": 40,
        "label": "invoke (& ix2 , & [ctx . accounts . exec_program . to_account_info () , ctx . accounts . pool_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . controller . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 41,
        "label": "st . rebated_total += sendable ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: st"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: fee"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: sendable"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: fee"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: fee"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: fee"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: weight"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: i"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: i"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: weight"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: i"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: weight"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: sendable"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: round"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: round"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: sendable"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: sendable"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: sendable"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: weight"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: sendable"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: round"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: part"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: sendable"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: part"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: sendable"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: part"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: sendable"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: part"
      },
      {
        "from": 8,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: part"
      },
      {
        "from": 8,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: k"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: k"
      },
      {
        "from": 8,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: weight"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: k"
      },
      {
        "from": 8,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 33,
        "label": "data_dep: weight"
      },
      {
        "from": 31,
        "to": 34,
        "label": "data_dep: k"
      },
      {
        "from": 10,
        "to": 35,
        "label": "data_dep: sendable"
      },
      {
        "from": 21,
        "to": 37,
        "label": "data_dep: round"
      },
      {
        "from": 10,
        "to": 38,
        "label": "data_dep: sendable"
      },
      {
        "from": 10,
        "to": 38,
        "label": "data_dep: sendable"
      },
      {
        "from": 8,
        "to": 38,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 38,
        "label": "data_dep: sendable"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: ix2"
      },
      {
        "from": 10,
        "to": 39,
        "label": "data_dep: sendable"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: ix2"
      },
      {
        "from": 8,
        "to": 41,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 41,
        "label": "data_dep: sendable"
      }
    ]
  }
]