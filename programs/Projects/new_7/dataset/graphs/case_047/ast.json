[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "seed_id: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "s . admin = ctx . accounts . admin . key () ;",
      "s . active_id = seed_id ;",
      "s . alt_id = ctx . accounts . admin . key () ;",
      "s . bits = 0 ;",
      "s . ticks = 0 ;",
      "let mut i = 0u8 ;",
      "while i < 8",
      "{",
      "s . bits = s . bits . rotate_right (1) ^ ((i as u32) * 0x01010101) ;",
      "s . ticks = s . ticks . saturating_add (1) ;",
      "i = i . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "flip",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Flip >",
      "choose_alt: bool"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;",
      "if choose_alt",
      "{",
      "let tmp = s . active_id ;",
      "s . active_id = s . alt_id ;",
      "s . alt_id = tmp ;",
      "let mut k = 0u8 ;",
      "while k < 5",
      "{",
      "s . bits = s . bits . wrapping_add (0x9E3779B9) ;",
      "k = k . saturating_add (1) ;",
      "} } else",
      "{",
      "let mut k = 0u8 ;",
      "while k < 7",
      "{",
      "s . bits = s . bits . wrapping_mul (1664525) . wrapping_add (1013904223) ;",
      "k = k . saturating_add (1) ;",
      "}",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "pay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Pay >",
      "base: u64",
      "memo: String"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . state ;",
      "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;",
      "let b = memo . as_bytes () ;",
      "let mut i = 0usize ;",
      "let mut acc : u64 = 0 ;",
      "let mut parity : u32 = 0 ;",
      "while i < b . len ()",
      "{",
      "let v = b [i] as u32 ;",
      "parity ^= v . rotate_left ((i as u32) % 7) ;",
      "acc = acc . saturating_add (((parity . count_ones () + 1) as u64) * ((v as u64) % 13 + 1)) ;",
      "if i % 5 == 0",
      "{",
      "s . ticks = s . ticks . saturating_add (1) ;",
      "} i += 1 ;",
      "}",
      "let mut j = 0usize ;",
      "let mut smooth = 0u64 ;",
      "while j < b . len ()",
      "{",
      "let mut sum = 0u64 ;",
      "let mut w = 0usize ;",
      "while w < 3",
      "{",
      "let idx = j + w ;",
      "if idx < b . len ()",
      "{",
      "sum = sum . saturating_add ((b [idx] % 17) as u64 + 1) ;",
      "} w += 1 ;",
      "} smooth = smooth . saturating_add (sum) ;",
      "j += 2 ;",
      "}",
      "let mut weight = (acc ^ smooth) + (s . bits as u64 & 0xFFFF) ;",
      "let mut t = 0u8 ;",
      "while t < 6",
      "{",
      "weight = weight . saturating_add (((s . ticks % 11) as u64) + (t as u64)) ;",
      "t = t . saturating_add (1) ;",
      "}",
      "let amt = base . saturating_add (weight) ;",
      "let ix = spl_token :: instruction :: transfer (s . active_id , ctx . accounts . vault . key () , ctx . accounts . user_ata . key () , ctx . accounts . admin . key () , & [] , amt ,) ? ;",
      "invoke (& ix , & [ctx . accounts . vault . to_account_info () , ctx . accounts . user_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,]) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "State",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "active_id",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "alt_id",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "bits",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "ticks",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 32 + 32 + 4 + 4)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Flip",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Pay",
    "node_type": "struct",
    "fields": [
      {
        "name": "state",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_ata",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]