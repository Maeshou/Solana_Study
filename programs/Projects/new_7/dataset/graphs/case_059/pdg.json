[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "route_a: Pubkey",
      "route_b: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let payout_state = & mut ctx . accounts . payout_state ;"
      },
      {
        "id": 2,
        "label": "payout_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "payout_state . route_a = route_a ;"
      },
      {
        "id": 4,
        "label": "payout_state . route_b = route_b ;"
      },
      {
        "id": 5,
        "label": "payout_state . note = 1 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: payout_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: payout_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: payout_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: payout_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: payout_state"
      }
    ]
  },
  {
    "name": "pay",
    "inputs": [
      "ctx: Context < Pay >",
      "total: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let payout_state = & mut ctx . accounts . payout_state ;"
      },
      {
        "id": 9,
        "label": "let first = total / 2 ;"
      },
      {
        "id": 10,
        "label": "let second = total . saturating_sub (first) ;"
      },
      {
        "id": 11,
        "label": "let ix1 = token_ix :: transfer (& payout_state . route_a , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , first ,) ? ;"
      },
      {
        "id": 12,
        "label": "let program_a = ctx . remaining_accounts . get (0) . expect (\"program A missing\") ;"
      },
      {
        "id": 13,
        "label": "invoke (& ix1 , & [program_a . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 14,
        "label": "let ix2 = token_ix :: transfer (& payout_state . route_b , & ctx . accounts . vault . key () , & ctx . accounts . user . key () , & ctx . accounts . admin . key () , & [] , second ,) ? ;"
      },
      {
        "id": 15,
        "label": "let program_b = ctx . remaining_accounts . get (1) . expect (\"program B missing\") ;"
      },
      {
        "id": 16,
        "label": "invoke (& ix2 , & [program_b . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 17,
        "label": "payout_state . note = payout_state . note . wrapping_add (total) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: payout_state"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: first"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: second"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: first"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: ix1"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: payout_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: first"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: program_a"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: ix1"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: program_a"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: ix2"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: payout_state"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: second"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_b"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: ix2"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: program_b"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: payout_state"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: payout_state"
      }
    ]
  }
]