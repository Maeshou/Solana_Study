[
  {
    "name": "walk",
    "inputs": [
      "ctx: Context < Walk >",
      "distance: u64",
      "grant: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut metas = Vec :: new () ;"
      },
      {
        "id": 2,
        "label": "metas . push (AccountMeta :: new (ctx . accounts . step_slot . key () , false)) ;"
      },
      {
        "id": 3,
        "label": "metas . push (AccountMeta :: new_readonly (ctx . accounts . runner . key () , false)) ;"
      },
      {
        "id": 4,
        "label": "let mut bytes = Vec :: new () ;"
      },
      {
        "id": 5,
        "label": "bytes . extend_from_slice (& distance . to_le_bytes ()) ;"
      },
      {
        "id": 6,
        "label": "bytes . extend_from_slice (& distance . saturating_mul (3) . to_le_bytes ()) ;"
      },
      {
        "id": 7,
        "label": "invoke (& Instruction { program_id : FIXED_STRIDE_ID , accounts : metas , data : bytes } , & [ctx . accounts . stride_hint . to_account_info () , ctx . accounts . step_slot . to_account_info () , ctx . accounts . runner . to_account_info ()]) ? ;"
      },
      {
        "id": 8,
        "label": "let mut p = ctx . accounts . post_hint . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "if ! ctx . remaining_accounts . is_empty () { p = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 10,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "invoke (& Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . wall . key () , false) , AccountMeta :: new_readonly (ctx . accounts . runner . key () , false) ,] , data : grant . to_le_bytes () . to_vec () , } , & [p , ctx . accounts . wall . to_account_info () , ctx . accounts . runner . to_account_info ()]) ? ;"
      },
      {
        "id": 12,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . vault . to_account_info () , to : ctx . accounts . runner_token . to_account_info () , authority : ctx . accounts . vault_authority . to_account_info () }) , grant) ? ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: metas"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: metas"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: metas"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: bytes"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: bytes"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: bytes"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: metas"
      },
      {
        "from": 4,
        "to": 7,
        "label": "data_dep: bytes"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: p"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: p"
      }
    ]
  }
]