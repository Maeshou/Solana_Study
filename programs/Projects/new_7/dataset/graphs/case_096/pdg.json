[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "ceiling: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let rebate_state = & mut ctx . accounts . rebate_state ;"
      },
      {
        "id": 2,
        "label": "rebate_state . captain = ctx . accounts . captain . key () ;"
      },
      {
        "id": 3,
        "label": "rebate_state . ceiling = ceiling ;"
      },
      {
        "id": 4,
        "label": "rebate_state . iter = 10 ;"
      },
      {
        "id": 5,
        "label": "rebate_state . radar = 0x4242 ;"
      },
      {
        "id": 6,
        "label": "rebate_state . route_id = Pubkey :: new_from_array ([4u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: rebate_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: rebate_state"
      }
    ]
  },
  {
    "name": "set_route",
    "inputs": [
      "ctx: Context < SetRoute >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let rebate_state = & mut ctx . accounts . rebate_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (rebate_state . captain , ctx . accounts . captain . key () , RebateError :: CaptainOnly) ;"
      },
      {
        "id": 11,
        "label": "rebate_state . route_id = pid ;"
      },
      {
        "id": 12,
        "label": "rebate_state . iter = rebate_state . iter . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: rebate_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: rebate_state"
      }
    ]
  },
  {
    "name": "rebate",
    "inputs": [
      "ctx: Context < Rebate >",
      "base: u64",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let rebate_state = & mut ctx . accounts . rebate_state ;"
      },
      {
        "id": 16,
        "label": "if base > rebate_state . ceiling { rebate_state . radar = rebate_state . radar . wrapping_add (base ^ 0x3C) ; return Err (RebateError :: TooMuch . into ()) ; }"
      },
      {
        "id": 17,
        "label": "rebate_state . radar = rebate_state . radar . wrapping_add (base ^ 0x3C) ;"
      },
      {
        "id": 18,
        "label": "return Err (RebateError :: TooMuch . into ()) ;"
      },
      {
        "id": 19,
        "label": "let mut remaining = base ;"
      },
      {
        "id": 20,
        "label": "let mut r : u8 = 0 ;"
      },
      {
        "id": 21,
        "label": "while r < rounds { let part = (remaining / 4) . max (2) ; if part >= remaining { break ; } let ix = token_ix :: transfer (& rebate_state . route_id , & ctx . accounts . engine_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . captain . key () , & [] , part ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (RebateError :: NoProg) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . engine_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . captain . to_account_info () ,] ,) ? ; remaining = remaining . saturating_sub (part) ; rebate_state . iter = rebate_state . iter . saturating_add (1) ; rebate_state . radar = rebate_state . radar . wrapping_add (part ^ 0x0C) ; if rebate_state . iter % 2 == 0 { let mut step : u8 = 1 ; while step < 3 { rebate_state . radar = rebate_state . radar . rotate_left ((step % 2) as u32) ; step = step . saturating_add (1) ; } } else { rebate_state . radar = rebate_state . radar . wrapping_add (9) ; } r = r . saturating_add (1) ; }"
      },
      {
        "id": 22,
        "label": "let part = (remaining / 4) . max (2) ;"
      },
      {
        "id": 23,
        "label": "if part >= remaining { break ; }"
      },
      {
        "id": 24,
        "label": "break ;"
      },
      {
        "id": 25,
        "label": "let ix = token_ix :: transfer (& rebate_state . route_id , & ctx . accounts . engine_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . captain . key () , & [] , part ,) ? ;"
      },
      {
        "id": 26,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (RebateError :: NoProg) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . engine_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . captain . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "remaining = remaining . saturating_sub (part) ;"
      },
      {
        "id": 29,
        "label": "rebate_state . iter = rebate_state . iter . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "rebate_state . radar = rebate_state . radar . wrapping_add (part ^ 0x0C) ;"
      },
      {
        "id": 31,
        "label": "if rebate_state . iter % 2 == 0 { let mut step : u8 = 1 ; while step < 3 { rebate_state . radar = rebate_state . radar . rotate_left ((step % 2) as u32) ; step = step . saturating_add (1) ; } } else { rebate_state . radar = rebate_state . radar . wrapping_add (9) ; }"
      },
      {
        "id": 32,
        "label": "let mut step : u8 = 1 ;"
      },
      {
        "id": 33,
        "label": "while step < 3 { rebate_state . radar = rebate_state . radar . rotate_left ((step % 2) as u32) ; step = step . saturating_add (1) ; }"
      },
      {
        "id": 34,
        "label": "rebate_state . radar = rebate_state . radar . rotate_left ((step % 2) as u32) ;"
      },
      {
        "id": 35,
        "label": "step = step . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "rebate_state . radar = rebate_state . radar . wrapping_add (9) ;"
      },
      {
        "id": 37,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "if remaining > 3 { let ix2 = token_ix :: transfer (& rebate_state . route_id , & ctx . accounts . engine_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . captain . key () , & [] , remaining - 3 ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (RebateError :: NoProg) ? ; invoke (& ix2 , & [program_ai . clone () , ctx . accounts . engine_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . captain . to_account_info () ,] ,) ? ; rebate_state . radar = rebate_state . radar . wrapping_add (remaining - 3) . rotate_right (1) ; let mut clean : u8 = 1 ; while clean < 4 { rebate_state . iter = rebate_state . iter . saturating_add (1) ; clean = clean . saturating_add (1) ; } }"
      },
      {
        "id": 39,
        "label": "let ix2 = token_ix :: transfer (& rebate_state . route_id , & ctx . accounts . engine_vault . key () , & ctx . accounts . client_vault . key () , & ctx . accounts . captain . key () , & [] , remaining - 3 ,) ? ;"
      },
      {
        "id": 40,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (RebateError :: NoProg) ? ;"
      },
      {
        "id": 41,
        "label": "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . engine_vault . to_account_info () , ctx . accounts . client_vault . to_account_info () , ctx . accounts . captain . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 42,
        "label": "rebate_state . radar = rebate_state . radar . wrapping_add (remaining - 3) . rotate_right (1) ;"
      },
      {
        "id": 43,
        "label": "let mut clean : u8 = 1 ;"
      },
      {
        "id": 44,
        "label": "while clean < 4 { rebate_state . iter = rebate_state . iter . saturating_add (1) ; clean = clean . saturating_add (1) ; }"
      },
      {
        "id": 45,
        "label": "rebate_state . iter = rebate_state . iter . saturating_add (1) ;"
      },
      {
        "id": 46,
        "label": "clean = clean . saturating_add (1) ;"
      },
      {
        "id": 47,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: rebate_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: remaining"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: part"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: remaining"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: part"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: remaining"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: ix"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: part"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remaining"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remaining"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 29,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: part"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 38,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 38,
        "label": "data_dep: remaining"
      },
      {
        "from": 26,
        "to": 38,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 38,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: ix2"
      },
      {
        "from": 15,
        "to": 39,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remaining"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: program_ai"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: ix2"
      },
      {
        "from": 40,
        "to": 41,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 42,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 19,
        "to": 42,
        "label": "data_dep: remaining"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 44,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: rebate_state"
      },
      {
        "from": 15,
        "to": 45,
        "label": "data_dep: rebate_state"
      }
    ]
  }
]