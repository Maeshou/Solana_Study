[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "quota: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 2,
        "label": "router_state . owner_authority = ctx . accounts . owner_authority . key () ;"
      },
      {
        "id": 3,
        "label": "router_state . energy_quota = quota ;"
      },
      {
        "id": 4,
        "label": "router_state . turn_counter = 7 ;"
      },
      {
        "id": 5,
        "label": "router_state . metric_accumulator = quota . wrapping_add (29) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: router_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: router_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: router_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: router_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: router_state"
      }
    ]
  },
  {
    "name": "set_flag",
    "inputs": [
      "ctx: Context < SetFlag >",
      "tag: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 9,
        "label": "require_keys_eq ! (router_state . owner_authority , ctx . accounts . owner_authority . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 10,
        "label": "router_state . route_flag = tag ;"
      },
      {
        "id": 11,
        "label": "router_state . turn_counter = router_state . turn_counter . wrapping_add (5) ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: router_state"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: router_state"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: router_state"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: router_state"
      }
    ]
  },
  {
    "name": "route",
    "inputs": [
      "ctx: Context < Route >",
      "energy: u64",
      "cycles: u8"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let router_state = & mut ctx . accounts . router_state ;"
      },
      {
        "id": 15,
        "label": "if energy < 5 { router_state . turn_counter = router_state . turn_counter . wrapping_mul (2) ; router_state . metric_accumulator = router_state . metric_accumulator ^ 0x55 ; return Ok (()) ; }"
      },
      {
        "id": 16,
        "label": "router_state . turn_counter = router_state . turn_counter . wrapping_mul (2) ;"
      },
      {
        "id": 17,
        "label": "router_state . metric_accumulator = router_state . metric_accumulator ^ 0x55 ;"
      },
      {
        "id": 18,
        "label": "return Ok (()) ;"
      },
      {
        "id": 19,
        "label": "let mut remaining_energy = energy ;"
      },
      {
        "id": 20,
        "label": "let mut cycle_index : u8 = 0 ;"
      },
      {
        "id": 21,
        "label": "while cycle_index < cycles { let transfer_part = (remaining_energy / 4) . max (5) ; if transfer_part >= remaining_energy { break ; } let transfer_ix = token_ix :: transfer (& router_state . route_flag , & ctx . accounts . energy_tank . key () , & ctx . accounts . consumer_wallet . key () , & ctx . accounts . owner_authority . key () , & [] , transfer_part ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . energy_tank . to_account_info () , ctx . accounts . consumer_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ; remaining_energy = remaining_energy . saturating_sub (transfer_part) ; router_state . turn_counter = router_state . turn_counter . wrapping_add (1) ; router_state . metric_accumulator = router_state . metric_accumulator . wrapping_add (transfer_part % 23) ; cycle_index = cycle_index . saturating_add (1) ; if remaining_energy <= router_state . energy_quota / 2 { router_state . metric_accumulator = router_state . metric_accumulator . rotate_left (2) ; } else { router_state . metric_accumulator = router_state . metric_accumulator . rotate_right (1) ; } }"
      },
      {
        "id": 22,
        "label": "let transfer_part = (remaining_energy / 4) . max (5) ;"
      },
      {
        "id": 23,
        "label": "if transfer_part >= remaining_energy { break ; }"
      },
      {
        "id": 24,
        "label": "break ;"
      },
      {
        "id": 25,
        "label": "let transfer_ix = token_ix :: transfer (& router_state . route_flag , & ctx . accounts . energy_tank . key () , & ctx . accounts . consumer_wallet . key () , & ctx . accounts . owner_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 26,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . energy_tank . to_account_info () , ctx . accounts . consumer_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "remaining_energy = remaining_energy . saturating_sub (transfer_part) ;"
      },
      {
        "id": 29,
        "label": "router_state . turn_counter = router_state . turn_counter . wrapping_add (1) ;"
      },
      {
        "id": 30,
        "label": "router_state . metric_accumulator = router_state . metric_accumulator . wrapping_add (transfer_part % 23) ;"
      },
      {
        "id": 31,
        "label": "cycle_index = cycle_index . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "if remaining_energy <= router_state . energy_quota / 2 { router_state . metric_accumulator = router_state . metric_accumulator . rotate_left (2) ; } else { router_state . metric_accumulator = router_state . metric_accumulator . rotate_right (1) ; }"
      },
      {
        "id": 33,
        "label": "router_state . metric_accumulator = router_state . metric_accumulator . rotate_left (2) ;"
      },
      {
        "id": 34,
        "label": "router_state . metric_accumulator = router_state . metric_accumulator . rotate_right (1) ;"
      },
      {
        "id": 35,
        "label": "if remaining_energy > 4 { let final_ix = token_ix :: transfer (& router_state . route_flag , & ctx . accounts . energy_tank . key () , & ctx . accounts . consumer_wallet . key () , & ctx . accounts . owner_authority . key () , & [] , remaining_energy - 4 ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . energy_tank . to_account_info () , ctx . accounts . consumer_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ; router_state . metric_accumulator = router_state . metric_accumulator . wrapping_add (remaining_energy - 4) ; }"
      },
      {
        "id": 36,
        "label": "let final_ix = token_ix :: transfer (& router_state . route_flag , & ctx . accounts . energy_tank . key () , & ctx . accounts . consumer_wallet . key () , & ctx . accounts . owner_authority . key () , & [] , remaining_energy - 4 ,) ? ;"
      },
      {
        "id": 37,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 38,
        "label": "invoke (& final_ix , & [external_program_ai . clone () , ctx . accounts . energy_tank . to_account_info () , ctx . accounts . consumer_wallet . to_account_info () , ctx . accounts . owner_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 39,
        "label": "router_state . metric_accumulator = router_state . metric_accumulator . wrapping_add (remaining_energy - 4) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: router_state"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: remaining_energy"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: router_state"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: transfer_part"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: transfer_ix"
      },
      {
        "from": 14,
        "to": 25,
        "label": "data_dep: router_state"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: external_program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: transfer_ix"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 14,
        "to": 29,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 29,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: router_state"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 19,
        "to": 32,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 26,
        "to": 35,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: final_ix"
      },
      {
        "from": 14,
        "to": 36,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 36,
        "label": "data_dep: remaining_energy"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: external_program_ai"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: final_ix"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: router_state"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: router_state"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: remaining_energy"
      }
    ]
  }
]