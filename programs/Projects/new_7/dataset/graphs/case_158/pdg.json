[
  {
    "name": "sensor_map",
    "inputs": [
      "ctx: Context < SensorMap >",
      "pulse: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "for _ in 0 .. (pulse % 3 + 1) { ctx . accounts . grid . heat = ctx . accounts . grid . heat . wrapping_add (5) ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . grid . heat = ctx . accounts . grid . heat . wrapping_add (5) ;"
      },
      {
        "id": 3,
        "label": "if ctx . accounts . grid . heat > 30 { ctx . accounts . grid . flags ^= 1 ; }"
      },
      {
        "id": 4,
        "label": "ctx . accounts . grid . flags ^= 1 ;"
      },
      {
        "id": 5,
        "label": "let mut target = ctx . accounts . router . to_account_info () ;"
      },
      {
        "id": 6,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . grid . hops = ctx . accounts . grid . hops . wrapping_add (1) ; }"
      },
      {
        "id": 7,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 8,
        "label": "ctx . accounts . grid . hops = ctx . accounts . grid . hops . wrapping_add (1) ;"
      },
      {
        "id": 9,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . panel . key () , false) , AccountMeta :: new_readonly (ctx . accounts . operator . key () , true) ,] , data : pulse . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . panel . to_account_info () , ctx . accounts . operator . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: target"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: target"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: target"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: target"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: target"
      }
    ]
  },
  {
    "name": "vault_rotate",
    "inputs": [
      "ctx: Context < VaultRotate >",
      "salt: u64"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "if salt & 1 == 1 { ctx . accounts . vmeta . odd += 1 ; }"
      },
      {
        "id": 13,
        "label": "ctx . accounts . vmeta . odd += 1 ;"
      },
      {
        "id": 14,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 15,
        "label": "while i < (salt % 4) { ctx . accounts . vmeta . hash ^= Clock :: get () ? . slot ; i += 1 ; }"
      },
      {
        "id": 16,
        "label": "ctx . accounts . vmeta . hash ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 17,
        "label": "i += 1 ;"
      },
      {
        "id": 18,
        "label": "let mut target = ctx . accounts . switch . to_account_info () ;"
      },
      {
        "id": 19,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . vmeta . routes += 1 ; }"
      },
      {
        "id": 20,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 21,
        "label": "ctx . accounts . vmeta . routes += 1 ;"
      },
      {
        "id": 22,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . chest . key () , false) , AccountMeta :: new_readonly (ctx . accounts . guard . key () , false) ,] , data : (salt ^ 0xBEEF) . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . chest . to_account_info () , ctx . accounts . guard . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: i"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: i"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: i"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: target"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: target"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: target"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: target"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: target"
      }
    ]
  },
  {
    "name": "guild_mail",
    "inputs": [
      "ctx: Context < GuildMail >",
      "seq: u64"
    ],
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "ctx . accounts . ledger . count = ctx . accounts . ledger . count . wrapping_add (seq) ;"
      },
      {
        "id": 26,
        "label": "if seq >= 5 { ctx . accounts . ledger . bump = ctx . accounts . ledger . bump . wrapping_add (2) ; }"
      },
      {
        "id": 27,
        "label": "ctx . accounts . ledger . bump = ctx . accounts . ledger . bump . wrapping_add (2) ;"
      },
      {
        "id": 28,
        "label": "let mut target = ctx . accounts . mpost . to_account_info () ;"
      },
      {
        "id": 29,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . ledger . tracks ^= 1 ; }"
      },
      {
        "id": 30,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 31,
        "label": "ctx . accounts . ledger . tracks ^= 1 ;"
      },
      {
        "id": 32,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new_readonly (ctx . accounts . member . key () , false) , AccountMeta :: new (ctx . accounts . mailbox . key () , false) ,] , data : seq . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . member . to_account_info () , ctx . accounts . mailbox . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 28,
        "to": 28,
        "label": "def: target"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: target"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: target"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: target"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: target"
      }
    ]
  },
  {
    "name": "beacon_ping",
    "inputs": [
      "ctx: Context < BeaconPing >",
      "meter: u64"
    ],
    "nodes": [
      {
        "id": 34,
        "label": "Entry"
      },
      {
        "id": 35,
        "label": "if meter > 0 { if meter % 2 == 0 { ctx . accounts . beacon . evens = ctx . accounts . beacon . evens . wrapping_add (1) ; } }"
      },
      {
        "id": 36,
        "label": "if meter % 2 == 0 { ctx . accounts . beacon . evens = ctx . accounts . beacon . evens . wrapping_add (1) ; }"
      },
      {
        "id": 37,
        "label": "ctx . accounts . beacon . evens = ctx . accounts . beacon . evens . wrapping_add (1) ;"
      },
      {
        "id": 38,
        "label": "let mut target = ctx . accounts . forward . to_account_info () ;"
      },
      {
        "id": 39,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . beacon . paths = ctx . accounts . beacon . paths . wrapping_add (1) ; }"
      },
      {
        "id": 40,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 41,
        "label": "ctx . accounts . beacon . paths = ctx . accounts . beacon . paths . wrapping_add (1) ;"
      },
      {
        "id": 42,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . pylon . key () , false) , AccountMeta :: new_readonly (ctx . accounts . sender . key () , true) ,] , data : meter . rotate_left (2) . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . pylon . to_account_info () , ctx . accounts . sender . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 43,
        "label": "for _ in 0 .. (meter % 3) { ctx . accounts . beacon . noise ^= Clock :: get () ? . slot ; }"
      },
      {
        "id": 44,
        "label": "ctx . accounts . beacon . noise ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 38,
        "to": 38,
        "label": "def: target"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: target"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: target"
      },
      {
        "from": 38,
        "to": 42,
        "label": "data_dep: target"
      },
      {
        "from": 38,
        "to": 42,
        "label": "data_dep: target"
      }
    ]
  },
  {
    "name": "barter_stamp",
    "inputs": [
      "ctx: Context < BarterStamp >",
      "lot: u64"
    ],
    "nodes": [
      {
        "id": 46,
        "label": "Entry"
      },
      {
        "id": 47,
        "label": "for _ in 0 .. (lot % 2 + 1) { ctx . accounts . bstat . ticks = ctx . accounts . bstat . ticks . wrapping_add (1) ; }"
      },
      {
        "id": 48,
        "label": "ctx . accounts . bstat . ticks = ctx . accounts . bstat . ticks . wrapping_add (1) ;"
      },
      {
        "id": 49,
        "label": "let mut target = ctx . accounts . broker . to_account_info () ;"
      },
      {
        "id": 50,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . bstat . paths = ctx . accounts . bstat . paths . wrapping_add (1) ; }"
      },
      {
        "id": 51,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 52,
        "label": "ctx . accounts . bstat . paths = ctx . accounts . bstat . paths . wrapping_add (1) ;"
      },
      {
        "id": 53,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stall . key () , false) , AccountMeta :: new_readonly (ctx . accounts . trader . key () , false) ,] , data : (lot ^ 7) . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . stall . to_account_info () , ctx . accounts . trader . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 54,
        "label": "if ctx . accounts . bstat . paths > 2 { ctx . accounts . bstat . flags ^= 1 ; }"
      },
      {
        "id": 55,
        "label": "ctx . accounts . bstat . flags ^= 1 ;"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 49,
        "to": 49,
        "label": "def: target"
      },
      {
        "from": 49,
        "to": 50,
        "label": "data_dep: target"
      },
      {
        "from": 49,
        "to": 51,
        "label": "data_dep: target"
      },
      {
        "from": 49,
        "to": 53,
        "label": "data_dep: target"
      },
      {
        "from": 49,
        "to": 53,
        "label": "data_dep: target"
      }
    ]
  },
  {
    "name": "shrine_attest",
    "inputs": [
      "ctx: Context < ShrineAttest >",
      "code: u64"
    ],
    "nodes": [
      {
        "id": 57,
        "label": "Entry"
      },
      {
        "id": 58,
        "label": "ctx . accounts . slog . mix ^= code . rotate_right (3) ;"
      },
      {
        "id": 59,
        "label": "let mut j = 0 ;"
      },
      {
        "id": 60,
        "label": "while j < (code % 3 + 1) { ctx . accounts . slog . beads = ctx . accounts . slog . beads . wrapping_add (2) ; j += 1 ; }"
      },
      {
        "id": 61,
        "label": "ctx . accounts . slog . beads = ctx . accounts . slog . beads . wrapping_add (2) ;"
      },
      {
        "id": 62,
        "label": "j += 1 ;"
      },
      {
        "id": 63,
        "label": "let mut target = ctx . accounts . oracle . to_account_info () ;"
      },
      {
        "id": 64,
        "label": "if ctx . remaining_accounts . len () > 0 { target = ctx . remaining_accounts [0] . clone () ; ctx . accounts . slog . routes = ctx . accounts . slog . routes . wrapping_add (1) ; }"
      },
      {
        "id": 65,
        "label": "target = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 66,
        "label": "ctx . accounts . slog . routes = ctx . accounts . slog . routes . wrapping_add (1) ;"
      },
      {
        "id": 67,
        "label": "invoke (& Instruction { program_id : * target . key , accounts : vec ! [AccountMeta :: new_readonly (ctx . accounts . seal . key () , false) , AccountMeta :: new (ctx . accounts . altar . key () , false) ,] , data : code . to_le_bytes () . to_vec () , } , & [target . clone () , ctx . accounts . seal . to_account_info () , ctx . accounts . altar . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 68,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 59,
        "to": 59,
        "label": "def: j"
      },
      {
        "from": 59,
        "to": 60,
        "label": "data_dep: j"
      },
      {
        "from": 59,
        "to": 60,
        "label": "data_dep: j"
      },
      {
        "from": 59,
        "to": 62,
        "label": "data_dep: j"
      },
      {
        "from": 63,
        "to": 63,
        "label": "def: target"
      },
      {
        "from": 63,
        "to": 64,
        "label": "data_dep: target"
      },
      {
        "from": 63,
        "to": 65,
        "label": "data_dep: target"
      },
      {
        "from": 63,
        "to": 67,
        "label": "data_dep: target"
      },
      {
        "from": 63,
        "to": 67,
        "label": "data_dep: target"
      }
    ]
  }
]