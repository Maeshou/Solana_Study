[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . fee_bps = if fee_bps > 1500 { 1500 } else { fee_bps } ;"
      },
      {
        "id": 4,
        "label": "s . round = 0 ;"
      },
      {
        "id": 5,
        "label": "s . last_note = 0 ;"
      },
      {
        "id": 6,
        "label": "s . total_emissions = 0 ;"
      },
      {
        "id": 7,
        "label": "let mut warm = 0u8 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "s . round = s . round . saturating_add ((warm as u32) + 1) ;"
      },
      {
        "id": 10,
        "label": "s . last_note = s . last_note . saturating_add (3) ;"
      },
      {
        "id": 11,
        "label": "warm = warm . saturating_add (1) ;"
      },
      {
        "id": 12,
        "label": "Loop End"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 8,
        "to": 12,
        "label": "while"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "settle",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 16,
        "label": "require ! (s . admin == ctx . accounts . admin . key () , Errs :: BadAdmin) ;"
      },
      {
        "id": 17,
        "label": "let mut weight : u64 = 7 ;"
      },
      {
        "id": 18,
        "label": "let mut j = 0u8 ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "j % 2 == 0"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "weight = weight . saturating_add (2) ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "weight = weight . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "j < 3"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "weight = weight . saturating_add ((note . len () as u64) % 3) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "j = j . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "note . len () > 0"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "s . last_note = note . len () as u32 ;"
      },
      {
        "id": 43,
        "label": "let bytes = note . as_bytes () ;"
      },
      {
        "id": 44,
        "label": "let mut walk = 0usize ;"
      },
      {
        "id": 45,
        "label": "let mut rolling : u64 = 0 ;"
      },
      {
        "id": 46,
        "label": "Loop Start"
      },
      {
        "id": 47,
        "label": "let inc = (bytes [walk] as u64) % 11 ;"
      },
      {
        "id": 48,
        "label": "rolling = rolling . saturating_add (inc) ;"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "walk % 2 == 0"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "rolling = rolling . saturating_add (1) ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "walk += 1 ;"
      },
      {
        "id": 58,
        "label": "Loop End"
      },
      {
        "id": 59,
        "label": "weight = weight . saturating_add (rolling % 5) ;"
      },
      {
        "id": 60,
        "label": "False body"
      },
      {
        "id": 61,
        "label": "No-op"
      },
      {
        "id": 62,
        "label": "merge"
      },
      {
        "id": 63,
        "label": "let gross = base . saturating_mul (weight) ;"
      },
      {
        "id": 64,
        "label": "let fee = gross . saturating_mul (s . fee_bps as u64) / 10_000 ;"
      },
      {
        "id": 65,
        "label": "let mut net = 0u64 ;"
      },
      {
        "id": 66,
        "label": "if statement"
      },
      {
        "id": 67,
        "label": "predicate"
      },
      {
        "id": 68,
        "label": "gross > fee"
      },
      {
        "id": 69,
        "label": "True body"
      },
      {
        "id": 70,
        "label": "net = gross - fee ;"
      },
      {
        "id": 71,
        "label": "let mut partitions = [0u64 ; 3] ;"
      },
      {
        "id": 72,
        "label": "let mut t = 0 ;"
      },
      {
        "id": 73,
        "label": "Loop Start"
      },
      {
        "id": 74,
        "label": "partitions [t] = (net / 3) . saturating_add ((t as u64) * 2) ;"
      },
      {
        "id": 75,
        "label": "t += 1 ;"
      },
      {
        "id": 76,
        "label": "Loop End"
      },
      {
        "id": 77,
        "label": "let mut regroup = 0u64 ;"
      },
      {
        "id": 78,
        "label": "let mut u = 0 ;"
      },
      {
        "id": 79,
        "label": "Loop Start"
      },
      {
        "id": 80,
        "label": "let mut hop = 0 ;"
      },
      {
        "id": 81,
        "label": "let mut block = partitions [u] ;"
      },
      {
        "id": 82,
        "label": "Loop Start"
      },
      {
        "id": 83,
        "label": "block = block . saturating_add ((hop + u) as u64) ;"
      },
      {
        "id": 84,
        "label": "hop += 1 ;"
      },
      {
        "id": 85,
        "label": "Loop End"
      },
      {
        "id": 86,
        "label": "regroup = regroup . saturating_add (block) ;"
      },
      {
        "id": 87,
        "label": "u += 1 ;"
      },
      {
        "id": 88,
        "label": "Loop End"
      },
      {
        "id": 89,
        "label": "s . round = s . round . saturating_add (2) ;"
      },
      {
        "id": 90,
        "label": "let mut tick = 0 ;"
      },
      {
        "id": 91,
        "label": "Loop Start"
      },
      {
        "id": 92,
        "label": "s . total_emissions = s . total_emissions . saturating_add ((regroup % 9) + (tick as u64)) ;"
      },
      {
        "id": 93,
        "label": "tick += 1 ;"
      },
      {
        "id": 94,
        "label": "Loop End"
      },
      {
        "id": 95,
        "label": "if statement"
      },
      {
        "id": 96,
        "label": "predicate"
      },
      {
        "id": 97,
        "label": "s . last_note > 8"
      },
      {
        "id": 98,
        "label": "True body"
      },
      {
        "id": 99,
        "label": "net = regroup . saturating_add ((s . last_note as u64) / 2) ;"
      },
      {
        "id": 100,
        "label": "False body"
      },
      {
        "id": 101,
        "label": "net = regroup ;"
      },
      {
        "id": 102,
        "label": "merge"
      },
      {
        "id": 103,
        "label": "False body"
      },
      {
        "id": 104,
        "label": "let mut backoff_rounds = 0 ;"
      },
      {
        "id": 105,
        "label": "Loop Start"
      },
      {
        "id": 106,
        "label": "if statement"
      },
      {
        "id": 107,
        "label": "predicate"
      },
      {
        "id": 108,
        "label": "s . fee_bps > 0"
      },
      {
        "id": 109,
        "label": "True body"
      },
      {
        "id": 110,
        "label": "s . fee_bps = s . fee_bps . saturating_sub (1) ;"
      },
      {
        "id": 111,
        "label": "False body"
      },
      {
        "id": 112,
        "label": "No-op"
      },
      {
        "id": 113,
        "label": "merge"
      },
      {
        "id": 114,
        "label": "if statement"
      },
      {
        "id": 115,
        "label": "predicate"
      },
      {
        "id": 116,
        "label": "s . round > 0"
      },
      {
        "id": 117,
        "label": "True body"
      },
      {
        "id": 118,
        "label": "s . round = s . round . saturating_sub (1) ;"
      },
      {
        "id": 119,
        "label": "False body"
      },
      {
        "id": 120,
        "label": "No-op"
      },
      {
        "id": 121,
        "label": "merge"
      },
      {
        "id": 122,
        "label": "if statement"
      },
      {
        "id": 123,
        "label": "predicate"
      },
      {
        "id": 124,
        "label": "s . last_note > 2"
      },
      {
        "id": 125,
        "label": "True body"
      },
      {
        "id": 126,
        "label": "s . last_note = s . last_note . saturating_sub (2) ;"
      },
      {
        "id": 127,
        "label": "False body"
      },
      {
        "id": 128,
        "label": "No-op"
      },
      {
        "id": 129,
        "label": "merge"
      },
      {
        "id": 130,
        "label": "backoff_rounds = backoff_rounds . saturating_add (1) ;"
      },
      {
        "id": 131,
        "label": "Loop End"
      },
      {
        "id": 132,
        "label": "let mut cool = 0 ;"
      },
      {
        "id": 133,
        "label": "Loop Start"
      },
      {
        "id": 134,
        "label": "if statement"
      },
      {
        "id": 135,
        "label": "predicate"
      },
      {
        "id": 136,
        "label": "s . total_emissions > 0"
      },
      {
        "id": 137,
        "label": "True body"
      },
      {
        "id": 138,
        "label": "s . total_emissions = s . total_emissions . saturating_sub (1) ;"
      },
      {
        "id": 139,
        "label": "False body"
      },
      {
        "id": 140,
        "label": "No-op"
      },
      {
        "id": 141,
        "label": "merge"
      },
      {
        "id": 142,
        "label": "cool = cool . saturating_add (1) ;"
      },
      {
        "id": 143,
        "label": "Loop End"
      },
      {
        "id": 144,
        "label": "net = 0 ;"
      },
      {
        "id": 145,
        "label": "merge"
      },
      {
        "id": 146,
        "label": "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . treasury . key () , ctx . accounts . member_ata . key () , ctx . accounts . admin . key () , & [] , net ,) ? ;"
      },
      {
        "id": 147,
        "label": "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . member_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 148,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 20,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 28,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 19,
        "to": 37,
        "label": "while"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 46,
        "to": 58,
        "label": "while"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 38,
        "to": 60,
        "label": "false"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "predicate"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 66,
        "to": 69,
        "label": "true"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 73,
        "to": 76,
        "label": "while"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "while"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 79,
        "to": 88,
        "label": "while"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 91,
        "to": 94,
        "label": "while"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "predicate"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 95,
        "to": 98,
        "label": "true"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 95,
        "to": 100,
        "label": "false"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 99,
        "to": 102,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 66,
        "to": 103,
        "label": "false"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "predicate"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 106,
        "to": 109,
        "label": "true"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 106,
        "to": 111,
        "label": "false"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 110,
        "to": 113,
        "label": "next"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 113,
        "to": 114,
        "label": "next"
      },
      {
        "from": 114,
        "to": 115,
        "label": "predicate"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 114,
        "to": 117,
        "label": "true"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 114,
        "to": 119,
        "label": "false"
      },
      {
        "from": 119,
        "to": 120,
        "label": "next"
      },
      {
        "from": 118,
        "to": 121,
        "label": "next"
      },
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 121,
        "to": 122,
        "label": "next"
      },
      {
        "from": 122,
        "to": 123,
        "label": "predicate"
      },
      {
        "from": 123,
        "to": 124,
        "label": "next"
      },
      {
        "from": 122,
        "to": 125,
        "label": "true"
      },
      {
        "from": 125,
        "to": 126,
        "label": "next"
      },
      {
        "from": 122,
        "to": 127,
        "label": "false"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      },
      {
        "from": 126,
        "to": 129,
        "label": "next"
      },
      {
        "from": 128,
        "to": 129,
        "label": "next"
      },
      {
        "from": 129,
        "to": 130,
        "label": "next"
      },
      {
        "from": 105,
        "to": 131,
        "label": "while"
      },
      {
        "from": 131,
        "to": 132,
        "label": "next"
      },
      {
        "from": 132,
        "to": 133,
        "label": "next"
      },
      {
        "from": 133,
        "to": 134,
        "label": "next"
      },
      {
        "from": 134,
        "to": 135,
        "label": "predicate"
      },
      {
        "from": 135,
        "to": 136,
        "label": "next"
      },
      {
        "from": 134,
        "to": 137,
        "label": "true"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 134,
        "to": 139,
        "label": "false"
      },
      {
        "from": 139,
        "to": 140,
        "label": "next"
      },
      {
        "from": 138,
        "to": 141,
        "label": "next"
      },
      {
        "from": 140,
        "to": 141,
        "label": "next"
      },
      {
        "from": 141,
        "to": 142,
        "label": "next"
      },
      {
        "from": 133,
        "to": 143,
        "label": "while"
      },
      {
        "from": 143,
        "to": 144,
        "label": "next"
      },
      {
        "from": 102,
        "to": 145,
        "label": "next"
      },
      {
        "from": 144,
        "to": 145,
        "label": "next"
      },
      {
        "from": 145,
        "to": 146,
        "label": "next"
      },
      {
        "from": 146,
        "to": 147,
        "label": "next"
      },
      {
        "from": 147,
        "to": 148,
        "label": "next"
      }
    ]
  }
]