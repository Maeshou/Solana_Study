[
  {
    "name": "enhance",
    "inputs": [
      "ctx: Context < Enhance >",
      "power: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "st . calls += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . alt_program . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { program = ctx . remaining_accounts [0] . clone () ; st . path_a_enhance += power ; } else { st . path_b_fallback += power ; st . last_fallback_power = power ; st . durability_penalty = st . durability_penalty . saturating_add (power / 7) ; st . resist_log . push ((Clock :: get () ? . slot as u32 , (st . base_resist ^ power) as u32)) ; st . base_resist = st . base_resist . wrapping_add ((power & 15) + st . calls) ; }"
      },
      {
        "id": 5,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 6,
        "label": "st . path_a_enhance += power ;"
      },
      {
        "id": 7,
        "label": "st . path_b_fallback += power ;"
      },
      {
        "id": 8,
        "label": "st . last_fallback_power = power ;"
      },
      {
        "id": 9,
        "label": "st . durability_penalty = st . durability_penalty . saturating_add (power / 7) ;"
      },
      {
        "id": 10,
        "label": "st . resist_log . push ((Clock :: get () ? . slot as u32 , (st . base_resist ^ power) as u32)) ;"
      },
      {
        "id": 11,
        "label": "st . base_resist = st . base_resist . wrapping_add ((power & 15) + st . calls) ;"
      },
      {
        "id": 12,
        "label": "let br = EquipBridge { avatar : ctx . accounts . avatar . to_account_info () , gear_mint : ctx . accounts . gear_mint . to_account_info () , } ;"
      },
      {
        "id": 13,
        "label": "let slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 14,
        "label": "let chunk = ((slot & 3) as u64 + 2) * (1 + (st . calls & 1) as u64) ;"
      },
      {
        "id": 15,
        "label": "let mut left = power ;"
      },
      {
        "id": 16,
        "label": "while left > 0 { let send = if left > chunk { chunk } else { left } ; let mut payload = Vec :: with_capacity (24) ; payload . extend_from_slice (& st . calls . to_le_bytes ()) ; payload . extend_from_slice (& power . to_le_bytes ()) ; payload . extend_from_slice (& send . to_le_bytes ()) ; let cx = br . as_cpi (program . clone ()) ; br . invoke_enhance (cx , payload) ? ; st . total_sent += send ; left -= send ; }"
      },
      {
        "id": 17,
        "label": "let send = if left > chunk { chunk } else { left } ;"
      },
      {
        "id": 18,
        "label": "chunk"
      },
      {
        "id": 19,
        "label": "left"
      },
      {
        "id": 20,
        "label": "let mut payload = Vec :: with_capacity (24) ;"
      },
      {
        "id": 21,
        "label": "payload . extend_from_slice (& st . calls . to_le_bytes ()) ;"
      },
      {
        "id": 22,
        "label": "payload . extend_from_slice (& power . to_le_bytes ()) ;"
      },
      {
        "id": 23,
        "label": "payload . extend_from_slice (& send . to_le_bytes ()) ;"
      },
      {
        "id": 24,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 25,
        "label": "br . invoke_enhance (cx , payload) ? ;"
      },
      {
        "id": 26,
        "label": "st . total_sent += send ;"
      },
      {
        "id": 27,
        "label": "left -= send ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: br"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: slot"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: chunk"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: slot"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: left"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: left"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: left"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: chunk"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: chunk"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: left"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 16,
        "label": "data_dep: program"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: br"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: left"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: send"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: left"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: chunk"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: chunk"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: left"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: chunk"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: left"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: payload"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: payload"
      },
      {
        "from": 1,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: payload"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: payload"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: send"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: cx"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 24,
        "label": "data_dep: program"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: br"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: cx"
      },
      {
        "from": 20,
        "to": 25,
        "label": "data_dep: payload"
      },
      {
        "from": 1,
        "to": 26,
        "label": "data_dep: st"
      },
      {
        "from": 17,
        "to": 26,
        "label": "data_dep: send"
      },
      {
        "from": 15,
        "to": 27,
        "label": "data_dep: left"
      },
      {
        "from": 17,
        "to": 27,
        "label": "data_dep: send"
      }
    ]
  }
]