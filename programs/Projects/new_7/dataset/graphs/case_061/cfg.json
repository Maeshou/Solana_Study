[
  {
    "name": "prepare",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . raid ;"
      },
      {
        "id": 2,
        "label": "r . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "r . quota = quota ;"
      },
      {
        "id": 4,
        "label": "r . step = 0 ;"
      },
      {
        "id": 5,
        "label": "r . distributed = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "stream",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let r = & mut ctx . accounts . raid ;"
      },
      {
        "id": 9,
        "label": "let mut bonus = base ;"
      },
      {
        "id": 10,
        "label": "let mut w = 0 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "bonus = bonus . saturating_add (5) ;"
      },
      {
        "id": 13,
        "label": "w += 1 ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "let amount = r . quota . saturating_mul (bonus) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "amount == 0"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "r . step = r . step . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "return Ok (()) ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "let half = amount / 2 ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "let send = if r . distributed + half > amount { amount - r . distributed } else { half } ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "send == 0"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "break ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . any_program . key () , & ctx . accounts . bank . key () , & ctx . accounts . hunter_vault . key () , & ctx . accounts . owner . key () , & [] , send ,) ? ;"
      },
      {
        "id": 37,
        "label": "invoke (& ix , & [ctx . accounts . any_program . to_account_info () , ctx . accounts . bank . to_account_info () , ctx . accounts . hunter_vault . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 38,
        "label": "r . distributed = r . distributed . saturating_add (send) ;"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "while"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 16,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 28,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 26,
        "to": 39,
        "label": "for"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]