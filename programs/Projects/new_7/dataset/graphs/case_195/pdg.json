[
  {
    "name": "encode",
    "inputs": [
      "s: & str",
      "k: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut out = Vec :: with_capacity (s . len ()) ;"
      },
      {
        "id": 2,
        "label": "for b in s . as_bytes () { out . push (b ^ k) ; }"
      },
      {
        "id": 3,
        "label": "out . push (b ^ k) ;"
      },
      {
        "id": 4,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: out"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: out"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: out"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: out"
      }
    ]
  },
  {
    "name": "decode",
    "inputs": [
      "b: & [u8]",
      "k: u8"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let mut out = Vec :: with_capacity (b . len ()) ;"
      },
      {
        "id": 7,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 8,
        "label": "while i < b . len () { out . push (b [i] ^ k) ; i += 1 ; }"
      },
      {
        "id": 9,
        "label": "out . push (b [i] ^ k) ;"
      },
      {
        "id": 10,
        "label": "i += 1 ;"
      },
      {
        "id": 11,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: out"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: i"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: out"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: i"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: out"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: i"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: out"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "key: u8",
      "tip: u64"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let s1 = format ! (\"{}:{}\" , ctx . accounts . user . key () , key) ;"
      },
      {
        "id": 14,
        "label": "let enc = encode (& s1 , key) ;"
      },
      {
        "id": 15,
        "label": "let dec = decode (& enc , key) ;"
      },
      {
        "id": 16,
        "label": "if dec . len () > 10 { ctx . accounts . sheet . large = ctx . accounts . sheet . large . saturating_add (1) ; }"
      },
      {
        "id": 17,
        "label": "ctx . accounts . sheet . large = ctx . accounts . sheet . large . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "invoke (& Instruction { program_id : FIXED_ARCHIVE_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . archive_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : enc } , & [ctx . accounts . archive_hint . to_account_info () , ctx . accounts . archive_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 19,
        "label": "let mut f = ctx . accounts . feed_hint . to_account_info () ;"
      },
      {
        "id": 20,
        "label": "if ! ctx . remaining_accounts . is_empty () { f = ctx . remaining_accounts [0] . clone () ; ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (5) ; }"
      },
      {
        "id": 21,
        "label": "f = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 22,
        "label": "ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (5) ;"
      },
      {
        "id": 23,
        "label": "invoke (& Instruction { program_id : * f . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . feed_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : tip . to_le_bytes () . to_vec () } , & [f , ctx . accounts . feed_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 24,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . vault . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_auth . to_account_info () , }) , tip ,) ? ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: s1"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: enc"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: s1"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: dec"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: enc"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: dec"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: enc"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: f"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: f"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: f"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: f"
      }
    ]
  }
]