[
  {
    "name": "mark",
    "inputs": [
      "ctx: Context < Mark >",
      "v: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . meta ;"
      },
      {
        "id": 2,
        "label": "st . epoch += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . pipe_prog . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { program = ctx . remaining_accounts [0] . clone () ; st . alt += v ; }"
      },
      {
        "id": 5,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 6,
        "label": "st . alt += v ;"
      },
      {
        "id": 7,
        "label": "let mut data = Vec :: with_capacity (24) ;"
      },
      {
        "id": 8,
        "label": "data . extend_from_slice (& st . epoch . to_le_bytes ()) ;"
      },
      {
        "id": 9,
        "label": "data . extend_from_slice (& (8u64) . to_le_bytes ()) ;"
      },
      {
        "id": 10,
        "label": "data . extend_from_slice (& v . to_le_bytes ()) ;"
      },
      {
        "id": 11,
        "label": "let br = MarkBridge { a : ctx . accounts . src . to_account_info () , b : ctx . accounts . dst . to_account_info () } ;"
      },
      {
        "id": 12,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 13,
        "label": "br . send (cx , data) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: data"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: data"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: st"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: data"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: data"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: br"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: cx"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 12,
        "label": "data_dep: program"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: cx"
      },
      {
        "from": 7,
        "to": 13,
        "label": "data_dep: data"
      }
    ]
  }
]