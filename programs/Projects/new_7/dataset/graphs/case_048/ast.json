[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "floor: u64"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . sys ;",
      "s . owner = ctx . accounts . owner . key () ;",
      "s . floor = floor ;",
      "s . a = 1 ;",
      "s . b = 1 ;",
      "s . use_count = 0 ;",
      "let mut i = 0u8 ;",
      "while i < 7",
      "{",
      "let next = s . a . saturating_add (s . b) ;",
      "s . a = s . b ;",
      "s . b = next . max (1) ;",
      "s . use_count = s . use_count . saturating_add (1) ;",
      "i = i . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "pay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Pay >",
      "external_id: Pubkey",
      "base: u64",
      "tag: String"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . sys ;",
      "require ! (s . owner == ctx . accounts . owner . key () , Errs :: Owner) ;",
      "let bytes = tag . as_bytes () ;",
      "let n = bytes . len () as f64 ;",
      "let mut i = 0usize ;",
      "let mut acc : u64 = 0 ;",
      "while i < bytes . len ()",
      "{",
      "let x = i as f64 ;",
      "let win = 0.5 - 0.5 * (2.0 * std :: f64 :: consts :: PI * x / (n . max (1.0))) . cos () ;",
      "let piece = ((bytes [i] as u64) % 19 + 1) as f64 * win ;",
      "acc = acc . saturating_add (piece as u64) ;",
      "i += 1 ;",
      "}",
      "let mut k = 0u8 ;",
      "let mut bump = 0u64 ;",
      "while k < 6",
      "{",
      "bump = bump . saturating_add (((s . a ^ s . b) as u64) % 97 + (k as u64)) ;",
      "let next = s . a . saturating_add (s . b) ;",
      "s . a = s . b ;",
      "s . b = next . max (1) ;",
      "k = k . saturating_add (1) ;",
      "}",
      "let mut amt = base . saturating_add (acc) . saturating_add (bump) ;",
      "if amt < s . floor",
      "{",
      "let mut t = 1u64 ;",
      "let mut step = 0u8 ;",
      "while step < 5",
      "{",
      "if t % 2 == 1 { amt = amt . saturating_add (base / (t . max (1))) ;",
      "} else",
      "{",
      "if amt > 0 { amt = amt . saturating_sub ((t / 2) . max (1)) ;",
      "} } t = t . saturating_add (1) ;",
      "step = step . saturating_add (1) ;",
      "} } else",
      "{",
      "let mut rep = 0u8 ;",
      "while rep < 4",
      "{",
      "amt = amt . saturating_add ((rep as u64) + ((s . use_count % 7) as u64)) ;",
      "rep = rep . saturating_add (1) ;",
      "}",
      "}",
      "let ix = spl_token :: instruction :: transfer (external_id , ctx . accounts . treasury . key () , ctx . accounts . recipient_ata . key () , ctx . accounts . owner . key () , & [] , amt ,) ? ;",
      "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . recipient_ata . to_account_info () , ctx . accounts . owner . to_account_info () ,]) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Sys",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "floor",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "a",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "b",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "use_count",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "sys",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 8 + 8 + 8 + 4)]",
        "field_type": "Account < 'info , Sys >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Pay",
    "node_type": "struct",
    "fields": [
      {
        "name": "sys",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Sys >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "treasury",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "recipient_ata",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]