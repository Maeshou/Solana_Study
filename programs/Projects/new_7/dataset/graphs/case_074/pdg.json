[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "hardcap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "st . mgr = ctx . accounts . mgr . key () ;"
      },
      {
        "id": 3,
        "label": "st . hardcap = hardcap ;"
      },
      {
        "id": 4,
        "label": "st . waves = 4 ;"
      },
      {
        "id": 5,
        "label": "st . trace = hardcap ^ 0xDEAD_BEEF ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "approve",
    "inputs": [
      "ctx: Context < Approve >",
      "prog: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "require_keys_eq ! (st . mgr , ctx . accounts . mgr . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 10,
        "label": "st . route_id = prog ;"
      },
      {
        "id": 11,
        "label": "st . waves += 5 ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: st"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "payout",
    "inputs": [
      "ctx: Context < Payout >",
      "prize: u64",
      "pass: u8"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 15,
        "label": "if prize <= 2 { st . waves = st . waves . wrapping_add (9) ; st . trace = st . trace . rotate_left (4) ; return Ok (()) ; }"
      },
      {
        "id": 16,
        "label": "st . waves = st . waves . wrapping_add (9) ;"
      },
      {
        "id": 17,
        "label": "st . trace = st . trace . rotate_left (4) ;"
      },
      {
        "id": 18,
        "label": "return Ok (()) ;"
      },
      {
        "id": 19,
        "label": "let mut balance = prize ;"
      },
      {
        "id": 20,
        "label": "let mut step = 1u8 ;"
      },
      {
        "id": 21,
        "label": "while step <= pass { let unit = (balance / 3) . max (3) ; if unit >= balance { break ; } let ix = token_ix :: transfer (& st . route_id , & ctx . accounts . bank . key () , & ctx . accounts . winner . key () , & ctx . accounts . mgr . key () , & [] , unit ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix , & [program_ai . clone () , ctx . accounts . bank . to_account_info () , ctx . accounts . winner . to_account_info () , ctx . accounts . mgr . to_account_info () ,] ,) ? ; balance -= unit ; st . waves += 1 ; st . trace = st . trace . wrapping_add (unit as u64) . rotate_right (2) ; step += 1 ; if balance < st . hardcap / 5 { st . trace = st . trace ^ 0xABCD ; } else { st . trace = st . trace . wrapping_add (31) ; } }"
      },
      {
        "id": 22,
        "label": "let unit = (balance / 3) . max (3) ;"
      },
      {
        "id": 23,
        "label": "if unit >= balance { break ; }"
      },
      {
        "id": 24,
        "label": "break ;"
      },
      {
        "id": 25,
        "label": "let ix = token_ix :: transfer (& st . route_id , & ctx . accounts . bank . key () , & ctx . accounts . winner . key () , & ctx . accounts . mgr . key () , & [] , unit ,) ? ;"
      },
      {
        "id": 26,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & [program_ai . clone () , ctx . accounts . bank . to_account_info () , ctx . accounts . winner . to_account_info () , ctx . accounts . mgr . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "balance -= unit ;"
      },
      {
        "id": 29,
        "label": "st . waves += 1 ;"
      },
      {
        "id": 30,
        "label": "st . trace = st . trace . wrapping_add (unit as u64) . rotate_right (2) ;"
      },
      {
        "id": 31,
        "label": "step += 1 ;"
      },
      {
        "id": 32,
        "label": "if balance < st . hardcap / 5 { st . trace = st . trace ^ 0xABCD ; } else { st . trace = st . trace . wrapping_add (31) ; }"
      },
      {
        "id": 33,
        "label": "st . trace = st . trace ^ 0xABCD ;"
      },
      {
        "id": 34,
        "label": "st . trace = st . trace . wrapping_add (31) ;"
      },
      {
        "id": 35,
        "label": "if balance > 2 { let ix2 = token_ix :: transfer (& st . route_id , & ctx . accounts . bank . key () , & ctx . accounts . winner . key () , & ctx . accounts . mgr . key () , & [] , balance - 2 ,) ? ; let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix2 , & [program_ai . clone () , ctx . accounts . bank . to_account_info () , ctx . accounts . winner . to_account_info () , ctx . accounts . mgr . to_account_info () ,] ,) ? ; st . trace = st . trace . wrapping_add (balance - 2) ; }"
      },
      {
        "id": 36,
        "label": "let ix2 = token_ix :: transfer (& st . route_id , & ctx . accounts . bank . key () , & ctx . accounts . winner . key () , & ctx . accounts . mgr . key () , & [] , balance - 2 ,) ? ;"
      },
      {
        "id": 37,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 38,
        "label": "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . bank . to_account_info () , ctx . accounts . winner . to_account_info () , ctx . accounts . mgr . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 39,
        "label": "st . trace = st . trace . wrapping_add (balance - 2) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: balance"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: step"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: step"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: balance"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: balance"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: balance"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: step"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: balance"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 21,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: unit"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: balance"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: unit"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: balance"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: ix"
      },
      {
        "from": 14,
        "to": 25,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: unit"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: balance"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: unit"
      },
      {
        "from": 14,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: unit"
      },
      {
        "from": 20,
        "to": 31,
        "label": "data_dep: step"
      },
      {
        "from": 19,
        "to": 32,
        "label": "data_dep: balance"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: balance"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: balance"
      },
      {
        "from": 26,
        "to": 35,
        "label": "data_dep: program_ai"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 35,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 35,
        "label": "data_dep: balance"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: ix2"
      },
      {
        "from": 14,
        "to": 36,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 36,
        "label": "data_dep: balance"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: program_ai"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: ix2"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: program_ai"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: st"
      },
      {
        "from": 14,
        "to": 39,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 39,
        "label": "data_dep: balance"
      }
    ]
  }
]