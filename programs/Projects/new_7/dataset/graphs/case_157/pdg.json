[
  {
    "name": "energy_channel",
    "inputs": [
      "ctx: Context < EnergyChannel >",
      "fuel: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "for _ in 0 .. (fuel % 3 + 1) { ctx . accounts . energy_store . charge += 2 ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . energy_store . charge += 2 ;"
      },
      {
        "id": 3,
        "label": "if ctx . accounts . energy_store . charge > 50 { ctx . accounts . energy_store . overflows += 1 ; }"
      },
      {
        "id": 4,
        "label": "ctx . accounts . energy_store . overflows += 1 ;"
      },
      {
        "id": 5,
        "label": "let mut target_program = ctx . accounts . route_hint . to_account_info () ;"
      },
      {
        "id": 6,
        "label": "if ctx . remaining_accounts . len () > 0 { target_program = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 7,
        "label": "target_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 8,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . device . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , true) ,] ;"
      },
      {
        "id": 9,
        "label": "let infos = vec ! [target_program . clone () , ctx . accounts . device . to_account_info () , ctx . accounts . user . to_account_info () ,] ;"
      },
      {
        "id": 10,
        "label": "let ix = Instruction { program_id : * target_program . key , accounts : metas , data : fuel . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 11,
        "label": "invoke (& ix , & infos) ? ;"
      },
      {
        "id": 12,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: target_program"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: target_program"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: target_program"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: metas"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: infos"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: ix"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: target_program"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metas"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: ix"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: infos"
      }
    ]
  },
  {
    "name": "artifact_table",
    "inputs": [
      "ctx: Context < ArtifactTable >",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 13,
        "label": "Entry"
      },
      {
        "id": 14,
        "label": "ctx . accounts . registry . count = ctx . accounts . registry . count . saturating_add (seed) ;"
      },
      {
        "id": 15,
        "label": "let mut idx = 0 ;"
      },
      {
        "id": 16,
        "label": "while idx < (seed % 4) { ctx . accounts . registry . hash ^= Clock :: get () ? . unix_timestamp as u64 ; idx += 1 ; }"
      },
      {
        "id": 17,
        "label": "ctx . accounts . registry . hash ^= Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 18,
        "label": "idx += 1 ;"
      },
      {
        "id": 19,
        "label": "if seed > 10 { ctx . accounts . registry . flags += 1 ; }"
      },
      {
        "id": 20,
        "label": "ctx . accounts . registry . flags += 1 ;"
      },
      {
        "id": 21,
        "label": "let mut target_program = ctx . accounts . route_prog . to_account_info () ;"
      },
      {
        "id": 22,
        "label": "if ctx . remaining_accounts . len () > 0 { target_program = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 23,
        "label": "target_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 24,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . holder . key () , false) ,] ;"
      },
      {
        "id": 25,
        "label": "let infos = vec ! [target_program . clone () , ctx . accounts . slot . to_account_info () , ctx . accounts . holder . to_account_info () ,] ;"
      },
      {
        "id": 26,
        "label": "let ix = Instruction { program_id : * target_program . key , accounts : metas , data : (seed ^ 0xABCD) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 27,
        "label": "invoke (& ix , & infos) ? ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: idx"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: idx"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: idx"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: idx"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: target_program"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: target_program"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: target_program"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: metas"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: infos"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: ix"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: target_program"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: metas"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: ix"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: infos"
      }
    ]
  },
  {
    "name": "quest_board",
    "inputs": [
      "ctx: Context < QuestBoard >",
      "stage: u64"
    ],
    "nodes": [
      {
        "id": 29,
        "label": "Entry"
      },
      {
        "id": 30,
        "label": "if stage >= 5 { ctx . accounts . journal . progress += 2 ; }"
      },
      {
        "id": 31,
        "label": "ctx . accounts . journal . progress += 2 ;"
      },
      {
        "id": 32,
        "label": "if stage < 2 { ctx . accounts . journal . fallbacks += 1 ; }"
      },
      {
        "id": 33,
        "label": "ctx . accounts . journal . fallbacks += 1 ;"
      },
      {
        "id": 34,
        "label": "let mut chosen_program = ctx . accounts . dispatch . to_account_info () ;"
      },
      {
        "id": 35,
        "label": "if ctx . remaining_accounts . len () > 0 { chosen_program = ctx . remaining_accounts [0] . clone () ; ctx . accounts . journal . routes += 1 ; }"
      },
      {
        "id": 36,
        "label": "chosen_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 37,
        "label": "ctx . accounts . journal . routes += 1 ;"
      },
      {
        "id": 38,
        "label": "for _ in 0 .. (stage % 2 + 1) { ctx . accounts . journal . events = ctx . accounts . journal . events . wrapping_add (7) ; }"
      },
      {
        "id": 39,
        "label": "ctx . accounts . journal . events = ctx . accounts . journal . events . wrapping_add (7) ;"
      },
      {
        "id": 40,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . task . key () , false) , AccountMeta :: new (ctx . accounts . hero . key () , true) ,] ;"
      },
      {
        "id": 41,
        "label": "let infos = vec ! [chosen_program . clone () , ctx . accounts . task . to_account_info () , ctx . accounts . hero . to_account_info () ,] ;"
      },
      {
        "id": 42,
        "label": "let ix = Instruction { program_id : * chosen_program . key , accounts : metas , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 43,
        "label": "invoke (& ix , & infos) ? ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 34,
        "to": 34,
        "label": "def: chosen_program"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: metas"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: infos"
      },
      {
        "from": 42,
        "to": 42,
        "label": "def: ix"
      },
      {
        "from": 34,
        "to": 42,
        "label": "data_dep: chosen_program"
      },
      {
        "from": 40,
        "to": 42,
        "label": "data_dep: metas"
      },
      {
        "from": 42,
        "to": 43,
        "label": "data_dep: ix"
      },
      {
        "from": 41,
        "to": 43,
        "label": "data_dep: infos"
      }
    ]
  }
]