[
  {
    "name": "transfer_tokens",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "token :: transfer (CpiContext :: new (program . to_account_info () , Transfer { from : from . to_account_info () , to : to . to_account_info () , authority : auth . clone () , } ,) , amount ,)"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "call"
      }
    ]
  },
  {
    "name": "reward_mix",
    "nodes": [
      {
        "id": 2,
        "label": "Entry"
      },
      {
        "id": 3,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . fixed_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 4,
        "label": "invoke (& fixed_ix , & [ctx . accounts . fixed_hint . to_account_info () , ctx . accounts . fixed_slot . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 5,
        "label": "let mut prog_ai = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "prog_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "ctx . accounts . note . routes = ctx . accounts . note . routes . saturating_add (1) ;"
      },
      {
        "id": 12,
        "label": "False body"
      },
      {
        "id": 13,
        "label": "No-op"
      },
      {
        "id": 14,
        "label": "merge"
      },
      {
        "id": 15,
        "label": "let mut tag = stage . rotate_left (7) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "tag < 10"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "tag = tag . wrapping_add (10) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "let mut dyn_data = stage . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 25,
        "label": "dyn_data . extend_from_slice (& tag . to_le_bytes ()) ;"
      },
      {
        "id": 26,
        "label": "let dyn_ix = Instruction { program_id : * prog_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . report_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] , data : dyn_data , } ;"
      },
      {
        "id": 27,
        "label": "invoke (& dyn_ix , & [prog_ai , ctx . accounts . report_pad . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 28,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ,) , payout ,) ? ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 6,
        "to": 12,
        "label": "false"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  },
  {
    "name": "craft_mix",
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "seed > 100"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "ctx . accounts . state . rolls = ctx . accounts . state . rolls . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "No-op"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "seed % 2 != 0"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "ctx . accounts . state . odd = ctx . accounts . state . odd . wrapping_add (1) ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . counter_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 48,
        "label": "invoke (& fixed_ix , & [ctx . accounts . counter_hint . to_account_info () , ctx . accounts . counter_cell . to_account_info () , ctx . accounts . crafter . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 49,
        "label": "let mut p = ctx . accounts . feed_hint . to_account_info () ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 55,
        "label": "ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (2) ;"
      },
      {
        "id": 56,
        "label": "False body"
      },
      {
        "id": 57,
        "label": "No-op"
      },
      {
        "id": 58,
        "label": "merge"
      },
      {
        "id": 59,
        "label": "let dyn_ix = Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . feed_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : reward . rotate_left (5) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 60,
        "label": "invoke (& dyn_ix , & [p , ctx . accounts . feed_board . to_account_info () , ctx . accounts . crafter . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 61,
        "label": "ctx . accounts . pay_with_tokens (reward)"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 31,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 39,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 50,
        "to": 56,
        "label": "false"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      }
    ]
  },
  {
    "name": "patrol_mix",
    "nodes": [
      {
        "id": 62,
        "label": "Entry"
      },
      {
        "id": 63,
        "label": "if statement"
      },
      {
        "id": 64,
        "label": "predicate"
      },
      {
        "id": 65,
        "label": "turn % 3 != 0"
      },
      {
        "id": 66,
        "label": "True body"
      },
      {
        "id": 67,
        "label": "ctx . accounts . snap . missed = ctx . accounts . snap . missed . saturating_add (1) ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "turn > 50"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "ctx . accounts . snap . heavy = ctx . accounts . snap . heavy . wrapping_add (1) ;"
      },
      {
        "id": 76,
        "label": "False body"
      },
      {
        "id": 77,
        "label": "No-op"
      },
      {
        "id": 78,
        "label": "merge"
      },
      {
        "id": 79,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . sync_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . agent . key () , false) ,] , data : turn . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 80,
        "label": "invoke (& fixed_ix , & [ctx . accounts . sync_hint . to_account_info () , ctx . accounts . sync_slot . to_account_info () , ctx . accounts . agent . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 81,
        "label": "let mut rprog = ctx . accounts . router_hint . to_account_info () ;"
      },
      {
        "id": 82,
        "label": "if statement"
      },
      {
        "id": 83,
        "label": "predicate"
      },
      {
        "id": 84,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 85,
        "label": "True body"
      },
      {
        "id": 86,
        "label": "rprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 87,
        "label": "False body"
      },
      {
        "id": 88,
        "label": "No-op"
      },
      {
        "id": 89,
        "label": "merge"
      },
      {
        "id": 90,
        "label": "let dyn_ix = Instruction { program_id : * rprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . router_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . agent . key () , false) ,] , data : credit . wrapping_mul (7) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 91,
        "label": "invoke (& dyn_ix , & [rprog , ctx . accounts . router_board . to_account_info () , ctx . accounts . agent . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 92,
        "label": "transfer_tokens (& ctx . accounts . token_program , & ctx . accounts . reserve , & ctx . accounts . agent_token , & ctx . accounts . reserve_authority , credit ,)"
      }
    ],
    "edges": [
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "predicate"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "true"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 63,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 71,
        "to": 76,
        "label": "false"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "predicate"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "true"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 82,
        "to": 87,
        "label": "false"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 86,
        "to": 89,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "call"
      }
    ]
  },
  {
    "name": "grade_mix",
    "nodes": [
      {
        "id": 93,
        "label": "Entry"
      },
      {
        "id": 94,
        "label": "if statement"
      },
      {
        "id": 95,
        "label": "predicate"
      },
      {
        "id": 96,
        "label": "score > 90"
      },
      {
        "id": 97,
        "label": "True body"
      },
      {
        "id": 98,
        "label": "ctx . accounts . journal . gold = ctx . accounts . journal . gold . saturating_add (1) ;"
      },
      {
        "id": 99,
        "label": "False body"
      },
      {
        "id": 100,
        "label": "No-op"
      },
      {
        "id": 101,
        "label": "merge"
      },
      {
        "id": 102,
        "label": "if statement"
      },
      {
        "id": 103,
        "label": "predicate"
      },
      {
        "id": 104,
        "label": "score < 60"
      },
      {
        "id": 105,
        "label": "True body"
      },
      {
        "id": 106,
        "label": "ctx . accounts . journal . red = ctx . accounts . journal . red . wrapping_add (1) ;"
      },
      {
        "id": 107,
        "label": "False body"
      },
      {
        "id": 108,
        "label": "No-op"
      },
      {
        "id": 109,
        "label": "merge"
      },
      {
        "id": 110,
        "label": "let mut data = score . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 111,
        "label": "let mix = score . rotate_right (9) ;"
      },
      {
        "id": 112,
        "label": "data . extend_from_slice (& mix . to_le_bytes ()) ;"
      },
      {
        "id": 113,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . gauge_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data , } ;"
      },
      {
        "id": 114,
        "label": "invoke (& fixed_ix , & [ctx . accounts . gauge_hint . to_account_info () , ctx . accounts . gauge_cell . to_account_info () , ctx . accounts . student . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 115,
        "label": "let mut sprog = ctx . accounts . signal_hint . to_account_info () ;"
      },
      {
        "id": 116,
        "label": "if statement"
      },
      {
        "id": 117,
        "label": "predicate"
      },
      {
        "id": 118,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 119,
        "label": "True body"
      },
      {
        "id": 120,
        "label": "sprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 121,
        "label": "ctx . accounts . journal . paths = ctx . accounts . journal . paths . saturating_add (3) ;"
      },
      {
        "id": 122,
        "label": "False body"
      },
      {
        "id": 123,
        "label": "No-op"
      },
      {
        "id": 124,
        "label": "merge"
      },
      {
        "id": 125,
        "label": "let dyn_ix = Instruction { program_id : * sprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data : gift . wrapping_add (111) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 126,
        "label": "invoke (& dyn_ix , & [sprog , ctx . accounts . signal_board . to_account_info () , ctx . accounts . student . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 127,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . reward_pool . to_account_info () , to : ctx . accounts . student_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ,) , gift ,) ? ;"
      },
      {
        "id": 128,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "predicate"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 94,
        "to": 97,
        "label": "true"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 94,
        "to": 99,
        "label": "false"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "next"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "predicate"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 102,
        "to": 105,
        "label": "true"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 102,
        "to": 107,
        "label": "false"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 106,
        "to": 109,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 110,
        "to": 111,
        "label": "next"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 113,
        "to": 114,
        "label": "next"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "predicate"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 116,
        "to": 119,
        "label": "true"
      },
      {
        "from": 119,
        "to": 120,
        "label": "next"
      },
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 116,
        "to": 122,
        "label": "false"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      },
      {
        "from": 121,
        "to": 124,
        "label": "next"
      },
      {
        "from": 123,
        "to": 124,
        "label": "next"
      },
      {
        "from": 124,
        "to": 125,
        "label": "next"
      },
      {
        "from": 125,
        "to": 126,
        "label": "next"
      },
      {
        "from": 126,
        "to": 127,
        "label": "next"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      }
    ]
  },
  {
    "name": "hatch_mix",
    "nodes": [
      {
        "id": 129,
        "label": "Entry"
      },
      {
        "id": 130,
        "label": "if statement"
      },
      {
        "id": 131,
        "label": "predicate"
      },
      {
        "id": 132,
        "label": "seed % 5 != 0"
      },
      {
        "id": 133,
        "label": "True body"
      },
      {
        "id": 134,
        "label": "ctx . accounts . inc . note = ctx . accounts . inc . note . saturating_add (1) ;"
      },
      {
        "id": 135,
        "label": "False body"
      },
      {
        "id": 136,
        "label": "No-op"
      },
      {
        "id": 137,
        "label": "merge"
      },
      {
        "id": 138,
        "label": "if statement"
      },
      {
        "id": 139,
        "label": "predicate"
      },
      {
        "id": 140,
        "label": "seed > 999"
      },
      {
        "id": 141,
        "label": "True body"
      },
      {
        "id": 142,
        "label": "ctx . accounts . inc . large = ctx . accounts . inc . large . wrapping_add (1) ;"
      },
      {
        "id": 143,
        "label": "False body"
      },
      {
        "id": 144,
        "label": "No-op"
      },
      {
        "id": 145,
        "label": "merge"
      },
      {
        "id": 146,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . hatch_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 147,
        "label": "invoke (& fixed_ix , & [ctx . accounts . hatch_hint . to_account_info () , ctx . accounts . hatch_cell . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 148,
        "label": "let mut nprog = ctx . accounts . notice_hint . to_account_info () ;"
      },
      {
        "id": 149,
        "label": "if statement"
      },
      {
        "id": 150,
        "label": "predicate"
      },
      {
        "id": 151,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 152,
        "label": "True body"
      },
      {
        "id": 153,
        "label": "nprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 154,
        "label": "False body"
      },
      {
        "id": 155,
        "label": "No-op"
      },
      {
        "id": 156,
        "label": "merge"
      },
      {
        "id": 157,
        "label": "let dyn_ix = Instruction { program_id : * nprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : grant . rotate_left (11) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 158,
        "label": "invoke (& dyn_ix , & [nprog , ctx . accounts . notice_board . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 159,
        "label": "ctx . accounts . pay_owner (grant)"
      }
    ],
    "edges": [
      {
        "from": 129,
        "to": 130,
        "label": "next"
      },
      {
        "from": 130,
        "to": 131,
        "label": "predicate"
      },
      {
        "from": 131,
        "to": 132,
        "label": "next"
      },
      {
        "from": 130,
        "to": 133,
        "label": "true"
      },
      {
        "from": 133,
        "to": 134,
        "label": "next"
      },
      {
        "from": 130,
        "to": 135,
        "label": "false"
      },
      {
        "from": 135,
        "to": 136,
        "label": "next"
      },
      {
        "from": 134,
        "to": 137,
        "label": "next"
      },
      {
        "from": 136,
        "to": 137,
        "label": "next"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 138,
        "to": 139,
        "label": "predicate"
      },
      {
        "from": 139,
        "to": 140,
        "label": "next"
      },
      {
        "from": 138,
        "to": 141,
        "label": "true"
      },
      {
        "from": 141,
        "to": 142,
        "label": "next"
      },
      {
        "from": 138,
        "to": 143,
        "label": "false"
      },
      {
        "from": 143,
        "to": 144,
        "label": "next"
      },
      {
        "from": 142,
        "to": 145,
        "label": "next"
      },
      {
        "from": 144,
        "to": 145,
        "label": "next"
      },
      {
        "from": 145,
        "to": 146,
        "label": "next"
      },
      {
        "from": 146,
        "to": 147,
        "label": "next"
      },
      {
        "from": 147,
        "to": 148,
        "label": "next"
      },
      {
        "from": 148,
        "to": 149,
        "label": "next"
      },
      {
        "from": 149,
        "to": 150,
        "label": "predicate"
      },
      {
        "from": 150,
        "to": 151,
        "label": "next"
      },
      {
        "from": 149,
        "to": 152,
        "label": "true"
      },
      {
        "from": 152,
        "to": 153,
        "label": "next"
      },
      {
        "from": 149,
        "to": 154,
        "label": "false"
      },
      {
        "from": 154,
        "to": 155,
        "label": "next"
      },
      {
        "from": 153,
        "to": 156,
        "label": "next"
      },
      {
        "from": 155,
        "to": 156,
        "label": "next"
      },
      {
        "from": 156,
        "to": 157,
        "label": "next"
      },
      {
        "from": 157,
        "to": 158,
        "label": "next"
      },
      {
        "from": 158,
        "to": 159,
        "label": "next"
      }
    ]
  },
  {
    "name": "rail_mix",
    "nodes": [
      {
        "id": 160,
        "label": "Entry"
      },
      {
        "id": 161,
        "label": "if statement"
      },
      {
        "id": 162,
        "label": "predicate"
      },
      {
        "id": 163,
        "label": "steps > 0"
      },
      {
        "id": 164,
        "label": "True body"
      },
      {
        "id": 165,
        "label": "ctx . accounts . trail . progress = ctx . accounts . trail . progress . saturating_add (steps) ;"
      },
      {
        "id": 166,
        "label": "False body"
      },
      {
        "id": 167,
        "label": "No-op"
      },
      {
        "id": 168,
        "label": "merge"
      },
      {
        "id": 169,
        "label": "if statement"
      },
      {
        "id": 170,
        "label": "predicate"
      },
      {
        "id": 171,
        "label": "steps % 4 != 0"
      },
      {
        "id": 172,
        "label": "True body"
      },
      {
        "id": 173,
        "label": "ctx . accounts . trail . irregular = ctx . accounts . trail . irregular . wrapping_add (1) ;"
      },
      {
        "id": 174,
        "label": "False body"
      },
      {
        "id": 175,
        "label": "No-op"
      },
      {
        "id": 176,
        "label": "merge"
      },
      {
        "id": 177,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . step_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : steps . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 178,
        "label": "invoke (& fixed_ix , & [ctx . accounts . step_hint . to_account_info () , ctx . accounts . step_slot . to_account_info () , ctx . accounts . rider . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 179,
        "label": "let mut cprog = ctx . accounts . cast_hint . to_account_info () ;"
      },
      {
        "id": 180,
        "label": "if statement"
      },
      {
        "id": 181,
        "label": "predicate"
      },
      {
        "id": 182,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 183,
        "label": "True body"
      },
      {
        "id": 184,
        "label": "cprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 185,
        "label": "ctx . accounts . trail . paths = ctx . accounts . trail . paths . saturating_add (2) ;"
      },
      {
        "id": 186,
        "label": "False body"
      },
      {
        "id": 187,
        "label": "No-op"
      },
      {
        "id": 188,
        "label": "merge"
      },
      {
        "id": 189,
        "label": "let dyn_ix = Instruction { program_id : * cprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stage_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : tip . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 190,
        "label": "invoke (& dyn_ix , & [cprog , ctx . accounts . stage_board . to_account_info () , ctx . accounts . rider . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 191,
        "label": "transfer_tokens (& ctx . accounts . token_program , & ctx . accounts . bank , & ctx . accounts . rider_token , & ctx . accounts . bank_authority , tip ,)"
      }
    ],
    "edges": [
      {
        "from": 160,
        "to": 161,
        "label": "next"
      },
      {
        "from": 161,
        "to": 162,
        "label": "predicate"
      },
      {
        "from": 162,
        "to": 163,
        "label": "next"
      },
      {
        "from": 161,
        "to": 164,
        "label": "true"
      },
      {
        "from": 164,
        "to": 165,
        "label": "next"
      },
      {
        "from": 161,
        "to": 166,
        "label": "false"
      },
      {
        "from": 166,
        "to": 167,
        "label": "next"
      },
      {
        "from": 165,
        "to": 168,
        "label": "next"
      },
      {
        "from": 167,
        "to": 168,
        "label": "next"
      },
      {
        "from": 168,
        "to": 169,
        "label": "next"
      },
      {
        "from": 169,
        "to": 170,
        "label": "predicate"
      },
      {
        "from": 170,
        "to": 171,
        "label": "next"
      },
      {
        "from": 169,
        "to": 172,
        "label": "true"
      },
      {
        "from": 172,
        "to": 173,
        "label": "next"
      },
      {
        "from": 169,
        "to": 174,
        "label": "false"
      },
      {
        "from": 174,
        "to": 175,
        "label": "next"
      },
      {
        "from": 173,
        "to": 176,
        "label": "next"
      },
      {
        "from": 175,
        "to": 176,
        "label": "next"
      },
      {
        "from": 176,
        "to": 177,
        "label": "next"
      },
      {
        "from": 177,
        "to": 178,
        "label": "next"
      },
      {
        "from": 178,
        "to": 179,
        "label": "next"
      },
      {
        "from": 179,
        "to": 180,
        "label": "next"
      },
      {
        "from": 180,
        "to": 181,
        "label": "predicate"
      },
      {
        "from": 181,
        "to": 182,
        "label": "next"
      },
      {
        "from": 180,
        "to": 183,
        "label": "true"
      },
      {
        "from": 183,
        "to": 184,
        "label": "next"
      },
      {
        "from": 184,
        "to": 185,
        "label": "next"
      },
      {
        "from": 180,
        "to": 186,
        "label": "false"
      },
      {
        "from": 186,
        "to": 187,
        "label": "next"
      },
      {
        "from": 185,
        "to": 188,
        "label": "next"
      },
      {
        "from": 187,
        "to": 188,
        "label": "next"
      },
      {
        "from": 188,
        "to": 189,
        "label": "next"
      },
      {
        "from": 189,
        "to": 190,
        "label": "next"
      },
      {
        "from": 190,
        "to": 191,
        "label": "call"
      }
    ]
  }
]