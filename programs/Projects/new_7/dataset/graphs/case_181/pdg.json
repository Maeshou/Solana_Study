[
  {
    "name": "transfer_tokens",
    "inputs": [
      "program: & Program < Token >",
      "from: & Account < TokenAccount >",
      "to: & Account < TokenAccount >",
      "auth: & AccountInfo",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "token :: transfer (CpiContext :: new (program . to_account_info () , Transfer { from : from . to_account_info () , to : to . to_account_info () , authority : auth . clone () , } ,) , amount ,)"
      }
    ],
    "edges": []
  },
  {
    "name": "reward_mix",
    "inputs": [
      "ctx: Context < RewardMix >",
      "stage: u64",
      "payout: u64"
    ],
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . fixed_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 6,
        "label": "invoke (& fixed_ix , & [ctx . accounts . fixed_hint . to_account_info () , ctx . accounts . fixed_slot . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 7,
        "label": "let mut prog_ai = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 8,
        "label": "if ! ctx . remaining_accounts . is_empty () { prog_ai = ctx . remaining_accounts [0] . clone () ; ctx . accounts . note . routes = ctx . accounts . note . routes . saturating_add (1) ; }"
      },
      {
        "id": 9,
        "label": "prog_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "ctx . accounts . note . routes = ctx . accounts . note . routes . saturating_add (1) ;"
      },
      {
        "id": 11,
        "label": "let mut tag = stage . rotate_left (7) ;"
      },
      {
        "id": 12,
        "label": "if tag < 10 { tag = tag . wrapping_add (10) ; }"
      },
      {
        "id": 13,
        "label": "tag = tag . wrapping_add (10) ;"
      },
      {
        "id": 14,
        "label": "let mut dyn_data = stage . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 15,
        "label": "dyn_data . extend_from_slice (& tag . to_le_bytes ()) ;"
      },
      {
        "id": 16,
        "label": "let dyn_ix = Instruction { program_id : * prog_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . report_pad . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] , data : dyn_data , } ;"
      },
      {
        "id": 17,
        "label": "invoke (& dyn_ix , & [prog_ai , ctx . accounts . report_pad . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 18,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ,) , payout ,) ? ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: fixed_ix"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: prog_ai"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: tag"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: tag"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: tag"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: tag"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: tag"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: tag"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: dyn_data"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: dyn_data"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: tag"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: dyn_ix"
      },
      {
        "from": 7,
        "to": 16,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: dyn_data"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 7,
        "to": 17,
        "label": "data_dep: prog_ai"
      }
    ]
  },
  {
    "name": "craft_mix",
    "inputs": [
      "ctx: Context < CraftMix >",
      "seed: u64",
      "reward: u64"
    ],
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "if seed > 100 { ctx . accounts . state . rolls = ctx . accounts . state . rolls . saturating_add (1) ; }"
      },
      {
        "id": 22,
        "label": "ctx . accounts . state . rolls = ctx . accounts . state . rolls . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "if seed % 2 != 0 { ctx . accounts . state . odd = ctx . accounts . state . odd . wrapping_add (1) ; }"
      },
      {
        "id": 24,
        "label": "ctx . accounts . state . odd = ctx . accounts . state . odd . wrapping_add (1) ;"
      },
      {
        "id": 25,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . counter_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 26,
        "label": "invoke (& fixed_ix , & [ctx . accounts . counter_hint . to_account_info () , ctx . accounts . counter_cell . to_account_info () , ctx . accounts . crafter . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 27,
        "label": "let mut p = ctx . accounts . feed_hint . to_account_info () ;"
      },
      {
        "id": 28,
        "label": "if ! ctx . remaining_accounts . is_empty () { p = ctx . remaining_accounts [0] . clone () ; ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (2) ; }"
      },
      {
        "id": 29,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 30,
        "label": "ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (2) ;"
      },
      {
        "id": 31,
        "label": "let dyn_ix = Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . feed_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . crafter . key () , false) ,] , data : reward . rotate_left (5) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 32,
        "label": "invoke (& dyn_ix , & [p , ctx . accounts . feed_board . to_account_info () , ctx . accounts . crafter . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 33,
        "label": "ctx . accounts . pay_with_tokens (reward)"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 25,
        "label": "def: fixed_ix"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: p"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: dyn_ix"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: p"
      },
      {
        "from": 31,
        "to": 32,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 27,
        "to": 32,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "patrol_mix",
    "inputs": [
      "ctx: Context < PatrolMix >",
      "turn: u64",
      "credit: u64"
    ],
    "nodes": [
      {
        "id": 34,
        "label": "Entry"
      },
      {
        "id": 35,
        "label": "if turn % 3 != 0 { ctx . accounts . snap . missed = ctx . accounts . snap . missed . saturating_add (1) ; }"
      },
      {
        "id": 36,
        "label": "ctx . accounts . snap . missed = ctx . accounts . snap . missed . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "if turn > 50 { ctx . accounts . snap . heavy = ctx . accounts . snap . heavy . wrapping_add (1) ; }"
      },
      {
        "id": 38,
        "label": "ctx . accounts . snap . heavy = ctx . accounts . snap . heavy . wrapping_add (1) ;"
      },
      {
        "id": 39,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . sync_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . agent . key () , false) ,] , data : turn . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 40,
        "label": "invoke (& fixed_ix , & [ctx . accounts . sync_hint . to_account_info () , ctx . accounts . sync_slot . to_account_info () , ctx . accounts . agent . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 41,
        "label": "let mut rprog = ctx . accounts . router_hint . to_account_info () ;"
      },
      {
        "id": 42,
        "label": "if ! ctx . remaining_accounts . is_empty () { rprog = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 43,
        "label": "rprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 44,
        "label": "let dyn_ix = Instruction { program_id : * rprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . router_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . agent . key () , false) ,] , data : credit . wrapping_mul (7) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 45,
        "label": "invoke (& dyn_ix , & [rprog , ctx . accounts . router_board . to_account_info () , ctx . accounts . agent . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 46,
        "label": "transfer_tokens (& ctx . accounts . token_program , & ctx . accounts . reserve , & ctx . accounts . agent_token , & ctx . accounts . reserve_authority , credit ,)"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 39,
        "label": "def: fixed_ix"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: rprog"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: rprog"
      },
      {
        "from": 41,
        "to": 43,
        "label": "data_dep: rprog"
      },
      {
        "from": 44,
        "to": 44,
        "label": "def: dyn_ix"
      },
      {
        "from": 41,
        "to": 44,
        "label": "data_dep: rprog"
      },
      {
        "from": 44,
        "to": 45,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 41,
        "to": 45,
        "label": "data_dep: rprog"
      }
    ]
  },
  {
    "name": "grade_mix",
    "inputs": [
      "ctx: Context < GradeMix >",
      "score: u64",
      "gift: u64"
    ],
    "nodes": [
      {
        "id": 47,
        "label": "Entry"
      },
      {
        "id": 48,
        "label": "if score > 90 { ctx . accounts . journal . gold = ctx . accounts . journal . gold . saturating_add (1) ; }"
      },
      {
        "id": 49,
        "label": "ctx . accounts . journal . gold = ctx . accounts . journal . gold . saturating_add (1) ;"
      },
      {
        "id": 50,
        "label": "if score < 60 { ctx . accounts . journal . red = ctx . accounts . journal . red . wrapping_add (1) ; }"
      },
      {
        "id": 51,
        "label": "ctx . accounts . journal . red = ctx . accounts . journal . red . wrapping_add (1) ;"
      },
      {
        "id": 52,
        "label": "let mut data = score . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 53,
        "label": "let mix = score . rotate_right (9) ;"
      },
      {
        "id": 54,
        "label": "data . extend_from_slice (& mix . to_le_bytes ()) ;"
      },
      {
        "id": 55,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . gauge_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data , } ;"
      },
      {
        "id": 56,
        "label": "invoke (& fixed_ix , & [ctx . accounts . gauge_hint . to_account_info () , ctx . accounts . gauge_cell . to_account_info () , ctx . accounts . student . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 57,
        "label": "let mut sprog = ctx . accounts . signal_hint . to_account_info () ;"
      },
      {
        "id": 58,
        "label": "if ! ctx . remaining_accounts . is_empty () { sprog = ctx . remaining_accounts [0] . clone () ; ctx . accounts . journal . paths = ctx . accounts . journal . paths . saturating_add (3) ; }"
      },
      {
        "id": 59,
        "label": "sprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 60,
        "label": "ctx . accounts . journal . paths = ctx . accounts . journal . paths . saturating_add (3) ;"
      },
      {
        "id": 61,
        "label": "let dyn_ix = Instruction { program_id : * sprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . student . key () , false) ,] , data : gift . wrapping_add (111) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 62,
        "label": "invoke (& dyn_ix , & [sprog , ctx . accounts . signal_board . to_account_info () , ctx . accounts . student . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 63,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . reward_pool . to_account_info () , to : ctx . accounts . student_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ,) , gift ,) ? ;"
      },
      {
        "id": 64,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 52,
        "to": 52,
        "label": "def: data"
      },
      {
        "from": 53,
        "to": 53,
        "label": "def: mix"
      },
      {
        "from": 52,
        "to": 54,
        "label": "data_dep: data"
      },
      {
        "from": 53,
        "to": 54,
        "label": "data_dep: mix"
      },
      {
        "from": 55,
        "to": 55,
        "label": "def: fixed_ix"
      },
      {
        "from": 52,
        "to": 55,
        "label": "data_dep: data"
      },
      {
        "from": 55,
        "to": 56,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 57,
        "to": 57,
        "label": "def: sprog"
      },
      {
        "from": 57,
        "to": 58,
        "label": "data_dep: sprog"
      },
      {
        "from": 57,
        "to": 59,
        "label": "data_dep: sprog"
      },
      {
        "from": 61,
        "to": 61,
        "label": "def: dyn_ix"
      },
      {
        "from": 57,
        "to": 61,
        "label": "data_dep: sprog"
      },
      {
        "from": 61,
        "to": 62,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 57,
        "to": 62,
        "label": "data_dep: sprog"
      }
    ]
  },
  {
    "name": "hatch_mix",
    "inputs": [
      "ctx: Context < HatchMix >",
      "seed: u64",
      "grant: u64"
    ],
    "nodes": [
      {
        "id": 65,
        "label": "Entry"
      },
      {
        "id": 66,
        "label": "if seed % 5 != 0 { ctx . accounts . inc . note = ctx . accounts . inc . note . saturating_add (1) ; }"
      },
      {
        "id": 67,
        "label": "ctx . accounts . inc . note = ctx . accounts . inc . note . saturating_add (1) ;"
      },
      {
        "id": 68,
        "label": "if seed > 999 { ctx . accounts . inc . large = ctx . accounts . inc . large . wrapping_add (1) ; }"
      },
      {
        "id": 69,
        "label": "ctx . accounts . inc . large = ctx . accounts . inc . large . wrapping_add (1) ;"
      },
      {
        "id": 70,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . hatch_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 71,
        "label": "invoke (& fixed_ix , & [ctx . accounts . hatch_hint . to_account_info () , ctx . accounts . hatch_cell . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 72,
        "label": "let mut nprog = ctx . accounts . notice_hint . to_account_info () ;"
      },
      {
        "id": 73,
        "label": "if ! ctx . remaining_accounts . is_empty () { nprog = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 74,
        "label": "nprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 75,
        "label": "let dyn_ix = Instruction { program_id : * nprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : grant . rotate_left (11) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 76,
        "label": "invoke (& dyn_ix , & [nprog , ctx . accounts . notice_board . to_account_info () , ctx . accounts . owner . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 77,
        "label": "ctx . accounts . pay_owner (grant)"
      }
    ],
    "edges": [
      {
        "from": 70,
        "to": 70,
        "label": "def: fixed_ix"
      },
      {
        "from": 70,
        "to": 71,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 72,
        "to": 72,
        "label": "def: nprog"
      },
      {
        "from": 72,
        "to": 73,
        "label": "data_dep: nprog"
      },
      {
        "from": 72,
        "to": 74,
        "label": "data_dep: nprog"
      },
      {
        "from": 75,
        "to": 75,
        "label": "def: dyn_ix"
      },
      {
        "from": 72,
        "to": 75,
        "label": "data_dep: nprog"
      },
      {
        "from": 75,
        "to": 76,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 72,
        "to": 76,
        "label": "data_dep: nprog"
      }
    ]
  },
  {
    "name": "rail_mix",
    "inputs": [
      "ctx: Context < RailMix >",
      "steps: u64",
      "tip: u64"
    ],
    "nodes": [
      {
        "id": 78,
        "label": "Entry"
      },
      {
        "id": 79,
        "label": "if steps > 0 { ctx . accounts . trail . progress = ctx . accounts . trail . progress . saturating_add (steps) ; }"
      },
      {
        "id": 80,
        "label": "ctx . accounts . trail . progress = ctx . accounts . trail . progress . saturating_add (steps) ;"
      },
      {
        "id": 81,
        "label": "if steps % 4 != 0 { ctx . accounts . trail . irregular = ctx . accounts . trail . irregular . wrapping_add (1) ; }"
      },
      {
        "id": 82,
        "label": "ctx . accounts . trail . irregular = ctx . accounts . trail . irregular . wrapping_add (1) ;"
      },
      {
        "id": 83,
        "label": "let fixed_ix = Instruction { program_id : FIXED_COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . step_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : steps . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 84,
        "label": "invoke (& fixed_ix , & [ctx . accounts . step_hint . to_account_info () , ctx . accounts . step_slot . to_account_info () , ctx . accounts . rider . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 85,
        "label": "let mut cprog = ctx . accounts . cast_hint . to_account_info () ;"
      },
      {
        "id": 86,
        "label": "if ! ctx . remaining_accounts . is_empty () { cprog = ctx . remaining_accounts [0] . clone () ; ctx . accounts . trail . paths = ctx . accounts . trail . paths . saturating_add (2) ; }"
      },
      {
        "id": 87,
        "label": "cprog = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 88,
        "label": "ctx . accounts . trail . paths = ctx . accounts . trail . paths . saturating_add (2) ;"
      },
      {
        "id": 89,
        "label": "let dyn_ix = Instruction { program_id : * cprog . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . stage_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . rider . key () , false) ,] , data : tip . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 90,
        "label": "invoke (& dyn_ix , & [cprog , ctx . accounts . stage_board . to_account_info () , ctx . accounts . rider . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 91,
        "label": "transfer_tokens (& ctx . accounts . token_program , & ctx . accounts . bank , & ctx . accounts . rider_token , & ctx . accounts . bank_authority , tip ,)"
      }
    ],
    "edges": [
      {
        "from": 83,
        "to": 83,
        "label": "def: fixed_ix"
      },
      {
        "from": 83,
        "to": 84,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 85,
        "to": 85,
        "label": "def: cprog"
      },
      {
        "from": 85,
        "to": 86,
        "label": "data_dep: cprog"
      },
      {
        "from": 85,
        "to": 87,
        "label": "data_dep: cprog"
      },
      {
        "from": 89,
        "to": 89,
        "label": "def: dyn_ix"
      },
      {
        "from": 85,
        "to": 89,
        "label": "data_dep: cprog"
      },
      {
        "from": 89,
        "to": 90,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 85,
        "to": 90,
        "label": "data_dep: cprog"
      }
    ]
  }
]