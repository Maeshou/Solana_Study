[
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < Execute >",
      "step: u64",
      "bonus: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let payload : Vec < u8 > = [step , step . rotate_left (7)] . into_iter () . flat_map (| x | x . to_le_bytes ()) . collect () ;"
      },
      {
        "id": 2,
        "label": "invoke (& Instruction { program_id : FIXED_BLEND_ID , accounts : [AccountMeta :: new (ctx . accounts . counter . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] . into () , data : payload . clone () , } , & [ctx . accounts . fixed_hint . to_account_info () , ctx . accounts . counter . to_account_info () , ctx . accounts . user . to_account_info ()]) ? ;"
      },
      {
        "id": 3,
        "label": "let mut prog_ai = ctx . accounts . emit_hint . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ! ctx . remaining_accounts . is_empty () { prog_ai = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 5,
        "label": "prog_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 6,
        "label": "invoke (& Instruction { program_id : * prog_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . outbox . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : bonus . to_le_bytes () . to_vec () , } , & [prog_ai , ctx . accounts . outbox . to_account_info () , ctx . accounts . user . to_account_info ()]) ? ;"
      },
      {
        "id": 7,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . pool . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () }) , bonus) ? ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: prog_ai"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: prog_ai"
      }
    ]
  }
]