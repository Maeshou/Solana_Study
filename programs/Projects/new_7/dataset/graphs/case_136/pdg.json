[
  {
    "name": "exchange",
    "inputs": [
      "ctx: Context < Exchange >",
      "count: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let k = & mut ctx . accounts . kiosk ;"
      },
      {
        "id": 2,
        "label": "let mut pg = ctx . accounts . exchange_prog . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "if count > 7 { k . queue += 2 ; }"
      },
      {
        "id": 4,
        "label": "k . queue += 2 ;"
      },
      {
        "id": 5,
        "label": "if ctx . remaining_accounts . len () > 1 { pg = ctx . remaining_accounts [1] . clone () ; k . sides ^= count ; }"
      },
      {
        "id": 6,
        "label": "pg = ctx . remaining_accounts [1] . clone () ;"
      },
      {
        "id": 7,
        "label": "k . sides ^= count ;"
      },
      {
        "id": 8,
        "label": "for _ in 0 .. (count % 4) { k . batch = k . batch . wrapping_add (1) ; }"
      },
      {
        "id": 9,
        "label": "k . batch = k . batch . wrapping_add (1) ;"
      },
      {
        "id": 10,
        "label": "let br = RelicBridge { store : ctx . accounts . store . to_account_info () , user : ctx . accounts . user . to_account_info () } ;"
      },
      {
        "id": 11,
        "label": "let cx = br . as_cpi (pg . clone ()) ;"
      },
      {
        "id": 12,
        "label": "br . route (cx , count . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: k"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: pg"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: k"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: k"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: pg"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: k"
      },
      {
        "from": 2,
        "to": 6,
        "label": "data_dep: pg"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: k"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: k"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: k"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: k"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: k"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: br"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: cx"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: br"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: pg"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: br"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: cx"
      }
    ]
  }
]