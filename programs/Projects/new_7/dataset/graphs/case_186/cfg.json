[
  {
    "name": "mint_bonus",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "token :: transfer (CpiContext :: new (tp . to_account_info () , Transfer { from : chest . to_account_info () , to : owner . to_account_info () , authority : auth . clone () }) , v)"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "call"
      }
    ]
  },
  {
    "name": "hatch",
    "nodes": [
      {
        "id": 2,
        "label": "Entry"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "seed > 500"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "ctx . accounts . note . count = ctx . accounts . note . count . saturating_add (1) ;"
      },
      {
        "id": 8,
        "label": "False body"
      },
      {
        "id": 9,
        "label": "No-op"
      },
      {
        "id": 10,
        "label": "merge"
      },
      {
        "id": 11,
        "label": "let ix_fixed = Instruction { program_id : FIXED_BOOK_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . hatch_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : seed . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 12,
        "label": "invoke (& ix_fixed , & [ctx . accounts . hatch_hint . to_account_info () , ctx . accounts . hatch_cell . to_account_info () , ctx . accounts . owner . to_account_info () ,]) ? ;"
      },
      {
        "id": 13,
        "label": "let mut nprg = ctx . accounts . notice_hint . to_account_info () ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "nprg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "let ix_dyn = Instruction { program_id : * nprg . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . owner . key () , false) ,] , data : grant . rotate_right (7) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 23,
        "label": "invoke (& ix_dyn , & [nprg , ctx . accounts . notice_board . to_account_info () , ctx . accounts . owner . to_account_info () ,]) ? ;"
      },
      {
        "id": 24,
        "label": "mint_bonus (& ctx . accounts . token_program , & ctx . accounts . chest , & ctx . accounts . owner_token , & ctx . accounts . chest_authority , grant)"
      }
    ],
    "edges": [
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 3,
        "to": 8,
        "label": "false"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "call"
      }
    ]
  }
]