[
  {
    "name": "distribute_energy",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . energy_state ;"
      },
      {
        "id": 2,
        "label": "let mut energy_left = total_energy ;"
      },
      {
        "id": 3,
        "label": "let chosen_program ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "chosen_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "state . direct_calls += 1 ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "chosen_program = ctx . accounts . alt_program . to_account_info () ;"
      },
      {
        "id": 12,
        "label": "state . fallback_calls += 1 ;"
      },
      {
        "id": 13,
        "label": "state . last_energy = total_energy ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "total_energy > 50"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "state . high_energy_events += 1 ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "state . logbook . push (total_energy as u32) ;"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "let portal = EnergyPortal { source : ctx . accounts . source . clone () , reserve : ctx . accounts . reserve . clone () } ;"
      },
      {
        "id": 25,
        "label": "Loop Start"
      },
      {
        "id": 26,
        "label": "let piece = if energy_left > state . chunk_size { state . chunk_size } else { energy_left } ;"
      },
      {
        "id": 27,
        "label": "let cx = portal . as_cpi (chosen_program . clone ()) ;"
      },
      {
        "id": 28,
        "label": "portal . transfer (cx , piece) ? ;"
      },
      {
        "id": 29,
        "label": "energy_left -= piece ;"
      },
      {
        "id": 30,
        "label": "state . transferred += piece ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 9,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      }
    ]
  }
]