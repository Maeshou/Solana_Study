[
  {
    "name": "run",
    "inputs": [
      "mut ctx: Context < Run >",
      "n: u64",
      "gift: u64"
    ],
    "nodes": [
      {
        "id": 3,
        "label": "Entry"
      },
      {
        "id": 4,
        "label": "ctx . accounts . ring_push (n) ;"
      },
      {
        "id": 5,
        "label": "let mut s = 0u64 ;"
      },
      {
        "id": 6,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 7,
        "label": "while i < 8 { s = s . wrapping_add (ctx . accounts . sheet . buf [i]) ; i += 1 ; }"
      },
      {
        "id": 8,
        "label": "s = s . wrapping_add (ctx . accounts . sheet . buf [i]) ;"
      },
      {
        "id": 9,
        "label": "i += 1 ;"
      },
      {
        "id": 10,
        "label": "if s > 0 { ctx . accounts . sheet . acc = ctx . accounts . sheet . acc . saturating_add (s) ; }"
      },
      {
        "id": 11,
        "label": "ctx . accounts . sheet . acc = ctx . accounts . sheet . acc . saturating_add (s) ;"
      },
      {
        "id": 12,
        "label": "let mut pack = Vec :: with_capacity (16) ;"
      },
      {
        "id": 13,
        "label": "pack . extend_from_slice (& ctx . accounts . sheet . buf [0] . to_le_bytes ()) ;"
      },
      {
        "id": 14,
        "label": "pack . extend_from_slice (& ctx . accounts . sheet . buf [1] . to_le_bytes ()) ;"
      },
      {
        "id": 15,
        "label": "invoke (& Instruction { program_id : FIXED_NOTE_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . note_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : pack } , & [ctx . accounts . note_hint . to_account_info () , ctx . accounts . note_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 16,
        "label": "let mut host = ctx . accounts . notice_hint . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "if ! ctx . remaining_accounts . is_empty () { host = ctx . remaining_accounts [0] . clone () ; ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (2) ; }"
      },
      {
        "id": 18,
        "label": "host = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 19,
        "label": "ctx . accounts . sheet . paths = ctx . accounts . sheet . paths . saturating_add (2) ;"
      },
      {
        "id": 20,
        "label": "let msg = gift . rotate_right ((ctx . accounts . sheet . head & 31) as u32) . to_le_bytes () . to_vec () ;"
      },
      {
        "id": 21,
        "label": "invoke (& Instruction { program_id : * host . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : msg } , & [host , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 22,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . vault . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_auth . to_account_info () , }) , gift ,) ? ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: s"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: i"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: i"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: i"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: i"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: pack"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: pack"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: pack"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: pack"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: host"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: host"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: host"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: msg"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: host"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: msg"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: host"
      }
    ]
  }
]