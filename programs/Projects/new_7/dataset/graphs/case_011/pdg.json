[
  {
    "name": "make",
    "inputs": [
      "ctx: Context < Make >",
      "min: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 2,
        "label": "e . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "e . min = min ;"
      },
      {
        "id": 4,
        "label": "e . locked = 0 ;"
      },
      {
        "id": 5,
        "label": "e . released = 0 ;"
      },
      {
        "id": 6,
        "label": "e . score = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: e"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: e"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: e"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: e"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: e"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: e"
      }
    ]
  },
  {
    "name": "pass_and_release",
    "inputs": [
      "ctx: Context < PassAndRelease >",
      "score: u32",
      "comment: String"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let e = & mut ctx . accounts . escrow ;"
      },
      {
        "id": 10,
        "label": "require ! (e . operator == ctx . accounts . operator . key () , Errs :: Op) ;"
      },
      {
        "id": 11,
        "label": "if score > 50 { let mut i = 0 ; while i < score { if e . locked > 0 { e . locked = e . locked . saturating_sub (1) ; } i = i . saturating_add (10) ; } e . score = e . score . saturating_add (score) ; } else { let mut j = 0 ; while j < 3 { e . locked = e . locked . saturating_add (1) ; j = j . saturating_add (1) ; } if comment . len () > 0 { e . score = e . score . saturating_add (comment . len () as u32) ; } }"
      },
      {
        "id": 12,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 13,
        "label": "while i < score { if e . locked > 0 { e . locked = e . locked . saturating_sub (1) ; } i = i . saturating_add (10) ; }"
      },
      {
        "id": 14,
        "label": "if e . locked > 0 { e . locked = e . locked . saturating_sub (1) ; }"
      },
      {
        "id": 15,
        "label": "e . locked = e . locked . saturating_sub (1) ;"
      },
      {
        "id": 16,
        "label": "i = i . saturating_add (10) ;"
      },
      {
        "id": 17,
        "label": "e . score = e . score . saturating_add (score) ;"
      },
      {
        "id": 18,
        "label": "let mut j = 0 ;"
      },
      {
        "id": 19,
        "label": "while j < 3 { e . locked = e . locked . saturating_add (1) ; j = j . saturating_add (1) ; }"
      },
      {
        "id": 20,
        "label": "e . locked = e . locked . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "j = j . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "if comment . len () > 0 { e . score = e . score . saturating_add (comment . len () as u32) ; }"
      },
      {
        "id": 23,
        "label": "e . score = e . score . saturating_add (comment . len () as u32) ;"
      },
      {
        "id": 24,
        "label": "let mut amt = e . min . saturating_add ((e . score as u64) / 2) ;"
      },
      {
        "id": 25,
        "label": "if amt > e . locked { amt = e . locked ; }"
      },
      {
        "id": 26,
        "label": "amt = e . locked ;"
      },
      {
        "id": 27,
        "label": "e . released = e . released . saturating_add (amt) ;"
      },
      {
        "id": 28,
        "label": "if e . locked >= amt { e . locked = e . locked - amt ; }"
      },
      {
        "id": 29,
        "label": "e . locked = e . locked - amt ;"
      },
      {
        "id": 30,
        "label": "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . vault . key () , ctx . accounts . player_ata . key () , ctx . accounts . operator . key () , & [] , amt ,) ? ;"
      },
      {
        "id": 31,
        "label": "invoke (& ix , & [ctx . accounts . vault . to_account_info () , ctx . accounts . player_ata . to_account_info () , ctx . accounts . operator . to_account_info () ,]) ? ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: i"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: e"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: j"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: e"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: j"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: e"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: j"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: amt"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 26,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 27,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 27,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 27,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 28,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 28,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 28,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 28,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 28,
        "label": "data_dep: amt"
      },
      {
        "from": 9,
        "to": 29,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 29,
        "label": "data_dep: e"
      },
      {
        "from": 24,
        "to": 29,
        "label": "data_dep: amt"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: ix"
      },
      {
        "from": 24,
        "to": 30,
        "label": "data_dep: amt"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: ix"
      }
    ]
  }
]