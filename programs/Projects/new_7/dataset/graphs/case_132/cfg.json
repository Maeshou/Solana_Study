[
  {
    "name": "refill",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "s . energy += amount ;"
      },
      {
        "id": 3,
        "label": "let mut prog = ctx . accounts . refill_program . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "s . energy % 2 == 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "s . tick += 1 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "ctx . remaining_accounts . len () > 1"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "prog = ctx . remaining_accounts [1] . clone () ;"
      },
      {
        "id": 17,
        "label": "s . switch_count += 1 ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "let br = RefillBridge { pool : ctx . accounts . energy_pool . to_account_info () , user : ctx . accounts . user_wallet . to_account_info () , } ;"
      },
      {
        "id": 22,
        "label": "let cx = br . as_cpi (prog . clone ()) ;"
      },
      {
        "id": 23,
        "label": "br . forward (cx , amount . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "s . energy > s . cap"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "s . energy = s . cap ;"
      },
      {
        "id": 29,
        "label": "let cx2 = br . as_cpi (prog . clone ()) ;"
      },
      {
        "id": 30,
        "label": "br . forward (cx2 , (1u64) . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 12,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 24,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]