[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "bar: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let loyalty_state = & mut ctx . accounts . loyalty_state ;"
      },
      {
        "id": 2,
        "label": "loyalty_state . admin_authority = ctx . accounts . admin_authority . key () ;"
      },
      {
        "id": 3,
        "label": "loyalty_state . threshold_bar = bar ;"
      },
      {
        "id": 4,
        "label": "loyalty_state . count_steps = 12 ;"
      },
      {
        "id": 5,
        "label": "loyalty_state . hash_accumulator = bar . rotate_left (2) ;"
      },
      {
        "id": 6,
        "label": "loyalty_state . alt_program_id = Pubkey :: new_from_array ([4u8 ; 32]) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: loyalty_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: loyalty_state"
      }
    ]
  },
  {
    "name": "bind",
    "inputs": [
      "ctx: Context < Bind >",
      "id: Pubkey"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let loyalty_state = & mut ctx . accounts . loyalty_state ;"
      },
      {
        "id": 10,
        "label": "require_keys_eq ! (loyalty_state . admin_authority , ctx . accounts . admin_authority . key () , ErrorCode :: Denied) ;"
      },
      {
        "id": 11,
        "label": "loyalty_state . alt_program_id = id ;"
      },
      {
        "id": 12,
        "label": "loyalty_state . count_steps = loyalty_state . count_steps . wrapping_add (2) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: loyalty_state"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: loyalty_state"
      }
    ]
  },
  {
    "name": "process",
    "inputs": [
      "ctx: Context < Process >",
      "n: u64",
      "r: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let loyalty_state = & mut ctx . accounts . loyalty_state ;"
      },
      {
        "id": 16,
        "label": "if n < 3 { loyalty_state . hash_accumulator = loyalty_state . hash_accumulator ^ 0xFA ; loyalty_state . count_steps = loyalty_state . count_steps . saturating_add (1) ; return Ok (()) ; }"
      },
      {
        "id": 17,
        "label": "loyalty_state . hash_accumulator = loyalty_state . hash_accumulator ^ 0xFA ;"
      },
      {
        "id": 18,
        "label": "loyalty_state . count_steps = loyalty_state . count_steps . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "let mut remaining_units = n ;"
      },
      {
        "id": 21,
        "label": "let mut round_index : u8 = 0 ;"
      },
      {
        "id": 22,
        "label": "while round_index < r { let transfer_part = (remaining_units / 3) . max (2) ; if transfer_part >= remaining_units { break ; } let transfer_ix = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; remaining_units = remaining_units . saturating_sub (transfer_part) ; loyalty_state . count_steps = loyalty_state . count_steps . saturating_add (1) ; loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (transfer_part) . rotate_right (2) ; round_index = round_index . saturating_add (1) ; if loyalty_state . count_steps % 3 == 1 { loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (15) ; } else { loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_sub (6) . wrapping_add (2) ; } }"
      },
      {
        "id": 23,
        "label": "let transfer_part = (remaining_units / 3) . max (2) ;"
      },
      {
        "id": 24,
        "label": "if transfer_part >= remaining_units { break ; }"
      },
      {
        "id": 25,
        "label": "break ;"
      },
      {
        "id": 26,
        "label": "let transfer_ix = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , transfer_part ,) ? ;"
      },
      {
        "id": 27,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 28,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 29,
        "label": "remaining_units = remaining_units . saturating_sub (transfer_part) ;"
      },
      {
        "id": 30,
        "label": "loyalty_state . count_steps = loyalty_state . count_steps . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (transfer_part) . rotate_right (2) ;"
      },
      {
        "id": 32,
        "label": "round_index = round_index . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "if loyalty_state . count_steps % 3 == 1 { loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (15) ; } else { loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_sub (6) . wrapping_add (2) ; }"
      },
      {
        "id": 34,
        "label": "loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (15) ;"
      },
      {
        "id": 35,
        "label": "loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_sub (6) . wrapping_add (2) ;"
      },
      {
        "id": 36,
        "label": "if remaining_units > 2 { let half = remaining_units / 2 ; let ix_first = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , half ,) ? ; let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ; invoke (& ix_first , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; let ix_second = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_units - half ,) ? ; invoke (& ix_second , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ; loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (remaining_units) ; }"
      },
      {
        "id": 37,
        "label": "let half = remaining_units / 2 ;"
      },
      {
        "id": 38,
        "label": "let ix_first = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , half ,) ? ;"
      },
      {
        "id": 39,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (ErrorCode :: NoProgram) ? ;"
      },
      {
        "id": 40,
        "label": "invoke (& ix_first , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 41,
        "label": "let ix_second = token_ix :: transfer (& loyalty_state . alt_program_id , & ctx . accounts . vault . key () , & ctx . accounts . user_wallet . key () , & ctx . accounts . admin_authority . key () , & [] , remaining_units - half ,) ? ;"
      },
      {
        "id": 42,
        "label": "invoke (& ix_second , & [external_program_ai . clone () , ctx . accounts . vault . to_account_info () , ctx . accounts . user_wallet . to_account_info () , ctx . accounts . admin_authority . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 43,
        "label": "loyalty_state . hash_accumulator = loyalty_state . hash_accumulator . wrapping_add (remaining_units) ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: loyalty_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: remaining_units"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: transfer_part"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: transfer_ix"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: external_program_ai"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: transfer_ix"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 23,
        "to": 31,
        "label": "data_dep: transfer_part"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 27,
        "to": 36,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 36,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 36,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 37,
        "to": 37,
        "label": "def: half"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: ix_first"
      },
      {
        "from": 15,
        "to": 38,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 37,
        "to": 38,
        "label": "data_dep: half"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: external_program_ai"
      },
      {
        "from": 38,
        "to": 40,
        "label": "data_dep: ix_first"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 41,
        "to": 41,
        "label": "def: ix_second"
      },
      {
        "from": 15,
        "to": 41,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 41,
        "label": "data_dep: remaining_units"
      },
      {
        "from": 37,
        "to": 41,
        "label": "data_dep: half"
      },
      {
        "from": 41,
        "to": 42,
        "label": "data_dep: ix_second"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: external_program_ai"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 15,
        "to": 43,
        "label": "data_dep: loyalty_state"
      },
      {
        "from": 20,
        "to": 43,
        "label": "data_dep: remaining_units"
      }
    ]
  }
]