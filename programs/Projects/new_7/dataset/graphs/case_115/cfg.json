[
  {
    "name": "drive",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . bus ;"
      },
      {
        "id": 2,
        "label": "s . turn += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . route_prog . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "s . path_a += load ;"
      },
      {
        "id": 9,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "s . path_b += load ;"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let offset = (s . turn & 3) as u64 + 1 ;"
      },
      {
        "id": 14,
        "label": "let br = BusBridge { head : ctx . accounts . head_buf . to_account_info () , tail : ctx . accounts . tail_buf . to_account_info () } ;"
      },
      {
        "id": 15,
        "label": "let mut sent = 0u64 ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "let send = if load - sent > offset { offset } else { load - sent } ;"
      },
      {
        "id": 18,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "(s . turn & 1) > 0"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "br . push_ht (cx , send + s . turn) ? ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "br . push_th (cx , send + s . turn) ? ;"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "sent += send ;"
      },
      {
        "id": 28,
        "label": "Loop End"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 16,
        "to": 28,
        "label": "while"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]