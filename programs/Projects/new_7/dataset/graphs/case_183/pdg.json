[
  {
    "name": "run",
    "inputs": [
      "ctx: Context < DoForge >",
      "spark: u64",
      "bounty: u64"
    ],
    "nodes": [
      {
        "id": 1,
        "label": "Entry"
      },
      {
        "id": 2,
        "label": "if spark % 2 != 0 { ctx . accounts . state . odd = ctx . accounts . state . odd . saturating_add (1) ; }"
      },
      {
        "id": 3,
        "label": "ctx . accounts . state . odd = ctx . accounts . state . odd . saturating_add (1) ;"
      },
      {
        "id": 4,
        "label": "if spark > 1000 { ctx . accounts . state . big = ctx . accounts . state . big . wrapping_add (1) ; }"
      },
      {
        "id": 5,
        "label": "ctx . accounts . state . big = ctx . accounts . state . big . wrapping_add (1) ;"
      },
      {
        "id": 6,
        "label": "let ix_fixed = Instruction { program_id : COUNTER_ID , accounts : vec ! [AccountMeta :: new (ctx . accounts . counter_slot . key () , false) , AccountMeta :: new_readonly (ctx . accounts . player . key () , false) ,] , data : spark . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 7,
        "label": "invoke (& ix_fixed , & [ctx . accounts . counter_hint . to_account_info () , ctx . accounts . counter_slot . to_account_info () , ctx . accounts . player . to_account_info () ,]) ? ;"
      },
      {
        "id": 8,
        "label": "let mut prg = ctx . accounts . signal_hint . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "if ! ctx . remaining_accounts . is_empty () { prg = ctx . remaining_accounts [0] . clone () ; ctx . accounts . state . routes = ctx . accounts . state . routes . saturating_add (2) ; }"
      },
      {
        "id": 10,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "ctx . accounts . state . routes = ctx . accounts . state . routes . saturating_add (2) ;"
      },
      {
        "id": 12,
        "label": "let ix_dyn = Instruction { program_id : * prg . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . signal_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . player . key () , false) ,] , data : bounty . wrapping_mul (3) . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 13,
        "label": "invoke (& ix_dyn , & [prg , ctx . accounts . signal_board . to_account_info () , ctx . accounts . player . to_account_info () ,]) ? ;"
      },
      {
        "id": 14,
        "label": "ctx . accounts . pay_bounty (bounty)"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: ix_fixed"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: ix_fixed"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: prg"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: prg"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: prg"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: ix_dyn"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: prg"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: ix_dyn"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: prg"
      }
    ]
  }
]