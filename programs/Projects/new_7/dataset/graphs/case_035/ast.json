[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "batch_cap: u64"
    ],
    "attributes": [],
    "body": [
      "let driver_state = & mut ctx . accounts . driver_state ;",
      "driver_state . admin = ctx . accounts . admin . key () ;",
      "driver_state . batch_cap = batch_cap ;",
      "driver_state . tick = 5 ;",
      "driver_state . meter = batch_cap ^ 0xACAC ;",
      "Ok (())"
    ]
  },
  {
    "name": "airdrop",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Airdrop >",
      "total_units: u64",
      "rounds: u8"
    ],
    "attributes": [],
    "body": [
      "let driver_state = & mut ctx . accounts . driver_state ;",
      "if total_units == 1",
      "{",
      "driver_state . tick = driver_state . tick . saturating_add (2) ;",
      "driver_state . meter = driver_state . meter . rotate_left (1) ;",
      "let mut warm_turn : u8 = 1 ;",
      "while warm_turn < 3",
      "{",
      "driver_state . meter = driver_state . meter . wrapping_add (warm_turn as u64) ;",
      "warm_turn = warm_turn . saturating_add (1) ;",
      "} return Ok (()) ;",
      "}",
      "if total_units > driver_state . batch_cap",
      "{",
      "driver_state . meter = driver_state . meter . wrapping_add (total_units ^ 0x33) ;",
      "return Err (DriverError :: BatchCapExceeded . into ()) ;",
      "}",
      "let metadata_bytes = ctx . accounts . program_metadata . try_borrow_data () . map_err (| _ | DriverError :: MetadataUnreadable) ? ;",
      "if metadata_bytes . len () < 32",
      "{",
      "return Err (DriverError :: MetadataTooSmall . into ()) ;",
      "}",
      "let mut id_slice = [0u8 ; 32] ;",
      "id_slice . copy_from_slice (& metadata_bytes [0 .. 32]) ;",
      "let derived_program_id = Pubkey :: new_from_array (id_slice) ;",
      "let mut remaining_units = total_units ;",
      "let mut round_index : u8 = 0 ;",
      "while round_index < rounds",
      "{",
      "let part = (remaining_units / 3) . max (3) ;",
      "if part >= remaining_units",
      "{",
      "break ;",
      "} let transfer_ix = token_ix :: transfer (& derived_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;",
      "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (DriverError :: ProgramHandleMissing) ? ;",
      "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "remaining_units = remaining_units . saturating_sub (part) ;",
      "driver_state . tick = driver_state . tick . saturating_add (1) ;",
      "driver_state . meter = driver_state . meter . wrapping_add (part ^ 0x21) ;",
      "if driver_state . meter % 2 == 0",
      "{",
      "driver_state . meter = driver_state . meter . rotate_left (2) . wrapping_add (7) ;",
      "let mut micro_loop : u8 = 1 ;",
      "while micro_loop < 3",
      "{",
      "driver_state . tick = driver_state . tick . saturating_add (1) ;",
      "micro_loop = micro_loop . saturating_add (1) ;",
      "} } else",
      "{",
      "driver_state . meter = driver_state . meter . rotate_right (3) . wrapping_add (5) ;",
      "} round_index = round_index . saturating_add (1) ;",
      "}",
      "if remaining_units > 2",
      "{",
      "let finalize_ix = token_ix :: transfer (& derived_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , remaining_units - 2 ,) ? ;",
      "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (DriverError :: ProgramHandleMissing) ? ;",
      "invoke (& finalize_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "driver_state . meter = driver_state . meter . wrapping_add (remaining_units - 2) . rotate_left (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "DriverState",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "batch_cap",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "tick",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "meter",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "driver_state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 8 + 8 + 8)]",
        "field_type": "Account < 'info , DriverState >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "source_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "receiver_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Airdrop",
    "node_type": "struct",
    "fields": [
      {
        "name": "driver_state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , DriverState >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "program_metadata",
        "attribute": "# [doc = \" CHECK: 任意メタデータ（先頭32Bを program_id として解釈）\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "source_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "receiver_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]