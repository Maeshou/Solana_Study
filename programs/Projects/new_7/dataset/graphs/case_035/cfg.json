[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let driver_state = & mut ctx . accounts . driver_state ;"
      },
      {
        "id": 2,
        "label": "driver_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "driver_state . batch_cap = batch_cap ;"
      },
      {
        "id": 4,
        "label": "driver_state . tick = 5 ;"
      },
      {
        "id": 5,
        "label": "driver_state . meter = batch_cap ^ 0xACAC ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "airdrop",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let driver_state = & mut ctx . accounts . driver_state ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "total_units == 1"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "driver_state . tick = driver_state . tick . saturating_add (2) ;"
      },
      {
        "id": 14,
        "label": "driver_state . meter = driver_state . meter . rotate_left (1) ;"
      },
      {
        "id": 15,
        "label": "let mut warm_turn : u8 = 1 ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "driver_state . meter = driver_state . meter . wrapping_add (warm_turn as u64) ;"
      },
      {
        "id": 18,
        "label": "warm_turn = warm_turn . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "return Ok (()) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "total_units > driver_state . batch_cap"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "driver_state . meter = driver_state . meter . wrapping_add (total_units ^ 0x33) ;"
      },
      {
        "id": 29,
        "label": "return Err (DriverError :: BatchCapExceeded . into ()) ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "No-op"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "let metadata_bytes = ctx . accounts . program_metadata . try_borrow_data () . map_err (| _ | DriverError :: MetadataUnreadable) ? ;"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "metadata_bytes . len () < 32"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "return Err (DriverError :: MetadataTooSmall . into ()) ;"
      },
      {
        "id": 39,
        "label": "False body"
      },
      {
        "id": 40,
        "label": "No-op"
      },
      {
        "id": 41,
        "label": "merge"
      },
      {
        "id": 42,
        "label": "let mut id_slice = [0u8 ; 32] ;"
      },
      {
        "id": 43,
        "label": "id_slice . copy_from_slice (& metadata_bytes [0 .. 32]) ;"
      },
      {
        "id": 44,
        "label": "let derived_program_id = Pubkey :: new_from_array (id_slice) ;"
      },
      {
        "id": 45,
        "label": "let mut remaining_units = total_units ;"
      },
      {
        "id": 46,
        "label": "let mut round_index : u8 = 0 ;"
      },
      {
        "id": 47,
        "label": "Loop Start"
      },
      {
        "id": 48,
        "label": "let part = (remaining_units / 3) . max (3) ;"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "part >= remaining_units"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "break ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "let transfer_ix = token_ix :: transfer (& derived_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , part ,) ? ;"
      },
      {
        "id": 58,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (DriverError :: ProgramHandleMissing) ? ;"
      },
      {
        "id": 59,
        "label": "invoke (& transfer_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 60,
        "label": "remaining_units = remaining_units . saturating_sub (part) ;"
      },
      {
        "id": 61,
        "label": "driver_state . tick = driver_state . tick . saturating_add (1) ;"
      },
      {
        "id": 62,
        "label": "driver_state . meter = driver_state . meter . wrapping_add (part ^ 0x21) ;"
      },
      {
        "id": 63,
        "label": "if statement"
      },
      {
        "id": 64,
        "label": "predicate"
      },
      {
        "id": 65,
        "label": "driver_state . meter % 2 == 0"
      },
      {
        "id": 66,
        "label": "True body"
      },
      {
        "id": 67,
        "label": "driver_state . meter = driver_state . meter . rotate_left (2) . wrapping_add (7) ;"
      },
      {
        "id": 68,
        "label": "let mut micro_loop : u8 = 1 ;"
      },
      {
        "id": 69,
        "label": "Loop Start"
      },
      {
        "id": 70,
        "label": "driver_state . tick = driver_state . tick . saturating_add (1) ;"
      },
      {
        "id": 71,
        "label": "micro_loop = micro_loop . saturating_add (1) ;"
      },
      {
        "id": 72,
        "label": "Loop End"
      },
      {
        "id": 73,
        "label": "False body"
      },
      {
        "id": 74,
        "label": "driver_state . meter = driver_state . meter . rotate_right (3) . wrapping_add (5) ;"
      },
      {
        "id": 75,
        "label": "merge"
      },
      {
        "id": 76,
        "label": "round_index = round_index . saturating_add (1) ;"
      },
      {
        "id": 77,
        "label": "Loop End"
      },
      {
        "id": 78,
        "label": "if statement"
      },
      {
        "id": 79,
        "label": "predicate"
      },
      {
        "id": 80,
        "label": "remaining_units > 2"
      },
      {
        "id": 81,
        "label": "True body"
      },
      {
        "id": 82,
        "label": "let finalize_ix = token_ix :: transfer (& derived_program_id , & ctx . accounts . source_vault . key () , & ctx . accounts . receiver_vault . key () , & ctx . accounts . admin . key () , & [] , remaining_units - 2 ,) ? ;"
      },
      {
        "id": 83,
        "label": "let external_program_ai = ctx . remaining_accounts . get (0) . ok_or (DriverError :: ProgramHandleMissing) ? ;"
      },
      {
        "id": 84,
        "label": "invoke (& finalize_ix , & [external_program_ai . clone () , ctx . accounts . source_vault . to_account_info () , ctx . accounts . receiver_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 85,
        "label": "driver_state . meter = driver_state . meter . wrapping_add (remaining_units - 2) . rotate_left (1) ;"
      },
      {
        "id": 86,
        "label": "False body"
      },
      {
        "id": 87,
        "label": "No-op"
      },
      {
        "id": 88,
        "label": "merge"
      },
      {
        "id": 89,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 9,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 24,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 34,
        "to": 39,
        "label": "false"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "predicate"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "true"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 69,
        "to": 72,
        "label": "while"
      },
      {
        "from": 63,
        "to": 73,
        "label": "false"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 72,
        "to": 75,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 47,
        "to": 77,
        "label": "while"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "predicate"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 78,
        "to": 81,
        "label": "true"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 78,
        "to": 86,
        "label": "false"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 85,
        "to": 88,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      }
    ]
  }
]