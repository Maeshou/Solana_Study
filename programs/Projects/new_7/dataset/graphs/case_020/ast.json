[
  {
    "name": "open",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Open >",
      "ladder: u8"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . arena ;",
      "a . admin = ctx . accounts . admin . key () ;",
      "a . ladder = ladder ;",
      "a . matches = 0 ;",
      "a . points = 0 ;",
      "a . cycle = 0 ;",
      "let mut j = 0u8 ;",
      "while j < 5",
      "{",
      "a . points = a . points . saturating_add (((ladder as u32) % 7) + (j as u32)) ;",
      "a . cycle = a . cycle . saturating_add (1) ;",
      "j = j . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "record_and_pay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RecordAndPay >",
      "rank: u8",
      "name: String"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . arena ;",
      "require ! (a . admin == ctx . accounts . admin . key () , Errs :: Admin) ;",
      "if rank == 1",
      "{",
      "let b = name . as_bytes () ;",
      "let mut i = 0usize ;",
      "let mut local = 0u32 ;",
      "while i < b . len ()",
      "{",
      "local = local . saturating_add ((b [i] as u32) % 11 + 1) ;",
      "if i % 4 == 0",
      "{",
      "local = local . saturating_add (2) ;",
      "} i += 1 ;",
      "} a . points = a . points . saturating_add (local) ;",
      "let mut h = 0u8 ;",
      "while h < a . ladder",
      "{",
      "a . points = a . points . saturating_add ((h % 3) as u32 + 1) ;",
      "h = h . saturating_add (1) ;",
      "} } else",
      "{",
      "let mut step = 0u8 ;",
      "while step < 6",
      "{",
      "a . cycle = a . cycle . saturating_add (1) ;",
      "if a . points > 0 && step % 2 == 0",
      "{",
      "a . points = a . points . saturating_sub (1) ;",
      "} step = step . saturating_add (1) ;",
      "} if name . len () < 5",
      "{",
      "let mut pad = 0u8 ;",
      "while pad < 3",
      "{",
      "a . points = a . points . saturating_add (1) ;",
      "pad = pad . saturating_add (1) ;",
      "} }",
      "}",
      "a . matches = a . matches . saturating_add (1) ;",
      "let mut pay = ((a . points as u64) / 3) . saturating_add ((a . cycle as u64) % 10) ;",
      "let mut bonus = 0u64 ;",
      "let mut c = 0u8 ;",
      "while c < 4",
      "{",
      "bonus = bonus . saturating_add (((a . matches % 9) as u64) + (c as u64)) ;",
      "c = c . saturating_add (1) ;",
      "}",
      "pay = pay . saturating_add (bonus) ;",
      "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . pool . key () , ctx . accounts . winner_ata . key () , ctx . accounts . admin . key () , & [] , pay ,) ? ;",
      "invoke (& ix , & [ctx . accounts . pool . to_account_info () , ctx . accounts . winner_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Arena",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "ladder",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "matches",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "points",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "cycle",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Open",
    "node_type": "struct",
    "fields": [
      {
        "name": "arena",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 1 + 4 + 4 + 4)]",
        "field_type": "Account < 'info , Arena >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RecordAndPay",
    "node_type": "struct",
    "fields": [
      {
        "name": "arena",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Arena >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "pool",
        "attribute": "# [doc = \" CHECK:\"] # [account (mut)]",
        "field_type": "UncheckedAccount < 'info >"
      },
      {
        "name": "winner_ata",
        "attribute": "# [doc = \" CHECK:\"] # [account (mut)]",
        "field_type": "UncheckedAccount < 'info >"
      },
      {
        "name": "token_program",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "UncheckedAccount < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]