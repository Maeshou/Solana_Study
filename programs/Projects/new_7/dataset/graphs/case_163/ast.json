[
  {
    "name": "settle_and_notify_mix",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SettleAndNotifyMix >",
      "amount: u64",
      "note_code: u64"
    ],
    "attributes": [],
    "body": [
      "if amount > 0",
      "{",
      "ctx . accounts . meta . count = ctx . accounts . meta . count . wrapping_add (1) ;",
      "}",
      "let cpi_accounts = Transfer { from : ctx . accounts . vault_token . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_authority . to_account_info () , } ;",
      "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;",
      "token :: transfer (cpi_ctx , amount) ? ;",
      "let fixed_metas = vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user_wallet . key () , false) ,] ;",
      "let fixed_infos = vec ! [ctx . accounts . notify_program . to_account_info () , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user_wallet . to_account_info () ,] ;",
      "let fixed_ix = Instruction { program_id : EXPECTED_NOTIFY_ID , accounts : fixed_metas , data : note_code . to_le_bytes () . to_vec () , } ;",
      "invoke (& fixed_ix , & fixed_infos) ? ;",
      "let mut dynamic_program = ctx . accounts . notify_program . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "dynamic_program = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . meta . switches = ctx . accounts . meta . switches . wrapping_add (1) ;",
      "}",
      "let dyn_metas = vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user_wallet . key () , false) ,] ;",
      "let dyn_infos = vec ! [dynamic_program . clone () , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user_wallet . to_account_info () ,] ;",
      "let dyn_ix = Instruction { program_id : * dynamic_program . key , accounts : dyn_metas , data : amount . to_le_bytes () . to_vec () , } ;",
      "invoke (& dyn_ix , & dyn_infos) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "SettleAndNotifyMix",
    "node_type": "struct",
    "fields": [
      {
        "name": "meta",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , MixMeta >"
      },
      {
        "name": "vault_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "vault_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      },
      {
        "name": "notice_board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user_wallet",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "notify_program",
        "attribute": "# [doc = \" CHECK: 形式上のヒント（固定でも動的でも利用）\"]",
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MixMeta",
    "node_type": "struct",
    "fields": [
      {
        "name": "count",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "switches",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]