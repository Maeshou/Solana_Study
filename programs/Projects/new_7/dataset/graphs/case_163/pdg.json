[
  {
    "name": "settle_and_notify_mix",
    "inputs": [
      "ctx: Context < SettleAndNotifyMix >",
      "amount: u64",
      "note_code: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if amount > 0 { ctx . accounts . meta . count = ctx . accounts . meta . count . wrapping_add (1) ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . meta . count = ctx . accounts . meta . count . wrapping_add (1) ;"
      },
      {
        "id": 3,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . vault_token . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . vault_authority . to_account_info () , } ;"
      },
      {
        "id": 4,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 5,
        "label": "token :: transfer (cpi_ctx , amount) ? ;"
      },
      {
        "id": 6,
        "label": "let fixed_metas = vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user_wallet . key () , false) ,] ;"
      },
      {
        "id": 7,
        "label": "let fixed_infos = vec ! [ctx . accounts . notify_program . to_account_info () , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user_wallet . to_account_info () ,] ;"
      },
      {
        "id": 8,
        "label": "let fixed_ix = Instruction { program_id : EXPECTED_NOTIFY_ID , accounts : fixed_metas , data : note_code . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 9,
        "label": "invoke (& fixed_ix , & fixed_infos) ? ;"
      },
      {
        "id": 10,
        "label": "let mut dynamic_program = ctx . accounts . notify_program . to_account_info () ;"
      },
      {
        "id": 11,
        "label": "if ! ctx . remaining_accounts . is_empty () { dynamic_program = ctx . remaining_accounts [0] . clone () ; ctx . accounts . meta . switches = ctx . accounts . meta . switches . wrapping_add (1) ; }"
      },
      {
        "id": 12,
        "label": "dynamic_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 13,
        "label": "ctx . accounts . meta . switches = ctx . accounts . meta . switches . wrapping_add (1) ;"
      },
      {
        "id": 14,
        "label": "let dyn_metas = vec ! [AccountMeta :: new (ctx . accounts . notice_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user_wallet . key () , false) ,] ;"
      },
      {
        "id": 15,
        "label": "let dyn_infos = vec ! [dynamic_program . clone () , ctx . accounts . notice_board . to_account_info () , ctx . accounts . user_wallet . to_account_info () ,] ;"
      },
      {
        "id": 16,
        "label": "let dyn_ix = Instruction { program_id : * dynamic_program . key , accounts : dyn_metas , data : amount . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 17,
        "label": "invoke (& dyn_ix , & dyn_infos) ? ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: cpi_accounts"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: cpi_ctx"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: cpi_accounts"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: cpi_ctx"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: fixed_metas"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: fixed_infos"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: fixed_ix"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: fixed_metas"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: fixed_ix"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: fixed_infos"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: dynamic_program"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: dynamic_program"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: dynamic_program"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: dyn_metas"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: dyn_infos"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: dyn_ix"
      },
      {
        "from": 10,
        "to": 16,
        "label": "data_dep: dynamic_program"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: dyn_metas"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: dyn_ix"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: dyn_infos"
      }
    ]
  }
]