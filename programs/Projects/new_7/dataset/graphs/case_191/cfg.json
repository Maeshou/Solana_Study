[
  {
    "name": "fold_bits",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = v . rotate_left (3) ^ v . rotate_right (5) ;"
      },
      {
        "id": 2,
        "label": "let b = a . wrapping_mul (911) ;"
      },
      {
        "id": 3,
        "label": "b ^ (b >> 7)"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      }
    ]
  },
  {
    "name": "run",
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let now = Clock :: get () ? . slot ;"
      },
      {
        "id": 6,
        "label": "let f1 = fold_bits (mark) ;"
      },
      {
        "id": 7,
        "label": "let f2 = fold_bits (now) ;"
      },
      {
        "id": 8,
        "label": "let meter = f1 . wrapping_add (f2) ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "meter & 1 == 1"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "ctx . accounts . state . odd = ctx . accounts . state . odd . saturating_add (1) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "meter & 2 == 2"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "ctx . accounts . state . bump = ctx . accounts . state . bump . wrapping_add (2) ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "let mut msg = mark . to_string () ;"
      },
      {
        "id": 26,
        "label": "msg . push ('-') ;"
      },
      {
        "id": 27,
        "label": "msg . push_str (& now . to_string ()) ;"
      },
      {
        "id": 28,
        "label": "let mut x = 0u8 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "x ^= * b ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "let mut data = msg . into_bytes () ;"
      },
      {
        "id": 33,
        "label": "data . push (x) ;"
      },
      {
        "id": 34,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . log_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] ;"
      },
      {
        "id": 35,
        "label": "invoke (& Instruction { program_id : FIXED_LOG_ID , accounts : metas , data } , & [ctx . accounts . log_hint . to_account_info () , ctx . accounts . log_cell . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 36,
        "label": "let mut p = ctx . accounts . dynamic_hint . to_account_info () ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 42,
        "label": "ctx . accounts . state . paths = ctx . accounts . state . paths . saturating_add (3) ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let mut arr = [tip , tip . rotate_left (9) , tip ^ 777] ;"
      },
      {
        "id": 47,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 48,
        "label": "Loop Start"
      },
      {
        "id": 49,
        "label": "let mut j = 1 ;"
      },
      {
        "id": 50,
        "label": "Loop Start"
      },
      {
        "id": 51,
        "label": "if statement"
      },
      {
        "id": 52,
        "label": "predicate"
      },
      {
        "id": 53,
        "label": "arr [j - 1] < arr [j]"
      },
      {
        "id": 54,
        "label": "True body"
      },
      {
        "id": 55,
        "label": "let t = arr [j - 1] ;"
      },
      {
        "id": 56,
        "label": "arr [j - 1] = arr [j] ;"
      },
      {
        "id": 57,
        "label": "arr [j] = t ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "No-op"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "j += 1 ;"
      },
      {
        "id": 62,
        "label": "Loop End"
      },
      {
        "id": 63,
        "label": "i += 1 ;"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "let mut dynbytes = Vec :: new () ;"
      },
      {
        "id": 66,
        "label": "Loop Start"
      },
      {
        "id": 67,
        "label": "dynbytes . extend_from_slice (& v . to_le_bytes ()) ;"
      },
      {
        "id": 68,
        "label": "Loop End"
      },
      {
        "id": 69,
        "label": "invoke (& Instruction { program_id : * p . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . dynamic_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] , data : dynbytes , } , & [p , ctx . accounts . dynamic_board . to_account_info () , ctx . accounts . user . to_account_info () ,]) ? ;"
      },
      {
        "id": 70,
        "label": "emit ! (Milestone { slot : now , level : meter & 15 , tag : mark . rotate_right (3) }) ;"
      },
      {
        "id": 71,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . bank_auth . to_account_info () , }) , tip ,) ? ;"
      },
      {
        "id": 72,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 37,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "predicate"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "true"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 51,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 50,
        "to": 62,
        "label": "while"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 48,
        "to": 64,
        "label": "while"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 66,
        "to": 68,
        "label": "for"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      }
    ]
  }
]