[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let g = & mut ctx . accounts . guild ;"
      },
      {
        "id": 2,
        "label": "g . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "g . name = name ;"
      },
      {
        "id": 4,
        "label": "g . fee_bps = fee_bps . min (800) ;"
      },
      {
        "id": 5,
        "label": "g . paid_total = 0 ;"
      },
      {
        "id": 6,
        "label": "g . round = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay_bonus",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let mut k = 9u64 ;"
      },
      {
        "id": 10,
        "label": "let mut r = 0 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "k = k . saturating_add (2) ;"
      },
      {
        "id": 13,
        "label": "r += 1 ;"
      },
      {
        "id": 14,
        "label": "Loop End"
      },
      {
        "id": 15,
        "label": "let gross = points . saturating_mul (k) ;"
      },
      {
        "id": 16,
        "label": "let fee = gross . saturating_mul (ctx . accounts . guild . fee_bps as u64) / 10_000 ;"
      },
      {
        "id": 17,
        "label": "let net = if gross > fee { gross - fee } else { 0 } ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "net == 0"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "ctx . accounts . guild . round = ctx . accounts . guild . round . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . memo_log = ctx . accounts . memo_log . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "return Ok (()) ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "ctx . accounts . guild . paid_total = ctx . accounts . guild . paid_total . saturating_add (net) ;"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "let ix = token_ix :: transfer (& ctx . accounts . any_token_program . key () , & ctx . accounts . treasury . key () , & ctx . accounts . member_vault . key () , & ctx . accounts . admin . key () , & [] , net ,) ? ;"
      },
      {
        "id": 29,
        "label": "invoke (& ix , & [ctx . accounts . any_token_program . to_account_info () , ctx . accounts . treasury . to_account_info () , ctx . accounts . member_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 30,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "ctx . accounts . memo_log = ctx . accounts . memo_log . saturating_add (i as u64 + 1) ;"
      },
      {
        "id": 33,
        "label": "i += 1 ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "while"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 18,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "while"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]