[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >"
    ],
    "attributes": [],
    "body": [
      "let migrate_state = & mut ctx . accounts . migrate_state ;",
      "migrate_state . admin = ctx . accounts . admin . key () ;",
      "migrate_state . routes = [Pubkey :: new_from_array ([1u8 ; 32]) , Pubkey :: new_from_array ([2u8 ; 32]) , Pubkey :: new_from_array ([3u8 ; 32]) , Pubkey :: new_from_array ([4u8 ; 32]) ,] ;",
      "migrate_state . cursor = 1 ;",
      "migrate_state . score = 100 ;",
      "Ok (())"
    ]
  },
  {
    "name": "rotate",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Rotate >",
      "a: Pubkey",
      "b: Pubkey",
      "c: Pubkey",
      "d: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let migrate_state = & mut ctx . accounts . migrate_state ;",
      "require_keys_eq ! (migrate_state . admin , ctx . accounts . admin . key () , MigrateError :: AdminOnly) ;",
      "migrate_state . routes = [a , b , c , d] ;",
      "migrate_state . cursor = migrate_state . cursor . wrapping_add (1) ;",
      "migrate_state . score = migrate_state . score . rotate_left (2) ;",
      "Ok (())"
    ]
  },
  {
    "name": "move_points",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < MovePoints >",
      "value: u64",
      "rounds: u8"
    ],
    "attributes": [],
    "body": [
      "let migrate_state = & mut ctx . accounts . migrate_state ;",
      "if value == 1",
      "{",
      "migrate_state . score = migrate_state . score . wrapping_add (7) ;",
      "migrate_state . cursor = migrate_state . cursor . wrapping_add (2) ;",
      "return Ok (()) ;",
      "}",
      "let mut left = value ;",
      "let mut i : u8 = 0 ;",
      "while i < rounds",
      "{",
      "let part = (left / 3) . max (2) ;",
      "if part >= left",
      "{",
      "break ;",
      "} let index = (migrate_state . cursor as usize) % 4 ;",
      "let program_ai = ctx . remaining_accounts . get (index) . ok_or (MigrateError :: MissingRouteProgram) ? ;",
      "let ix = Instruction",
      "{",
      "program_id : migrate_state . routes [index] , accounts : vec ! [AccountMeta :: new (ctx . accounts . from_vault . key () , false) , AccountMeta :: new (ctx . accounts . to_vault . key () , false) , AccountMeta :: new_readonly (ctx . accounts . admin . key () , true) ,] , data : { let mut d = vec ! [0x41] ;",
      "d . extend_from_slice (& part . to_le_bytes ()) ;",
      "d } , } ;",
      "invoke (& ix , & [program_ai . clone () , ctx . accounts . from_vault . to_account_info () , ctx . accounts . to_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "left = left . saturating_sub (part) ;",
      "migrate_state . cursor = migrate_state . cursor . wrapping_add (1) ;",
      "migrate_state . score = migrate_state . score . wrapping_add (part ^ 0x17) ;",
      "if migrate_state . score % 2 == 0",
      "{",
      "migrate_state . score = migrate_state . score . rotate_left (1) . wrapping_add (11) ;",
      "let mut kk : u8 = 1 ;",
      "while kk < 3",
      "{",
      "migrate_state . cursor = migrate_state . cursor . wrapping_add (1) ;",
      "kk = kk . saturating_add (1) ;",
      "} } else",
      "{",
      "migrate_state . score = migrate_state . score . rotate_right (2) . wrapping_add (5) ;",
      "} i = i . saturating_add (1) ;",
      "}",
      "if left > 2",
      "{",
      "let index = (migrate_state . cursor as usize) % 4 ;",
      "let program_ai = ctx . remaining_accounts . get (index) . ok_or (MigrateError :: MissingRouteProgram) ? ;",
      "let ix2 = Instruction",
      "{",
      "program_id : migrate_state . routes [index] , accounts : vec ! [AccountMeta :: new (ctx . accounts . from_vault . key () , false) , AccountMeta :: new (ctx . accounts . to_vault . key () , false) , AccountMeta :: new_readonly (ctx . accounts . admin . key () , true) ,] , data : { let mut d = vec ! [0x42] ;",
      "d . extend_from_slice (& (left - 2) . to_le_bytes ()) ;",
      "d } , } ;",
      "invoke (& ix2 , & [program_ai . clone () , ctx . accounts . from_vault . to_account_info () , ctx . accounts . to_vault . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;",
      "migrate_state . score = migrate_state . score . wrapping_add (left - 2) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "MigrateState",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "routes",
        "attribute": null,
        "field_type": "[Pubkey ; 4]"
      },
      {
        "name": "cursor",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "score",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "migrate_state",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + (32 * 4) + 1 + 8)]",
        "field_type": "Account < 'info , MigrateState >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "from_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "to_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Rotate",
    "node_type": "struct",
    "fields": [
      {
        "name": "migrate_state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , MigrateState >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MovePoints",
    "node_type": "struct",
    "fields": [
      {
        "name": "migrate_state",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , MigrateState >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "from_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "to_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]