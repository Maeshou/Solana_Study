[
  {
    "name": "build_two_metas",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "main: Pubkey",
      "actor: Pubkey"
    ],
    "attributes": [],
    "body": [
      "let mut metas = Vec :: with_capacity (2) ;",
      "metas . push (AccountMeta :: new (main , false)) ;",
      "metas . push (AccountMeta :: new_readonly (actor , false)) ;",
      "metas"
    ]
  },
  {
    "name": "run",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Run >",
      "tag: u64",
      "pay: u64"
    ],
    "attributes": [],
    "body": [
      "let metas = build_two_metas (ctx . accounts . cell . key () , ctx . accounts . user . key ()) ;",
      "invoke (& Instruction { program_id : FIXED_ID , accounts : metas , data : tag . to_le_bytes () . to_vec () } , & [ctx . accounts . hint . to_account_info () , ctx . accounts . cell . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ? ;",
      "let mut p = ctx . accounts . router_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "p = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . stat . count = ctx . accounts . stat . count . saturating_add (2) ;",
      "}",
      "let metas2 = build_two_metas (ctx . accounts . router_board . key () , ctx . accounts . user . key ()) ;",
      "invoke (& Instruction { program_id : * p . key , accounts : metas2 , data : pay . rotate_right (3) . to_le_bytes () . to_vec () } , & [p , ctx . accounts . router_board . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ? ;",
      "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . bank_auth . to_account_info () , } ,) , pay ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Run",
    "node_type": "struct",
    "fields": [
      {
        "name": "stat",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Stat >"
      },
      {
        "name": "cell",
        "attribute": "# [doc = \" CHECK: \"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "router_board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "router_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "bank",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "bank_auth",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Stat",
    "node_type": "struct",
    "fields": [
      {
        "name": "count",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]