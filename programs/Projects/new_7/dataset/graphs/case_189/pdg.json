[
  {
    "name": "build_two_metas",
    "inputs": [
      "main: Pubkey",
      "actor: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut metas = Vec :: with_capacity (2) ;"
      },
      {
        "id": 2,
        "label": "metas . push (AccountMeta :: new (main , false)) ;"
      },
      {
        "id": 3,
        "label": "metas . push (AccountMeta :: new_readonly (actor , false)) ;"
      },
      {
        "id": 4,
        "label": "metas"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: metas"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: metas"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: metas"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: metas"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run >",
      "tag: u64",
      "pay: u64"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let metas = build_two_metas (ctx . accounts . cell . key () , ctx . accounts . user . key ()) ;"
      },
      {
        "id": 7,
        "label": "invoke (& Instruction { program_id : FIXED_ID , accounts : metas , data : tag . to_le_bytes () . to_vec () } , & [ctx . accounts . hint . to_account_info () , ctx . accounts . cell . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 8,
        "label": "let mut p = ctx . accounts . router_hint . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "if ! ctx . remaining_accounts . is_empty () { p = ctx . remaining_accounts [0] . clone () ; ctx . accounts . stat . count = ctx . accounts . stat . count . saturating_add (2) ; }"
      },
      {
        "id": 10,
        "label": "p = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "ctx . accounts . stat . count = ctx . accounts . stat . count . saturating_add (2) ;"
      },
      {
        "id": 12,
        "label": "let metas2 = build_two_metas (ctx . accounts . router_board . key () , ctx . accounts . user . key ()) ;"
      },
      {
        "id": 13,
        "label": "invoke (& Instruction { program_id : * p . key , accounts : metas2 , data : pay . rotate_right (3) . to_le_bytes () . to_vec () } , & [p , ctx . accounts . router_board . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 14,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . bank . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . bank_auth . to_account_info () , } ,) , pay ,) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: metas"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: metas"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: p"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: metas2"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: metas2"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: p"
      }
    ]
  }
]