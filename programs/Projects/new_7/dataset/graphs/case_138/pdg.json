[
  {
    "name": "submit",
    "inputs": [
      "ctx: Context < Submit >",
      "hue: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . canvas ;"
      },
      {
        "id": 2,
        "label": "let mut pg = ctx . accounts . board_prog . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "if hue as u64 % 2 == 1 { c . odd += 1 ; c . pixels . push (hue as u32) ; }"
      },
      {
        "id": 4,
        "label": "c . odd += 1 ;"
      },
      {
        "id": 5,
        "label": "c . pixels . push (hue as u32) ;"
      },
      {
        "id": 6,
        "label": "for _ in 0 .. (hue as u64 % 3) { c . layers = c . layers . wrapping_add (1) ; }"
      },
      {
        "id": 7,
        "label": "c . layers = c . layers . wrapping_add (1) ;"
      },
      {
        "id": 8,
        "label": "for _ in 0 .. (hue as u64 % 2) { c . echo ^= hue as u64 ; }"
      },
      {
        "id": 9,
        "label": "c . echo ^= hue as u64 ;"
      },
      {
        "id": 10,
        "label": "if ctx . remaining_accounts . len () > 0 { pg = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 11,
        "label": "pg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 12,
        "label": "let br = PaintBridge { gallery : ctx . accounts . gallery . to_account_info () , artist : ctx . accounts . artist . to_account_info () } ;"
      },
      {
        "id": 13,
        "label": "let cx = br . as_cpi (pg . clone ()) ;"
      },
      {
        "id": 14,
        "label": "br . post (cx , (hue as u64) . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: pg"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: c"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: pg"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: pg"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: br"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: cx"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: pg"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: br"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cx"
      }
    ]
  }
]