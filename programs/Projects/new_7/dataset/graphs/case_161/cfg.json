[
  {
    "name": "dispatch",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut program = ctx . accounts . route_default . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "if statement"
      },
      {
        "id": 3,
        "label": "predicate"
      },
      {
        "id": 4,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 5,
        "label": "True body"
      },
      {
        "id": 6,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 7,
        "label": "False body"
      },
      {
        "id": 8,
        "label": "No-op"
      },
      {
        "id": 9,
        "label": "merge"
      },
      {
        "id": 10,
        "label": "let pack = Duo { a : ctx . accounts . a . clone () , b : ctx . accounts . b . clone () } ;"
      },
      {
        "id": 11,
        "label": "let cx = CpiContext :: new_with_signer (program . clone () , pack . clone () , & [b\"seed-a\" , b\"seed-b\"]) ;"
      },
      {
        "id": 12,
        "label": "let ix = Instruction { program_id : * cx . program . key , accounts : pack . metas () , data : n . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 13,
        "label": "invoke_signed (& ix , & pack . infos (& cx . program) , & [b\"seed-a\" , b\"seed-b\"]) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "predicate"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 2,
        "to": 5,
        "label": "true"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 2,
        "to": 7,
        "label": "false"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  }
]