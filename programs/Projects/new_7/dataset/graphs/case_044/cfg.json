[
  {
    "name": "create",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . ms ;"
      },
      {
        "id": 2,
        "label": "m . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "m . members = members ;"
      },
      {
        "id": 4,
        "label": "m . threshold = threshold ;"
      },
      {
        "id": 5,
        "label": "m . alt = ctx . accounts . owner . key () ;"
      },
      {
        "id": 6,
        "label": "m . round = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "set_alt",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let m = & mut ctx . accounts . ms ;"
      },
      {
        "id": 10,
        "label": "require ! (m . owner == ctx . accounts . owner . key () , Errs :: Owner) ;"
      },
      {
        "id": 11,
        "label": "m . alt = alt ;"
      },
      {
        "id": 12,
        "label": "m . round = m . round . saturating_add (1) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let m = & mut ctx . accounts . ms ;"
      },
      {
        "id": 16,
        "label": "require ! (m . owner == ctx . accounts . owner . key () , Errs :: Owner) ;"
      },
      {
        "id": 17,
        "label": "let mut ok = 0u8 ;"
      },
      {
        "id": 18,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "ok = ok . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "i += 1 ;"
      },
      {
        "id": 22,
        "label": "Loop End"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "ok < m . threshold"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "m . round = m . round . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "let mut amt = base ;"
      },
      {
        "id": 32,
        "label": "let mut s = 0u8 ;"
      },
      {
        "id": 33,
        "label": "Loop Start"
      },
      {
        "id": 34,
        "label": "amt = amt . saturating_add ((s as u64) + ((m . round % 7) as u64)) ;"
      },
      {
        "id": 35,
        "label": "s = s . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "let ix = spl_token :: instruction :: transfer (m . alt , ctx . accounts . vault . key () , ctx . accounts . payee_ata . key () , ctx . accounts . owner . key () , & [] , amt ,) ? ;"
      },
      {
        "id": 38,
        "label": "invoke (& ix , & [ctx . accounts . vault . to_account_info () , ctx . accounts . payee_ata . to_account_info () , ctx . accounts . owner . to_account_info () ,]) ? ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "while"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "while"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      }
    ]
  }
]