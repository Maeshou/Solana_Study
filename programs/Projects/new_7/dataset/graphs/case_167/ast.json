[
  {
    "name": "act",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Act >",
      "ticks: u64",
      "prize: u64"
    ],
    "attributes": [],
    "body": [
      "if ticks > 5",
      "{",
      "ctx . accounts . note . bump = ctx . accounts . note . bump . wrapping_add (1) ;",
      "}",
      "if prize > 0",
      "{",
      "ctx . accounts . note . total = ctx . accounts . note . total . saturating_add (prize) ;",
      "}",
      "let fixed_ix = Instruction { program_id : STATS_ID_B , accounts : vec ! [AccountMeta :: new (ctx . accounts . stats_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] , data : ticks . to_le_bytes () . to_vec () , } ;",
      "invoke (& fixed_ix , & [ctx . accounts . stats_marker . to_account_info () , ctx . accounts . stats_cell . to_account_info () , ctx . accounts . participant . to_account_info () ,]) ? ;",
      "let mut program_ai = ctx . accounts . notify_hint . to_account_info () ;",
      "if ! ctx . remaining_accounts . is_empty ()",
      "{",
      "program_ai = ctx . remaining_accounts [0] . clone () ;",
      "ctx . accounts . note . paths = ctx . accounts . note . paths . saturating_add (2) ;",
      "}",
      "let dyn_ix = Instruction { program_id : * program_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notify_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] , data : prize . to_le_bytes () . to_vec () , } ;",
      "invoke (& dyn_ix , & [program_ai , ctx . accounts . notify_board . to_account_info () , ctx . accounts . participant . to_account_info () ,]) ? ;",
      "let t = Transfer { from : ctx . accounts . prize_pool . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ;",
      "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;",
      "token :: transfer (tctx , prize) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Act",
    "node_type": "struct",
    "fields": [
      {
        "name": "note",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , DripNote >"
      },
      {
        "name": "stats_cell",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "participant",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "stats_marker",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "notify_board",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "notify_hint",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "prize_pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "user_token",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "pool_authority",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "DripNote",
    "node_type": "struct",
    "fields": [
      {
        "name": "bump",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "total",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "paths",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]