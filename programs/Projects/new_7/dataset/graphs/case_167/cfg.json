[
  {
    "name": "act",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "ticks > 5"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "ctx . accounts . note . bump = ctx . accounts . note . bump . wrapping_add (1) ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "prize > 0"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "ctx . accounts . note . total = ctx . accounts . note . total . saturating_add (prize) ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "let fixed_ix = Instruction { program_id : STATS_ID_B , accounts : vec ! [AccountMeta :: new (ctx . accounts . stats_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] , data : ticks . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 18,
        "label": "invoke (& fixed_ix , & [ctx . accounts . stats_marker . to_account_info () , ctx . accounts . stats_cell . to_account_info () , ctx . accounts . participant . to_account_info () ,]) ? ;"
      },
      {
        "id": 19,
        "label": "let mut program_ai = ctx . accounts . notify_hint . to_account_info () ;"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "program_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 25,
        "label": "ctx . accounts . note . paths = ctx . accounts . note . paths . saturating_add (2) ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "let dyn_ix = Instruction { program_id : * program_ai . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . notify_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . participant . key () , false) ,] , data : prize . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 30,
        "label": "invoke (& dyn_ix , & [program_ai , ctx . accounts . notify_board . to_account_info () , ctx . accounts . participant . to_account_info () ,]) ? ;"
      },
      {
        "id": 31,
        "label": "let t = Transfer { from : ctx . accounts . prize_pool . to_account_info () , to : ctx . accounts . user_token . to_account_info () , authority : ctx . accounts . pool_authority . to_account_info () , } ;"
      },
      {
        "id": 32,
        "label": "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;"
      },
      {
        "id": 33,
        "label": "token :: transfer (tctx , prize) ? ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 20,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]