[
  {
    "name": "init",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Init >",
      "items: Vec < Pubkey >"
    ],
    "attributes": [],
    "body": [
      "let r = & mut ctx . accounts . reg ;",
      "r . owner = ctx . accounts . owner . key () ;",
      "r . items = items ;",
      "r . use_count = 0 ;",
      "Ok (())"
    ]
  },
  {
    "name": "pay",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Pay >",
      "index: u32",
      "base: u64"
    ],
    "attributes": [],
    "body": [
      "let r = & mut ctx . accounts . reg ;",
      "require ! (r . owner == ctx . accounts . owner . key () , Errs :: Owner) ;",
      "require ! ((index as usize) < r . items . len () , Errs :: Oob) ;",
      "let chosen = r . items [index as usize] ;",
      "r . use_count = r . use_count . saturating_add (1) ;",
      "let mut amt = base ;",
      "let mut i = 0u8 ;",
      "while i < 5",
      "{",
      "amt = amt . saturating_add ((i as u64) + ((r . use_count % 7) as u64)) ;",
      "i = i . saturating_add (1) ;",
      "}",
      "let ix = spl_token :: instruction :: transfer (chosen , ctx . accounts . pool . key () , ctx . accounts . member_ata . key () , ctx . accounts . owner . key () , & [] , amt ,) ? ;",
      "invoke (& ix , & [ctx . accounts . pool . to_account_info () , ctx . accounts . member_ata . to_account_info () , ctx . accounts . owner . to_account_info () ,]) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Reg",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "items",
        "attribute": null,
        "field_type": "Vec < Pubkey >"
      },
      {
        "name": "use_count",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Init",
    "node_type": "struct",
    "fields": [
      {
        "name": "reg",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + (32 * 8) + 4)]",
        "field_type": "Account < 'info , Reg >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Pay",
    "node_type": "struct",
    "fields": [
      {
        "name": "reg",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Reg >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "pool",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "member_ata",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]