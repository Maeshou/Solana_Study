[
  {
    "name": "ex_a",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if statement"
      },
      {
        "id": 2,
        "label": "predicate"
      },
      {
        "id": 3,
        "label": "n % 2 == 0"
      },
      {
        "id": 4,
        "label": "True body"
      },
      {
        "id": 5,
        "label": "ctx . accounts . state . evens += 1 ;"
      },
      {
        "id": 6,
        "label": "False body"
      },
      {
        "id": 7,
        "label": "No-op"
      },
      {
        "id": 8,
        "label": "merge"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "n > 10"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "n % 3 == 0"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "ctx . accounts . state . marks += 1 ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "let mut prg = ctx . accounts . router . to_account_info () ;"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 30,
        "label": "ctx . accounts . state . switch += 1 ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "DynBridge { a : ctx . accounts . acc_a . to_account_info () , b : ctx . accounts . acc_b . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . acc_a . to_account_info () , b : ctx . accounts . acc_b . to_account_info () , }) , n . to_le_bytes () . to_vec () , true ,) ? ;"
      },
      {
        "id": 35,
        "label": "Loop Start"
      },
      {
        "id": 36,
        "label": "ctx . accounts . state . tick = ctx . accounts . state . tick . wrapping_add (1) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "predicate"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 1,
        "to": 4,
        "label": "true"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 1,
        "to": 6,
        "label": "false"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 9,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 37,
        "label": "for"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  },
  {
    "name": "ex_b",
    "nodes": [
      {
        "id": 39,
        "label": "Entry"
      },
      {
        "id": 40,
        "label": "Loop Start"
      },
      {
        "id": 41,
        "label": "ctx . accounts . buf . mix ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 42,
        "label": "Loop End"
      },
      {
        "id": 43,
        "label": "if statement"
      },
      {
        "id": 44,
        "label": "predicate"
      },
      {
        "id": 45,
        "label": "seed > 0"
      },
      {
        "id": 46,
        "label": "True body"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "seed & 1 == 1"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "ctx . accounts . buf . odds += 1 ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "False body"
      },
      {
        "id": 56,
        "label": "No-op"
      },
      {
        "id": 57,
        "label": "merge"
      },
      {
        "id": 58,
        "label": "let mut prg = ctx . accounts . exec_prog . to_account_info () ;"
      },
      {
        "id": 59,
        "label": "if statement"
      },
      {
        "id": 60,
        "label": "predicate"
      },
      {
        "id": 61,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 62,
        "label": "True body"
      },
      {
        "id": 63,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 64,
        "label": "ctx . accounts . buf . paths += 1 ;"
      },
      {
        "id": 65,
        "label": "False body"
      },
      {
        "id": 66,
        "label": "No-op"
      },
      {
        "id": 67,
        "label": "merge"
      },
      {
        "id": 68,
        "label": "DynBridge { a : ctx . accounts . sheet . to_account_info () , b : ctx . accounts . user . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . sheet . to_account_info () , b : ctx . accounts . user . to_account_info () , }) , (seed ^ 0xA5A5) . to_le_bytes () . to_vec () , false ,) ? ;"
      },
      {
        "id": 69,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 40,
        "to": 42,
        "label": "for"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "predicate"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "true"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 43,
        "to": 55,
        "label": "false"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "predicate"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "true"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 59,
        "to": 65,
        "label": "false"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      }
    ]
  },
  {
    "name": "ex_c",
    "nodes": [
      {
        "id": 70,
        "label": "Entry"
      },
      {
        "id": 71,
        "label": "if statement"
      },
      {
        "id": 72,
        "label": "predicate"
      },
      {
        "id": 73,
        "label": "tag >= 5"
      },
      {
        "id": 74,
        "label": "True body"
      },
      {
        "id": 75,
        "label": "if statement"
      },
      {
        "id": 76,
        "label": "predicate"
      },
      {
        "id": 77,
        "label": "tag <= 100"
      },
      {
        "id": 78,
        "label": "True body"
      },
      {
        "id": 79,
        "label": "ctx . accounts . log . range += 1 ;"
      },
      {
        "id": 80,
        "label": "False body"
      },
      {
        "id": 81,
        "label": "No-op"
      },
      {
        "id": 82,
        "label": "merge"
      },
      {
        "id": 83,
        "label": "False body"
      },
      {
        "id": 84,
        "label": "No-op"
      },
      {
        "id": 85,
        "label": "merge"
      },
      {
        "id": 86,
        "label": "let mut prg = ctx . accounts . notifier . to_account_info () ;"
      },
      {
        "id": 87,
        "label": "if statement"
      },
      {
        "id": 88,
        "label": "predicate"
      },
      {
        "id": 89,
        "label": "ctx . remaining_accounts . len () > 0"
      },
      {
        "id": 90,
        "label": "True body"
      },
      {
        "id": 91,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 92,
        "label": "ctx . accounts . log . routes += 1 ;"
      },
      {
        "id": 93,
        "label": "False body"
      },
      {
        "id": 94,
        "label": "No-op"
      },
      {
        "id": 95,
        "label": "merge"
      },
      {
        "id": 96,
        "label": "DynBridge { a : ctx . accounts . page . to_account_info () , b : ctx . accounts . actor . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . page . to_account_info () , b : ctx . accounts . actor . to_account_info () , }) , tag . to_le_bytes () . to_vec () , true ,) ? ;"
      },
      {
        "id": 97,
        "label": "if statement"
      },
      {
        "id": 98,
        "label": "predicate"
      },
      {
        "id": 99,
        "label": "tag % 2 == 0"
      },
      {
        "id": 100,
        "label": "True body"
      },
      {
        "id": 101,
        "label": "ctx . accounts . log . evens += 1 ;"
      },
      {
        "id": 102,
        "label": "False body"
      },
      {
        "id": 103,
        "label": "No-op"
      },
      {
        "id": 104,
        "label": "merge"
      },
      {
        "id": 105,
        "label": "Loop Start"
      },
      {
        "id": 106,
        "label": "ctx . accounts . log . bump = ctx . accounts . log . bump . wrapping_add (2) ;"
      },
      {
        "id": 107,
        "label": "Loop End"
      },
      {
        "id": 108,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "predicate"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 71,
        "to": 74,
        "label": "true"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "predicate"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 75,
        "to": 78,
        "label": "true"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 75,
        "to": 80,
        "label": "false"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 79,
        "to": 82,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 71,
        "to": 83,
        "label": "false"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 82,
        "to": 85,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "predicate"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 87,
        "to": 90,
        "label": "true"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 87,
        "to": 93,
        "label": "false"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 92,
        "to": 95,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "predicate"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 97,
        "to": 100,
        "label": "true"
      },
      {
        "from": 100,
        "to": 101,
        "label": "next"
      },
      {
        "from": 97,
        "to": 102,
        "label": "false"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 101,
        "to": 104,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 105,
        "to": 107,
        "label": "for"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      }
    ]
  }
]