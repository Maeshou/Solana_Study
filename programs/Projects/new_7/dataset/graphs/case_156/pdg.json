[
  {
    "name": "ex_a",
    "inputs": [
      "ctx: Context < ExA >",
      "n: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if n % 2 == 0 { ctx . accounts . state . evens += 1 ; }"
      },
      {
        "id": 2,
        "label": "ctx . accounts . state . evens += 1 ;"
      },
      {
        "id": 3,
        "label": "if n > 10 { if n % 3 == 0 { ctx . accounts . state . marks += 1 ; } }"
      },
      {
        "id": 4,
        "label": "if n % 3 == 0 { ctx . accounts . state . marks += 1 ; }"
      },
      {
        "id": 5,
        "label": "ctx . accounts . state . marks += 1 ;"
      },
      {
        "id": 6,
        "label": "let mut prg = ctx . accounts . router . to_account_info () ;"
      },
      {
        "id": 7,
        "label": "if ctx . remaining_accounts . len () > 0 { prg = ctx . remaining_accounts [0] . clone () ; ctx . accounts . state . switch += 1 ; }"
      },
      {
        "id": 8,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . state . switch += 1 ;"
      },
      {
        "id": 10,
        "label": "DynBridge { a : ctx . accounts . acc_a . to_account_info () , b : ctx . accounts . acc_b . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . acc_a . to_account_info () , b : ctx . accounts . acc_b . to_account_info () , }) , n . to_le_bytes () . to_vec () , true ,) ? ;"
      },
      {
        "id": 11,
        "label": "for _ in 0 .. (n % 3 + 1) { ctx . accounts . state . tick = ctx . accounts . state . tick . wrapping_add (1) ; }"
      },
      {
        "id": 12,
        "label": "ctx . accounts . state . tick = ctx . accounts . state . tick . wrapping_add (1) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: prg"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: prg"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: prg"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: prg"
      }
    ]
  },
  {
    "name": "ex_b",
    "inputs": [
      "ctx: Context < ExB >",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "for _ in 0 .. (seed % 4) { ctx . accounts . buf . mix ^= Clock :: get () ? . slot ; }"
      },
      {
        "id": 16,
        "label": "ctx . accounts . buf . mix ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 17,
        "label": "if seed > 0 { if seed & 1 == 1 { ctx . accounts . buf . odds += 1 ; } }"
      },
      {
        "id": 18,
        "label": "if seed & 1 == 1 { ctx . accounts . buf . odds += 1 ; }"
      },
      {
        "id": 19,
        "label": "ctx . accounts . buf . odds += 1 ;"
      },
      {
        "id": 20,
        "label": "let mut prg = ctx . accounts . exec_prog . to_account_info () ;"
      },
      {
        "id": 21,
        "label": "if ctx . remaining_accounts . len () > 0 { prg = ctx . remaining_accounts [0] . clone () ; ctx . accounts . buf . paths += 1 ; }"
      },
      {
        "id": 22,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . buf . paths += 1 ;"
      },
      {
        "id": 24,
        "label": "DynBridge { a : ctx . accounts . sheet . to_account_info () , b : ctx . accounts . user . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . sheet . to_account_info () , b : ctx . accounts . user . to_account_info () , }) , (seed ^ 0xA5A5) . to_le_bytes () . to_vec () , false ,) ? ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 20,
        "label": "def: prg"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: prg"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: prg"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: prg"
      }
    ]
  },
  {
    "name": "ex_c",
    "inputs": [
      "ctx: Context < ExC >",
      "tag: u64"
    ],
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "if tag >= 5 { if tag <= 100 { ctx . accounts . log . range += 1 ; } }"
      },
      {
        "id": 28,
        "label": "if tag <= 100 { ctx . accounts . log . range += 1 ; }"
      },
      {
        "id": 29,
        "label": "ctx . accounts . log . range += 1 ;"
      },
      {
        "id": 30,
        "label": "let mut prg = ctx . accounts . notifier . to_account_info () ;"
      },
      {
        "id": 31,
        "label": "if ctx . remaining_accounts . len () > 0 { prg = ctx . remaining_accounts [0] . clone () ; ctx . accounts . log . routes += 1 ; }"
      },
      {
        "id": 32,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 33,
        "label": "ctx . accounts . log . routes += 1 ;"
      },
      {
        "id": 34,
        "label": "DynBridge { a : ctx . accounts . page . to_account_info () , b : ctx . accounts . actor . to_account_info () , } . send (CpiContext :: new (prg . clone () , DynBridge { a : ctx . accounts . page . to_account_info () , b : ctx . accounts . actor . to_account_info () , }) , tag . to_le_bytes () . to_vec () , true ,) ? ;"
      },
      {
        "id": 35,
        "label": "if tag % 2 == 0 { ctx . accounts . log . evens += 1 ; }"
      },
      {
        "id": 36,
        "label": "ctx . accounts . log . evens += 1 ;"
      },
      {
        "id": 37,
        "label": "for _ in 0 .. (tag % 2 + 1) { ctx . accounts . log . bump = ctx . accounts . log . bump . wrapping_add (2) ; }"
      },
      {
        "id": 38,
        "label": "ctx . accounts . log . bump = ctx . accounts . log . bump . wrapping_add (2) ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 30,
        "to": 30,
        "label": "def: prg"
      },
      {
        "from": 30,
        "to": 31,
        "label": "data_dep: prg"
      },
      {
        "from": 30,
        "to": 32,
        "label": "data_dep: prg"
      },
      {
        "from": 30,
        "to": 34,
        "label": "data_dep: prg"
      }
    ]
  }
]