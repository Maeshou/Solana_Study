[
  {
    "name": "run",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let fixed_ix = Instruction { program_id : SCOREBOARD_ID_A , accounts : vec ! [AccountMeta :: new (ctx . accounts . slot_counter . key () , false) , AccountMeta :: new_readonly (ctx . accounts . player . key () , false) ,] , data : stage . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 2,
        "label": "invoke (& fixed_ix , & [ctx . accounts . scoreboard_marker . to_account_info () , ctx . accounts . slot_counter . to_account_info () , ctx . accounts . player . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 3,
        "label": "let mut target_program = ctx . accounts . report_hint . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "! ctx . remaining_accounts . is_empty ()"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "target_program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 9,
        "label": "ctx . accounts . memo . routes = ctx . accounts . memo . routes . saturating_add (1) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let dynamic_ix = Instruction { program_id : * target_program . key , accounts : vec ! [AccountMeta :: new (ctx . accounts . report_board . key () , false) , AccountMeta :: new_readonly (ctx . accounts . player . key () , false) ,] , data : amount . to_le_bytes () . to_vec () , } ;"
      },
      {
        "id": 14,
        "label": "invoke (& dynamic_ix , & [target_program , ctx . accounts . report_board . to_account_info () , ctx . accounts . player . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 15,
        "label": "let t = Transfer { from : ctx . accounts . treasury . to_account_info () , to : ctx . accounts . recipient_token . to_account_info () , authority : ctx . accounts . treasury_authority . to_account_info () , } ;"
      },
      {
        "id": 16,
        "label": "let tctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , t) ;"
      },
      {
        "id": 17,
        "label": "token :: transfer (tctx , amount) ? ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 4,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  }
]