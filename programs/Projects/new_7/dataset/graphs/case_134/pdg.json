[
  {
    "name": "merge",
    "inputs": [
      "ctx: Context < Merge >",
      "shard: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . session ;"
      },
      {
        "id": 2,
        "label": "let mut prg = ctx . accounts . helper_prog . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "if shard % 5 == 0 { s . combo += 2 ; s . notes . push (Clock :: get () ? . slot as u32) ; }"
      },
      {
        "id": 4,
        "label": "s . combo += 2 ;"
      },
      {
        "id": 5,
        "label": "s . notes . push (Clock :: get () ? . slot as u32) ;"
      },
      {
        "id": 6,
        "label": "for _ in 0 .. (shard % 3) { s . spread ^= shard as u64 ; s . rounds += 1 ; }"
      },
      {
        "id": 7,
        "label": "s . spread ^= shard as u64 ;"
      },
      {
        "id": 8,
        "label": "s . rounds += 1 ;"
      },
      {
        "id": 9,
        "label": "if ctx . remaining_accounts . len () > 0 { prg = ctx . remaining_accounts [0] . clone () ; s . switches += 1 ; }"
      },
      {
        "id": 10,
        "label": "prg = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "s . switches += 1 ;"
      },
      {
        "id": 12,
        "label": "let br = RuneBridge { depot : ctx . accounts . depot . to_account_info () , sink : ctx . accounts . sink . to_account_info () } ;"
      },
      {
        "id": 13,
        "label": "let cx = br . as_cpi (prg . clone ()) ;"
      },
      {
        "id": 14,
        "label": "br . ship (cx , shard . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: prg"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 9,
        "label": "data_dep: prg"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: prg"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: br"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: cx"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: prg"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: br"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cx"
      }
    ]
  }
]