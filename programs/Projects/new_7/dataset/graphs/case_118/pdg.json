[
  {
    "name": "trade",
    "inputs": [
      "ctx: Context < Trade >",
      "price: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "m . rounds += 1 ;"
      },
      {
        "id": 3,
        "label": "let mut program = ctx . accounts . router_default . to_account_info () ;"
      },
      {
        "id": 4,
        "label": "if ctx . remaining_accounts . len () > 0 { m . path_a += price ; program = ctx . remaining_accounts [0] . clone () ; } else { m . path_b += price ; }"
      },
      {
        "id": 5,
        "label": "m . path_a += price ;"
      },
      {
        "id": 6,
        "label": "program = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 7,
        "label": "m . path_b += price ;"
      },
      {
        "id": 8,
        "label": "let br = MarketBridge { base : ctx . accounts . base_pool . to_account_info () , vault : ctx . accounts . settlement_vault . to_account_info () , } ;"
      },
      {
        "id": 9,
        "label": "let step = (price / 4) + 5 ;"
      },
      {
        "id": 10,
        "label": "let mut p = price ;"
      },
      {
        "id": 11,
        "label": "while p > 0 { let part = if p > step { step } else { p } ; let cx = br . as_cpi (program . clone ()) ; br . fire (cx , part + m . rounds) ? ; p -= part ; }"
      },
      {
        "id": 12,
        "label": "let part = if p > step { step } else { p } ;"
      },
      {
        "id": 13,
        "label": "step"
      },
      {
        "id": 14,
        "label": "p"
      },
      {
        "id": 15,
        "label": "let cx = br . as_cpi (program . clone ()) ;"
      },
      {
        "id": 16,
        "label": "br . fire (cx , part + m . rounds) ? ;"
      },
      {
        "id": 17,
        "label": "p -= part ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: m"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: m"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: m"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: m"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: program"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: br"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: step"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: p"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: step"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: step"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 11,
        "label": "data_dep: program"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: br"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: m"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: part"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: step"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: step"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: p"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: step"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: cx"
      },
      {
        "from": 8,
        "to": 15,
        "label": "data_dep: br"
      },
      {
        "from": 3,
        "to": 15,
        "label": "data_dep: program"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: br"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: cx"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: part"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: m"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: part"
      }
    ]
  }
]