[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let bridge_state = & mut ctx . accounts . bridge_state ;"
      },
      {
        "id": 2,
        "label": "bridge_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "bridge_state . metric = 77 ;"
      },
      {
        "id": 4,
        "label": "bridge_state . route_a = Pubkey :: new_unique () ;"
      },
      {
        "id": 5,
        "label": "bridge_state . route_b = Pubkey :: new_unique () ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "set_routes",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let bridge_state = & mut ctx . accounts . bridge_state ;"
      },
      {
        "id": 9,
        "label": "require_keys_eq ! (bridge_state . admin , ctx . accounts . admin . key () , BridgeError :: AdminOnly) ;"
      },
      {
        "id": 10,
        "label": "bridge_state . route_a = a ;"
      },
      {
        "id": 11,
        "label": "bridge_state . route_b = b ;"
      },
      {
        "id": 12,
        "label": "bridge_state . metric = bridge_state . metric . wrapping_add (5) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "pipe",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let bridge_state = & mut ctx . accounts . bridge_state ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "amount == 0"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "bridge_state . metric = bridge_state . metric . rotate_left (1) ;"
      },
      {
        "id": 21,
        "label": "let mut bump : u8 = 1 ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "bridge_state . metric = bridge_state . metric . wrapping_add (bump as u64) ;"
      },
      {
        "id": 24,
        "label": "bump = bump . saturating_add (1) ;"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "return Ok (()) ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "let ix_a = Instruction { program_id : bridge_state . route_a , accounts : vec ! [AccountMeta :: new (ctx . accounts . buffer . key () , false) , AccountMeta :: new (ctx . accounts . pool . key () , false) , AccountMeta :: new_readonly (ctx . accounts . admin . key () , true) ,] , data : { let mut d = vec ! [1] ; d . extend_from_slice (& (amount / 2) . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 31,
        "label": "let prog_a = ctx . remaining_accounts . get (0) . ok_or (BridgeError :: RouteAMissing) ? ;"
      },
      {
        "id": 32,
        "label": "invoke (& ix_a , & [prog_a . clone () , ctx . accounts . buffer . to_account_info () , ctx . accounts . pool . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 33,
        "label": "let rest = amount - (amount / 2) ;"
      },
      {
        "id": 34,
        "label": "let ix_b = Instruction { program_id : bridge_state . route_b , accounts : vec ! [AccountMeta :: new (ctx . accounts . pool . key () , false) , AccountMeta :: new (ctx . accounts . receiver . key () , false) , AccountMeta :: new_readonly (ctx . accounts . admin . key () , true) ,] , data : { let mut d = vec ! [2] ; d . extend_from_slice (& rest . to_le_bytes ()) ; d } , } ;"
      },
      {
        "id": 35,
        "label": "let prog_b = ctx . remaining_accounts . get (1) . ok_or (BridgeError :: RouteBMissing) ? ;"
      },
      {
        "id": 36,
        "label": "invoke (& ix_b , & [prog_b . clone () , ctx . accounts . pool . to_account_info () , ctx . accounts . receiver . to_account_info () , ctx . accounts . admin . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 37,
        "label": "bridge_state . metric = bridge_state . metric . wrapping_add (amount) . rotate_right (2) ;"
      },
      {
        "id": 38,
        "label": "let mut tail : u8 = 1 ;"
      },
      {
        "id": 39,
        "label": "Loop Start"
      },
      {
        "id": 40,
        "label": "bridge_state . metric = bridge_state . metric . wrapping_add (7) ;"
      },
      {
        "id": 41,
        "label": "tail = tail . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "Loop End"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "while"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 16,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "while"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]