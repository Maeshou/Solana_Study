[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . cap_bps = if cap_bps > 2000 { 2000 } else { cap_bps } ;"
      },
      {
        "id": 4,
        "label": "s . alt = initial_alt ;"
      },
      {
        "id": 5,
        "label": "s . pulse = 0 ;"
      },
      {
        "id": 6,
        "label": "s . load = 0 ;"
      },
      {
        "id": 7,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 8,
        "label": "Loop Start"
      },
      {
        "id": 9,
        "label": "s . pulse = s . pulse . saturating_add ((i as u32) + 1) ;"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "i % 2 == 0 && s . load < 1000"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "s . load = s . load . saturating_add (5) ;"
      },
      {
        "id": 15,
        "label": "False body"
      },
      {
        "id": 16,
        "label": "No-op"
      },
      {
        "id": 17,
        "label": "merge"
      },
      {
        "id": 18,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "false"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 8,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  },
  {
    "name": "switch_alt",
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 23,
        "label": "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;"
      },
      {
        "id": 24,
        "label": "s . alt = next ;"
      },
      {
        "id": 25,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "s . pulse > 0"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "s . pulse = s . pulse . saturating_sub (1) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "s . load = s . load . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Loop End"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 26,
        "to": 37,
        "label": "while"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  },
  {
    "name": "pay",
    "nodes": [
      {
        "id": 39,
        "label": "Entry"
      },
      {
        "id": 40,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 41,
        "label": "require ! (s . admin == ctx . accounts . admin . key () , Errs :: Admin) ;"
      },
      {
        "id": 42,
        "label": "let mut weight : u64 = 7 ;"
      },
      {
        "id": 43,
        "label": "let mut r = 0u8 ;"
      },
      {
        "id": 44,
        "label": "Loop Start"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "r % 2 == 0"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "weight = weight . saturating_add (2) ;"
      },
      {
        "id": 50,
        "label": "False body"
      },
      {
        "id": 51,
        "label": "weight = weight . saturating_add (1) ;"
      },
      {
        "id": 52,
        "label": "merge"
      },
      {
        "id": 53,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 54,
        "label": "Loop End"
      },
      {
        "id": 55,
        "label": "if statement"
      },
      {
        "id": 56,
        "label": "predicate"
      },
      {
        "id": 57,
        "label": "memo . len () > 0"
      },
      {
        "id": 58,
        "label": "True body"
      },
      {
        "id": 59,
        "label": "let b = memo . as_bytes () ;"
      },
      {
        "id": 60,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 61,
        "label": "let mut acc = 0u64 ;"
      },
      {
        "id": 62,
        "label": "Loop Start"
      },
      {
        "id": 63,
        "label": "acc = acc . saturating_add ((b [i] as u64) % 11 + 1) ;"
      },
      {
        "id": 64,
        "label": "if statement"
      },
      {
        "id": 65,
        "label": "predicate"
      },
      {
        "id": 66,
        "label": "i % 3 == 0 && s . load > 0"
      },
      {
        "id": 67,
        "label": "True body"
      },
      {
        "id": 68,
        "label": "s . load = s . load . saturating_sub (1) ;"
      },
      {
        "id": 69,
        "label": "False body"
      },
      {
        "id": 70,
        "label": "No-op"
      },
      {
        "id": 71,
        "label": "merge"
      },
      {
        "id": 72,
        "label": "i += 1 ;"
      },
      {
        "id": 73,
        "label": "Loop End"
      },
      {
        "id": 74,
        "label": "weight = weight . saturating_add (acc % 7) ;"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "No-op"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "let gross = base . saturating_mul (weight) ;"
      },
      {
        "id": 79,
        "label": "let fee = gross . saturating_mul (s . cap_bps as u64) / 10_000 ;"
      },
      {
        "id": 80,
        "label": "let mut pay = 0u64 ;"
      },
      {
        "id": 81,
        "label": "if statement"
      },
      {
        "id": 82,
        "label": "predicate"
      },
      {
        "id": 83,
        "label": "gross > fee"
      },
      {
        "id": 84,
        "label": "True body"
      },
      {
        "id": 85,
        "label": "pay = gross - fee ;"
      },
      {
        "id": 86,
        "label": "let mut boost = 0u64 ;"
      },
      {
        "id": 87,
        "label": "let mut t = 0u8 ;"
      },
      {
        "id": 88,
        "label": "Loop Start"
      },
      {
        "id": 89,
        "label": "boost = boost . saturating_add ((t as u64) + ((s . pulse % 9) as u64)) ;"
      },
      {
        "id": 90,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 91,
        "label": "Loop End"
      },
      {
        "id": 92,
        "label": "pay = pay . saturating_add (boost) ;"
      },
      {
        "id": 93,
        "label": "False body"
      },
      {
        "id": 94,
        "label": "let mut d = 0u8 ;"
      },
      {
        "id": 95,
        "label": "Loop Start"
      },
      {
        "id": 96,
        "label": "if statement"
      },
      {
        "id": 97,
        "label": "predicate"
      },
      {
        "id": 98,
        "label": "s . pulse > 0"
      },
      {
        "id": 99,
        "label": "True body"
      },
      {
        "id": 100,
        "label": "s . pulse = s . pulse . saturating_sub (1) ;"
      },
      {
        "id": 101,
        "label": "False body"
      },
      {
        "id": 102,
        "label": "No-op"
      },
      {
        "id": 103,
        "label": "merge"
      },
      {
        "id": 104,
        "label": "d = d . saturating_add (1) ;"
      },
      {
        "id": 105,
        "label": "Loop End"
      },
      {
        "id": 106,
        "label": "pay = 0 ;"
      },
      {
        "id": 107,
        "label": "merge"
      },
      {
        "id": 108,
        "label": "let ix = spl_token :: instruction :: transfer (s . alt , ctx . accounts . treasury . key () , ctx . accounts . recipient_ata . key () , ctx . accounts . admin . key () , & [] , pay ,) ? ;"
      },
      {
        "id": 109,
        "label": "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . recipient_ata . to_account_info () , ctx . accounts . admin . to_account_info () ,]) ? ;"
      },
      {
        "id": 110,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 45,
        "to": 50,
        "label": "false"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 44,
        "to": 54,
        "label": "while"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "predicate"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "true"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "predicate"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "true"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 64,
        "to": 69,
        "label": "false"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 62,
        "to": 73,
        "label": "while"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 55,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "predicate"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "true"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 88,
        "to": 91,
        "label": "while"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 81,
        "to": 93,
        "label": "false"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "predicate"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 96,
        "to": 99,
        "label": "true"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 96,
        "to": 101,
        "label": "false"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 100,
        "to": 103,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "next"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 95,
        "to": 105,
        "label": "while"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 92,
        "to": 107,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      }
    ]
  }
]