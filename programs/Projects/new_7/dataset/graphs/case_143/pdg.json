[
  {
    "name": "step",
    "inputs": [
      "ctx: Context < Step >",
      "amt: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . recipe ;"
      },
      {
        "id": 2,
        "label": "let mut store = ctx . accounts . store_prog . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "for _ in 0 .. (amt % 2 + 1) { r . meter = r . meter . wrapping_add (amt) ; }"
      },
      {
        "id": 4,
        "label": "r . meter = r . meter . wrapping_add (amt) ;"
      },
      {
        "id": 5,
        "label": "if r . meter & 1 == 0 { r . flags ^= Clock :: get () ? . slot ; }"
      },
      {
        "id": 6,
        "label": "r . flags ^= Clock :: get () ? . slot ;"
      },
      {
        "id": 7,
        "label": "for _ in 0 .. (amt % 3) { r . logs . push ((amt as u32 , (r . meter & 0xffff) as u32)) ; }"
      },
      {
        "id": 8,
        "label": "r . logs . push ((amt as u32 , (r . meter & 0xffff) as u32)) ;"
      },
      {
        "id": 9,
        "label": "if ctx . remaining_accounts . len () > 0 { store = ctx . remaining_accounts [0] . clone () ; r . paths += 1 ; }"
      },
      {
        "id": 10,
        "label": "store = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 11,
        "label": "r . paths += 1 ;"
      },
      {
        "id": 12,
        "label": "let br = StoreBridge { cabinet : ctx . accounts . cabinet . to_account_info () , author : ctx . accounts . author . to_account_info () } ;"
      },
      {
        "id": 13,
        "label": "let cx = br . as_cpi (store . clone ()) ;"
      },
      {
        "id": 14,
        "label": "br . save (cx , amt . to_le_bytes () . to_vec ()) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: r"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: store"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: r"
      },
      {
        "from": 2,
        "to": 9,
        "label": "data_dep: store"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: r"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: store"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: br"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: cx"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: br"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: store"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: br"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: cx"
      }
    ]
  }
]