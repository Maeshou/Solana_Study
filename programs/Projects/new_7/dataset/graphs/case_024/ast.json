[
  {
    "name": "spawn",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Spawn >",
      "base: u64"
    ],
    "attributes": [],
    "body": [
      "let b = & mut ctx . accounts . board ;",
      "b . master = ctx . accounts . master . key () ;",
      "b . base = base ;",
      "b . ok = 0 ;",
      "b . ng = 0 ;",
      "b . track = 0 ;",
      "let mut k = 0u8 ;",
      "while k < 5",
      "{",
      "b . track = b . track . saturating_add ((k as u32) + 1) ;",
      "k = k . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "claim",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Claim >",
      "weight: u8",
      "proof: String"
    ],
    "attributes": [],
    "body": [
      "let b = & mut ctx . accounts . board ;",
      "require ! (b . master == ctx . accounts . master . key () , Errs :: Master) ;",
      "if proof . len () > 8",
      "{",
      "let mut sum = 0u64 ;",
      "let bytes = proof . as_bytes () ;",
      "let mut i = 0usize ;",
      "while i < bytes . len ()",
      "{",
      "sum = sum . saturating_add ((bytes [i] as u64) % 13 + 1) ;",
      "if i % 5 == 0",
      "{",
      "b . ok = b . ok . saturating_add (1) ;",
      "} i += 1 ;",
      "} b . track = b . track . saturating_add ((sum % 11) as u32) ;",
      "} else",
      "{",
      "let mut r = 0u8 ;",
      "while r < 7",
      "{",
      "if b . ng < 1_000_000 { b . ng = b . ng . saturating_add (1) ;",
      "} if r % 2 == 0 && b . track > 0",
      "{",
      "b . track = b . track . saturating_sub (1) ;",
      "} r = r . saturating_add (1) ;",
      "}",
      "}",
      "let mut amt = b . base . saturating_mul (weight as u64) ;",
      "let mut lift = 0u64 ;",
      "let mut z = 0u8 ;",
      "while z < 6",
      "{",
      "lift = lift . saturating_add ((z as u64) + ((b . ok % 5) as u64)) ;",
      "z = z . saturating_add (1) ;",
      "}",
      "amt = amt . saturating_add (lift) ;",
      "let ix = spl_token :: instruction :: transfer (ctx . accounts . token_program . key () , ctx . accounts . treasury . key () , ctx . accounts . hunter_ata . key () , ctx . accounts . master . key () , & [] , amt ,) ? ;",
      "invoke (& ix , & [ctx . accounts . treasury . to_account_info () , ctx . accounts . hunter_ata . to_account_info () , ctx . accounts . master . to_account_info () ,] ,) ? ;",
      "Ok (())"
    ]
  },
  {
    "name": "Board",
    "node_type": "struct",
    "fields": [
      {
        "name": "master",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "base",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "ok",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "ng",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "track",
        "attribute": null,
        "field_type": "u32"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Spawn",
    "node_type": "struct",
    "fields": [
      {
        "name": "board",
        "attribute": "# [account (init , payer = master , space = 8 + 32 + 8 + 4 + 4 + 4)]",
        "field_type": "Account < 'info , Board >"
      },
      {
        "name": "master",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Claim",
    "node_type": "struct",
    "fields": [
      {
        "name": "board",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , Board >"
      },
      {
        "name": "master",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "treasury",
        "attribute": "# [doc = \" CHECK:\"] # [account (mut)]",
        "field_type": "UncheckedAccount < 'info >"
      },
      {
        "name": "hunter_ata",
        "attribute": "# [doc = \" CHECK:\"] # [account (mut)]",
        "field_type": "UncheckedAccount < 'info >"
      },
      {
        "name": "token_program",
        "attribute": "# [doc = \" CHECK:\"]",
        "field_type": "UncheckedAccount < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]