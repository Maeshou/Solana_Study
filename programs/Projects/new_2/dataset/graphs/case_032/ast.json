[
  {
    "name": "place_bid_raw",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < PlaceBidRaw >",
      "reserve_price: u64",
      "bid_amount: u64",
      "bid_count: u32"
    ],
    "attributes": [
      "# [doc = \" `auction_account` の owner チェックを全く行わず、  \"]",
      "# [doc = \" クライアント提供の値のみでバイト列を再構築して書き込む例\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . auction_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "let ts = Clock :: get () ? . unix_timestamp as u64 ;",
      "let mut buf = Vec :: new () ;",
      "buf . extend_from_slice (& reserve_price . to_le_bytes ()) ;",
      "buf . extend_from_slice (& bid_amount . to_le_bytes ()) ;",
      "buf . extend_from_slice (& ctx . accounts . bidder . key () . to_bytes ()) ;",
      "buf . extend_from_slice (& bid_count . to_le_bytes ()) ;",
      "buf . extend_from_slice (& ts . to_le_bytes ()) ;",
      "if data . len () < buf . len ()",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "data [.. buf . len ()] . copy_from_slice (& buf) ;",
      "msg ! (\"Auction raw updated: reserve={}, bid={} by={} (count={}, ts={})\" , reserve_price , bid_amount , ctx . accounts . bidder . key () , bid_count , ts) ;",
      "Ok (())"
    ]
  },
  {
    "name": "PlaceBidRaw",
    "node_type": "struct",
    "fields": [
      {
        "name": "auction_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "bidder",
        "attribute": "# [doc = \" 入札者の署名のみを検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]