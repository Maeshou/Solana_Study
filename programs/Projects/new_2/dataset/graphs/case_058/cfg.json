[
  {
    "name": "place_bid",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . auction_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "const MIN_LEN : usize = 8 + 8 + 32 + 4 ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "data . len () < MIN_LEN"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "return err ! (ErrorCode :: DataLengthTooShort) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "let (reserve_slice , rest1) = data . split_at_mut (8) ;"
      },
      {
        "id": 13,
        "label": "let (highest_slice , rest2) = rest1 . split_at_mut (8) ;"
      },
      {
        "id": 14,
        "label": "let (bidder_slice , rest3) = rest2 . split_at_mut (32) ;"
      },
      {
        "id": 15,
        "label": "let (count_slice , _) = rest3 . split_at_mut (4) ;"
      },
      {
        "id": 16,
        "label": "let reserve_price = u64 :: from_le_bytes (reserve_slice . try_into () . unwrap ()) ;"
      },
      {
        "id": 17,
        "label": "let mut highest_bid = u64 :: from_le_bytes (highest_slice . try_into () . unwrap ()) ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "bid_amount <= highest_bid || bid_amount < reserve_price"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "return err ! (ErrorCode :: BidTooLow) ;"
      },
      {
        "id": 23,
        "label": "False body"
      },
      {
        "id": 24,
        "label": "No-op"
      },
      {
        "id": 25,
        "label": "merge"
      },
      {
        "id": 26,
        "label": "highest_slice . copy_from_slice (& bid_amount . to_le_bytes ()) ;"
      },
      {
        "id": 27,
        "label": "bidder_slice . copy_from_slice (ctx . accounts . bidder . key () . as_ref ()) ;"
      },
      {
        "id": 28,
        "label": "let prev_count = u32 :: from_le_bytes (count_slice . try_into () . unwrap ()) ;"
      },
      {
        "id": 29,
        "label": "let new_count = prev_count . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "count_slice . copy_from_slice (& new_count . to_le_bytes ()) ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"Bid placed: {} bids {} lamports on auction {} (count={})\" , ctx . accounts . bidder . key () , bid_amount , acct . key () , new_count) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 18,
        "to": 23,
        "label": "false"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      }
    ]
  }
]