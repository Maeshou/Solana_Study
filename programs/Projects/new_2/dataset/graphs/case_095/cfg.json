[
  {
    "name": "submit_match_result",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . match_results_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let buf = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let mut cursor = Cursor :: new (vec ! [0u8 ; buf . len ()]) ;"
      },
      {
        "id": 4,
        "label": "cursor . write_all (winner . as_ref ()) . unwrap () ;"
      },
      {
        "id": 5,
        "label": "cursor . write_all (loser . as_ref ()) . unwrap () ;"
      },
      {
        "id": 6,
        "label": "cursor . write_u64 :: < LittleEndian > (reward) . unwrap () ;"
      },
      {
        "id": 7,
        "label": "cursor . write_u8 (1) . unwrap () ;"
      },
      {
        "id": 8,
        "label": "let now = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 9,
        "label": "cursor . write_u64 :: < LittleEndian > (now) . unwrap () ;"
      },
      {
        "id": 10,
        "label": "let pool = & mut ctx . accounts . reward_pool . to_account_info () ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "* * pool . lamports . borrow () < reward"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "return err ! (ErrorCode :: InsufficientFunds) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "* * pool . lamports . borrow_mut () -= reward ;"
      },
      {
        "id": 20,
        "label": "* * ctx . accounts . winner . to_account_info () . lamports . borrow_mut () += reward ;"
      },
      {
        "id": 21,
        "label": "let data = cursor . into_inner () ;"
      },
      {
        "id": 22,
        "label": "buf [.. data . len ()] . copy_from_slice (& data) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"Match {} settled: {}â†’{} lamports transferred to {} at {}\" , acct . key () , reward , reward , winner , now) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  }
]