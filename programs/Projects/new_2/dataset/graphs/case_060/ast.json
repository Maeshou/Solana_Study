[
  {
    "name": "claim_daily",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ClaimDaily >"
    ],
    "attributes": [
      "# [doc = \" デイリー報酬をクレームする  \"]",
      "# [doc = \" （`claim_reward_account` の owner チェックを一切行っていないため、  \"]",
      "# [doc = \"  攻撃者が他人の報酬アカウントを指定して毎日ボーナスを横取りできます）\"]"
    ],
    "body": [
      "let acct_info = & mut ctx . accounts . claim_reward_account . to_account_info () ;",
      "let mut data = acct_info . data . borrow_mut () ;",
      "if data . len () < 16",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "let (ts_slice , rest) = data . split_at_mut (8) ;",
      "let (amt_slice , _expand) = rest . split_at_mut (8) ;",
      "let now = Clock :: get () ? . unix_timestamp as u64 ;",
      "let last_ts = u64 :: from_le_bytes (ts_slice . try_into () . unwrap ()) ;",
      "if now < last_ts . saturating_add (86400)",
      "{",
      "return err ! (ErrorCode :: TooSoon) ;",
      "}",
      "ts_slice . copy_from_slice (& now . to_le_bytes ()) ;",
      "let bonus = u64 :: from_le_bytes (amt_slice . try_into () . unwrap ()) ;",
      "* * acct_info . lamports . borrow_mut () -= bonus ;",
      "* * ctx . accounts . user . to_account_info () . lamports . borrow_mut () += bonus ;",
      "msg ! (\"Daily bonus of {} lamports claimed by {} at {}\" , bonus , ctx . accounts . user . key () , now) ;",
      "Ok (())"
    ]
  },
  {
    "name": "ClaimDaily",
    "node_type": "struct",
    "fields": [
      {
        "name": "claim_reward_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証をまったく行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" クレーム実行者が署名していることのみ検証\"] # [account (mut)]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]