[
  {
    "name": "unstake_nft",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let stake_acc = & mut ctx . accounts . unstake_nft_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let recipient = & mut ctx . accounts . user_account . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "let bal = * * stake_acc . lamports . borrow () ;"
      },
      {
        "id": 4,
        "label": "* * stake_acc . lamports . borrow_mut () = 0 ;"
      },
      {
        "id": 5,
        "label": "* * recipient . lamports . borrow_mut () = recipient . lamports () . checked_add (bal) . unwrap_or (recipient . lamports ()) ;"
      },
      {
        "id": 6,
        "label": "let data = & mut stake_acc . data . borrow_mut () ;"
      },
      {
        "id": 7,
        "label": "if statement"
      },
      {
        "id": 8,
        "label": "predicate"
      },
      {
        "id": 9,
        "label": "data . is_empty ()"
      },
      {
        "id": 10,
        "label": "True body"
      },
      {
        "id": 11,
        "label": "return err ! (ErrorCode :: NoData) ;"
      },
      {
        "id": 12,
        "label": "False body"
      },
      {
        "id": 13,
        "label": "No-op"
      },
      {
        "id": 14,
        "label": "merge"
      },
      {
        "id": 15,
        "label": "let (flag_slice , rest) = data . split_at_mut (1) ;"
      },
      {
        "id": 16,
        "label": "flag_slice [0] = 0 ;"
      },
      {
        "id": 17,
        "label": "rest . fill (0) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Unstaked NFT: returned {} lamports to {}\" , bal , ctx . accounts . user . key ()) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "predicate"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "true"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 7,
        "to": 12,
        "label": "false"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  }
]