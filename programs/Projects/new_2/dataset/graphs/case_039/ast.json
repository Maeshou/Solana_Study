[
  {
    "name": "level_up",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < LevelUp >"
    ],
    "attributes": [
      "# [doc = \" NFTメタデータの先頭2バイトを「レベル」として扱い、1だけインクリメントする  \"]",
      "# [doc = \" （owner == program_id のチェックを一切行っていないため、任意のアカウントを操作可能）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . nft_meta . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "if data . len () < 2",
      "{",
      "return err ! (ErrorCode :: InsufficientData) ;",
      "}",
      "let mut iter = data . iter_mut () ;",
      "let lo_byte = iter . next () . unwrap () ;",
      "let hi_byte = iter . next () . unwrap () ;",
      "let mut level = u16 :: from_le_bytes ([* lo_byte , * hi_byte]) ;",
      "level = level . saturating_add (1) ;",
      "let [new_lo , new_hi] = level . to_le_bytes () ;",
      "* lo_byte = new_lo ;",
      "* hi_byte = new_hi ;",
      "msg ! (\"Leveled up NFT {} → new level {}\" , acct . key () , level) ;",
      "Ok (())"
    ]
  },
  {
    "name": "LevelUp",
    "node_type": "struct",
    "fields": [
      {
        "name": "nft_meta",
        "attribute": "# [doc = \" CHECK: ownerフィールドの確認を行っていない生のAccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "user",
        "attribute": "# [doc = \" 呼び出し元が署名者であることのみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]