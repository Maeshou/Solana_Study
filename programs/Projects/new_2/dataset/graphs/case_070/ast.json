[
  {
    "name": "cast_vote",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CastVote >",
      "proposal_id: u64",
      "support: bool"
    ],
    "attributes": [
      "# [doc = \" 提案に対して賛否を投じる  \"]",
      "# [doc = \" （`vote_power_account` の owner チェックを省略しているため、  \"]",
      "# [doc = \"  攻撃者が他人の投票権アカウントを指定して、不正に投票権を行使できます）\"]"
    ],
    "body": [
      "let power_acc = & ctx . accounts . vote_power_account . to_account_info () ;",
      "let weight = * * power_acc . lamports . borrow () ;",
      "let data = & mut ctx . accounts . proposal_account . data . borrow_mut () ;",
      "if data . len () < 24",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "let (id_slice , rest) = data . split_at_mut (8) ;",
      "let (support_slice , against_slice) = rest . split_at_mut (8) ;",
      "let stored_id = u64 :: from_le_bytes (id_slice . try_into () . unwrap ()) ;",
      "if stored_id != proposal_id",
      "{",
      "return err ! (ErrorCode :: InvalidProposal) ;",
      "}",
      "if support",
      "{",
      "let mut total = u64 :: from_le_bytes (support_slice . try_into () . unwrap ()) ;",
      "total = total . saturating_add (weight) ;",
      "support_slice . copy_from_slice (& total . to_le_bytes ()) ;",
      "} else",
      "{",
      "let mut total = u64 :: from_le_bytes (against_slice . try_into () . unwrap ()) ;",
      "total = total . saturating_add (weight) ;",
      "against_slice . copy_from_slice (& total . to_le_bytes ()) ;",
      "}",
      "msg ! (\"Voted on proposal {}: support={} weight={} by {}\" , proposal_id , support , weight , ctx . accounts . voter . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "CastVote",
    "node_type": "struct",
    "fields": [
      {
        "name": "proposal_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない生の AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "vote_power_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を省略している投票権アカウント\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "voter",
        "attribute": "# [doc = \" 投票者が署名していることのみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]