[
  {
    "name": "update_feed",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let feed_acc = & mut ctx . accounts . price_feed_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut feed_acc . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "const MIN_LEN : usize = 17 ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "data . len () < MIN_LEN"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "let (price_slice , rest1) = data . split_at_mut (8) ;"
      },
      {
        "id": 13,
        "label": "let (ts_slice , rest2) = rest1 . split_at_mut (8) ;"
      },
      {
        "id": 14,
        "label": "let vol_slice = & mut rest2 [0 .. 1] ;"
      },
      {
        "id": 15,
        "label": "price_slice . copy_from_slice (& new_price . to_le_bytes ()) ;"
      },
      {
        "id": 16,
        "label": "let now = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 17,
        "label": "ts_slice . copy_from_slice (& now . to_le_bytes ()) ;"
      },
      {
        "id": 18,
        "label": "vol_slice [0] = volatility ;"
      },
      {
        "id": 19,
        "label": "msg ! (\"Price feed {} updated: price={} at {} (volatility={})\" , feed_acc . key () , new_price , now , volatility) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  }
]