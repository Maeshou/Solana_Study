[
  {
    "name": "rent_nft",
    "inputs": [
      "ctx: Context < RentNft >",
      "owner_key: Pubkey",
      "start_slot: u64",
      "duration: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . rental_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let size = std :: mem :: size_of :: < RentalData > () ;"
      },
      {
        "id": 4,
        "label": "if data . len () < size { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 5,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 6,
        "label": "let mut rec = RentalData :: zeroed () ;"
      },
      {
        "id": 7,
        "label": "rec . owner = owner_key . to_bytes () ;"
      },
      {
        "id": 8,
        "label": "rec . renter = ctx . accounts . renter . key () . to_bytes () ;"
      },
      {
        "id": 9,
        "label": "rec . start_slot = start_slot ;"
      },
      {
        "id": 10,
        "label": "rec . duration = duration ;"
      },
      {
        "id": 11,
        "label": "let bytes = bytemuck :: bytes_of (& rec) ;"
      },
      {
        "id": 12,
        "label": "data [.. size] . copy_from_slice (bytes) ;"
      },
      {
        "id": 13,
        "label": "msg ! (\"Rental recorded: account={}, owner={}, renter={}, start_slot={}, duration={}\" , acct . key () , owner_key , ctx . accounts . renter . key () , start_slot , duration) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: acct"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: acct"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: size"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: data"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: size"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: rec"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: rec"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: rec"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: rec"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: rec"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: bytes"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: rec"
      },
      {
        "from": 2,
        "to": 12,
        "label": "data_dep: data"
      },
      {
        "from": 3,
        "to": 12,
        "label": "data_dep: size"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: bytes"
      }
    ]
  }
]