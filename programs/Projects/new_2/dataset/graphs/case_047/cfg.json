[
  {
    "name": "toggle_listing_active",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . listing_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "let Some (flag_byte) = data . first_mut ()"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "* flag_byte ^= 1 ;"
      },
      {
        "id": 8,
        "label": "False body"
      },
      {
        "id": 9,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 10,
        "label": "merge"
      },
      {
        "id": 11,
        "label": "let now_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 12,
        "label": "let slot_bytes = now_slot . to_le_bytes () ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "data . len () >= 1 + slot_bytes . len ()"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "let tail = & mut data [data . len () - slot_bytes . len () ..] ;"
      },
      {
        "id": 18,
        "label": "tail . copy_from_slice (& slot_bytes) ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "msg ! (\"Listing {} active flag toggled, new flag={} (updated at slot {})\" , acct . key () , data . first () . unwrap () , now_slot) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 3,
        "to": 8,
        "label": "false"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  }
]