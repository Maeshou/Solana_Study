[
  {
    "name": "approve_transaction",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . multisig_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let n = data [0] as usize ;"
      },
      {
        "id": 4,
        "label": "let list_start = 1 ;"
      },
      {
        "id": 5,
        "label": "let list_end = list_start + 32 * n ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "data . len () < list_end + 2 * (tx_index as usize + 1)"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "No-op"
      },
      {
        "id": 13,
        "label": "merge"
      },
      {
        "id": 14,
        "label": "let mut idx = None ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "let off = list_start + i * 32 ;"
      },
      {
        "id": 17,
        "label": "let pk = Pubkey :: new (& data [off .. off + 32]) ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "pk == approver"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "idx = Some (i) ;"
      },
      {
        "id": 23,
        "label": "break ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "Loop End"
      },
      {
        "id": 28,
        "label": "let approver_idx = idx . ok_or (ErrorCode :: InvalidApprover) ? ;"
      },
      {
        "id": 29,
        "label": "let mask_off = list_end + 2 * (tx_index as usize) ;"
      },
      {
        "id": 30,
        "label": "let mask_bytes = & mut data [mask_off .. mask_off + 2] ;"
      },
      {
        "id": 31,
        "label": "let mut mask = u16 :: from_le_bytes ([mask_bytes [0] , mask_bytes [1]]) ;"
      },
      {
        "id": 32,
        "label": "mask |= 1 << approver_idx ;"
      },
      {
        "id": 33,
        "label": "mask_bytes . copy_from_slice (& mask . to_le_bytes ()) ;"
      },
      {
        "id": 34,
        "label": "msg ! (\"Approver {} (idx {}) approved tx {} on multisig {} (mask=0x{:04x})\" , approver , approver_idx , tx_index , acct . key () , mask ,) ;"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 6,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 18,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 15,
        "to": 27,
        "label": "for"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]