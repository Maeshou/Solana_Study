[
  {
    "name": "extend_rental",
    "inputs": [
      "ctx: Context < ExtendRental >",
      "extra_secs: u64",
      "client_time: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let data = & mut ctx . accounts . rental_account . data . borrow_mut () ;"
      },
      {
        "id": 2,
        "label": "if data . len () < std :: mem :: size_of :: < RentalHeader > () { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 3,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 4,
        "label": "let header : & mut RentalHeader = bytemuck :: from_bytes_mut (& mut data [.. std :: mem :: size_of :: < RentalHeader > ()]) ;"
      },
      {
        "id": 5,
        "label": "if client_time < header . expires { return err ! (ErrorCode :: NotYetExpired) ; }"
      },
      {
        "id": 6,
        "label": "return err ! (ErrorCode :: NotYetExpired) ;"
      },
      {
        "id": 7,
        "label": "header . expires = header . expires . wrapping_add (extra_secs) ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"Rental {} extended: old={} new={} (by {}s, client_time={})\" , ctx . accounts . rental_account . key () , header . expires . wrapping_sub (extra_secs) , header . expires , extra_secs , client_time) ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: data"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: data"
      }
    ]
  }
]