[
  {
    "name": "update_collection",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < UpdateCollection >",
      "new_collection: Pubkey",
      "new_update_authority: Pubkey"
    ],
    "attributes": [
      "# [doc = \" NFT メタデータのコレクション情報を書き換える  \"]",
      "# [doc = \" （`metadata_account` の owner チェックをまったく行っていないため、  \"]",
      "# [doc = \"  攻撃者が任意のアカウントを指定して、  \"]",
      "# [doc = \"  他人の NFT を好きなコレクションに無断で再アサインできます）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . metadata_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "const HEADER_LEN : usize = 32 + 32 + 32 ;",
      "if data . len () < HEADER_LEN",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "let collection_slice = & mut data [64 .. 96] ;",
      "collection_slice . copy_from_slice (& new_collection . to_bytes ()) ;",
      "let authority_slice = & mut data [32 .. 64] ;",
      "authority_slice . copy_from_slice (& new_update_authority . to_bytes ()) ;",
      "msg ! (\"Metadata {} reassigned to collection {} with authority {}\" , acct . key () , new_collection , new_update_authority) ;",
      "Ok (())"
    ]
  },
  {
    "name": "UpdateCollection",
    "node_type": "struct",
    "fields": [
      {
        "name": "metadata_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない生の AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signer",
        "attribute": "# [doc = \" 呼び出し元の署名のみを検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]