[
  {
    "name": "recover_stamina",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acc = & mut ctx . accounts . stamina_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let buf = & mut acc . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "buf . len () < 12"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 8,
        "label": "False body"
      },
      {
        "id": 9,
        "label": "No-op"
      },
      {
        "id": 10,
        "label": "merge"
      },
      {
        "id": 11,
        "label": "let cur = u16 :: from_le_bytes ([buf [0] , buf [1]]) ;"
      },
      {
        "id": 12,
        "label": "let max = u16 :: from_le_bytes ([buf [2] , buf [3]]) ;"
      },
      {
        "id": 13,
        "label": "let recovered = cur . saturating_add (amount) . min (max) ;"
      },
      {
        "id": 14,
        "label": "let recovered_bytes = recovered . to_le_bytes () ;"
      },
      {
        "id": 15,
        "label": "buf [0] = recovered_bytes [0] ;"
      },
      {
        "id": 16,
        "label": "buf [1] = recovered_bytes [1] ;"
      },
      {
        "id": 17,
        "label": "let now_ts = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 18,
        "label": "let now_bytes = now_ts . to_le_bytes () ;"
      },
      {
        "id": 19,
        "label": "let start = buf . len () - 8 ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "buf [start + i] = now_bytes [i] ;"
      },
      {
        "id": 22,
        "label": "Loop End"
      },
      {
        "id": 23,
        "label": "msg ! (\"Stamina on {}: recovered {} â†’ {} (capped at max {})\" , acc . key () , cur , recovered , max) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 3,
        "to": 8,
        "label": "false"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 22,
        "label": "for"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  }
]