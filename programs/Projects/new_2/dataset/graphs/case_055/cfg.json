[
  {
    "name": "create_listing",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . listing_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let mut data = acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let listing = ListingData { price , seller : ctx . accounts . seller . key () , expires : Clock :: get () ? . unix_timestamp + duration_secs , } ;"
      },
      {
        "id": 4,
        "label": "let buf = serialize (& listing) . map_err (| _ | ErrorCode :: SerializationError) ? ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "data . len () < buf . len ()"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "data [.. buf . len ()] . copy_from_slice (& buf) ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"Created listing {} → price={}, expires={} by {}\" , acct . key () , price , listing . expires , listing . seller) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_listing",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let acct = & mut ctx . accounts . listing_account . to_account_info () ;"
      },
      {
        "id": 18,
        "label": "let mut data = acct . data . borrow_mut () ;"
      },
      {
        "id": 19,
        "label": "let mut listing : ListingData = deserialize (& data [..]) . map_err (| _ | ErrorCode :: DeserializationError) ? ;"
      },
      {
        "id": 20,
        "label": "if statement"
      },
      {
        "id": 21,
        "label": "predicate"
      },
      {
        "id": 22,
        "label": "let Some (p) = new_price"
      },
      {
        "id": 23,
        "label": "True body"
      },
      {
        "id": 24,
        "label": "listing . price = p ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "No-op"
      },
      {
        "id": 27,
        "label": "merge"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "let Some (s) = extend_secs"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "listing . expires = listing . expires . saturating_add (s) ;"
      },
      {
        "id": 33,
        "label": "False body"
      },
      {
        "id": 34,
        "label": "No-op"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "let buf = serialize (& listing) . map_err (| _ | ErrorCode :: SerializationError) ? ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "data . len () < buf . len ()"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 42,
        "label": "False body"
      },
      {
        "id": 43,
        "label": "No-op"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "data [.. buf . len ()] . copy_from_slice (& buf) ;"
      },
      {
        "id": 46,
        "label": "msg ! (\"Updated listing {} → price={}, expires={}\" , acct . key () , listing . price , listing . expires) ;"
      },
      {
        "id": 47,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "predicate"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "true"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 20,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 28,
        "to": 33,
        "label": "false"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 37,
        "to": 42,
        "label": "false"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      }
    ]
  },
  {
    "name": "cancel_listing",
    "nodes": [
      {
        "id": 48,
        "label": "Entry"
      },
      {
        "id": 49,
        "label": "let acct = & mut ctx . accounts . listing_account . to_account_info () ;"
      },
      {
        "id": 50,
        "label": "let mut data = acct . data . borrow_mut () ;"
      },
      {
        "id": 51,
        "label": "data . fill (0) ;"
      },
      {
        "id": 52,
        "label": "msg ! (\"Canceled listing {}\" , acct . key ()) ;"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]