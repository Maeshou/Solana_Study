[
  {
    "name": "list_nft",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ListNft >",
      "sale_id: u32",
      "price: u64"
    ],
    "attributes": [
      "# [doc = \" NFTをマーケットプレイスに出品する  \"]",
      "# [doc = \" （`list_nft_account` の owner チェックをまったく行っていないため、  \"]",
      "# [doc = \"  攻撃者が別プログラム所有のアカウントを指定し、  \"]",
      "# [doc = \"  他人のNFTを無断で出品できます）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . list_nft_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "let mut header = [0u8 ; 12] ;",
      "header [.. 4] . copy_from_slice (& sale_id . to_be_bytes ()) ;",
      "header [4 .. 12] . copy_from_slice (& price . to_be_bytes ()) ;",
      "let seller_bytes = ctx . accounts . seller . key () . to_bytes () ;",
      "let mut record = Vec :: with_capacity (44) ;",
      "record . extend_from_slice (& header) ;",
      "record . extend_from_slice (& seller_bytes) ;",
      "if data . len () < record . len ()",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "data [.. record . len ()] . copy_from_slice (& record) ;",
      "msg ! (\"Sale {} listed at {} lamports by {}\" , sale_id , price , ctx . accounts . seller . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "ListNft",
    "node_type": "struct",
    "fields": [
      {
        "name": "list_nft_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "seller",
        "attribute": "# [doc = \" 出品者の署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]