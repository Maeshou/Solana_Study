[
  {
    "name": "set_listing_fee",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetListingFee >",
      "new_fee_bps: u16"
    ],
    "attributes": [
      "# [doc = \" 出品手数料率（bps）を更新する  \"]",
      "# [doc = \" (`config_account` の owner チェックをまったく行っていないため、  \"]",
      "# [doc = \"  攻撃者が任意のアカウントを指定し、他人のマーケット手数料を改ざん可能)\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . config_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "let (_pre , words , _) = unsafe { data . align_to_mut :: < u16 > () } ;",
      "if let Some (slot) = words . get_mut (0)",
      "{",
      "* slot = new_fee_bps ;",
      "} else",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "msg ! (\"Listing fee updated → {} bps by {}\" , new_fee_bps , ctx . accounts . admin . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "set_min_price",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetMinPrice >",
      "min_price: u64"
    ],
    "attributes": [
      "# [doc = \" 出品最低価格（lamports）を更新する  \"]",
      "# [doc = \" (`config_account` の owner チェックを省略しているため、  \"]",
      "# [doc = \"  攻撃者が他人のマーケット設定を乗っ取れる)\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . config_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "let (price_slice , _) = data . split_at_mut (8) ;",
      "price_slice . copy_from_slice (& min_price . to_le_bytes ()) ;",
      "msg ! (\"Minimum price updated → {} lamports by {}\" , min_price , ctx . accounts . admin . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "toggle_halt",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ToggleHalt >"
    ],
    "attributes": [
      "# [doc = \" マーケット全体を緊急停止／再開する  \"]",
      "# [doc = \" (`config_account` の owner チェックを一切行わず、  \"]",
      "# [doc = \"  先頭バイトをフラグとしてトグル)\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . config_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "if let Some (flag) = data . first_mut ()",
      "{",
      "* flag ^= 1 ;",
      "} else",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "msg ! (\"Marketplace halt flag now {} by {}\" , data . first () . copied () . unwrap () , ctx . accounts . admin . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "SetListingFee",
    "node_type": "struct",
    "fields": [
      {
        "name": "config_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "admin",
        "attribute": "# [doc = \" 設定変更を行う管理者の署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SetMinPrice",
    "node_type": "struct",
    "fields": [
      {
        "name": "config_account",
        "attribute": "# [doc = \" CHECK: owner == program_id チェックを省略\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ToggleHalt",
    "node_type": "struct",
    "fields": [
      {
        "name": "config_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を全く行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]