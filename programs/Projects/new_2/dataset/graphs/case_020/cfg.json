[
  {
    "name": "batch_transfer",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let reserve = & mut ctx . accounts . reserve . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let recipients = & ctx . remaining_accounts ;"
      },
      {
        "id": 3,
        "label": "let total : u64 = amounts . iter () . copied () . sum () ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "* * reserve . lamports . borrow () < total"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "return err ! (ErrorCode :: InsufficientFunds) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let amt = amounts . get (i) . copied () . ok_or (ErrorCode :: InvalidInput) ? ;"
      },
      {
        "id": 14,
        "label": "* * reserve . lamports . borrow_mut () -= amt ;"
      },
      {
        "id": 15,
        "label": "* * rcpt . lamports . borrow_mut () += amt ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "msg ! (\"Batch transferred total {} lamports\" , total) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 12,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  }
]