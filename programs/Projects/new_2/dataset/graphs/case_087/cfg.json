[
  {
    "name": "unlock_puzzle",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct_info = & mut ctx . accounts . puzzle_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct_info . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "data . len () < 17"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 8,
        "label": "False body"
      },
      {
        "id": 9,
        "label": "No-op"
      },
      {
        "id": 10,
        "label": "merge"
      },
      {
        "id": 11,
        "label": "let (count_slice , rest) = data . split_at_mut (1) ;"
      },
      {
        "id": 12,
        "label": "let unlocked_count = count_slice [0] as usize ;"
      },
      {
        "id": 13,
        "label": "let list_slice = & mut rest [.. unlocked_count] ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "idx == puzzle_index"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "return err ! (ErrorCode :: AlreadyUnlocked) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "let max_slots = 8 ;"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "unlocked_count < max_slots"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "rest [unlocked_count] = puzzle_index ;"
      },
      {
        "id": 30,
        "label": "count_slice [0] = (unlocked_count + 1) as u8 ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "return err ! (ErrorCode :: ListFull) ;"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "let ts_bytes = Clock :: get () ? . unix_timestamp . to_le_bytes () ;"
      },
      {
        "id": 35,
        "label": "let ts_offset = 1 + max_slots ;"
      },
      {
        "id": 36,
        "label": "data [ts_offset .. ts_offset + 8] . copy_from_slice (& ts_bytes) ;"
      },
      {
        "id": 37,
        "label": "* * ctx . accounts . reward_vault . to_account_info () . lamports . borrow_mut () = ctx . accounts . reward_vault . to_account_info () . lamports () . saturating_sub (reward_amount) ;"
      },
      {
        "id": 38,
        "label": "* * ctx . accounts . user . to_account_info () . lamports . borrow_mut () += reward_amount ;"
      },
      {
        "id": 39,
        "label": "msg ! (\"Puzzle {} unlocked (slot {}), total unlocked {}, rewarded {} lamports\" , puzzle_index , unlocked_count , unlocked_count + 1 , reward_amount) ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 3,
        "to": 8,
        "label": "false"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 14,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]