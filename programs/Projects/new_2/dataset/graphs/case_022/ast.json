[
  {
    "name": "toggle_feature",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ToggleFeature >",
      "feature_index: u8"
    ],
    "attributes": [
      "# [doc = \" feature_account のビットマスクから指定機能のフラグを反転する\"]",
      "# [doc = \" （Owner Check をまったく行っていないため、任意のアカウントで通ってしまう）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . feature_account . to_account_info () ;",
      "let mut data = acct . data . borrow_mut () ;",
      "if data . len () < 4",
      "{",
      "return err ! (ErrorCode :: DataTooSmall) ;",
      "}",
      "let mut mask_bytes = [0u8 ; 4] ;",
      "mask_bytes . copy_from_slice (& data [0 .. 4]) ;",
      "let mut mask = u32 :: from_le_bytes (mask_bytes) ;",
      "let idx = (feature_index . min (31)) as u32 ;",
      "mask ^= 1 << idx ;",
      "data [0 .. 4] . copy_from_slice (& mask . to_le_bytes ()) ;",
      "msg ! (\"Toggled feature {}: new mask = {:#034b}\" , feature_index , mask) ;",
      "Ok (())"
    ]
  },
  {
    "name": "ToggleFeature",
    "node_type": "struct",
    "fields": [
      {
        "name": "feature_account",
        "attribute": "# [doc = \" CHECK: owner フィールドの検証を一切行っていない生の AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signer",
        "attribute": "# [doc = \" 呼び出し元が署名していることのみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]