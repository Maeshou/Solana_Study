[
  {
    "name": "enhance_item",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let now = ctx . accounts . clock . unix_timestamp as u64 ;"
      },
      {
        "id": 2,
        "label": "let data = & mut ctx . accounts . item_account . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let min_len = std :: mem :: size_of :: < EnhanceRecord > () + 32 ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "data . len () < min_len"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "let (head , tail) = data . split_at_mut (std :: mem :: size_of :: < EnhanceRecord > ()) ;"
      },
      {
        "id": 13,
        "label": "let mut record : & mut EnhanceRecord = bytemuck :: from_bytes_mut (head) ;"
      },
      {
        "id": 14,
        "label": "record . level = record . level . saturating_add (inc) ;"
      },
      {
        "id": 15,
        "label": "record . enhancements = record . enhancements . saturating_add (inc) ;"
      },
      {
        "id": 16,
        "label": "record . timestamp = now ;"
      },
      {
        "id": 17,
        "label": "let user_pk = ctx . accounts . user . key () . to_bytes () ;"
      },
      {
        "id": 18,
        "label": "tail [.. 32] . copy_from_slice (& user_pk) ;"
      },
      {
        "id": 19,
        "label": "msg ! (\"Enhanced {}: level→{} (＋{}), total→{} at {} by {}\" , ctx . accounts . item_account . key () , record . level , inc , record . enhancements , now , ctx . accounts . user . key ()) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  }
]