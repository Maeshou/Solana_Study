[
  {
    "name": "cancel_rental",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut data = ctx . accounts . rental_account . data . borrow_mut () ;"
      },
      {
        "id": 2,
        "label": "let (head , tail) = data . split_at_mut (32) ;"
      },
      {
        "id": 3,
        "label": "let (expires_bytes , _rest) = tail . split_at_mut (8) ;"
      },
      {
        "id": 4,
        "label": "let lessee = Pubkey :: new (head) ;"
      },
      {
        "id": 5,
        "label": "let expiry = expires_bytes . try_into () . map (u64 :: from_le_bytes) . map_err (| _ | ErrorCode :: DataTooShort) ? ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "current_time < expiry"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "return err ! (ErrorCode :: NotYetExpired) ;"
      },
      {
        "id": 11,
        "label": "False body"
      },
      {
        "id": 12,
        "label": "No-op"
      },
      {
        "id": 13,
        "label": "merge"
      },
      {
        "id": 14,
        "label": "data . fill (0) ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"Rental {} canceled at {} (lessee was {})\" , ctx . accounts . rental_account . key () , current_time , lessee) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 6,
        "to": 11,
        "label": "false"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  }
]