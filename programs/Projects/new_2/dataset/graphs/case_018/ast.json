[
  {
    "name": "split_payment",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SplitPayment >"
    ],
    "attributes": [
      "# [doc = \" payment_account に入っている lamports を、remaining_accounts の先頭から writable な\"]",
      "# [doc = \" アカウント群にほぼ均等に分配する（Owner Check を一切していない！）\"]"
    ],
    "body": [
      "let payment = & mut ctx . accounts . payment_account . to_account_info () ;",
      "let total = * * payment . lamports . borrow () ;",
      "let recipients : Vec < & AccountInfo > = ctx . remaining_accounts . iter () . filter (| acct | acct . is_writable) . collect () ;",
      "let count = recipients . len () as u64 ;",
      "if count == 0",
      "{",
      "return err ! (ErrorCode :: NoRecipients) ;",
      "}",
      "let share = total / count ;",
      "for r in recipients . iter ()",
      "{",
      "* * r . lamports . borrow_mut () += share ;",
      "}",
      "* * payment . lamports . borrow_mut () = total - share * count ;",
      "msg ! (\"Distributed {} lamports to {} accounts\" , share , count) ;",
      "Ok (())"
    ]
  },
  {
    "name": "SplitPayment",
    "node_type": "struct",
    "fields": [
      {
        "name": "payment_account",
        "attribute": "# [doc = \" CHECK: owner フィールドの検証を行っていない生の AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "signer",
        "attribute": "# [doc = \" 呼び出し元の署名のみを検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]