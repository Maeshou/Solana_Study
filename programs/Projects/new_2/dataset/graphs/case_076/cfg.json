[
  {
    "name": "pay_with_nonce",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let sender = & mut ctx . accounts . payer . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let receiver = & mut ctx . accounts . recipient . to_account_info () ;"
      },
      {
        "id": 3,
        "label": "* * sender . lamports . borrow_mut () = sender . lamports () . checked_sub (payment_amount) . ok_or (ErrorCode :: InsufficientFunds) ? ;"
      },
      {
        "id": 4,
        "label": "* * receiver . lamports . borrow_mut () += payment_amount ;"
      },
      {
        "id": 5,
        "label": "let acct = & mut ctx . accounts . nonce_account . to_account_info () ;"
      },
      {
        "id": 6,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 7,
        "label": "if statement"
      },
      {
        "id": 8,
        "label": "predicate"
      },
      {
        "id": 9,
        "label": "data . len () < 8"
      },
      {
        "id": 10,
        "label": "True body"
      },
      {
        "id": 11,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 12,
        "label": "False body"
      },
      {
        "id": 13,
        "label": "No-op"
      },
      {
        "id": 14,
        "label": "merge"
      },
      {
        "id": 15,
        "label": "let (nonce_slice , _) = data . split_at_mut (8) ;"
      },
      {
        "id": 16,
        "label": "let last_nonce = u64 :: from_le_bytes (nonce_slice . try_into () . unwrap ()) ;"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "submitted_nonce <= last_nonce"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "return err ! (ErrorCode :: InvalidNonce) ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "nonce_slice . copy_from_slice (& submitted_nonce . to_le_bytes ()) ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"Payment {} lamports processed with nonce {} â†’ {}\" , payment_amount , last_nonce , submitted_nonce) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "predicate"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "true"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 7,
        "to": 12,
        "label": "false"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      }
    ]
  }
]