[
  {
    "name": "register_participant",
    "inputs": [
      "ctx: Context < RegisterParticipant >",
      "new_player: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . entry_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "const MAX_PARTICIPANTS : usize = 64 ;"
      },
      {
        "id": 4,
        "label": "let required = 1 + 32 * MAX_PARTICIPANTS ;"
      },
      {
        "id": 5,
        "label": "if data . len () < required { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 6,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 7,
        "label": "let (count_slice , list_slice) = data . split_at_mut (1) ;"
      },
      {
        "id": 8,
        "label": "let current = count_slice [0] as usize ;"
      },
      {
        "id": 9,
        "label": "if current >= MAX_PARTICIPANTS { return err ! (ErrorCode :: TournamentFull) ; }"
      },
      {
        "id": 10,
        "label": "return err ! (ErrorCode :: TournamentFull) ;"
      },
      {
        "id": 11,
        "label": "let offset = current * 32 ;"
      },
      {
        "id": 12,
        "label": "list_slice [offset .. offset + 32] . copy_from_slice (& new_player . to_bytes ()) ;"
      },
      {
        "id": 13,
        "label": "count_slice [0] = (current + 1) as u8 ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"Player {} registered in tournament (total {} participants)\" , new_player , current + 1) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: acct"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: acct"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: required"
      },
      {
        "from": 2,
        "to": 5,
        "label": "data_dep: data"
      },
      {
        "from": 4,
        "to": 5,
        "label": "data_dep: required"
      },
      {
        "from": 2,
        "to": 7,
        "label": "data_dep: data"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: current"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: current"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: offset"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: current"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: offset"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: offset"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: current"
      }
    ]
  },
  {
    "name": "deregister_participant",
    "inputs": [
      "ctx: Context < RegisterParticipant >",
      "remove_player: Pubkey"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let acct = & mut ctx . accounts . entry_account . to_account_info () ;"
      },
      {
        "id": 18,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 19,
        "label": "const MAX_PARTICIPANTS : usize = 64 ;"
      },
      {
        "id": 20,
        "label": "let required = 1 + 32 * MAX_PARTICIPANTS ;"
      },
      {
        "id": 21,
        "label": "if data . len () < required { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 22,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 23,
        "label": "let (count_slice , list_slice) = data . split_at_mut (1) ;"
      },
      {
        "id": 24,
        "label": "let mut current = count_slice [0] as usize ;"
      },
      {
        "id": 25,
        "label": "let mut found = false ;"
      },
      {
        "id": 26,
        "label": "for i in 0 .. current { let idx = i * 32 ; let pk = Pubkey :: new (& list_slice [idx .. idx + 32]) ; if pk == remove_player { found = true ; for j in i .. current - 1 { let src = (j + 1) * 32 ; let dst = j * 32 ; list_slice [dst .. dst + 32] . copy_from_slice (& list_slice [src .. src + 32]) ; } break ; } }"
      },
      {
        "id": 27,
        "label": "let idx = i * 32 ;"
      },
      {
        "id": 28,
        "label": "let pk = Pubkey :: new (& list_slice [idx .. idx + 32]) ;"
      },
      {
        "id": 29,
        "label": "if pk == remove_player { found = true ; for j in i .. current - 1 { let src = (j + 1) * 32 ; let dst = j * 32 ; list_slice [dst .. dst + 32] . copy_from_slice (& list_slice [src .. src + 32]) ; } break ; }"
      },
      {
        "id": 30,
        "label": "found = true ;"
      },
      {
        "id": 31,
        "label": "for j in i .. current - 1 { let src = (j + 1) * 32 ; let dst = j * 32 ; list_slice [dst .. dst + 32] . copy_from_slice (& list_slice [src .. src + 32]) ; }"
      },
      {
        "id": 32,
        "label": "let src = (j + 1) * 32 ;"
      },
      {
        "id": 33,
        "label": "let dst = j * 32 ;"
      },
      {
        "id": 34,
        "label": "list_slice [dst .. dst + 32] . copy_from_slice (& list_slice [src .. src + 32]) ;"
      },
      {
        "id": 35,
        "label": "break ;"
      },
      {
        "id": 36,
        "label": "if ! found { return err ! (ErrorCode :: PlayerNotFound) ; }"
      },
      {
        "id": 37,
        "label": "return err ! (ErrorCode :: PlayerNotFound) ;"
      },
      {
        "id": 38,
        "label": "let last = (current - 1) * 32 ;"
      },
      {
        "id": 39,
        "label": "list_slice [last .. last + 32] . fill (0) ;"
      },
      {
        "id": 40,
        "label": "count_slice [0] = (current - 1) as u8 ;"
      },
      {
        "id": 41,
        "label": "msg ! (\"Player {} deregistered from tournament (remaining {} participants)\" , remove_player , current - 1) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: acct"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: data"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: acct"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: required"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: data"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: required"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: data"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: current"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: found"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: current"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: found"
      },
      {
        "from": 24,
        "to": 26,
        "label": "data_dep: current"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: idx"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: pk"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: idx"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: idx"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: pk"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: found"
      },
      {
        "from": 24,
        "to": 29,
        "label": "data_dep: current"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: found"
      },
      {
        "from": 24,
        "to": 31,
        "label": "data_dep: current"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: src"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: dst"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: dst"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: dst"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: src"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: src"
      },
      {
        "from": 25,
        "to": 36,
        "label": "data_dep: found"
      },
      {
        "from": 38,
        "to": 38,
        "label": "def: last"
      },
      {
        "from": 24,
        "to": 38,
        "label": "data_dep: current"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: last"
      },
      {
        "from": 38,
        "to": 39,
        "label": "data_dep: last"
      },
      {
        "from": 24,
        "to": 40,
        "label": "data_dep: current"
      }
    ]
  }
]