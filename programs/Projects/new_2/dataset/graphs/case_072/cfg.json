[
  {
    "name": "register_participant",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . entry_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "const MAX_PARTICIPANTS : usize = 64 ;"
      },
      {
        "id": 4,
        "label": "let required = 1 + 32 * MAX_PARTICIPANTS ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "data . len () < required"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let (count_slice , list_slice) = data . split_at_mut (1) ;"
      },
      {
        "id": 14,
        "label": "let current = count_slice [0] as usize ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "current >= MAX_PARTICIPANTS"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "return err ! (ErrorCode :: TournamentFull) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "let offset = current * 32 ;"
      },
      {
        "id": 24,
        "label": "list_slice [offset .. offset + 32] . copy_from_slice (& new_player . to_bytes ()) ;"
      },
      {
        "id": 25,
        "label": "count_slice [0] = (current + 1) as u8 ;"
      },
      {
        "id": 26,
        "label": "msg ! (\"Player {} registered in tournament (total {} participants)\" , new_player , current + 1) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      }
    ]
  },
  {
    "name": "deregister_participant",
    "nodes": [
      {
        "id": 28,
        "label": "Entry"
      },
      {
        "id": 29,
        "label": "let acct = & mut ctx . accounts . entry_account . to_account_info () ;"
      },
      {
        "id": 30,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 31,
        "label": "const MAX_PARTICIPANTS : usize = 64 ;"
      },
      {
        "id": 32,
        "label": "let required = 1 + 32 * MAX_PARTICIPANTS ;"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "data . len () < required"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "No-op"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "let (count_slice , list_slice) = data . split_at_mut (1) ;"
      },
      {
        "id": 42,
        "label": "let mut current = count_slice [0] as usize ;"
      },
      {
        "id": 43,
        "label": "let mut found = false ;"
      },
      {
        "id": 44,
        "label": "Loop Start"
      },
      {
        "id": 45,
        "label": "let idx = i * 32 ;"
      },
      {
        "id": 46,
        "label": "let pk = Pubkey :: new (& list_slice [idx .. idx + 32]) ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "pk == remove_player"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "found = true ;"
      },
      {
        "id": 52,
        "label": "Loop Start"
      },
      {
        "id": 53,
        "label": "let src = (j + 1) * 32 ;"
      },
      {
        "id": 54,
        "label": "let dst = j * 32 ;"
      },
      {
        "id": 55,
        "label": "list_slice [dst .. dst + 32] . copy_from_slice (& list_slice [src .. src + 32]) ;"
      },
      {
        "id": 56,
        "label": "Loop End"
      },
      {
        "id": 57,
        "label": "break ;"
      },
      {
        "id": 58,
        "label": "False body"
      },
      {
        "id": 59,
        "label": "No-op"
      },
      {
        "id": 60,
        "label": "merge"
      },
      {
        "id": 61,
        "label": "Loop End"
      },
      {
        "id": 62,
        "label": "if statement"
      },
      {
        "id": 63,
        "label": "predicate"
      },
      {
        "id": 64,
        "label": "! found"
      },
      {
        "id": 65,
        "label": "True body"
      },
      {
        "id": 66,
        "label": "return err ! (ErrorCode :: PlayerNotFound) ;"
      },
      {
        "id": 67,
        "label": "False body"
      },
      {
        "id": 68,
        "label": "No-op"
      },
      {
        "id": 69,
        "label": "merge"
      },
      {
        "id": 70,
        "label": "let last = (current - 1) * 32 ;"
      },
      {
        "id": 71,
        "label": "list_slice [last .. last + 32] . fill (0) ;"
      },
      {
        "id": 72,
        "label": "count_slice [0] = (current - 1) as u8 ;"
      },
      {
        "id": 73,
        "label": "msg ! (\"Player {} deregistered from tournament (remaining {} participants)\" , remove_player , current - 1) ;"
      },
      {
        "id": 74,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 33,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 52,
        "to": 56,
        "label": "for"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 47,
        "to": 58,
        "label": "false"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 44,
        "to": 61,
        "label": "for"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "predicate"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 62,
        "to": 65,
        "label": "true"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 62,
        "to": 67,
        "label": "false"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 66,
        "to": 69,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      }
    ]
  }
]