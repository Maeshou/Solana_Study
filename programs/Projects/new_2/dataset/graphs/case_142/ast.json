[
  {
    "name": "distribute",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Distribute >"
    ],
    "attributes": [],
    "body": [
      "let rd = & mut ctx . accounts . reward ;",
      "if ctx . accounts . admin . key () != rd . admin",
      "{",
      "return Err (ProgramError :: Custom (3) . into ()) ;",
      "}",
      "let per = rd . total / rd . recipients . len () as u64 ;",
      "for r in rd . recipients . iter ()",
      "{",
      "* rd . paid . entry (* r) . or_insert (0) += per ;",
      "}",
      "* * ctx . accounts . refund_acc . lamports . borrow_mut () += per ;",
      "Ok (())"
    ]
  },
  {
    "name": "Distribute",
    "node_type": "struct",
    "fields": [
      {
        "name": "reward",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , RewardData >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "refund_acc",
        "attribute": "# [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RewardData",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "total",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "recipients",
        "attribute": null,
        "field_type": "Vec < Pubkey >"
      },
      {
        "name": "paid",
        "attribute": null,
        "field_type": "BTreeMap < Pubkey , u64 >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]