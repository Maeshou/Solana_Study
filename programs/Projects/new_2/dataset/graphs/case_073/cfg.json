[
  {
    "name": "distribute_rewards",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool_info = & mut ctx . accounts . pool_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let total = * * pool_info . lamports . borrow () ;"
      },
      {
        "id": 3,
        "label": "let recipients : Vec < & AccountInfo > = ctx . remaining_accounts . iter () . filter (| acct | acct . is_writable && ! acct . is_signer) . collect () ;"
      },
      {
        "id": 4,
        "label": "let count = recipients . len () as u64 ;"
      },
      {
        "id": 5,
        "label": "if statement"
      },
      {
        "id": 6,
        "label": "predicate"
      },
      {
        "id": 7,
        "label": "count == 0"
      },
      {
        "id": 8,
        "label": "True body"
      },
      {
        "id": 9,
        "label": "return err ! (ErrorCode :: NoRecipients) ;"
      },
      {
        "id": 10,
        "label": "False body"
      },
      {
        "id": 11,
        "label": "No-op"
      },
      {
        "id": 12,
        "label": "merge"
      },
      {
        "id": 13,
        "label": "let share = total / count ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "* * r . lamports . borrow_mut () += share ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "* * pool_info . lamports . borrow_mut () = total - share * count ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"Distributed {} lamports each to {} recipients from pool {}\" , share , count , pool_info . key ()) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "predicate"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 5,
        "to": 8,
        "label": "true"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 5,
        "to": 10,
        "label": "false"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  }
]