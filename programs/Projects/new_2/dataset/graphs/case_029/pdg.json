[
  {
    "name": "gift_nft",
    "inputs": [
      "ctx: Context < GiftNft >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . gift_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let size = std :: mem :: size_of :: < GiftData > () ;"
      },
      {
        "id": 4,
        "label": "if data . len () < size { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 5,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 6,
        "label": "let now_ts = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 7,
        "label": "let mut gift = GiftData :: zeroed () ;"
      },
      {
        "id": 8,
        "label": "gift . nft_key = ctx . accounts . nft_mint . key () . to_bytes () ;"
      },
      {
        "id": 9,
        "label": "gift . sender_key = ctx . accounts . sender . key () . to_bytes () ;"
      },
      {
        "id": 10,
        "label": "gift . recipient_key = ctx . accounts . recipient . key () . to_bytes () ;"
      },
      {
        "id": 11,
        "label": "gift . timestamp = now_ts ;"
      },
      {
        "id": 12,
        "label": "let bytes = bytemuck :: bytes_of (& gift) ;"
      },
      {
        "id": 13,
        "label": "data [.. size] . copy_from_slice (bytes) ;"
      },
      {
        "id": 14,
        "label": "msg ! (\"NFT {} gifted from {} to {} at {}\" , ctx . accounts . nft_mint . key () , ctx . accounts . sender . key () , ctx . accounts . recipient . key () , now_ts) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: acct"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: acct"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: size"
      },
      {
        "from": 2,
        "to": 4,
        "label": "data_dep: data"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: size"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: now_ts"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: gift"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: gift"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: gift"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: gift"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: gift"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: now_ts"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: bytes"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: gift"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: data"
      },
      {
        "from": 3,
        "to": 13,
        "label": "data_dep: size"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: bytes"
      }
    ]
  }
]