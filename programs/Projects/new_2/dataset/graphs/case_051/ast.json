[
  {
    "name": "list_nft",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ListNft >",
      "price: u64",
      "expiry_ts: i64"
    ],
    "attributes": [
      "# [doc = \" 新しい出品を作成する  \"]",
      "# [doc = \" （owner チェックなしの AccountInfo に直接書き込むため、\"]",
      "# [doc = \"  攻撃者が任意のアカウントを指定して他人の NFT を無断で出品できます）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . listing_account . to_account_info () ;",
      "let buf = & mut acct . data . borrow_mut () ;",
      "let mut payload = Vec :: new () ;",
      "payload . extend_from_slice (& price . to_le_bytes ()) ;",
      "payload . extend_from_slice (& expiry_ts . to_le_bytes ()) ;",
      "payload . extend_from_slice (ctx . accounts . seller . key () . as_ref ()) ;",
      "if buf . len () < payload . len ()",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "for (dst , & src) in buf . iter_mut () . zip (& payload)",
      "{",
      "* dst = src ;",
      "}",
      "msg ! (\"Listed {} for {} lamports until {} by {}\" , acct . key () , price , expiry_ts , ctx . accounts . seller . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "update_price",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < UpdatePrice >",
      "new_price: u64"
    ],
    "attributes": [
      "# [doc = \" 価格のみを更新する  \"]",
      "# [doc = \" （owner チェックなしなので、他人の出品価格を無断で書き換え可能）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . listing_account . to_account_info () ;",
      "let data = & mut acct . data . borrow_mut () ;",
      "let (_pre , words , _) = unsafe { data . align_to_mut :: < u64 > () } ;",
      "if let Some (slot) = words . get_mut (0)",
      "{",
      "* slot = new_price ;",
      "} else",
      "{",
      "return err ! (ErrorCode :: DataTooShort) ;",
      "}",
      "msg ! (\"Updated listing {} price → {} lamports by {}\" , acct . key () , new_price , ctx . accounts . updater . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "cancel_listing",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CancelListing >"
    ],
    "attributes": [
      "# [doc = \" 出品情報を完全にクリアする  \"]",
      "# [doc = \" （owner チェックなしなので、他人の出品を自由に消去可能）\"]"
    ],
    "body": [
      "let acct = & mut ctx . accounts . listing_account . to_account_info () ;",
      "let buf = & mut acct . data . borrow_mut () ;",
      "buf . fill (0) ;",
      "msg ! (\"Canceled listing {} by {}\" , acct . key () , ctx . accounts . operator . key ()) ;",
      "Ok (())"
    ]
  },
  {
    "name": "ListNft",
    "node_type": "struct",
    "fields": [
      {
        "name": "listing_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行わない生の AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "seller",
        "attribute": "# [doc = \" 出品者署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "UpdatePrice",
    "node_type": "struct",
    "fields": [
      {
        "name": "listing_account",
        "attribute": "# [doc = \" CHECK: owner チェックをスキップ\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "updater",
        "attribute": "# [doc = \" 更新実行者署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "CancelListing",
    "node_type": "struct",
    "fields": [
      {
        "name": "listing_account",
        "attribute": "# [doc = \" CHECK: owner チェックを行わない AccountInfo<'info>\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "operator",
        "attribute": "# [doc = \" 操作者署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]