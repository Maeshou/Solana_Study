[
  {
    "name": "WorkshopSale",
    "node_type": "struct",
    "fields": [
      {
        "name": "item_id",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "price",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "author",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "listed_at",
        "attribute": null,
        "field_type": "i64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "list_workshop_item",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ListWorkshopItem >",
      "item_id: u32",
      "price: u64"
    ],
    "attributes": [
      "# [doc = \" ワークショップで作成したアイテムを販売する  \"]",
      "# [doc = \" (`sale_account` の owner チェックを一切行っていないため、  \"]",
      "# [doc = \"  攻撃者が他人の成果物アカウントを指定して無断で販売できます)\"]"
    ],
    "body": [
      "let now = Clock :: get () ? . unix_timestamp ;",
      "let sale = WorkshopSale { item_id , price , author : ctx . accounts . author . key () , listed_at : now , } ;",
      "let mut buf = ctx . accounts . sale_account . data . borrow_mut () ;",
      "sale . serialize (& mut & mut buf [..]) . map_err (| _ | ErrorCode :: SerializationFailed) ? ;",
      "msg ! (\"Workshop item {} listed at {} lamports by {} at {}\" , item_id , price , sale . author , now) ;",
      "Ok (())"
    ]
  },
  {
    "name": "ListWorkshopItem",
    "node_type": "struct",
    "fields": [
      {
        "name": "sale_account",
        "attribute": "# [doc = \" CHECK: owner == program_id の検証を一切行っていない AccountInfo\"] # [account (mut)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "author",
        "attribute": "# [doc = \" 作者の署名のみ検証\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]