[
  {
    "name": "alpha_increment",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = ctx . accounts . secure_vault . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let before = acct . lamports () ;"
      },
      {
        "id": 3,
        "label": "* * acct . try_borrow_mut_lamports () ? = before + delta ;"
      },
      {
        "id": 4,
        "label": "msg ! (\"alpha_increment: {}â†’{}\" , before , before + delta) ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "beta_chain",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "iter :: once (& ctx . accounts . raw_one) . chain (iter :: once (& ctx . accounts . raw_two)) . for_each (| info | { let _ = info . try_borrow_mut_lamports () . map (| mut lam | * lam += delta) ; }) ;"
      },
      {
        "id": 8,
        "label": "msg ! (\"beta_chain completed\") ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      }
    ]
  },
  {
    "name": "gamma_guard",
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let vault = & ctx . accounts . vault ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "vault . owner != ctx . accounts . user . key ()"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "msg ! (\"gamma_guard: unauthorized\") ;"
      },
      {
        "id": 17,
        "label": "return Ok (())"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "let info = vault . to_account_info () ;"
      },
      {
        "id": 22,
        "label": "let bal = info . lamports () ;"
      },
      {
        "id": 23,
        "label": "* * info . try_borrow_mut_lamports () ? = bal + delta ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"gamma_guard applied: {}\" , bal + delta) ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 12,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      }
    ]
  },
  {
    "name": "delta_share",
    "nodes": [
      {
        "id": 26,
        "label": "Entry"
      },
      {
        "id": 27,
        "label": "let bonus = ((base as f64) * 1.5) . round () as u64 ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "* * acct . try_borrow_mut_lamports () ? += bonus ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "msg ! (\"delta_share: +{} each\" , bonus) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 30,
        "label": "for"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      }
    ]
  }
]