[
  {
    "name": "list_with_discount",
    "inputs": [
      "ctx: Context < ListWithDiscount >",
      "base_price: u64",
      "discount_pct: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . listing_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let mut data = acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let final_price = base_price . saturating_mul ((100u64 - discount_pct as u64)) / 100u64 ;"
      },
      {
        "id": 4,
        "label": "let ts = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 5,
        "label": "let mut seq = Vec :: with_capacity (8 + 8 + 8 + 1 + 32) ;"
      },
      {
        "id": 6,
        "label": "seq . extend_from_slice (& ts . to_le_bytes ()) ;"
      },
      {
        "id": 7,
        "label": "seq . extend_from_slice (& base_price . to_le_bytes ()) ;"
      },
      {
        "id": 8,
        "label": "seq . extend_from_slice (& final_price . to_le_bytes ()) ;"
      },
      {
        "id": 9,
        "label": "seq . push (discount_pct) ;"
      },
      {
        "id": 10,
        "label": "seq . extend_from_slice (& ctx . accounts . seller . key () . to_bytes ()) ;"
      },
      {
        "id": 11,
        "label": "if data . len () < seq . len () { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 12,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 13,
        "label": "let mut it = data . iter_mut () ;"
      },
      {
        "id": 14,
        "label": "for & b in & seq { * it . next () . unwrap () = b ; }"
      },
      {
        "id": 15,
        "label": "* it . next () . unwrap () = b ;"
      },
      {
        "id": 16,
        "label": "msg ! (\"NFT {} listed by {}: base={} â†’ final={} (discount={}%)\" , acct . key () , ctx . accounts . seller . key () , base_price , final_price , discount_pct) ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: acct"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: acct"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: final_price"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: ts"
      },
      {
        "from": 5,
        "to": 5,
        "label": "def: seq"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: seq"
      },
      {
        "from": 4,
        "to": 6,
        "label": "data_dep: ts"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: seq"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: seq"
      },
      {
        "from": 3,
        "to": 8,
        "label": "data_dep: final_price"
      },
      {
        "from": 5,
        "to": 9,
        "label": "data_dep: seq"
      },
      {
        "from": 5,
        "to": 10,
        "label": "data_dep: seq"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: data"
      },
      {
        "from": 5,
        "to": 11,
        "label": "data_dep: seq"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: it"
      },
      {
        "from": 2,
        "to": 13,
        "label": "data_dep: data"
      },
      {
        "from": 5,
        "to": 14,
        "label": "data_dep: seq"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: it"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: it"
      }
    ]
  }
]