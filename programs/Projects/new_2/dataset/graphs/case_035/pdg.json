[
  {
    "name": "claim_reward",
    "inputs": [
      "ctx: Context < ClaimReward >",
      "reward_amount: u64",
      "last_claim_ts: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acct = & mut ctx . accounts . reward_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let data = & mut acct . data . borrow_mut () ;"
      },
      {
        "id": 3,
        "label": "let mut buf = Vec :: with_capacity (1 + 8 + 8) ;"
      },
      {
        "id": 4,
        "label": "buf . push (1u8) ;"
      },
      {
        "id": 5,
        "label": "buf . extend_from_slice (& reward_amount . to_le_bytes ()) ;"
      },
      {
        "id": 6,
        "label": "buf . extend_from_slice (& last_claim_ts . to_le_bytes ()) ;"
      },
      {
        "id": 7,
        "label": "let n = buf . len () ;"
      },
      {
        "id": 8,
        "label": "if data . len () < n { return err ! (ErrorCode :: DataTooShort) ; }"
      },
      {
        "id": 9,
        "label": "return err ! (ErrorCode :: DataTooShort) ;"
      },
      {
        "id": 10,
        "label": "unsafe { std :: ptr :: copy_nonoverlapping (buf . as_ptr () , data . as_mut_ptr () , n) ; }"
      },
      {
        "id": 11,
        "label": "std :: ptr :: copy_nonoverlapping (buf . as_ptr () , data . as_mut_ptr () , n) ;"
      },
      {
        "id": 12,
        "label": "msg ! (\"Reward claimed: {} lamports at {} by {}\" , reward_amount , last_claim_ts , ctx . accounts . user . key ()) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: acct"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: data"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: acct"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: buf"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: buf"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: buf"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: buf"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: n"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: buf"
      },
      {
        "from": 2,
        "to": 8,
        "label": "data_dep: data"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: n"
      },
      {
        "from": 3,
        "to": 10,
        "label": "data_dep: buf"
      },
      {
        "from": 2,
        "to": 10,
        "label": "data_dep: data"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: n"
      },
      {
        "from": 3,
        "to": 11,
        "label": "data_dep: buf"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: data"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: n"
      }
    ]
  }
]