[
  {
    "name": "guarded_allocate",
    "inputs": [
      "ctx: Context < GuardedAllocate >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault_info = ctx . accounts . vault_account . to_account_info () ;"
      },
      {
        "id": 2,
        "label": "let previous = vault_info . lamports () ;"
      },
      {
        "id": 3,
        "label": "let updated = previous . saturating_add (lamports) ;"
      },
      {
        "id": 4,
        "label": "* * vault_info . try_borrow_mut_lamports () ? = updated ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"guarded_allocate → {} ▶ {}\" , previous , updated) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: vault_info"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: previous"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: vault_info"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: updated"
      },
      {
        "from": 2,
        "to": 3,
        "label": "data_dep: previous"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: vault_info"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: updated"
      }
    ]
  },
  {
    "name": "signer_allocate",
    "inputs": [
      "ctx: Context < SignerAllocate >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let raw = & ctx . accounts . raw_account ;"
      },
      {
        "id": 9,
        "label": "let current = * * raw . try_borrow_lamports () ? ;"
      },
      {
        "id": 10,
        "label": "let new_balance = current . checked_add (lamports) . unwrap_or (current) ;"
      },
      {
        "id": 11,
        "label": "* * raw . try_borrow_mut_lamports () ? = new_balance ;"
      },
      {
        "id": 12,
        "label": "msg ! (\"signer_allocate ▶ {}\" , new_balance) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: raw"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: current"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: raw"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: new_balance"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: current"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: current"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: raw"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: new_balance"
      }
    ]
  },
  {
    "name": "pattern_allocate",
    "inputs": [
      "ctx: Context < PatternAllocate >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let vault = & ctx . accounts . data_vault ;"
      },
      {
        "id": 16,
        "label": "matches ! (vault . owner == ctx . accounts . caller . key () , true) . then (| | { let info = vault . to_account_info () ; * * info . try_borrow_mut_lamports () . unwrap () += lamports ; }) ;"
      },
      {
        "id": 17,
        "label": "let info = vault . to_account_info () ;"
      },
      {
        "id": 18,
        "label": "* * info . try_borrow_mut_lamports () . unwrap () += lamports ;"
      },
      {
        "id": 19,
        "label": "msg ! (\"pattern_allocate 完了\") ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: vault"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: vault"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: info"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: vault"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: info"
      }
    ]
  },
  {
    "name": "flood_allocate",
    "inputs": [
      "ctx: Context < FloodAllocate >",
      "lamports: u64"
    ],
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "ctx . remaining_accounts . iter () . for_each (| acct | { let _ = acct . try_borrow_mut_lamports () . map (| mut lam | * lam = lam . add (lamports)) ; }) ;"
      },
      {
        "id": 23,
        "label": "let _ = acct . try_borrow_mut_lamports () . map (| mut lam | * lam = lam . add (lamports)) ;"
      },
      {
        "id": 24,
        "label": "msg ! (\"flood_allocate 完了\") ;"
      },
      {
        "id": 25,
        "label": "Ok (())"
      }
    ],
    "edges": []
  }
]