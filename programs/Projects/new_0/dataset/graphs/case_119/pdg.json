[
  {
    "name": "create_group",
    "inputs": [
      "ctx: Context < CreateGroup >",
      "name: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if name . len () > 64 { return Err (ErrorCode :: NameTooLong . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: NameTooLong . into ()) ;"
      },
      {
        "id": 3,
        "label": "let grp = & mut ctx . accounts . group ;"
      },
      {
        "id": 4,
        "label": "grp . admin = ctx . accounts . user . key () ;"
      },
      {
        "id": 5,
        "label": "grp . name = name ;"
      },
      {
        "id": 6,
        "label": "grp . participants = Vec :: new () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: grp"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: grp"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: grp"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: grp"
      }
    ]
  },
  {
    "name": "join_group",
    "inputs": [
      "ctx: Context < JoinGroup >"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let grp = & mut ctx . accounts . group ;"
      },
      {
        "id": 10,
        "label": "let user = ctx . accounts . user . key () ;"
      },
      {
        "id": 11,
        "label": "if grp . participants . iter () . any (| & p | p == user) { return Err (ErrorCode :: AlreadyMember . into ()) ; }"
      },
      {
        "id": 12,
        "label": "return Err (ErrorCode :: AlreadyMember . into ()) ;"
      },
      {
        "id": 13,
        "label": "if grp . participants . len () >= 10 { return Err (ErrorCode :: GroupFull . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (ErrorCode :: GroupFull . into ()) ;"
      },
      {
        "id": 15,
        "label": "grp . participants . push (user) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: grp"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: user"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: grp"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: user"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: grp"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: grp"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: user"
      }
    ]
  },
  {
    "name": "leave_group",
    "inputs": [
      "ctx: Context < LeaveGroup >"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let grp = & mut ctx . accounts . group ;"
      },
      {
        "id": 19,
        "label": "let user = ctx . accounts . user . key () ;"
      },
      {
        "id": 20,
        "label": "if ! grp . participants . iter () . any (| & p | p == user) { return Err (ErrorCode :: NotMember . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (ErrorCode :: NotMember . into ()) ;"
      },
      {
        "id": 22,
        "label": "grp . participants . retain (| & p | p != user) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: grp"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: user"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: grp"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: user"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: grp"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: user"
      }
    ]
  }
]