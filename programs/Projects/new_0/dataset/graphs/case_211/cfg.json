[
  {
    "name": "create_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "p . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "p . total_stake = 0 ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "stake",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let p = & mut ctx . accounts . pool ;"
      },
      {
        "id": 7,
        "label": "let sa = & mut ctx . accounts . stake_account ;"
      },
      {
        "id": 8,
        "label": "sa . owner = ctx . accounts . staker . key () ;"
      },
      {
        "id": 9,
        "label": "sa . pool = ctx . accounts . pool . key () ;"
      },
      {
        "id": 10,
        "label": "sa . amount = amount ;"
      },
      {
        "id": 11,
        "label": "require_keys_eq ! (sa . pool , p . key () , StakeError :: PoolMismatch) ;"
      },
      {
        "id": 12,
        "label": "require_keys_eq ! (sa . owner , ctx . accounts . staker . key () , StakeError :: OwnerMismatch) ;"
      },
      {
        "id": 13,
        "label": "p . total_stake = p . total_stake . checked_add (amount) . ok_or (StakeError :: Overflow) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "unstake",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let p = & mut ctx . accounts . pool ;"
      },
      {
        "id": 17,
        "label": "let sa = & mut ctx . accounts . stake_account ;"
      },
      {
        "id": 18,
        "label": "let amt = sa . amount ;"
      },
      {
        "id": 19,
        "label": "require_keys_eq ! (sa . pool , p . key () , StakeError :: PoolMismatch) ;"
      },
      {
        "id": 20,
        "label": "require_keys_eq ! (sa . owner , ctx . accounts . staker . key () , StakeError :: OwnerMismatch) ;"
      },
      {
        "id": 21,
        "label": "p . total_stake = p . total_stake . checked_sub (amt) . ok_or (StakeError :: Underflow) ? ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      }
    ]
  }
]