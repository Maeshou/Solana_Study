[
  {
    "name": "create_vote",
    "inputs": [
      "ctx: Context < CreateVote >",
      "question: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if question . len () > 128 { return Err (ErrorCode :: QuestionTooLong . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: QuestionTooLong . into ()) ;"
      },
      {
        "id": 3,
        "label": "let vote = & mut ctx . accounts . vote ;"
      },
      {
        "id": 4,
        "label": "vote . owner = ctx . accounts . creator . key () ;"
      },
      {
        "id": 5,
        "label": "vote . question = question ;"
      },
      {
        "id": 6,
        "label": "vote . yes = 0 ;"
      },
      {
        "id": 7,
        "label": "vote . no = 0 ;"
      },
      {
        "id": 8,
        "label": "vote . voters . clear () ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: vote"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: vote"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: vote"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: vote"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: vote"
      },
      {
        "from": 3,
        "to": 8,
        "label": "data_dep: vote"
      }
    ]
  },
  {
    "name": "cast_vote",
    "inputs": [
      "ctx: Context < CastVote >",
      "choice: bool"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let vote = & mut ctx . accounts . vote ;"
      },
      {
        "id": 12,
        "label": "let user = ctx . accounts . voter . key () ;"
      },
      {
        "id": 13,
        "label": "if vote . voters . iter () . any (| & v | v == user) { return Err (ErrorCode :: AlreadyVoted . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (ErrorCode :: AlreadyVoted . into ()) ;"
      },
      {
        "id": 15,
        "label": "if choice { vote . yes = vote . yes . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ; } else { vote . no = vote . no . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ; }"
      },
      {
        "id": 16,
        "label": "vote . yes = vote . yes . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 17,
        "label": "vote . no = vote . no . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 18,
        "label": "vote . voters . push (user) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: vote"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: user"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: vote"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: user"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: vote"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: vote"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: user"
      }
    ]
  }
]