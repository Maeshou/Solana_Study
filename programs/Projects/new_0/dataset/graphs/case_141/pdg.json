[
  {
    "name": "init_list",
    "inputs": [
      "ctx: Context < InitList >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 2,
        "label": "list . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "list . entries = Vec :: new () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: list"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: list"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: list"
      }
    ]
  },
  {
    "name": "add_entry",
    "inputs": [
      "ctx: Context < ModifyList >",
      "description: String"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 7,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 8,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 9,
        "label": "require ! (list . entries . len () < MAX_ITEMS , ErrorCode :: ListFull) ;"
      },
      {
        "id": 10,
        "label": "require ! (description . len () <= 64 , ErrorCode :: TooLong) ;"
      },
      {
        "id": 11,
        "label": "for e in list . entries . iter () { if e . description == description { return Err (ErrorCode :: Duplicate . into ()) ; } }"
      },
      {
        "id": 12,
        "label": "if e . description == description { return Err (ErrorCode :: Duplicate . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (ErrorCode :: Duplicate . into ()) ;"
      },
      {
        "id": 14,
        "label": "list . entries . push (WishEntry { description , added_at : now , purchased : false , purchased_at : 0 }) ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: list"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: now"
      },
      {
        "from": 6,
        "to": 11,
        "label": "data_dep: list"
      },
      {
        "from": 6,
        "to": 14,
        "label": "data_dep: list"
      },
      {
        "from": 7,
        "to": 14,
        "label": "data_dep: now"
      }
    ]
  },
  {
    "name": "purchase",
    "inputs": [
      "ctx: Context < ModifyList >",
      "index: u32"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 18,
        "label": "let idx = index as usize ;"
      },
      {
        "id": 19,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 20,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 21,
        "label": "require ! (idx < list . entries . len () , ErrorCode :: IndexOutOfBounds) ;"
      },
      {
        "id": 22,
        "label": "require ! (! list . entries [idx] . purchased , ErrorCode :: AlreadyPurchased) ;"
      },
      {
        "id": 23,
        "label": "let entry = & mut list . entries [idx] ;"
      },
      {
        "id": 24,
        "label": "entry . purchased = true ;"
      },
      {
        "id": 25,
        "label": "entry . purchased_at = now ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: list"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: idx"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: now"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: entry"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: list"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: idx"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: entry"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: entry"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: now"
      }
    ]
  },
  {
    "name": "remove_entry",
    "inputs": [
      "ctx: Context < ModifyList >",
      "index: u32"
    ],
    "nodes": [
      {
        "id": 27,
        "label": "Entry"
      },
      {
        "id": 28,
        "label": "let list = & mut ctx . accounts . wishlist ;"
      },
      {
        "id": 29,
        "label": "let idx = index as usize ;"
      },
      {
        "id": 30,
        "label": "require ! (list . owner == ctx . accounts . user . key () , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 31,
        "label": "require ! (idx < list . entries . len () , ErrorCode :: IndexOutOfBounds) ;"
      },
      {
        "id": 32,
        "label": "list . entries . remove (idx) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 28,
        "to": 28,
        "label": "def: list"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: idx"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: list"
      },
      {
        "from": 29,
        "to": 32,
        "label": "data_dep: idx"
      }
    ]
  }
]