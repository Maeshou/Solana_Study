[
  {
    "name": "create_list",
    "inputs": [
      "ctx: Context < CreateList >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let list = & mut ctx . accounts . reminder_list ;"
      },
      {
        "id": 2,
        "label": "list . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "list . reminders = Vec :: new () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: list"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: list"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: list"
      }
    ]
  },
  {
    "name": "add_reminder",
    "inputs": [
      "ctx: Context < AddReminder >",
      "timestamp: i64",
      "note: String"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let list = & mut ctx . accounts . reminder_list ;"
      },
      {
        "id": 7,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 8,
        "label": "if list . owner != ctx . accounts . user . key () { return Err (ErrorCode :: Unauthorized . into ()) ; }"
      },
      {
        "id": 9,
        "label": "return Err (ErrorCode :: Unauthorized . into ()) ;"
      },
      {
        "id": 10,
        "label": "if timestamp <= now { return Err (ErrorCode :: PastTimestamp . into ()) ; }"
      },
      {
        "id": 11,
        "label": "return Err (ErrorCode :: PastTimestamp . into ()) ;"
      },
      {
        "id": 12,
        "label": "if note . len () > 100 { return Err (ErrorCode :: NoteTooLong . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (ErrorCode :: NoteTooLong . into ()) ;"
      },
      {
        "id": 14,
        "label": "if list . reminders . len () >= MAX_REMINDERS { return Err (ErrorCode :: LimitReached . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (ErrorCode :: LimitReached . into ()) ;"
      },
      {
        "id": 16,
        "label": "for entry in list . reminders . iter () { if entry . timestamp == timestamp && entry . note == note { return Err (ErrorCode :: Duplicate . into ()) ; } }"
      },
      {
        "id": 17,
        "label": "if entry . timestamp == timestamp && entry . note == note { return Err (ErrorCode :: Duplicate . into ()) ; }"
      },
      {
        "id": 18,
        "label": "return Err (ErrorCode :: Duplicate . into ()) ;"
      },
      {
        "id": 19,
        "label": "list . reminders . push (ReminderItem { timestamp , note }) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: list"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: now"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: list"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: now"
      },
      {
        "from": 6,
        "to": 14,
        "label": "data_dep: list"
      },
      {
        "from": 6,
        "to": 16,
        "label": "data_dep: list"
      },
      {
        "from": 6,
        "to": 19,
        "label": "data_dep: list"
      }
    ]
  },
  {
    "name": "remove_reminder",
    "inputs": [
      "ctx: Context < RemoveReminder >",
      "timestamp: i64",
      "note: String"
    ],
    "nodes": [
      {
        "id": 21,
        "label": "Entry"
      },
      {
        "id": 22,
        "label": "let list = & mut ctx . accounts . reminder_list ;"
      },
      {
        "id": 23,
        "label": "if list . owner != ctx . accounts . user . key () { return Err (ErrorCode :: Unauthorized . into ()) ; }"
      },
      {
        "id": 24,
        "label": "return Err (ErrorCode :: Unauthorized . into ()) ;"
      },
      {
        "id": 25,
        "label": "let mut idx : Option < usize > = None ;"
      },
      {
        "id": 26,
        "label": "for (i , entry) in list . reminders . iter () . enumerate () { if entry . timestamp == timestamp && entry . note == note { idx = Some (i) ; break ; } }"
      },
      {
        "id": 27,
        "label": "if entry . timestamp == timestamp && entry . note == note { idx = Some (i) ; break ; }"
      },
      {
        "id": 28,
        "label": "idx = Some (i) ;"
      },
      {
        "id": 29,
        "label": "break ;"
      },
      {
        "id": 30,
        "label": "if let Some (i) = idx { list . reminders . remove (i) ; Ok (()) } else { Err (ErrorCode :: NotFound . into ()) }"
      },
      {
        "id": 31,
        "label": "list . reminders . remove (i) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      },
      {
        "id": 33,
        "label": "Err (ErrorCode :: NotFound . into ())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 22,
        "label": "def: list"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: list"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: list"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: list"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: list"
      }
    ]
  }
]