[
  {
    "name": "init_flags",
    "inputs": [
      "ctx: Context < InitFlags >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let flags = & mut ctx . accounts . flags ;"
      },
      {
        "id": 2,
        "label": "flags . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 3,
        "label": "flags . flags . clear () ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: flags"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: flags"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: flags"
      }
    ]
  },
  {
    "name": "enable_flag",
    "inputs": [
      "ctx: Context < ModifyFlags >",
      "feature: String"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let flags = & mut ctx . accounts . flags ;"
      },
      {
        "id": 7,
        "label": "require ! (flags . owner == ctx . accounts . user . key () , ErrorCode :: Forbidden) ;"
      },
      {
        "id": 8,
        "label": "require ! (feature . len () <= 32 , ErrorCode :: NameTooLong) ;"
      },
      {
        "id": 9,
        "label": "for f in flags . flags . iter () { if f == & feature { return Ok (()) ; } }"
      },
      {
        "id": 10,
        "label": "if f == & feature { return Ok (()) ; }"
      },
      {
        "id": 11,
        "label": "return Ok (()) ;"
      },
      {
        "id": 12,
        "label": "flags . flags . push (feature) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: flags"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: flags"
      },
      {
        "from": 6,
        "to": 12,
        "label": "data_dep: flags"
      }
    ]
  },
  {
    "name": "disable_flag",
    "inputs": [
      "ctx: Context < ModifyFlags >",
      "feature: String"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let flags = & mut ctx . accounts . flags ;"
      },
      {
        "id": 16,
        "label": "require ! (flags . owner == ctx . accounts . user . key () , ErrorCode :: Forbidden) ;"
      },
      {
        "id": 17,
        "label": "let mut idx : Option < usize > = None ;"
      },
      {
        "id": 18,
        "label": "for (i , f) in flags . flags . iter () . enumerate () { if f == & feature { idx = Some (i) ; break ; } }"
      },
      {
        "id": 19,
        "label": "if f == & feature { idx = Some (i) ; break ; }"
      },
      {
        "id": 20,
        "label": "idx = Some (i) ;"
      },
      {
        "id": 21,
        "label": "break ;"
      },
      {
        "id": 22,
        "label": "let i = idx . ok_or (ErrorCode :: NotFound) ? ;"
      },
      {
        "id": 23,
        "label": "flags . flags . remove (i) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: flags"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: flags"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: i"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: flags"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: i"
      }
    ]
  }
]