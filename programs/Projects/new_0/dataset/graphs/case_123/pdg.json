[
  {
    "name": "create_habit",
    "inputs": [
      "ctx: Context < CreateHabit >",
      "name: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if name . len () > 32 { return Err (ErrorCode :: NameTooLong . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: NameTooLong . into ()) ;"
      },
      {
        "id": 3,
        "label": "let habit = & mut ctx . accounts . habit ;"
      },
      {
        "id": 4,
        "label": "habit . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 5,
        "label": "habit . name = name ;"
      },
      {
        "id": 6,
        "label": "habit . count = 0 ;"
      },
      {
        "id": 7,
        "label": "habit . last_done = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 3,
        "to": 3,
        "label": "def: habit"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: habit"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: habit"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: habit"
      },
      {
        "from": 3,
        "to": 7,
        "label": "data_dep: habit"
      }
    ]
  },
  {
    "name": "mark_done",
    "inputs": [
      "ctx: Context < MarkDone >"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let habit = & mut ctx . accounts . habit ;"
      },
      {
        "id": 11,
        "label": "let user = ctx . accounts . user . key () ;"
      },
      {
        "id": 12,
        "label": "if habit . owner != user { return Err (ErrorCode :: Unauthorized . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (ErrorCode :: Unauthorized . into ()) ;"
      },
      {
        "id": 14,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 15,
        "label": "if now <= habit . last_done { return Err (ErrorCode :: AlreadyDone . into ()) ; }"
      },
      {
        "id": 16,
        "label": "return Err (ErrorCode :: AlreadyDone . into ()) ;"
      },
      {
        "id": 17,
        "label": "habit . last_done = now ;"
      },
      {
        "id": 18,
        "label": "habit . count = habit . count . checked_add (1) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: habit"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: user"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: habit"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: user"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: now"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: now"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: habit"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: habit"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: now"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: habit"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: habit"
      }
    ]
  }
]