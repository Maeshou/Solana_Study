[
  {
    "name": "scale_and_flag",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "require ! (ctx . accounts . authority . is_signer , CustomError :: Unauthorized) ;"
      },
      {
        "id": 2,
        "label": "let result = ctx . accounts . storage . data . saturating_mul (multiplier) ;"
      },
      {
        "id": 3,
        "label": "let flag = if result > threshold { 1 } else { 0 } ;"
      },
      {
        "id": 4,
        "label": "ctx . accounts . storage . data = flag ;"
      },
      {
        "id": 5,
        "label": "msg ! (\"Multiplied: {} * {} = {}, Threshold: {}, Flag set to: {}\" , ctx . accounts . storage . data , multiplier , result , threshold , flag) ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "transform_data_pattern",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "require ! (ctx . accounts . authority . is_signer , CustomError :: Unauthorized) ;"
      },
      {
        "id": 9,
        "label": "let current = ctx . accounts . storage . data ;"
      },
      {
        "id": 10,
        "label": "let updated = if current % 2 == 0 { current / 2 } else { current + 3 } ;"
      },
      {
        "id": 11,
        "label": "ctx . accounts . storage . data = updated ;"
      },
      {
        "id": 12,
        "label": "msg ! (\"Transformed {} to {}\" , current , updated) ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "enforce_minimum",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "require ! (ctx . accounts . authority . is_signer , CustomError :: Unauthorized) ;"
      },
      {
        "id": 16,
        "label": "let current = ctx . accounts . storage . data ;"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "current < minimum"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "ctx . accounts . storage . data = minimum ;"
      },
      {
        "id": 22,
        "label": "msg ! (\"Value {} was below minimum {}, adjusted.\" , current , minimum) ;"
      },
      {
        "id": 23,
        "label": "False body"
      },
      {
        "id": 24,
        "label": "msg ! (\"Value {} meets minimum {}\" , current , minimum) ;"
      },
      {
        "id": 25,
        "label": "merge"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 17,
        "to": 23,
        "label": "false"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      }
    ]
  }
]