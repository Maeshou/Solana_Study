[
  {
    "name": "RentContract",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "fee_per_day",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "NFTAsset",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "contract",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "rented_to",
        "attribute": null,
        "field_type": "Option < Pubkey >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RentalRecord",
    "node_type": "struct",
    "fields": [
      {
        "name": "asset",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "renter",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "start_ts",
        "attribute": null,
        "field_type": "i64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitializeContract",
    "node_type": "struct",
    "fields": [
      {
        "name": "contract",
        "attribute": "# [account (init , payer = creator , space = 8 + 32 + 8)]",
        "field_type": "Account < 'info , RentContract >"
      },
      {
        "name": "creator",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ListAsset",
    "node_type": "struct",
    "fields": [
      {
        "name": "contract",
        "attribute": "# [doc = \" RentContract.owner == creator.key() を検証\"] # [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , RentContract >"
      },
      {
        "name": "asset",
        "attribute": "# [doc = \" NFTAsset.contract == contract.key()、NFTAsset.owner == owner.key() を検証\"] # [account (init , payer = owner , space = 8 + 32 + 32 + 1 , has_one = contract , has_one = owner)]",
        "field_type": "Account < 'info , NFTAsset >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RentNFT",
    "node_type": "struct",
    "fields": [
      {
        "name": "asset",
        "attribute": "# [doc = \" NFTAsset.contract == contract.key() を検証\"] # [account (mut , has_one = contract)]",
        "field_type": "Account < 'info , NFTAsset >"
      },
      {
        "name": "contract",
        "attribute": "# [doc = \" RentContract.key() の照合は上で担保\"] # [account (mut)]",
        "field_type": "Account < 'info , RentContract >"
      },
      {
        "name": "record",
        "attribute": "# [doc = \" RentalRecord.asset == asset.key()、renter == renter.key() を検証\"] # [account (init , payer = renter , space = 8 + 32 + 32 + 8 , has_one = asset , has_one = renter)]",
        "field_type": "Account < 'info , RentalRecord >"
      },
      {
        "name": "renter",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ReturnNFT",
    "node_type": "struct",
    "fields": [
      {
        "name": "record",
        "attribute": "# [doc = \" RentalRecord.asset == asset.key()、renter == caller.key() を検証\"] # [account (mut , has_one = asset , has_one = renter)]",
        "field_type": "Account < 'info , RentalRecord >"
      },
      {
        "name": "asset",
        "attribute": "# [doc = \" NFTAsset.contract == contract.key() を検証\"] # [account (mut , has_one = contract)]",
        "field_type": "Account < 'info , NFTAsset >"
      },
      {
        "name": "contract",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , RentContract >"
      },
      {
        "name": "renter",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "initialize_contract",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitializeContract >",
      "fee_per_day: u64"
    ],
    "attributes": [],
    "body": [
      "let c = & mut ctx . accounts . contract ;",
      "c . owner = ctx . accounts . creator . key () ;",
      "c . fee_per_day = fee_per_day ;",
      "Ok (())"
    ]
  },
  {
    "name": "list_asset",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ListAsset >"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . asset ;",
      "a . owner = ctx . accounts . owner . key () ;",
      "a . contract = ctx . accounts . contract . key () ;",
      "a . rented_to = None ;",
      "Ok (())"
    ]
  },
  {
    "name": "rent_nft",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RentNFT >"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . asset ;",
      "let r = & mut ctx . accounts . record ;",
      "require_keys_eq ! (r . asset , a . key () , NftError :: AssetMismatch) ;",
      "require_keys_eq ! (r . renter , ctx . accounts . renter . key () , NftError :: RenterMismatch) ;",
      "require ! (a . rented_to . is_none () , NftError :: AlreadyRented) ;",
      "a . rented_to = Some (ctx . accounts . renter . key ()) ;",
      "r . asset = a . key () ;",
      "r . renter = ctx . accounts . renter . key () ;",
      "r . start_ts = Clock :: get () ? . unix_timestamp ;",
      "Ok (())"
    ]
  },
  {
    "name": "return_nft",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ReturnNFT >"
    ],
    "attributes": [],
    "body": [
      "let a = & mut ctx . accounts . asset ;",
      "require_keys_eq ! (ctx . accounts . record . asset , a . key () , NftError :: AssetMismatch) ;",
      "require_keys_eq ! (ctx . accounts . record . renter , ctx . accounts . renter . key () , NftError :: RenterMismatch) ;",
      "require ! (a . rented_to . is_some () , NftError :: NotRented) ;",
      "a . rented_to = None ;",
      "Ok (())"
    ]
  }
]