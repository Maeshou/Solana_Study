[
  {
    "name": "initialize_contract",
    "inputs": [
      "ctx: Context < InitializeContract >",
      "fee_per_day: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . contract ;"
      },
      {
        "id": 2,
        "label": "c . owner = ctx . accounts . creator . key () ;"
      },
      {
        "id": 3,
        "label": "c . fee_per_day = fee_per_day ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "list_asset",
    "inputs": [
      "ctx: Context < ListAsset >"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let a = & mut ctx . accounts . asset ;"
      },
      {
        "id": 7,
        "label": "a . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 8,
        "label": "a . contract = ctx . accounts . contract . key () ;"
      },
      {
        "id": 9,
        "label": "a . rented_to = None ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: a"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: a"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: a"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: a"
      }
    ]
  },
  {
    "name": "rent_nft",
    "inputs": [
      "ctx: Context < RentNFT >"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let a = & mut ctx . accounts . asset ;"
      },
      {
        "id": 13,
        "label": "let r = & mut ctx . accounts . record ;"
      },
      {
        "id": 14,
        "label": "require_keys_eq ! (r . asset , a . key () , NftError :: AssetMismatch) ;"
      },
      {
        "id": 15,
        "label": "require_keys_eq ! (r . renter , ctx . accounts . renter . key () , NftError :: RenterMismatch) ;"
      },
      {
        "id": 16,
        "label": "require ! (a . rented_to . is_none () , NftError :: AlreadyRented) ;"
      },
      {
        "id": 17,
        "label": "a . rented_to = Some (ctx . accounts . renter . key ()) ;"
      },
      {
        "id": 18,
        "label": "r . asset = a . key () ;"
      },
      {
        "id": 19,
        "label": "r . renter = ctx . accounts . renter . key () ;"
      },
      {
        "id": 20,
        "label": "r . start_ts = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: a"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: r"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: a"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: a"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: r"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "return_nft",
    "inputs": [
      "ctx: Context < ReturnNFT >"
    ],
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let a = & mut ctx . accounts . asset ;"
      },
      {
        "id": 24,
        "label": "require_keys_eq ! (ctx . accounts . record . asset , a . key () , NftError :: AssetMismatch) ;"
      },
      {
        "id": 25,
        "label": "require_keys_eq ! (ctx . accounts . record . renter , ctx . accounts . renter . key () , NftError :: RenterMismatch) ;"
      },
      {
        "id": 26,
        "label": "require ! (a . rented_to . is_some () , NftError :: NotRented) ;"
      },
      {
        "id": 27,
        "label": "a . rented_to = None ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 23,
        "to": 23,
        "label": "def: a"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: a"
      }
    ]
  }
]