[
  {
    "name": "initialize_vault",
    "inputs": [
      "ctx: Context < InitializeVault >",
      "lock_time: i64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let vault = & mut ctx . accounts . vault ;"
      },
      {
        "id": 2,
        "label": "vault . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "vault . lock_time = lock_time ;"
      },
      {
        "id": 4,
        "label": "vault . balance = 0 ;"
      },
      {
        "id": 5,
        "label": "vault . bump = * ctx . bumps . get (\"vault\") . unwrap () ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: vault"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: vault"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: vault"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: vault"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: vault"
      }
    ]
  },
  {
    "name": "deposit",
    "inputs": [
      "ctx: Context < ModifyVault >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let authority_ai = ctx . accounts . authority . to_account_info () ;"
      },
      {
        "id": 9,
        "label": "let vault_ai = ctx . accounts . vault . to_account_info () ;"
      },
      {
        "id": 10,
        "label": "require ! (** authority_ai . lamports . borrow () >= amount , ErrorCode :: InsufficientFunds) ;"
      },
      {
        "id": 11,
        "label": "* * authority_ai . try_borrow_mut_lamports () ? -= amount ;"
      },
      {
        "id": 12,
        "label": "* * vault_ai . try_borrow_mut_lamports () ? += amount ;"
      },
      {
        "id": 13,
        "label": "let vault = & mut ctx . accounts . vault ;"
      },
      {
        "id": 14,
        "label": "vault . balance = vault . balance . checked_add (amount) . ok_or (ErrorCode :: Overflow) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: authority_ai"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: vault_ai"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: authority_ai"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: vault_ai"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: vault"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: vault"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: vault"
      }
    ]
  },
  {
    "name": "withdraw",
    "inputs": [
      "ctx: Context < Withdraw >"
    ],
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let vault = & ctx . accounts . vault ;"
      },
      {
        "id": 18,
        "label": "let now = ctx . accounts . clock . unix_timestamp ;"
      },
      {
        "id": 19,
        "label": "require ! (now >= vault . lock_time , ErrorCode :: TooEarly) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 17,
        "label": "def: vault"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: now"
      }
    ]
  }
]