[
  {
    "name": "create_proposal",
    "inputs": [
      "ctx: Context < CreateProposal >",
      "title: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 2,
        "label": "p . creator = ctx . accounts . creator . key () ;"
      },
      {
        "id": 3,
        "label": "p . title = title ;"
      },
      {
        "id": 4,
        "label": "p . vote_count = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: p"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "cast_vote",
    "inputs": [
      "ctx: Context < CastVote >",
      "support: bool"
    ],
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let p = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 8,
        "label": "let vr = & mut ctx . accounts . vote_record ;"
      },
      {
        "id": 9,
        "label": "vr . voter = ctx . accounts . voter . key () ;"
      },
      {
        "id": 10,
        "label": "vr . proposal = ctx . accounts . proposal . key () ;"
      },
      {
        "id": 11,
        "label": "vr . support = support ;"
      },
      {
        "id": 12,
        "label": "require_keys_eq ! (vr . proposal , p . key () , GovError :: ProposalMismatch) ;"
      },
      {
        "id": 13,
        "label": "require_keys_eq ! (vr . voter , ctx . accounts . voter . key () , GovError :: VoterMismatch) ;"
      },
      {
        "id": 14,
        "label": "require ! (support , GovError :: NotSupported) ;"
      },
      {
        "id": 15,
        "label": "p . vote_count = p . vote_count . checked_add (1) . ok_or (GovError :: Overflow) ? ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 7,
        "label": "def: p"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: vr"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: vr"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: vr"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: vr"
      },
      {
        "from": 7,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 7,
        "to": 15,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "finalize_vote",
    "inputs": [
      "ctx: Context < FinalizeVote >"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let p = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 19,
        "label": "let vr = & ctx . accounts . vote_record ;"
      },
      {
        "id": 20,
        "label": "require_keys_eq ! (vr . proposal , p . key () , GovError :: ProposalMismatch) ;"
      },
      {
        "id": 21,
        "label": "require_keys_eq ! (vr . voter , ctx . accounts . voter . key () , GovError :: VoterMismatch) ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: p"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: vr"
      }
    ]
  }
]