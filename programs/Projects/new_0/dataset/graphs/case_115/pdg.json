[
  {
    "name": "submit_feedback",
    "inputs": [
      "ctx: Context < SubmitFeedback >",
      "feedback: String",
      "rating: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "if feedback . len () > 200 { return Err (ErrorCode :: FeedbackTooLong . into ()) ; }"
      },
      {
        "id": 2,
        "label": "return Err (ErrorCode :: FeedbackTooLong . into ()) ;"
      },
      {
        "id": 3,
        "label": "if rating < 1 || rating > 5 { return Err (ErrorCode :: InvalidRating . into ()) ; }"
      },
      {
        "id": 4,
        "label": "return Err (ErrorCode :: InvalidRating . into ()) ;"
      },
      {
        "id": 5,
        "label": "let fb = & mut ctx . accounts . feedback ;"
      },
      {
        "id": 6,
        "label": "fb . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 7,
        "label": "fb . feedback = feedback ;"
      },
      {
        "id": 8,
        "label": "fb . rating = rating ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: fb"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: fb"
      },
      {
        "from": 5,
        "to": 7,
        "label": "data_dep: fb"
      },
      {
        "from": 5,
        "to": 8,
        "label": "data_dep: fb"
      }
    ]
  },
  {
    "name": "edit_feedback",
    "inputs": [
      "ctx: Context < EditFeedback >",
      "feedback: String",
      "rating: u8"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "if feedback . len () > 200 { return Err (ErrorCode :: FeedbackTooLong . into ()) ; }"
      },
      {
        "id": 12,
        "label": "return Err (ErrorCode :: FeedbackTooLong . into ()) ;"
      },
      {
        "id": 13,
        "label": "if rating < 1 || rating > 5 { return Err (ErrorCode :: InvalidRating . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (ErrorCode :: InvalidRating . into ()) ;"
      },
      {
        "id": 15,
        "label": "let fb = & mut ctx . accounts . feedback ;"
      },
      {
        "id": 16,
        "label": "if fb . owner != ctx . accounts . user . key () { return Err (ErrorCode :: Unauthorized . into ()) ; }"
      },
      {
        "id": 17,
        "label": "return Err (ErrorCode :: Unauthorized . into ()) ;"
      },
      {
        "id": 18,
        "label": "fb . feedback = feedback ;"
      },
      {
        "id": 19,
        "label": "fb . rating = rating ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: fb"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: fb"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: fb"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: fb"
      }
    ]
  }
]