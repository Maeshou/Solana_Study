[
  {
    "name": "init_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "pool . issuer = ctx . accounts . issuer . key () ;"
      },
      {
        "id": 3,
        "label": "pool . supply = 0 ;"
      },
      {
        "id": 4,
        "label": "pool . rate_numer = rate_numer ;"
      },
      {
        "id": 5,
        "label": "pool . rate_denom = rate_denom ;"
      },
      {
        "id": 6,
        "label": "msg ! (\"Pool initialized: rate = {}/{}\" , rate_numer , rate_denom) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "deposit_prizes",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "require ! (amount > 0 , ErrorCode :: InvalidAmount) ;"
      },
      {
        "id": 10,
        "label": "require ! (ctx . accounts . issuer . is_signer , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 11,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 12,
        "label": "pool . supply = pool . supply . checked_add (amount) . unwrap () ;"
      },
      {
        "id": 13,
        "label": "* * ctx . accounts . issuer . to_account_info () . try_borrow_mut_lamports () ? -= amount ;"
      },
      {
        "id": 14,
        "label": "* * ctx . accounts . vault . to_account_info () . try_borrow_mut_lamports () ? += amount ;"
      },
      {
        "id": 15,
        "label": "msg ! (\"{} prizes deposited, total supply = {}\" , amount , pool . supply) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "withdraw_by_supply",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "require ! (ctx . accounts . issuer . is_signer , ErrorCode :: Unauthorized) ;"
      },
      {
        "id": 19,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 20,
        "label": "let to_withdraw = pool . supply . checked_mul (pool . rate_numer) . unwrap () . checked_div (pool . rate_denom) . unwrap () ;"
      },
      {
        "id": 21,
        "label": "require ! (to_withdraw > 0 , ErrorCode :: NothingToWithdraw) ;"
      },
      {
        "id": 22,
        "label": "pool . supply = pool . supply . checked_sub (to_withdraw) . unwrap () ;"
      },
      {
        "id": 23,
        "label": "* * ctx . accounts . vault . to_account_info () . try_borrow_mut_lamports () ? -= to_withdraw ;"
      },
      {
        "id": 24,
        "label": "* * ctx . accounts . issuer . to_account_info () . try_borrow_mut_lamports () ? += to_withdraw ;"
      },
      {
        "id": 25,
        "label": "msg ! (\"{} lamports withdrawn by issuer (remaining supply = {})\" , to_withdraw , pool . supply) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      }
    ]
  }
]