[
  {
    "name": "Survey",
    "node_type": "struct",
    "fields": [
      {
        "name": "creator",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "title",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "questions",
        "attribute": null,
        "field_type": "Vec < String >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Response",
    "node_type": "struct",
    "fields": [
      {
        "name": "respondent",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "survey",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "answers",
        "attribute": null,
        "field_type": "Vec < String >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "CreateSurvey",
    "node_type": "struct",
    "fields": [
      {
        "name": "survey",
        "attribute": "# [account (init , payer = creator , space = 8 + 32 + 4 + 64 + 4 + (32 * 5))]",
        "field_type": "Account < 'info , Survey >"
      },
      {
        "name": "creator",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "AddQuestion",
    "node_type": "struct",
    "fields": [
      {
        "name": "survey",
        "attribute": "# [doc = \" Survey.creator == creator.key() は検証される\"] # [account (mut , has_one = creator)]",
        "field_type": "Account < 'info , Survey >"
      },
      {
        "name": "creator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "SubmitResponse",
    "node_type": "struct",
    "fields": [
      {
        "name": "survey",
        "attribute": "# [doc = \" Survey.creator == creator.key() は検証される（不要だが付与例）\"] # [account (mut , has_one = creator)]",
        "field_type": "Account < 'info , Survey >"
      },
      {
        "name": "response",
        "attribute": "# [doc = \" Response.survey ⇔ survey.key() の検証がないため、\"] # [doc = \" 任意の Response アカウントを渡しても通ってしまう\"] # [account (init , payer = respondent , space = 8 + 32 + 32 + 4 + (32 * 5))]",
        "field_type": "Account < 'info , Response >"
      },
      {
        "name": "respondent",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "create_survey",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CreateSurvey >",
      "title: String"
    ],
    "attributes": [
      "# [doc = \" アンケートを作成\"]"
    ],
    "body": [
      "let s = & mut ctx . accounts . survey ;",
      "s . creator = ctx . accounts . creator . key () ;",
      "s . title = title ;",
      "Ok (())"
    ]
  },
  {
    "name": "add_question",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < AddQuestion >",
      "question: String"
    ],
    "attributes": [
      "# [doc = \" 質問を追加\"]"
    ],
    "body": [
      "let s = & mut ctx . accounts . survey ;",
      "s . questions . push (question) ;",
      "Ok (())"
    ]
  },
  {
    "name": "submit_response",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SubmitResponse >",
      "answers: Vec < String >"
    ],
    "attributes": [
      "# [doc = \" 回答を提出\"]"
    ],
    "body": [
      "let r = & mut ctx . accounts . response ;",
      "let s = & ctx . accounts . survey ;",
      "r . respondent = ctx . accounts . respondent . key () ;",
      "r . survey = s . key () ;",
      "r . answers = answers ;",
      "Ok (())"
    ]
  }
]