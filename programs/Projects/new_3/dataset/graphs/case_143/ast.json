[
  {
    "name": "Tournament",
    "node_type": "struct",
    "fields": [
      {
        "name": "organizer",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "name",
        "attribute": null,
        "field_type": "String"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Participant",
    "node_type": "struct",
    "fields": [
      {
        "name": "player",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "tournament",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "score",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RecordScore",
    "node_type": "struct",
    "fields": [
      {
        "name": "tournament",
        "attribute": "# [doc = \" Tournament.organizer == organizer.key() の検証あり\"] # [account (mut , has_one = organizer)]",
        "field_type": "Account < 'info , Tournament >"
      },
      {
        "name": "participant",
        "attribute": "# [doc = \" Participant.tournament == tournament.key() の検証が **ない** ため、\"] # [doc = \" 別トーナメント用の Participant を渡されても通ってしまう\"] # [account (mut)]",
        "field_type": "Account < 'info , Participant >"
      },
      {
        "name": "organizer",
        "attribute": "# [doc = \" 署名者チェックはあるが、participant.tournament の検証はなし\"]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "record_score",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RecordScore >",
      "new_score: u64"
    ],
    "attributes": [
      "# [doc = \" 参加者のスコアを記録する\"]"
    ],
    "body": [
      "let p = & mut ctx . accounts . participant ;",
      "p . score = new_score ;",
      "msg ! (\"Participant {} score updated to {} in tournament {}\" , p . player , p . score , ctx . accounts . tournament . key ()) ;",
      "Ok (())"
    ]
  }
]