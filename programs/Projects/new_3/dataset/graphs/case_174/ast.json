[
  {
    "name": "Vehicle",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "model",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "mileage",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Booking",
    "node_type": "struct",
    "fields": [
      {
        "name": "renter",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "vehicle",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "notes",
        "attribute": null,
        "field_type": "String"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "RegisterVehicle",
    "node_type": "struct",
    "fields": [
      {
        "name": "vehicle",
        "attribute": "# [account (init , payer = owner , space = 8 + 32 + 4 + 64 + 8)]",
        "field_type": "Account < 'info , Vehicle >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MakeBooking",
    "node_type": "struct",
    "fields": [
      {
        "name": "vehicle",
        "attribute": "# [doc = \" Vehicle.owner == owner.key() は検証される\"] # [account (mut , has_one = owner)]",
        "field_type": "Account < 'info , Vehicle >"
      },
      {
        "name": "booking",
        "attribute": "# [doc = \" Booking.vehicle ⇔ vehicle.key() の検証がないため、\"] # [doc = \" 任意の Booking.account を渡しても通ってしまう\"] # [account (init , payer = renter , space = 8 + 32 + 32 + 4 + 128)]",
        "field_type": "Account < 'info , Booking >"
      },
      {
        "name": "owner",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "renter",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "CancelBooking",
    "node_type": "struct",
    "fields": [
      {
        "name": "booking",
        "attribute": "# [doc = \" Booking.renter == renter.key() は検証される\"] # [account (mut , has_one = renter)]",
        "field_type": "Account < 'info , Booking >"
      },
      {
        "name": "vehicle",
        "attribute": "# [doc = \" Vehicle.account と Booking.vehicle の照合がない\"] # [account (mut)]",
        "field_type": "Account < 'info , Vehicle >"
      },
      {
        "name": "renter",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "register_vehicle",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < RegisterVehicle >",
      "model: String",
      "mileage: u64"
    ],
    "attributes": [
      "# [doc = \" 車両を登録\"]"
    ],
    "body": [
      "let v = & mut ctx . accounts . vehicle ;",
      "v . owner = ctx . accounts . owner . key () ;",
      "v . model = model ;",
      "v . mileage = mileage ;",
      "Ok (())"
    ]
  },
  {
    "name": "make_booking",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < MakeBooking >",
      "notes: String"
    ],
    "attributes": [
      "# [doc = \" レンタル予約を作成\"]"
    ],
    "body": [
      "let b = & mut ctx . accounts . booking ;",
      "b . renter = ctx . accounts . renter . key () ;",
      "b . vehicle = ctx . accounts . vehicle . key () ;",
      "b . notes = notes ;",
      "Ok (())"
    ]
  },
  {
    "name": "cancel_booking",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CancelBooking >"
    ],
    "attributes": [
      "# [doc = \" レンタル予約をキャンセル\"]"
    ],
    "body": [
      "let _v = & mut ctx . accounts . vehicle ;",
      "let b = & mut ctx . accounts . booking ;",
      "b . notes = String :: from (\"Cancelled by renter\") ;",
      "Ok (())"
    ]
  }
]