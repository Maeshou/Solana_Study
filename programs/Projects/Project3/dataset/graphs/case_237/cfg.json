[
  {
    "name": "initialize_event",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "require ! (name . len () <= 100 , ErrorCode :: NameTooLong) ;"
      },
      {
        "id": 2,
        "label": "let ev = & mut ctx . accounts . event ;"
      },
      {
        "id": 3,
        "label": "ev . organizer = * ctx . accounts . organizer . key ;"
      },
      {
        "id": 4,
        "label": "ev . bump = bump ;"
      },
      {
        "id": 5,
        "label": "ev . id = event_id ;"
      },
      {
        "id": 6,
        "label": "ev . name = name ;"
      },
      {
        "id": 7,
        "label": "ev . attendees = Vec :: new () ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "register_attendee",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let ev = & mut ctx . accounts . event ;"
      },
      {
        "id": 11,
        "label": "let participant = ctx . accounts . participant . key () ;"
      },
      {
        "id": 12,
        "label": "require ! (! ev . attendees . contains (& participant) , ErrorCode :: AlreadyRegistered) ;"
      },
      {
        "id": 13,
        "label": "ev . attendees . push (participant) ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "unregister_attendee",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let ev = & mut ctx . accounts . event ;"
      },
      {
        "id": 17,
        "label": "let participant = ctx . accounts . participant . key () ;"
      },
      {
        "id": 18,
        "label": "require ! (ev . attendees . contains (& participant) , ErrorCode :: NotRegistered) ;"
      },
      {
        "id": 19,
        "label": "ev . attendees . retain (| & x | x != participant) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      }
    ]
  }
]