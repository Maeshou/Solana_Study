[
  {
    "name": "create_campaign",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 2,
        "label": "c . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "c . goal = goal ;"
      },
      {
        "id": 4,
        "label": "c . raised = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "donate",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 8,
        "label": "let d = & mut ctx . accounts . donation ;"
      },
      {
        "id": 9,
        "label": "d . donor = ctx . accounts . donor . key () ;"
      },
      {
        "id": 10,
        "label": "d . campaign = ctx . accounts . campaign . key () ;"
      },
      {
        "id": 11,
        "label": "d . amount = amount ;"
      },
      {
        "id": 12,
        "label": "require_keys_eq ! (d . campaign , c . key () , CrowdError :: CampaignMismatch) ;"
      },
      {
        "id": 13,
        "label": "require_keys_eq ! (d . donor , ctx . accounts . donor . key () , CrowdError :: DonorMismatch) ;"
      },
      {
        "id": 14,
        "label": "c . raised = c . raised . checked_add (amount) . ok_or (CrowdError :: Overflow) ? ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "finalize_donation",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let c = & mut ctx . accounts . campaign ;"
      },
      {
        "id": 18,
        "label": "let d = & ctx . accounts . donation ;"
      },
      {
        "id": 19,
        "label": "require_keys_eq ! (d . campaign , c . key () , CrowdError :: CampaignMismatch) ;"
      },
      {
        "id": 20,
        "label": "require_keys_eq ! (d . donor , ctx . accounts . donor . key () , CrowdError :: DonorMismatch) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  }
]