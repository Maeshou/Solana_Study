[
  {
    "name": "init_wallet",
    "inputs": [
      "ctx: Context < InitWallet >",
      "owners: Vec < Pubkey >",
      "threshold: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let wallet = & mut ctx . accounts . wallet ;"
      },
      {
        "id": 2,
        "label": "wallet . owners = owners ;"
      },
      {
        "id": 3,
        "label": "wallet . threshold = threshold ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: wallet"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: wallet"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: wallet"
      }
    ]
  },
  {
    "name": "propose",
    "inputs": [
      "ctx: Context < Propose >",
      "target: Pubkey",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let wallet = & ctx . accounts . wallet ;"
      },
      {
        "id": 7,
        "label": "require ! (wallet . owners . contains (& ctx . accounts . proposer . key ()) , MultisigError :: NotOwner) ;"
      },
      {
        "id": 8,
        "label": "let prop = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 9,
        "label": "prop . wallet = wallet . key () ;"
      },
      {
        "id": 10,
        "label": "prop . target = target ;"
      },
      {
        "id": 11,
        "label": "prop . amount = amount ;"
      },
      {
        "id": 12,
        "label": "prop . approvals . clear () ;"
      },
      {
        "id": 13,
        "label": "prop . executed = false ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: wallet"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: prop"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: prop"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: wallet"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: prop"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: prop"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: prop"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: prop"
      }
    ]
  },
  {
    "name": "approve",
    "inputs": [
      "ctx: Context < Approve >"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let wallet = & ctx . accounts . wallet ;"
      },
      {
        "id": 17,
        "label": "let prop = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 18,
        "label": "let signer = ctx . accounts . owner . key () ;"
      },
      {
        "id": 19,
        "label": "require ! (wallet . owners . contains (& signer) , MultisigError :: NotOwner) ;"
      },
      {
        "id": 20,
        "label": "if ! prop . approvals . contains (& signer) { prop . approvals . push (signer) ; }"
      },
      {
        "id": 21,
        "label": "prop . approvals . push (signer) ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: wallet"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: prop"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: signer"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: prop"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: signer"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: prop"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: signer"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: prop"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: signer"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < Execute >"
    ],
    "nodes": [
      {
        "id": 23,
        "label": "Entry"
      },
      {
        "id": 24,
        "label": "let wallet = & ctx . accounts . wallet ;"
      },
      {
        "id": 25,
        "label": "let prop = & mut ctx . accounts . proposal ;"
      },
      {
        "id": 26,
        "label": "let authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 27,
        "label": "require ! (wallet . owners . contains (& authority) , MultisigError :: NotOwner) ;"
      },
      {
        "id": 28,
        "label": "require ! (! prop . executed , MultisigError :: AlreadyExecuted) ;"
      },
      {
        "id": 29,
        "label": "require ! (prop . approvals . len () as u8 >= wallet . threshold , MultisigError :: InsufficientApprovals) ;"
      },
      {
        "id": 30,
        "label": "let wallet_acc = & mut ctx . accounts . wallet_account . to_account_info () ;"
      },
      {
        "id": 31,
        "label": "require ! (wallet_acc . key == & wallet . key () , MultisigError :: MismatchWallet) ;"
      },
      {
        "id": 32,
        "label": "let target_acc = & mut ctx . accounts . target . to_account_info () ;"
      },
      {
        "id": 33,
        "label": "let from = wallet_acc . lamports () ;"
      },
      {
        "id": 34,
        "label": "let to = target_acc . lamports () ;"
      },
      {
        "id": 35,
        "label": "let new_from = from . checked_sub (prop . amount) . ok_or (MultisigError :: InsufficientFunds) ? ;"
      },
      {
        "id": 36,
        "label": "let new_to = to . checked_add (prop . amount) . ok_or (MultisigError :: Overflow) ? ;"
      },
      {
        "id": 37,
        "label": "* * wallet_acc . try_borrow_mut_lamports () ? = new_from ;"
      },
      {
        "id": 38,
        "label": "* * target_acc . try_borrow_mut_lamports () ? = new_to ;"
      },
      {
        "id": 39,
        "label": "prop . executed = true ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 24,
        "label": "def: wallet"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: prop"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: authority"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: wallet_acc"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: target_acc"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: from"
      },
      {
        "from": 30,
        "to": 33,
        "label": "data_dep: wallet_acc"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: to"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: target_acc"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: new_from"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: from"
      },
      {
        "from": 25,
        "to": 35,
        "label": "data_dep: prop"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: new_to"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: to"
      },
      {
        "from": 25,
        "to": 36,
        "label": "data_dep: prop"
      },
      {
        "from": 30,
        "to": 37,
        "label": "data_dep: wallet_acc"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: new_from"
      },
      {
        "from": 32,
        "to": 38,
        "label": "data_dep: target_acc"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: new_to"
      },
      {
        "from": 25,
        "to": 39,
        "label": "data_dep: prop"
      }
    ]
  }
]