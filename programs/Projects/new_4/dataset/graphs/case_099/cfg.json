[
  {
    "name": "create_order",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut total_qty = 0u32 ;"
      },
      {
        "id": 2,
        "label": "let mut sum = 0u64 ;"
      },
      {
        "id": 3,
        "label": "Loop Start"
      },
      {
        "id": 4,
        "label": "let q = * quantities . get (i) . unwrap_or (& 0) ;"
      },
      {
        "id": 5,
        "label": "total_qty += q ;"
      },
      {
        "id": 6,
        "label": "sum += q as u64 * 100 ;"
      },
      {
        "id": 7,
        "label": "Loop End"
      },
      {
        "id": 8,
        "label": "if statement"
      },
      {
        "id": 9,
        "label": "predicate"
      },
      {
        "id": 10,
        "label": "total_qty > 10"
      },
      {
        "id": 11,
        "label": "True body"
      },
      {
        "id": 12,
        "label": "sum = sum * 90 / 100 ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "No-op"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "let order = & mut ctx . accounts . order ;"
      },
      {
        "id": 17,
        "label": "order . products = product_ids ;"
      },
      {
        "id": 18,
        "label": "order . quantity = total_qty ;"
      },
      {
        "id": 19,
        "label": "order . created_at = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 20,
        "label": "let payment = & mut ctx . accounts . payment ;"
      },
      {
        "id": 21,
        "label": "payment . payer = ctx . accounts . user . key () ;"
      },
      {
        "id": 22,
        "label": "payment . amount = sum ;"
      },
      {
        "id": 23,
        "label": "payment . paid = false ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 3,
        "to": 7,
        "label": "for"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "predicate"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "true"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  },
  {
    "name": "schedule_invoice",
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let order = & ctx . accounts . order ;"
      },
      {
        "id": 27,
        "label": "let invoice = & mut ctx . accounts . invoice ;"
      },
      {
        "id": 28,
        "label": "invoice . order = order . key () ;"
      },
      {
        "id": 29,
        "label": "invoice . due_dates = Vec :: new () ;"
      },
      {
        "id": 30,
        "label": "let start = order . created_at ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "invoice . due_dates . push (start + m * 30 * 86400) ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 33,
        "label": "for"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]