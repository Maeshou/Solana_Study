[
  {
    "name": "init_lottery",
    "inputs": [
      "ctx: Context < InitLottery >",
      "max_ticket: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let l = & mut ctx . accounts . lottery ;"
      },
      {
        "id": 2,
        "label": "l . max_ticket = max_ticket ;"
      },
      {
        "id": 3,
        "label": "l . drawn = false ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: l"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: l"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: l"
      }
    ]
  },
  {
    "name": "draw",
    "inputs": [
      "ctx: Context < Draw >",
      "rand_numbers: Vec < u32 >"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let l = & mut ctx . accounts . lottery ;"
      },
      {
        "id": 7,
        "label": "if ! l . drawn { let mut winner = 0u32 ; for & r in rand_numbers . iter () { if r < l . max_ticket { winner = r ; break ; } } l . winner = winner ; l . drawn = true ; }"
      },
      {
        "id": 8,
        "label": "let mut winner = 0u32 ;"
      },
      {
        "id": 9,
        "label": "for & r in rand_numbers . iter () { if r < l . max_ticket { winner = r ; break ; } }"
      },
      {
        "id": 10,
        "label": "if r < l . max_ticket { winner = r ; break ; }"
      },
      {
        "id": 11,
        "label": "winner = r ;"
      },
      {
        "id": 12,
        "label": "break ;"
      },
      {
        "id": 13,
        "label": "l . winner = winner ;"
      },
      {
        "id": 14,
        "label": "l . drawn = true ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: l"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: l"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: l"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: l"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: l"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: winner"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: l"
      },
      {
        "from": 8,
        "to": 9,
        "label": "data_dep: winner"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: l"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: winner"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: winner"
      },
      {
        "from": 6,
        "to": 13,
        "label": "data_dep: l"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: winner"
      },
      {
        "from": 6,
        "to": 14,
        "label": "data_dep: l"
      }
    ]
  }
]