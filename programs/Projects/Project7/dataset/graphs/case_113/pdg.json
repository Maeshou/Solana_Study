[
  {
    "name": "initialize_selector",
    "inputs": [
      "ctx: Context < InitializeSelector >",
      "window_size: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let selector_state = & mut ctx . accounts . selector_state ;"
      },
      {
        "id": 2,
        "label": "selector_state . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "selector_state . window_size = window_size ;"
      },
      {
        "id": 4,
        "label": "if selector_state . window_size < 2 { selector_state . window_size = 2 ; }"
      },
      {
        "id": 5,
        "label": "selector_state . window_size = 2 ;"
      },
      {
        "id": 6,
        "label": "selector_state . position = 0 ;"
      },
      {
        "id": 7,
        "label": "selector_state . double_moves = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: selector_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: selector_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: selector_state"
      }
    ]
  },
  {
    "name": "tick",
    "inputs": [
      "ctx: Context < Tick >",
      "transfer_amount: u64"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let selector_state = & mut ctx . accounts . selector_state ;"
      },
      {
        "id": 11,
        "label": "let window_position = selector_state . position % selector_state . window_size ;"
      },
      {
        "id": 12,
        "label": "let mut selected_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 13,
        "label": "if window_position == 0 { selected_program = ctx . accounts . external_program . clone () ; token :: approve (CpiContext :: new (selected_program . clone () , Approve { to : ctx . accounts . from_tokens . to_account_info () , delegate : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ; token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ; token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , 1) ? ; token :: revoke (CpiContext :: new (selected_program . clone () , Revoke { source : ctx . accounts . from_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , })) ? ; selector_state . double_moves = selector_state . double_moves . saturating_add (1) ; }"
      },
      {
        "id": 14,
        "label": "selected_program = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 15,
        "label": "token :: approve (CpiContext :: new (selected_program . clone () , Approve { to : ctx . accounts . from_tokens . to_account_info () , delegate : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ;"
      },
      {
        "id": 16,
        "label": "token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ;"
      },
      {
        "id": 17,
        "label": "token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , 1) ? ;"
      },
      {
        "id": 18,
        "label": "token :: revoke (CpiContext :: new (selected_program . clone () , Revoke { source : ctx . accounts . from_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , })) ? ;"
      },
      {
        "id": 19,
        "label": "selector_state . double_moves = selector_state . double_moves . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "if window_position > 0 { let safe_len = ctx . remaining_accounts . len () . saturating_sub (1) ; let candidate_index = (window_position as usize - 1) . min (safe_len) ; if let Some (candidate_program) = ctx . remaining_accounts . get (candidate_index) { selected_program = candidate_program . clone () ; } token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ; }"
      },
      {
        "id": 21,
        "label": "let safe_len = ctx . remaining_accounts . len () . saturating_sub (1) ;"
      },
      {
        "id": 22,
        "label": "let candidate_index = (window_position as usize - 1) . min (safe_len) ;"
      },
      {
        "id": 23,
        "label": "if let Some (candidate_program) = ctx . remaining_accounts . get (candidate_index) { selected_program = candidate_program . clone () ; }"
      },
      {
        "id": 24,
        "label": "selected_program = candidate_program . clone () ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_tokens . to_account_info () , to : ctx . accounts . to_tokens . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ;"
      },
      {
        "id": 26,
        "label": "selector_state . position = selector_state . position . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: selector_state"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: window_position"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: selector_state"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: selector_state"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: selected_program"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: window_position"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: selected_program"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: selector_state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: selector_state"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: selected_program"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: selector_state"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: selector_state"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: window_position"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: window_position"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: selected_program"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: safe_len"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: candidate_index"
      },
      {
        "from": 11,
        "to": 22,
        "label": "data_dep: window_position"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: safe_len"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: candidate_index"
      },
      {
        "from": 12,
        "to": 23,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: selected_program"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: selected_program"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: selector_state"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: selector_state"
      }
    ]
  }
]