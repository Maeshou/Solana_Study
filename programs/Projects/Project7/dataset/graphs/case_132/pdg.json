[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < ConfigureWeighted >",
      "unit_value: u64",
      "cap_value: u64",
      "min_liquidity: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "pool . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool . unit_value = unit_value . max (1) ;"
      },
      {
        "id": 4,
        "label": "pool . cap_value = cap_value . max (pool . unit_value) ;"
      },
      {
        "id": 5,
        "label": "pool . min_liquidity = min_liquidity ;"
      },
      {
        "id": 6,
        "label": "pool . total_value = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: pool"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: pool"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecuteWeighted >",
      "repeats: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 10,
        "label": "let mut loop_cursor : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while loop_cursor < repeats { let next = pool . total_value . saturating_add (pool . unit_value) ; if next > pool . cap_value { return Err (BalErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if ctx . accounts . destination . amount < pool . min_liquidity { program_account_info = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . ap (program_account_info . clone ()) , pool . unit_value) ? ; token :: transfer (ctx . accounts . tr (program_account_info . clone ()) , pool . unit_value) ? ; token :: revoke (ctx . accounts . rv (program_account_info)) ? ; pool . total_value = next ; loop_cursor = loop_cursor . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let next = pool . total_value . saturating_add (pool . unit_value) ;"
      },
      {
        "id": 13,
        "label": "if next > pool . cap_value { return Err (BalErr :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (BalErr :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "if ctx . accounts . destination . amount < pool . min_liquidity { program_account_info = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 17,
        "label": "program_account_info = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 18,
        "label": "token :: approve (ctx . accounts . ap (program_account_info . clone ()) , pool . unit_value) ? ;"
      },
      {
        "id": 19,
        "label": "token :: transfer (ctx . accounts . tr (program_account_info . clone ()) , pool . unit_value) ? ;"
      },
      {
        "id": 20,
        "label": "token :: revoke (ctx . accounts . rv (program_account_info)) ? ;"
      },
      {
        "id": 21,
        "label": "pool . total_value = next ;"
      },
      {
        "id": 22,
        "label": "loop_cursor = loop_cursor . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: pool"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: pool"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: pool"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: pool"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: pool"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: next"
      }
    ]
  }
]