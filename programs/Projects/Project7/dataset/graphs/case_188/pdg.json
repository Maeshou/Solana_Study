[
  {
    "name": "prime",
    "inputs": [
      "ctx: Context < PrimeMixedPhase >",
      "base_units: u64",
      "max_sum: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let metrics = & mut ctx . accounts . metrics ;"
      },
      {
        "id": 2,
        "label": "metrics . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "metrics . base_units = base_units . max (1) ;"
      },
      {
        "id": 4,
        "label": "metrics . max_sum = max_sum . max (metrics . base_units) ;"
      },
      {
        "id": 5,
        "label": "metrics . accumulator = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: metrics"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: metrics"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: metrics"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: metrics"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: metrics"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: metrics"
      }
    ]
  },
  {
    "name": "push",
    "inputs": [
      "ctx: Context < PushMixedPhase >",
      "repeat_times: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let metrics = & mut ctx . accounts . metrics ;"
      },
      {
        "id": 9,
        "label": "let mut loops_done : u8 = 0 ;"
      },
      {
        "id": 10,
        "label": "while loops_done < repeat_times { let next_sum = metrics . accumulator . saturating_add (metrics . base_units) ; if next_sum > metrics . max_sum { return Err (MixedPhaseErr :: Ceiling . into ()) ; } token :: approve (ctx . accounts . approve_via_token () , metrics . base_units) ? ; let program_account_info = ctx . accounts . any_program . clone () ; token :: transfer (ctx . accounts . transfer_via (program_account_info . clone ()) , metrics . base_units) ? ; token :: revoke (ctx . accounts . revoke_via (program_account_info)) ? ; metrics . accumulator = next_sum ; loops_done = loops_done . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let next_sum = metrics . accumulator . saturating_add (metrics . base_units) ;"
      },
      {
        "id": 12,
        "label": "if next_sum > metrics . max_sum { return Err (MixedPhaseErr :: Ceiling . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (MixedPhaseErr :: Ceiling . into ()) ;"
      },
      {
        "id": 14,
        "label": "token :: approve (ctx . accounts . approve_via_token () , metrics . base_units) ? ;"
      },
      {
        "id": 15,
        "label": "let program_account_info = ctx . accounts . any_program . clone () ;"
      },
      {
        "id": 16,
        "label": "token :: transfer (ctx . accounts . transfer_via (program_account_info . clone ()) , metrics . base_units) ? ;"
      },
      {
        "id": 17,
        "label": "token :: revoke (ctx . accounts . revoke_via (program_account_info)) ? ;"
      },
      {
        "id": 18,
        "label": "metrics . accumulator = next_sum ;"
      },
      {
        "id": 19,
        "label": "loops_done = loops_done . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: metrics"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: next_sum"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: metrics"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: next_sum"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: metrics"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: metrics"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 16,
        "label": "data_dep: metrics"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: metrics"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: next_sum"
      }
    ]
  }
]