[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < CfgHint >",
      "step: u64",
      "roof: u64",
      "hint: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 2,
        "label": "h . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "h . step = step ;"
      },
      {
        "id": 4,
        "label": "if h . step < 1 { h . step = 1 ; }"
      },
      {
        "id": 5,
        "label": "h . step = 1 ;"
      },
      {
        "id": 6,
        "label": "h . roof = roof ;"
      },
      {
        "id": 7,
        "label": "if h . roof < h . step { h . roof = h . step ; }"
      },
      {
        "id": 8,
        "label": "h . roof = h . step ;"
      },
      {
        "id": 9,
        "label": "h . total = 0 ;"
      },
      {
        "id": 10,
        "label": "h . program_hint = hint ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: h"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: h"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecHint >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 14,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while i < times { let mut amount = h . step ; if amount < 1 { amount = 1 ; } let plan = h . total . saturating_add (amount) ; if plan > h . roof { return Err (HintErr :: Roof . into ()) ; } let mut chosen = ctx . accounts . token_program . to_account_info () ; let mut idx : usize = 0 ; while idx < ctx . remaining_accounts . len () { let cand = & ctx . remaining_accounts [idx] ; if cand . key () == h . program_hint { chosen = cand . clone () ; break ; } idx += 1 ; } token :: approve (ctx . accounts . a (chosen . clone ()) , amount) ? ; token :: transfer (ctx . accounts . t (chosen . clone ()) , amount) ? ; token :: revoke (ctx . accounts . r (chosen)) ? ; h . total = plan ; if h . total % (h . step * 5) == 0 { h . program_hint = h . program_hint ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = h . step ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let plan = h . total . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if plan > h . roof { return Err (HintErr :: Roof . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (HintErr :: Roof . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut chosen = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let mut idx : usize = 0 ;"
      },
      {
        "id": 24,
        "label": "while idx < ctx . remaining_accounts . len () { let cand = & ctx . remaining_accounts [idx] ; if cand . key () == h . program_hint { chosen = cand . clone () ; break ; } idx += 1 ; }"
      },
      {
        "id": 25,
        "label": "let cand = & ctx . remaining_accounts [idx] ;"
      },
      {
        "id": 26,
        "label": "if cand . key () == h . program_hint { chosen = cand . clone () ; break ; }"
      },
      {
        "id": 27,
        "label": "chosen = cand . clone () ;"
      },
      {
        "id": 28,
        "label": "break ;"
      },
      {
        "id": 29,
        "label": "idx += 1 ;"
      },
      {
        "id": 30,
        "label": "token :: approve (ctx . accounts . a (chosen . clone ()) , amount) ? ;"
      },
      {
        "id": 31,
        "label": "token :: transfer (ctx . accounts . t (chosen . clone ()) , amount) ? ;"
      },
      {
        "id": 32,
        "label": "token :: revoke (ctx . accounts . r (chosen)) ? ;"
      },
      {
        "id": 33,
        "label": "h . total = plan ;"
      },
      {
        "id": 34,
        "label": "if h . total % (h . step * 5) == 0 { h . program_hint = h . program_hint ; }"
      },
      {
        "id": 35,
        "label": "h . program_hint = h . program_hint ;"
      },
      {
        "id": 36,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: plan"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: plan"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: chosen"
      },
      {
        "from": 13,
        "to": 24,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: chosen"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: cand"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: cand"
      },
      {
        "from": 13,
        "to": 26,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: chosen"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: cand"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: chosen"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: cand"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: chosen"
      },
      {
        "from": 16,
        "to": 30,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: chosen"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 32,
        "label": "data_dep: chosen"
      },
      {
        "from": 13,
        "to": 33,
        "label": "data_dep: h"
      },
      {
        "from": 19,
        "to": 33,
        "label": "data_dep: plan"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 35,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 35,
        "label": "data_dep: h"
      }
    ]
  }
]