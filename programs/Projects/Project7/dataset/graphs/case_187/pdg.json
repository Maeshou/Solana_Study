[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < SetupParamSwitch >",
      "step_amount: u64",
      "hard_cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 2,
        "label": "settings . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "settings . step_amount = step_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "settings . hard_cap = hard_cap . max (settings . step_amount) ;"
      },
      {
        "id": 5,
        "label": "settings . total_volume = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: settings"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: settings"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: settings"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: settings"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: settings"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: settings"
      }
    ]
  },
  {
    "name": "perform",
    "inputs": [
      "ctx: Context < PerformParamSwitch >",
      "repeat_count: u8",
      "prefer_external: bool"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 9,
        "label": "let mut times_done : u8 = 0 ;"
      },
      {
        "id": 10,
        "label": "while times_done < repeat_count { let projected_total = settings . total_volume . saturating_add (settings . step_amount) ; if projected_total > settings . hard_cap { return Err (ParamSwitchErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if prefer_external { program_account_info = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . a (program_account_info . clone ()) , settings . step_amount) ? ; token :: transfer (ctx . accounts . t (program_account_info . clone ()) , settings . step_amount) ? ; token :: revoke (ctx . accounts . r (program_account_info)) ? ; settings . total_volume = projected_total ; times_done = times_done . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let projected_total = settings . total_volume . saturating_add (settings . step_amount) ;"
      },
      {
        "id": 12,
        "label": "if projected_total > settings . hard_cap { return Err (ParamSwitchErr :: Cap . into ()) ; }"
      },
      {
        "id": 13,
        "label": "return Err (ParamSwitchErr :: Cap . into ()) ;"
      },
      {
        "id": 14,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 15,
        "label": "if prefer_external { program_account_info = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 16,
        "label": "program_account_info = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 17,
        "label": "token :: approve (ctx . accounts . a (program_account_info . clone ()) , settings . step_amount) ? ;"
      },
      {
        "id": 18,
        "label": "token :: transfer (ctx . accounts . t (program_account_info . clone ()) , settings . step_amount) ? ;"
      },
      {
        "id": 19,
        "label": "token :: revoke (ctx . accounts . r (program_account_info)) ? ;"
      },
      {
        "id": 20,
        "label": "settings . total_volume = projected_total ;"
      },
      {
        "id": 21,
        "label": "times_done = times_done . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: settings"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: projected_total"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: settings"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: settings"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: projected_total"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: settings"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: program_account_info"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 17,
        "label": "data_dep: settings"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: settings"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: settings"
      },
      {
        "from": 11,
        "to": 20,
        "label": "data_dep: projected_total"
      }
    ]
  }
]