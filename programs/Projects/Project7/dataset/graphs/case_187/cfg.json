[
  {
    "name": "setup",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 2,
        "label": "settings . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "settings . step_amount = step_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "settings . hard_cap = hard_cap . max (settings . step_amount) ;"
      },
      {
        "id": 5,
        "label": "settings . total_volume = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "perform",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 9,
        "label": "let mut times_done : u8 = 0 ;"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "let projected_total = settings . total_volume . saturating_add (settings . step_amount) ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "projected_total > settings . hard_cap"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "return Err (ParamSwitchErr :: Cap . into ()) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 21,
        "label": "if statement"
      },
      {
        "id": 22,
        "label": "predicate"
      },
      {
        "id": 23,
        "label": "prefer_external"
      },
      {
        "id": 24,
        "label": "True body"
      },
      {
        "id": 25,
        "label": "program_account_info = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 26,
        "label": "False body"
      },
      {
        "id": 27,
        "label": "No-op"
      },
      {
        "id": 28,
        "label": "merge"
      },
      {
        "id": 29,
        "label": "token :: approve (ctx . accounts . a (program_account_info . clone ()) , settings . step_amount) ? ;"
      },
      {
        "id": 30,
        "label": "token :: transfer (ctx . accounts . t (program_account_info . clone ()) , settings . step_amount) ? ;"
      },
      {
        "id": 31,
        "label": "token :: revoke (ctx . accounts . r (program_account_info)) ? ;"
      },
      {
        "id": 32,
        "label": "settings . total_volume = projected_total ;"
      },
      {
        "id": 33,
        "label": "times_done = times_done . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "predicate"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "true"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 21,
        "to": 26,
        "label": "false"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 10,
        "to": 34,
        "label": "while"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      }
    ]
  }
]