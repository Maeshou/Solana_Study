[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitRouteFlag >",
      "unit: u64",
      "limit: u64",
      "use_router: bool"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "config . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "config . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if config . unit < 1 { config . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "config . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "config . limit = limit ;"
      },
      {
        "id": 7,
        "label": "if config . limit < config . unit { config . limit = config . unit ; }"
      },
      {
        "id": 8,
        "label": "config . limit = config . unit ;"
      },
      {
        "id": 9,
        "label": "config . total_sent = 0 ;"
      },
      {
        "id": 10,
        "label": "config . use_router = use_router ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: config"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: config"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < RunRouteFlag >",
      "iterations: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 14,
        "label": "let mut step : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while step < iterations { let mut amount = config . unit ; if amount < 1 { amount = 1 ; } let projected = config . total_sent . saturating_add (amount) ; if projected > config . limit { return Err (RouteFlagErr :: Quota . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if config . use_router { program_ai = ctx . accounts . router_program . clone () ; } token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ; config . total_sent = projected ; if config . total_sent % (config . unit * 4) == 0 { config . use_router = ! config . use_router ; } step = step . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = config . unit ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let projected = config . total_sent . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if projected > config . limit { return Err (RouteFlagErr :: Quota . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (RouteFlagErr :: Quota . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "if config . use_router { program_ai = ctx . accounts . router_program . clone () ; }"
      },
      {
        "id": 24,
        "label": "program_ai = ctx . accounts . router_program . clone () ;"
      },
      {
        "id": 25,
        "label": "token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ;"
      },
      {
        "id": 28,
        "label": "config . total_sent = projected ;"
      },
      {
        "id": 29,
        "label": "if config . total_sent % (config . unit * 4) == 0 { config . use_router = ! config . use_router ; }"
      },
      {
        "id": 30,
        "label": "config . use_router = ! config . use_router ;"
      },
      {
        "id": 31,
        "label": "step = step . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: projected"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: config"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: config"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: config"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: config"
      }
    ]
  }
]