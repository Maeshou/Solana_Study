[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < SetupFlip >",
      "unit: u64",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "st . unit = if unit < 1 { 1 } else { unit } ;"
      },
      {
        "id": 4,
        "label": "1"
      },
      {
        "id": 5,
        "label": "unit"
      },
      {
        "id": 6,
        "label": "st . cap = if cap < st . unit { st . unit } else { cap } ;"
      },
      {
        "id": 7,
        "label": "st . unit"
      },
      {
        "id": 8,
        "label": "cap"
      },
      {
        "id": 9,
        "label": "st . today = 0 ;"
      },
      {
        "id": 10,
        "label": "st . flip = false ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < RunFlip >",
      "loops: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let st = & mut ctx . accounts . station ;"
      },
      {
        "id": 14,
        "label": "let mut n : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while n < loops { let mut amt = st . unit ; if amt < 1 { amt = 1 ; } let sum = st . today . saturating_add (amt) ; if sum > st . cap { return Err (FlipErr :: Cap . into ()) ; } let program_ai = if st . flip { ctx . accounts . alt_prog . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ; token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ; st . today = sum ; if st . today % (st . unit * 3) == 0 { st . flip = ! st . flip ; } n = n . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amt = st . unit ;"
      },
      {
        "id": 17,
        "label": "if amt < 1 { amt = 1 ; }"
      },
      {
        "id": 18,
        "label": "amt = 1 ;"
      },
      {
        "id": 19,
        "label": "let sum = st . today . saturating_add (amt) ;"
      },
      {
        "id": 20,
        "label": "if sum > st . cap { return Err (FlipErr :: Cap . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (FlipErr :: Cap . into ()) ;"
      },
      {
        "id": 22,
        "label": "let program_ai = if st . flip { ctx . accounts . alt_prog . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . alt_prog . to_account_info ()"
      },
      {
        "id": 24,
        "label": "ctx . accounts . token_program . to_account_info ()"
      },
      {
        "id": 25,
        "label": "token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 27,
        "label": "token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ;"
      },
      {
        "id": 28,
        "label": "st . today = sum ;"
      },
      {
        "id": 29,
        "label": "if st . today % (st . unit * 3) == 0 { st . flip = ! st . flip ; }"
      },
      {
        "id": 30,
        "label": "st . flip = ! st . flip ;"
      },
      {
        "id": 31,
        "label": "n = n . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amt"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: sum"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amt"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: sum"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: amt"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amt"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: sum"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: st"
      }
    ]
  }
]