[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < SetupRaw >",
      "unit: u64",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 2,
        "label": "s . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "s . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if s . unit < 1 { s . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "s . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "s . cap = cap ;"
      },
      {
        "id": 7,
        "label": "if s . cap < s . unit { s . cap = s . unit ; }"
      },
      {
        "id": 8,
        "label": "s . cap = s . unit ;"
      },
      {
        "id": 9,
        "label": "s . progress = 0 ;"
      },
      {
        "id": 10,
        "label": "s . flip = false ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < RunRaw >",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let s = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 14,
        "label": "let mut k : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while k < rounds { let mut amount = s . unit ; if amount < 1 { amount = 1 ; } let after = s . progress . saturating_add (amount) ; if after > s . cap { return Err (RawErr :: Cap . into ()) ; } let program_ai = if s . flip { ctx . accounts . dynamic_program . clone () } else { ctx . accounts . token_program . to_account_info () } ; token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ; s . progress = after ; if s . progress % (s . unit * 3) == 0 { s . flip = ! s . flip ; } k = k . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = s . unit ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let after = s . progress . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if after > s . cap { return Err (RawErr :: Cap . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (RawErr :: Cap . into ()) ;"
      },
      {
        "id": 22,
        "label": "let program_ai = if s . flip { ctx . accounts . dynamic_program . clone () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . dynamic_program . clone ()"
      },
      {
        "id": 24,
        "label": "ctx . accounts . token_program . to_account_info ()"
      },
      {
        "id": 25,
        "label": "token :: approve (ctx . accounts . ctx_approve (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . ctx_transfer (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: revoke (ctx . accounts . ctx_revoke (program_ai)) ? ;"
      },
      {
        "id": 28,
        "label": "s . progress = after ;"
      },
      {
        "id": 29,
        "label": "if s . progress % (s . unit * 3) == 0 { s . flip = ! s . flip ; }"
      },
      {
        "id": 30,
        "label": "s . flip = ! s . flip ;"
      },
      {
        "id": 31,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: after"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: after"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: after"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: s"
      }
    ]
  }
]