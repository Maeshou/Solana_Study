[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitRoundRobin >",
      "base_value: u64",
      "cap_value: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ring = & mut ctx . accounts . ring ;"
      },
      {
        "id": 2,
        "label": "ring . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "ring . base_value = base_value . max (1) ;"
      },
      {
        "id": 4,
        "label": "ring . cap_value = cap_value . max (ring . base_value) ;"
      },
      {
        "id": 5,
        "label": "ring . total_value = 0 ;"
      },
      {
        "id": 6,
        "label": "ring . rotation_counter = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: ring"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: ring"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: ring"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: ring"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: ring"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: ring"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: ring"
      }
    ]
  },
  {
    "name": "spin",
    "inputs": [
      "ctx: Context < SpinRoundRobin >",
      "spin_steps: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let ring = & mut ctx . accounts . ring ;"
      },
      {
        "id": 10,
        "label": "let mut step_cursor : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while step_cursor < spin_steps { let next_value = ring . total_value . saturating_add (ring . base_value) ; if next_value > ring . cap_value { return Err (RobinErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; let mut chosen_index : usize = 0 ; if ctx . remaining_accounts . len () > 0 { chosen_index = (ring . rotation_counter as usize) % ctx . remaining_accounts . len () ; } if ctx . remaining_accounts . len () > chosen_index { program_account_info = ctx . remaining_accounts [chosen_index] . clone () ; } token :: approve (ctx . accounts . a (program_account_info . clone ()) , ring . base_value) ? ; token :: transfer (ctx . accounts . t (program_account_info . clone ()) , ring . base_value) ? ; token :: revoke (ctx . accounts . r (program_account_info)) ? ; ring . total_value = next_value ; ring . rotation_counter = ring . rotation_counter . saturating_add (1) ; step_cursor = step_cursor . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let next_value = ring . total_value . saturating_add (ring . base_value) ;"
      },
      {
        "id": 13,
        "label": "if next_value > ring . cap_value { return Err (RobinErr :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (RobinErr :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "let mut chosen_index : usize = 0 ;"
      },
      {
        "id": 17,
        "label": "if ctx . remaining_accounts . len () > 0 { chosen_index = (ring . rotation_counter as usize) % ctx . remaining_accounts . len () ; }"
      },
      {
        "id": 18,
        "label": "chosen_index = (ring . rotation_counter as usize) % ctx . remaining_accounts . len () ;"
      },
      {
        "id": 19,
        "label": "if ctx . remaining_accounts . len () > chosen_index { program_account_info = ctx . remaining_accounts [chosen_index] . clone () ; }"
      },
      {
        "id": 20,
        "label": "program_account_info = ctx . remaining_accounts [chosen_index] . clone () ;"
      },
      {
        "id": 21,
        "label": "token :: approve (ctx . accounts . a (program_account_info . clone ()) , ring . base_value) ? ;"
      },
      {
        "id": 22,
        "label": "token :: transfer (ctx . accounts . t (program_account_info . clone ()) , ring . base_value) ? ;"
      },
      {
        "id": 23,
        "label": "token :: revoke (ctx . accounts . r (program_account_info)) ? ;"
      },
      {
        "id": 24,
        "label": "ring . total_value = next_value ;"
      },
      {
        "id": 25,
        "label": "ring . rotation_counter = ring . rotation_counter . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "step_cursor = step_cursor . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: ring"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next_value"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: ring"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next_value"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: ring"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: ring"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: ring"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: ring"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: ring"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: next_value"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: ring"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: ring"
      }
    ]
  }
]