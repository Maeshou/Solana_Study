[
  {
    "name": "initialize",
    "inputs": [
      "ctx: Context < InitSoftCap >",
      "unit_tokens: u64",
      "hard_cap: u64",
      "near_cap_margin: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "config . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "config . unit_tokens = unit_tokens . max (1) ;"
      },
      {
        "id": 4,
        "label": "config . hard_cap = hard_cap . max (config . unit_tokens) ;"
      },
      {
        "id": 5,
        "label": "config . near_cap_margin = near_cap_margin ;"
      },
      {
        "id": 6,
        "label": "config . total_sent = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: config"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: config"
      }
    ]
  },
  {
    "name": "process",
    "inputs": [
      "ctx: Context < ProcSoftCap >",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 10,
        "label": "let mut loop_index : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while loop_index < rounds { let projected = config . total_sent . saturating_add (config . unit_tokens) ; if projected > config . hard_cap { return Err (SoftCapErr :: Cap . into ()) ; } let remaining_capacity = config . hard_cap . saturating_sub (config . total_sent) ; let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if remaining_capacity <= config . near_cap_margin { program_account_info = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , config . unit_tokens) ? ; token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , config . unit_tokens) ? ; token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ; config . total_sent = projected ; loop_index = loop_index . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let projected = config . total_sent . saturating_add (config . unit_tokens) ;"
      },
      {
        "id": 13,
        "label": "if projected > config . hard_cap { return Err (SoftCapErr :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (SoftCapErr :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let remaining_capacity = config . hard_cap . saturating_sub (config . total_sent) ;"
      },
      {
        "id": 16,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "if remaining_capacity <= config . near_cap_margin { program_account_info = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 18,
        "label": "program_account_info = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 19,
        "label": "token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , config . unit_tokens) ? ;"
      },
      {
        "id": 20,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , config . unit_tokens) ? ;"
      },
      {
        "id": 21,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ;"
      },
      {
        "id": 22,
        "label": "config . total_sent = projected ;"
      },
      {
        "id": 23,
        "label": "loop_index = loop_index . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: projected"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: config"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: projected"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: config"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: remaining_capacity"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_account_info"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: remaining_capacity"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: config"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: projected"
      }
    ]
  }
]