[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitW >",
      "unit_sol: u64",
      "unit_spl: u64",
      "window: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . switcher ;"
      },
      {
        "id": 2,
        "label": "s . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "s . unit_sol = unit_sol ;"
      },
      {
        "id": 4,
        "label": "s . unit_spl = unit_spl . max (1) ;"
      },
      {
        "id": 5,
        "label": "s . window = window . max (3) ;"
      },
      {
        "id": 6,
        "label": "s . pos = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "tick",
    "inputs": [
      "ctx: Context < TickW >"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let s = & mut ctx . accounts . switcher ;"
      },
      {
        "id": 10,
        "label": "let idx = s . pos % s . window ;"
      },
      {
        "id": 11,
        "label": "if idx == 0 { system_program :: transfer (CpiContext :: new (ctx . accounts . system_program . to_account_info () , SysTransfer { from : ctx . accounts . payer . to_account_info () , to : ctx . accounts . treasury . to_account_info () , } ,) , s . unit_sol) ? ; }"
      },
      {
        "id": 12,
        "label": "system_program :: transfer (CpiContext :: new (ctx . accounts . system_program . to_account_info () , SysTransfer { from : ctx . accounts . payer . to_account_info () , to : ctx . accounts . treasury . to_account_info () , } ,) , s . unit_sol) ? ;"
      },
      {
        "id": 13,
        "label": "if idx == 1 { token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Xfer { from : ctx . accounts . legacy_from . to_account_info () , to : ctx . accounts . legacy_to . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , s . unit_spl) ? ; }"
      },
      {
        "id": 14,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Xfer { from : ctx . accounts . legacy_from . to_account_info () , to : ctx . accounts . legacy_to . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , s . unit_spl) ? ;"
      },
      {
        "id": 15,
        "label": "if idx >= 2 { token_2022 :: transfer (CpiContext :: new (ctx . accounts . token2022_program . to_account_info () , Xfer22 { from : ctx . accounts . t22_from . to_account_info () , to : ctx . accounts . t22_to . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , s . unit_spl) ? ; }"
      },
      {
        "id": 16,
        "label": "token_2022 :: transfer (CpiContext :: new (ctx . accounts . token2022_program . to_account_info () , Xfer22 { from : ctx . accounts . t22_from . to_account_info () , to : ctx . accounts . t22_to . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , s . unit_spl) ? ;"
      },
      {
        "id": 17,
        "label": "s . pos = s . pos . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: s"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: idx"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: idx"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: idx"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: idx"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: s"
      }
    ]
  }
]