[
  {
    "name": "initialize_indexer",
    "inputs": [
      "ctx: Context < InitializeIndexer >",
      "window_size: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let cycle_state = & mut ctx . accounts . cycle_state ;"
      },
      {
        "id": 2,
        "label": "cycle_state . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "cycle_state . window_size = window_size ;"
      },
      {
        "id": 4,
        "label": "if cycle_state . window_size == 0 { cycle_state . window_size = 1 ; }"
      },
      {
        "id": 5,
        "label": "cycle_state . window_size = 1 ;"
      },
      {
        "id": 6,
        "label": "cycle_state . position = 0 ;"
      },
      {
        "id": 7,
        "label": "cycle_state . bytes_logged = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: cycle_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: cycle_state"
      }
    ]
  },
  {
    "name": "step",
    "inputs": [
      "ctx: Context < StepIndexer >",
      "transfer_amount: u64"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let cycle_state = & mut ctx . accounts . cycle_state ;"
      },
      {
        "id": 11,
        "label": "let window_index = (cycle_state . position % cycle_state . window_size as u64) as usize ;"
      },
      {
        "id": 12,
        "label": "let program_handle = ctx . remaining_accounts [window_index] . clone () ;"
      },
      {
        "id": 13,
        "label": "token :: approve (CpiContext :: new (program_handle . clone () , Approve { to : ctx . accounts . sender_account . to_account_info () , delegate : ctx . accounts . receiver_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ;"
      },
      {
        "id": 14,
        "label": "token :: transfer (CpiContext :: new (program_handle . clone () , Transfer { from : ctx . accounts . sender_account . to_account_info () , to : ctx . accounts . receiver_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , }) , transfer_amount) ? ;"
      },
      {
        "id": 15,
        "label": "token :: revoke (CpiContext :: new (program_handle , Revoke { source : ctx . accounts . sender_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , })) ? ;"
      },
      {
        "id": 16,
        "label": "let log_msg = format ! (\"position={} amount={}\" , cycle_state . position , transfer_amount) ;"
      },
      {
        "id": 17,
        "label": "cycle_state . bytes_logged = cycle_state . bytes_logged . saturating_add (log_msg . len () as u64) ;"
      },
      {
        "id": 18,
        "label": "msg ! (\"{}\" , log_msg) ;"
      },
      {
        "id": 19,
        "label": "cycle_state . position = cycle_state . position . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: cycle_state"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: window_index"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: program_handle"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: window_index"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: program_handle"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: program_handle"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: program_handle"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: log_msg"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: log_msg"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: cycle_state"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: cycle_state"
      }
    ]
  }
]