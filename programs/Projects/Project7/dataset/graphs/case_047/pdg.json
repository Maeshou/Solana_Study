[
  {
    "name": "init_pool",
    "inputs": [
      "ctx: Context < InitPool >",
      "base_award: u64",
      "tier_boost_bps: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . pool_state ;"
      },
      {
        "id": 2,
        "label": "state . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "state . base_award = if base_award < 2 { 2 } else { base_award } ;"
      },
      {
        "id": 4,
        "label": "2"
      },
      {
        "id": 5,
        "label": "base_award"
      },
      {
        "id": 6,
        "label": "state . tier_boost_bps = clamp_u16 (tier_boost_bps , 50 , 2500) ;"
      },
      {
        "id": 7,
        "label": "state . round = 1 ;"
      },
      {
        "id": 8,
        "label": "state . total_distributed = base_award / 2 + 3 ;"
      },
      {
        "id": 9,
        "label": "state . tier = PrizeTier :: Silver ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: state"
      }
    ]
  },
  {
    "name": "act_settle",
    "inputs": [
      "ctx: Context < ActSettle >",
      "participant_count: u8",
      "extra_rounds: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let state = & mut ctx . accounts . pool_state ;"
      },
      {
        "id": 13,
        "label": "let mut tier_bonus : u64 = 0 ;"
      },
      {
        "id": 14,
        "label": "let mut index : u8 = 1 ;"
      },
      {
        "id": 15,
        "label": "while index <= participant_count { if index <= 4 { tier_bonus = tier_bonus + 10 ; } if index > 4 { tier_bonus = tier_bonus + 6 ; } if index > 8 { tier_bonus = tier_bonus + 3 ; } index = index + 1 ; }"
      },
      {
        "id": 16,
        "label": "if index <= 4 { tier_bonus = tier_bonus + 10 ; }"
      },
      {
        "id": 17,
        "label": "tier_bonus = tier_bonus + 10 ;"
      },
      {
        "id": 18,
        "label": "if index > 4 { tier_bonus = tier_bonus + 6 ; }"
      },
      {
        "id": 19,
        "label": "tier_bonus = tier_bonus + 6 ;"
      },
      {
        "id": 20,
        "label": "if index > 8 { tier_bonus = tier_bonus + 3 ; }"
      },
      {
        "id": 21,
        "label": "tier_bonus = tier_bonus + 3 ;"
      },
      {
        "id": 22,
        "label": "index = index + 1 ;"
      },
      {
        "id": 23,
        "label": "let mut decay_bonus_bps : u64 = 0 ;"
      },
      {
        "id": 24,
        "label": "let mut r : u8 = 1 ;"
      },
      {
        "id": 25,
        "label": "while r <= extra_rounds { decay_bonus_bps = decay_bonus_bps + (10_000 / (r as u64 + 8)) ; r = r + 1 ; }"
      },
      {
        "id": 26,
        "label": "decay_bonus_bps = decay_bonus_bps + (10_000 / (r as u64 + 8)) ;"
      },
      {
        "id": 27,
        "label": "r = r + 1 ;"
      },
      {
        "id": 28,
        "label": "let mut effective_bps = state . tier_boost_bps as u64 ;"
      },
      {
        "id": 29,
        "label": "if state . tier == PrizeTier :: Bronze { effective_bps = effective_bps - (effective_bps / 10) ; }"
      },
      {
        "id": 30,
        "label": "effective_bps = effective_bps - (effective_bps / 10) ;"
      },
      {
        "id": 31,
        "label": "if state . tier == PrizeTier :: Gold { effective_bps = effective_bps + (effective_bps / 8) ; }"
      },
      {
        "id": 32,
        "label": "effective_bps = effective_bps + (effective_bps / 8) ;"
      },
      {
        "id": 33,
        "label": "let mut award_units = state . base_award + tier_bonus + (decay_bonus_bps / 50) ;"
      },
      {
        "id": 34,
        "label": "let ceiling = state . base_award * 3 ;"
      },
      {
        "id": 35,
        "label": "if award_units > ceiling { award_units = ceiling ; }"
      },
      {
        "id": 36,
        "label": "award_units = ceiling ;"
      },
      {
        "id": 37,
        "label": "if award_units < 1 { award_units = 1 ; }"
      },
      {
        "id": 38,
        "label": "award_units = 1 ;"
      },
      {
        "id": 39,
        "label": "let mut fee_bps : u64 = 500 ;"
      },
      {
        "id": 40,
        "label": "let mut k : u64 = 0 ;"
      },
      {
        "id": 41,
        "label": "while k < state . round / 2 { if fee_bps > 100 { fee_bps = fee_bps - 100 ; } k = k + 1 ; }"
      },
      {
        "id": 42,
        "label": "if fee_bps > 100 { fee_bps = fee_bps - 100 ; }"
      },
      {
        "id": 43,
        "label": "fee_bps = fee_bps - 100 ;"
      },
      {
        "id": 44,
        "label": "k = k + 1 ;"
      },
      {
        "id": 45,
        "label": "let boosted = award_units + (award_units * effective_bps / 10_000) ;"
      },
      {
        "id": 46,
        "label": "let fee_amount = boosted * fee_bps / 10_000 ;"
      },
      {
        "id": 47,
        "label": "let payout_to_winner = boosted - fee_amount ;"
      },
      {
        "id": 48,
        "label": "if payout_to_winner < state . base_award / 10 { state . round = state . round + 1 ; return Err (PrizeErr :: TooSmall . into ()) ; }"
      },
      {
        "id": 49,
        "label": "state . round = state . round + 1 ;"
      },
      {
        "id": 50,
        "label": "return Err (PrizeErr :: TooSmall . into ()) ;"
      },
      {
        "id": 51,
        "label": "token :: transfer (ctx . accounts . treasury_to_winner () , payout_to_winner) ? ;"
      },
      {
        "id": 52,
        "label": "token :: transfer (ctx . accounts . treasury_to_fee () , fee_amount) ? ;"
      },
      {
        "id": 53,
        "label": "state . total_distributed = state . total_distributed + payout_to_winner ;"
      },
      {
        "id": 54,
        "label": "state . round = state . round + 1 ;"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: state"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: effective_bps"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: state"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 29,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 30,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: state"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 31,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 28,
        "to": 32,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: award_units"
      },
      {
        "from": 12,
        "to": 33,
        "label": "data_dep: state"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: ceiling"
      },
      {
        "from": 12,
        "to": 34,
        "label": "data_dep: state"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: award_units"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: ceiling"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: award_units"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: ceiling"
      },
      {
        "from": 33,
        "to": 36,
        "label": "data_dep: award_units"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: ceiling"
      },
      {
        "from": 33,
        "to": 37,
        "label": "data_dep: award_units"
      },
      {
        "from": 33,
        "to": 37,
        "label": "data_dep: award_units"
      },
      {
        "from": 33,
        "to": 38,
        "label": "data_dep: award_units"
      },
      {
        "from": 12,
        "to": 41,
        "label": "data_dep: state"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: boosted"
      },
      {
        "from": 33,
        "to": 45,
        "label": "data_dep: award_units"
      },
      {
        "from": 33,
        "to": 45,
        "label": "data_dep: award_units"
      },
      {
        "from": 28,
        "to": 45,
        "label": "data_dep: effective_bps"
      },
      {
        "from": 46,
        "to": 46,
        "label": "def: fee_amount"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: boosted"
      },
      {
        "from": 47,
        "to": 47,
        "label": "def: payout_to_winner"
      },
      {
        "from": 45,
        "to": 47,
        "label": "data_dep: boosted"
      },
      {
        "from": 46,
        "to": 47,
        "label": "data_dep: fee_amount"
      },
      {
        "from": 47,
        "to": 48,
        "label": "data_dep: payout_to_winner"
      },
      {
        "from": 12,
        "to": 48,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 48,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 48,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 49,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 49,
        "label": "data_dep: state"
      },
      {
        "from": 47,
        "to": 51,
        "label": "data_dep: payout_to_winner"
      },
      {
        "from": 46,
        "to": 52,
        "label": "data_dep: fee_amount"
      },
      {
        "from": 12,
        "to": 53,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 53,
        "label": "data_dep: state"
      },
      {
        "from": 47,
        "to": 53,
        "label": "data_dep: payout_to_winner"
      },
      {
        "from": 12,
        "to": 54,
        "label": "data_dep: state"
      },
      {
        "from": 12,
        "to": 54,
        "label": "data_dep: state"
      }
    ]
  },
  {
    "name": "clamp_u16",
    "inputs": [
      "v: u16",
      "lo: u16",
      "hi: u16"
    ],
    "nodes": [
      {
        "id": 60,
        "label": "Entry"
      },
      {
        "id": 61,
        "label": "let mut out = v ;"
      },
      {
        "id": 62,
        "label": "if out < lo { out = lo ; }"
      },
      {
        "id": 63,
        "label": "out = lo ;"
      },
      {
        "id": 64,
        "label": "if out > hi { out = hi ; }"
      },
      {
        "id": 65,
        "label": "out = hi ;"
      },
      {
        "id": 66,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 61,
        "to": 61,
        "label": "def: out"
      },
      {
        "from": 61,
        "to": 62,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 62,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 63,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 64,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 64,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 65,
        "label": "data_dep: out"
      },
      {
        "from": 61,
        "to": 66,
        "label": "data_dep: out"
      }
    ]
  }
]