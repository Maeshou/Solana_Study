[
  {
    "name": "register",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 2,
        "label": "registry . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "registry . unit_amount = unit_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "registry . cap_total = cap_total . max (registry . unit_amount) ;"
      },
      {
        "id": 5,
        "label": "registry . total_processed = 0 ;"
      },
      {
        "id": 6,
        "label": "registry . hint_program_key = hint_program_key ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "apply",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 10,
        "label": "let mut iteration_index : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let next_total = registry . total_processed . saturating_add (registry . unit_amount) ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "next_total > registry . cap_total"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (HintErr :: Cap . into ()) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 22,
        "label": "let mut scan_index : usize = 0 ;"
      },
      {
        "id": 23,
        "label": "Loop Start"
      },
      {
        "id": 24,
        "label": "let candidate = & ctx . remaining_accounts [scan_index] ;"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "candidate . key () == registry . hint_program_key"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "program_account_info = candidate . clone () ;"
      },
      {
        "id": 30,
        "label": "break ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "scan_index = scan_index . saturating_add (1) ;"
      },
      {
        "id": 35,
        "label": "Loop End"
      },
      {
        "id": 36,
        "label": "token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , registry . unit_amount) ? ;"
      },
      {
        "id": 37,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , registry . unit_amount) ? ;"
      },
      {
        "id": 38,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ;"
      },
      {
        "id": 39,
        "label": "registry . total_processed = next_total ;"
      },
      {
        "id": 40,
        "label": "iteration_index = iteration_index . saturating_add (1) ;"
      },
      {
        "id": 41,
        "label": "Loop End"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 23,
        "to": 35,
        "label": "while"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 11,
        "to": 41,
        "label": "while"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  }
]