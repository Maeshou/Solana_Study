[
  {
    "name": "register",
    "inputs": [
      "ctx: Context < RegisterHint >",
      "unit_amount: u64",
      "cap_total: u64",
      "hint_program_key: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 2,
        "label": "registry . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "registry . unit_amount = unit_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "registry . cap_total = cap_total . max (registry . unit_amount) ;"
      },
      {
        "id": 5,
        "label": "registry . total_processed = 0 ;"
      },
      {
        "id": 6,
        "label": "registry . hint_program_key = hint_program_key ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: registry"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: registry"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: registry"
      }
    ]
  },
  {
    "name": "apply",
    "inputs": [
      "ctx: Context < ApplyHint >",
      "iterations: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let registry = & mut ctx . accounts . registry ;"
      },
      {
        "id": 10,
        "label": "let mut iteration_index : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while iteration_index < iterations { let next_total = registry . total_processed . saturating_add (registry . unit_amount) ; if next_total > registry . cap_total { return Err (HintErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; let mut scan_index : usize = 0 ; while scan_index < ctx . remaining_accounts . len () { let candidate = & ctx . remaining_accounts [scan_index] ; if candidate . key () == registry . hint_program_key { program_account_info = candidate . clone () ; break ; } scan_index = scan_index . saturating_add (1) ; } token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , registry . unit_amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , registry . unit_amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ; registry . total_processed = next_total ; iteration_index = iteration_index . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let next_total = registry . total_processed . saturating_add (registry . unit_amount) ;"
      },
      {
        "id": 13,
        "label": "if next_total > registry . cap_total { return Err (HintErr :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (HintErr :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "let mut scan_index : usize = 0 ;"
      },
      {
        "id": 17,
        "label": "while scan_index < ctx . remaining_accounts . len () { let candidate = & ctx . remaining_accounts [scan_index] ; if candidate . key () == registry . hint_program_key { program_account_info = candidate . clone () ; break ; } scan_index = scan_index . saturating_add (1) ; }"
      },
      {
        "id": 18,
        "label": "let candidate = & ctx . remaining_accounts [scan_index] ;"
      },
      {
        "id": 19,
        "label": "if candidate . key () == registry . hint_program_key { program_account_info = candidate . clone () ; break ; }"
      },
      {
        "id": 20,
        "label": "program_account_info = candidate . clone () ;"
      },
      {
        "id": 21,
        "label": "break ;"
      },
      {
        "id": 22,
        "label": "scan_index = scan_index . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , registry . unit_amount) ? ;"
      },
      {
        "id": 24,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , registry . unit_amount) ? ;"
      },
      {
        "id": 25,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ;"
      },
      {
        "id": 26,
        "label": "registry . total_processed = next_total ;"
      },
      {
        "id": 27,
        "label": "iteration_index = iteration_index . saturating_add (1) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: registry"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next_total"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: registry"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: registry"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next_total"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: registry"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: registry"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: candidate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: candidate"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: registry"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: candidate"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: candidate"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: registry"
      },
      {
        "from": 15,
        "to": 24,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: registry"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 26,
        "label": "data_dep: registry"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: next_total"
      }
    ]
  }
]