[
  {
    "name": "init_pass",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pass_state = & mut ctx . accounts . pass_state ;"
      },
      {
        "id": 2,
        "label": "pass_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pass_state . daily_cap = if daily_cap < 5 { 5 } else { daily_cap } ;"
      },
      {
        "id": 4,
        "label": "pass_state . level = 3 ;"
      },
      {
        "id": 5,
        "label": "pass_state . charged_units = daily_cap / 3 + 2 ;"
      },
      {
        "id": 6,
        "label": "pass_state . streak_days = 5 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_charge",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pass_state = & mut ctx . accounts . pass_state ;"
      },
      {
        "id": 10,
        "label": "let mut days_to_apply : u16 = add_days ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "pass_state . streak_days as u16 + days_to_apply > 30"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "let overflow = pass_state . streak_days as u16 + days_to_apply - 30 ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "days_to_apply >= overflow"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "days_to_apply = days_to_apply - overflow ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "days_to_apply = 0 ;"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "pass_state . streak_days = pass_state . streak_days + days_to_apply as u64 ;"
      },
      {
        "id": 28,
        "label": "let triangular_value : u64 = (pass_state . streak_days * (pass_state . streak_days + 1)) / 2 ;"
      },
      {
        "id": 29,
        "label": "let mut grant_units : u64 = base_units + triangular_value / 20 + 1 ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "pass_state . level % 5 == 0"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "grant_units = grant_units + 2 ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "pass_state . level % 10 == 0"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "grant_units = grant_units + 3 ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "if statement"
      },
      {
        "id": 47,
        "label": "predicate"
      },
      {
        "id": 48,
        "label": "pass_state . level % 15 == 0"
      },
      {
        "id": 49,
        "label": "True body"
      },
      {
        "id": 50,
        "label": "grant_units = grant_units + 4 ;"
      },
      {
        "id": 51,
        "label": "False body"
      },
      {
        "id": 52,
        "label": "No-op"
      },
      {
        "id": 53,
        "label": "merge"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "grant_units > pass_state . daily_cap"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "grant_units = pass_state . daily_cap ;"
      },
      {
        "id": 59,
        "label": "pass_state . level = pass_state . level + 1 ;"
      },
      {
        "id": 60,
        "label": "False body"
      },
      {
        "id": 61,
        "label": "No-op"
      },
      {
        "id": 62,
        "label": "merge"
      },
      {
        "id": 63,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , grant_units) ? ;"
      },
      {
        "id": 64,
        "label": "pass_state . charged_units = pass_state . charged_units + grant_units ;"
      },
      {
        "id": 65,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 11,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 38,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "predicate"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "true"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 46,
        "to": 51,
        "label": "false"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 54,
        "to": 60,
        "label": "false"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      }
    ]
  }
]