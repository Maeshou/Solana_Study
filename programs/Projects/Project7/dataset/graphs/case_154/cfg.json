[
  {
    "name": "open",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . wcfg ;"
      },
      {
        "id": 2,
        "label": "w . guard = ctx . accounts . guard . key () ;"
      },
      {
        "id": 3,
        "label": "w . unit = if unit < 1 { 1 } else { unit } ;"
      },
      {
        "id": 4,
        "label": "w . roof = if roof < w . unit { w . unit } else { roof } ;"
      },
      {
        "id": 5,
        "label": "w . window = if window < 1 { 1 } else { window } ;"
      },
      {
        "id": 6,
        "label": "w . total = 0 ;"
      },
      {
        "id": 7,
        "label": "w . in_window = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "pump",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let w = & mut ctx . accounts . wcfg ;"
      },
      {
        "id": 11,
        "label": "let mut r : u8 = 0 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let mut amt = w . unit ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "amt < 1"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "amt = 1 ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "let nxt = w . total . saturating_add (amt) ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "nxt > w . roof"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "return Err (WinErr :: Roof . into ()) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "let over = w . in_window >= w . window ;"
      },
      {
        "id": 32,
        "label": "let prg = if over { ctx . accounts . gateway . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 33,
        "label": "token :: approve (ctx . accounts . a (prg . clone ()) , amt) ? ;"
      },
      {
        "id": 34,
        "label": "token :: transfer (ctx . accounts . t (prg . clone ()) , amt) ? ;"
      },
      {
        "id": 35,
        "label": "token :: revoke (ctx . accounts . r (prg)) ? ;"
      },
      {
        "id": 36,
        "label": "w . total = nxt ;"
      },
      {
        "id": 37,
        "label": "w . in_window = w . in_window . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "w . in_window % (w . window * 2) == 0"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "w . in_window = 0 ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 47,
        "label": "Loop End"
      },
      {
        "id": 48,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 38,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 12,
        "to": 47,
        "label": "while"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      }
    ]
  }
]