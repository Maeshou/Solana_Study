[
  {
    "name": "init_agreement",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitAgreement >",
      "scholar_bps: u16",
      "fund_bps: u16"
    ],
    "attributes": [],
    "body": [
      "let agreement_state = & mut ctx . accounts . agreement_state ;",
      "agreement_state . manager = ctx . accounts . manager . key () ;",
      "agreement_state . scholar_bps = scholar_bps ;",
      "agreement_state . fund_bps = fund_bps ;",
      "agreement_state . round_index = 4 ;",
      "agreement_state . last_three_revenues = [8 , 13 , 21] ;",
      "Ok (())"
    ]
  },
  {
    "name": "act_split",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ActSplit >",
      "cycle_revenue: u64"
    ],
    "attributes": [],
    "body": [
      "let agreement_state = & mut ctx . accounts . agreement_state ;",
      "let mut value_a = agreement_state . last_three_revenues [0] ;",
      "let mut value_b = agreement_state . last_three_revenues [1] ;",
      "let mut value_c = agreement_state . last_three_revenues [2] ;",
      "let mut replace_step : u8 = 0 ;",
      "while replace_step < 3",
      "{",
      "if value_a > value_b",
      "{",
      "let temp = value_a ;",
      "value_a = value_b ;",
      "value_b = temp ;",
      "} if value_b > value_c",
      "{",
      "let temp = value_b ;",
      "value_b = value_c ;",
      "value_c = temp ;",
      "} replace_step = replace_step + 1 ;",
      "}",
      "let median_value : u64 = value_b ;",
      "let mut applied_fund_bps : u64 = agreement_state . fund_bps as u64 ;",
      "if cycle_revenue > median_value",
      "{",
      "applied_fund_bps = applied_fund_bps + 100 ;",
      "}",
      "let fund_cut : u64 = (cycle_revenue as u128 * applied_fund_bps as u128 / 10_000u128) as u64 ;",
      "let residual_pool : u64 = cycle_revenue - fund_cut ;",
      "let scholar_cut : u64 = (residual_pool as u128 * agreement_state . scholar_bps as u128 / 10_000u128) as u64 ;",
      "let manager_cut : u64 = residual_pool - scholar_cut ;",
      "token :: transfer (ctx . accounts . income_to_fund_ctx () , fund_cut) ? ;",
      "token :: transfer (ctx . accounts . income_to_scholar_ctx () , scholar_cut) ? ;",
      "token :: transfer (ctx . accounts . income_to_manager_ctx () , manager_cut) ? ;",
      "agreement_state . last_three_revenues = [agreement_state . last_three_revenues [1] , agreement_state . last_three_revenues [2] , cycle_revenue] ;",
      "agreement_state . round_index = agreement_state . round_index + 1 ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitAgreement",
    "node_type": "struct",
    "fields": [
      {
        "name": "agreement_state",
        "attribute": "# [account (init , payer = manager , space = 8 + 32 + 2 + 2 + 8 + (8 * 3))]",
        "field_type": "Account < 'info , AgreementState >"
      },
      {
        "name": "manager",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ActSplit",
    "node_type": "struct",
    "fields": [
      {
        "name": "agreement_state",
        "attribute": "# [account (mut , has_one = manager)]",
        "field_type": "Account < 'info , AgreementState >"
      },
      {
        "name": "manager",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "income_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "scholar_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "manager_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "fund_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "AgreementState",
    "node_type": "struct",
    "fields": [
      {
        "name": "manager",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "scholar_bps",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "fund_bps",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "round_index",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "last_three_revenues",
        "attribute": null,
        "field_type": "[u64 ; 3]"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]