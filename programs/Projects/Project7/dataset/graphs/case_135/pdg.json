[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < Setup >",
      "unit: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . unit = unit . max (1) ;"
      },
      {
        "id": 4,
        "label": "s . sent = 0 ;"
      },
      {
        "id": 5,
        "label": "s . flag = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "push_flow",
    "inputs": [
      "ctx: Context < PushFlow >",
      "n: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 10,
        "label": "while i < n { let chosen = if seed % 2 == 0 { & ctx . accounts . program_a } else { & ctx . accounts . program_b } ; let x = s . unit + (seed % 7) as u64 ; token :: approve (ctx . accounts . approve_ctx_with (chosen . clone ()) , x) ? ; token :: transfer (ctx . accounts . transfer_ctx_with (chosen . clone ()) , x) ? ; token :: revoke (ctx . accounts . revoke_ctx_with (chosen . clone ())) ? ; s . sent = s . sent . saturating_add (x) ; s . flag = s . flag . wrapping_add ((i as u64) ^ (seed as u64)) ; i += 1 ; }"
      },
      {
        "id": 11,
        "label": "let chosen = if seed % 2 == 0 { & ctx . accounts . program_a } else { & ctx . accounts . program_b } ;"
      },
      {
        "id": 12,
        "label": "& ctx . accounts . program_a"
      },
      {
        "id": 13,
        "label": "& ctx . accounts . program_b"
      },
      {
        "id": 14,
        "label": "let x = s . unit + (seed % 7) as u64 ;"
      },
      {
        "id": 15,
        "label": "token :: approve (ctx . accounts . approve_ctx_with (chosen . clone ()) , x) ? ;"
      },
      {
        "id": 16,
        "label": "token :: transfer (ctx . accounts . transfer_ctx_with (chosen . clone ()) , x) ? ;"
      },
      {
        "id": 17,
        "label": "token :: revoke (ctx . accounts . revoke_ctx_with (chosen . clone ())) ? ;"
      },
      {
        "id": 18,
        "label": "s . sent = s . sent . saturating_add (x) ;"
      },
      {
        "id": 19,
        "label": "s . flag = s . flag . wrapping_add ((i as u64) ^ (seed as u64)) ;"
      },
      {
        "id": 20,
        "label": "i += 1 ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: chosen"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: x"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: chosen"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: x"
      },
      {
        "from": 11,
        "to": 16,
        "label": "data_dep: chosen"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: x"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: chosen"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: s"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: x"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: i"
      }
    ]
  }
]