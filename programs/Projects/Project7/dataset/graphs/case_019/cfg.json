[
  {
    "name": "init_market",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 2,
        "label": "m . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "m . fee_rate_bps = fee_bps . min (2000) . max (100) ;"
      },
      {
        "id": 4,
        "label": "m . settlement_cap = cap . max (10) ;"
      },
      {
        "id": 5,
        "label": "m . trade_count = 5 ;"
      },
      {
        "id": 6,
        "label": "m . gross_volume = cap . saturating_div (2) . max (6) ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_settle",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let m = & mut ctx . accounts . market ;"
      },
      {
        "id": 10,
        "label": "let mut q = quantity . max (1) ;"
      },
      {
        "id": 11,
        "label": "let parts = basket_parts . max (1) ;"
      },
      {
        "id": 12,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "let slice = q . saturating_div ((parts - i) . max (1) as u64) . max (1) ;"
      },
      {
        "id": 15,
        "label": "let total = slice . saturating_mul (unit_price) ;"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "total > m . settlement_cap"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "return Err (ErrMkt :: OverCap . into ()) ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "let fee = total . saturating_mul (m . fee_rate_bps as u64) / 10_000 ;"
      },
      {
        "id": 25,
        "label": "let seller_net = total . saturating_sub (fee) ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . buyer_to_seller () , seller_net) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . buyer_to_fee () , fee) ? ;"
      },
      {
        "id": 28,
        "label": "m . gross_volume = m . gross_volume . saturating_add (total) ;"
      },
      {
        "id": 29,
        "label": "q = q . saturating_sub (slice) ;"
      },
      {
        "id": 30,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "m . trade_count = m . trade_count . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 13,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  }
]