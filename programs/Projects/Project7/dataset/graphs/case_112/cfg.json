[
  {
    "name": "send_chunks",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pid = UTIL_ID ;"
      },
      {
        "id": 2,
        "label": "let mut size = chunk as usize ;"
      },
      {
        "id": 3,
        "label": "if statement"
      },
      {
        "id": 4,
        "label": "predicate"
      },
      {
        "id": 5,
        "label": "size < 16"
      },
      {
        "id": 6,
        "label": "True body"
      },
      {
        "id": 7,
        "label": "size = 16 ;"
      },
      {
        "id": 8,
        "label": "False body"
      },
      {
        "id": 9,
        "label": "No-op"
      },
      {
        "id": 10,
        "label": "merge"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "size > 256"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "size = 256 ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "let total_len = payload . len () as u32 ;"
      },
      {
        "id": 20,
        "label": "let mut offset : usize = 0 ;"
      },
      {
        "id": 21,
        "label": "let mut sent : u8 = 0 ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let end = if offset + size > payload . len () { payload . len () } else { offset + size } ;"
      },
      {
        "id": 24,
        "label": "let piece = & payload [offset .. end] ;"
      },
      {
        "id": 25,
        "label": "let mut data = Vec :: with_capacity (7 + piece . len ()) ;"
      },
      {
        "id": 26,
        "label": "data . extend_from_slice (& (offset as u32) . to_le_bytes ()) ;"
      },
      {
        "id": 27,
        "label": "data . extend_from_slice (& (piece . len () as u16) . to_le_bytes ()) ;"
      },
      {
        "id": 28,
        "label": "let mut crc : u8 = 0 ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "crc ^= * b ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "data . push (crc) ;"
      },
      {
        "id": 33,
        "label": "data . extend_from_slice (piece) ;"
      },
      {
        "id": 34,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . target_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . actor . key () , false) ,] ;"
      },
      {
        "id": 35,
        "label": "let ix = Instruction { program_id : pid , accounts : metas , data } ;"
      },
      {
        "id": 36,
        "label": "invoke (& ix , & [ctx . accounts . util_hint . to_account_info () , ctx . accounts . target_cell . to_account_info () , ctx . accounts . actor . to_account_info () ,] ,) ? ;"
      },
      {
        "id": 37,
        "label": "sent = sent . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "offset = end ;"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "emit ! (UtilSent { chunks : sent , total : total_len }) ;"
      },
      {
        "id": 41,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "predicate"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 3,
        "to": 6,
        "label": "true"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 3,
        "to": 8,
        "label": "false"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 7,
        "to": 10,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 22,
        "to": 39,
        "label": "while"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      }
    ]
  }
]