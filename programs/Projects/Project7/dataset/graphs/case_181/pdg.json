[
  {
    "name": "setup",
    "inputs": [
      "ctx: Context < Init03 >",
      "step: u64",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . set ;"
      },
      {
        "id": 2,
        "label": "s . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "s . step = step . max (1) ;"
      },
      {
        "id": 4,
        "label": "s . cap = cap . max (s . step) ;"
      },
      {
        "id": 5,
        "label": "s . total = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "perform",
    "inputs": [
      "ctx: Context < Run03 >",
      "rounds: u8",
      "prefer_external: bool"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let s = & mut ctx . accounts . set ;"
      },
      {
        "id": 9,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 10,
        "label": "while i < rounds { let amt = s . step ; let next = s . total . saturating_add (amt) ; if next > s . cap { return Err (E03 :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if prefer_external { program_ai = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . ap (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . rv (program_ai)) ? ; s . total = next ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let amt = s . step ;"
      },
      {
        "id": 12,
        "label": "let next = s . total . saturating_add (amt) ;"
      },
      {
        "id": 13,
        "label": "if next > s . cap { return Err (E03 :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (E03 :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "if prefer_external { program_ai = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 17,
        "label": "program_ai = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 18,
        "label": "token :: approve (ctx . accounts . ap (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 19,
        "label": "token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 20,
        "label": "token :: revoke (ctx . accounts . rv (program_ai)) ? ;"
      },
      {
        "id": 21,
        "label": "s . total = next ;"
      },
      {
        "id": 22,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: s"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: i"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: amt"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: amt"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_ai"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_ai"
      },
      {
        "from": 11,
        "to": 19,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: i"
      }
    ]
  }
]