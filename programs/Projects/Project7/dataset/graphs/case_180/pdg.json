[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < Cfg02 >",
      "base: u64",
      "limit: u64",
      "slot: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 2,
        "label": "c . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "c . base = base . max (1) ;"
      },
      {
        "id": 4,
        "label": "c . limit = limit . max (c . base) ;"
      },
      {
        "id": 5,
        "label": "c . idx = slot ;"
      },
      {
        "id": 6,
        "label": "c . total = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < Exe02 >",
      "reps: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let c = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 10,
        "label": "let mut k = 0u8 ;"
      },
      {
        "id": 11,
        "label": "while k < reps { let amt = c . base ; let next = c . total . saturating_add (amt) ; if next > c . limit { return Err (E02 :: Limit . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let want = c . idx as usize ; if ctx . remaining_accounts . len () > want { program_ai = ctx . remaining_accounts [want] . clone () ; } token :: approve (ctx . accounts . a (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . t (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . r (program_ai)) ? ; c . total = next ; if c . total % (c . base * 4) == 0 { c . idx = c . idx . wrapping_add (1) ; } k = k . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let amt = c . base ;"
      },
      {
        "id": 13,
        "label": "let next = c . total . saturating_add (amt) ;"
      },
      {
        "id": 14,
        "label": "if next > c . limit { return Err (E02 :: Limit . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (E02 :: Limit . into ()) ;"
      },
      {
        "id": 16,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "let want = c . idx as usize ;"
      },
      {
        "id": 18,
        "label": "if ctx . remaining_accounts . len () > want { program_ai = ctx . remaining_accounts [want] . clone () ; }"
      },
      {
        "id": 19,
        "label": "program_ai = ctx . remaining_accounts [want] . clone () ;"
      },
      {
        "id": 20,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 21,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 22,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 23,
        "label": "c . total = next ;"
      },
      {
        "id": 24,
        "label": "if c . total % (c . base * 4) == 0 { c . idx = c . idx . wrapping_add (1) ; }"
      },
      {
        "id": 25,
        "label": "c . idx = c . idx . wrapping_add (1) ;"
      },
      {
        "id": 26,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 27,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: c"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: k"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: k"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: c"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: k"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: k"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: amt"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: c"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: next"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: amt"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_ai"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: want"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: c"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: want"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: want"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: program_ai"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: want"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: program_ai"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: c"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: c"
      },
      {
        "from": 9,
        "to": 25,
        "label": "data_dep: c"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: k"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: k"
      }
    ]
  }
]