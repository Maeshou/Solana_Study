[
  {
    "name": "init_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool_state = & mut ctx . accounts . pool_state ;"
      },
      {
        "id": 2,
        "label": "pool_state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool_state . base_rate_bps = base_rate_bps . min (2500) ;"
      },
      {
        "id": 4,
        "label": "pool_state . minimum_required = min_stake ;"
      },
      {
        "id": 5,
        "label": "pool_state . active_round = 1 ;"
      },
      {
        "id": 6,
        "label": "pool_state . total_payout = 1 ;"
      },
      {
        "id": 7,
        "label": "pool_state . mode = mode ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_settle_rewards",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let pool_state = & mut ctx . accounts . pool_state ;"
      },
      {
        "id": 11,
        "label": "require ! (staked_units >= pool_state . minimum_required , StkErr :: TooSmall) ;"
      },
      {
        "id": 12,
        "label": "let mut bonus_bps : u64 = 0 ;"
      },
      {
        "id": 13,
        "label": "let mut counter = 0u32 ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "bonus_bps = bonus_bps . saturating_add (5) ;"
      },
      {
        "id": 16,
        "label": "counter = counter . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "let mut effective_bps : u64 = pool_state . base_rate_bps as u64 ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "pool_state . mode == RewardMode :: Conservative"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "effective_bps = effective_bps . saturating_sub (50) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "pool_state . mode == RewardMode :: Aggressive"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "effective_bps = effective_bps . saturating_add (75) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "let total_bps = effective_bps . saturating_add (bonus_bps) ;"
      },
      {
        "id": 36,
        "label": "let gross = staked_units . saturating_mul (total_bps) / 10_000 ;"
      },
      {
        "id": 37,
        "label": "let fee = gross / 20 ;"
      },
      {
        "id": 38,
        "label": "let payable = gross . saturating_sub (fee) ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "payable < pool_state . minimum_required / 10"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "pool_state . active_round = pool_state . active_round . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "return Err (StkErr :: TooSmall . into ()) ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "pool_state . total_payout = pool_state . total_payout . saturating_add (payable) ;"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "let cpi = ctx . accounts . transfer_from_pool_to_staker () ;"
      },
      {
        "id": 49,
        "label": "token :: transfer (cpi , payable) ? ;"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "while"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 39,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]