[
  {
    "name": "init_guild",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let ledger_state = & mut ctx . accounts . ledger_state ;"
      },
      {
        "id": 2,
        "label": "ledger_state . leader = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "ledger_state . monthly_due = if monthly_due < 3 { 3 } else { monthly_due } ;"
      },
      {
        "id": 4,
        "label": "ledger_state . base_refund_bps = if base_refund_bps > 7000 { 7000 } else { base_refund_bps } ;"
      },
      {
        "id": 5,
        "label": "ledger_state . period_counter = 2 ;"
      },
      {
        "id": 6,
        "label": "ledger_state . net_collected = monthly_due + 5 ;"
      },
      {
        "id": 7,
        "label": "ledger_state . rollover_units = 1 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_cycle",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let ledger_state = & mut ctx . accounts . ledger_state ;"
      },
      {
        "id": 11,
        "label": "let mut aggregate_due : u64 = ledger_state . monthly_due ;"
      },
      {
        "id": 12,
        "label": "let mut month_cursor : u8 = 1 ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "let mut period_due : u64 = ledger_state . monthly_due ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "month_cursor >= 3"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "period_due = period_due - (period_due / 20) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "month_cursor >= 6"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "period_due = period_due - (period_due / 20) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "month_cursor >= 9"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "period_due = period_due - (period_due / 20) ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "No-op"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "aggregate_due = aggregate_due + period_due ;"
      },
      {
        "id": 40,
        "label": "month_cursor = month_cursor + 1 ;"
      },
      {
        "id": 41,
        "label": "Loop End"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "request_refund"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "let mut effective_bps : u64 = ledger_state . base_refund_bps as u64 ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "ledger_state . period_counter % 2 == 0"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "effective_bps = effective_bps + 150 ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "let refund_total : u64 = (aggregate_due as u128 * effective_bps as u128 / 10_000u128) as u64 ;"
      },
      {
        "id": 56,
        "label": "let rollover_part : u64 = refund_total / 10 ;"
      },
      {
        "id": 57,
        "label": "let immediate_refund : u64 = refund_total - rollover_part ;"
      },
      {
        "id": 58,
        "label": "token :: transfer (ctx . accounts . treasury_to_member_ctx () , immediate_refund) ? ;"
      },
      {
        "id": 59,
        "label": "ledger_state . rollover_units = ledger_state . rollover_units + rollover_part ;"
      },
      {
        "id": 60,
        "label": "ledger_state . net_collected = ledger_state . net_collected - immediate_refund ;"
      },
      {
        "id": 61,
        "label": "False body"
      },
      {
        "id": 62,
        "label": "let mut charge_amount : u64 = aggregate_due ;"
      },
      {
        "id": 63,
        "label": "if statement"
      },
      {
        "id": 64,
        "label": "predicate"
      },
      {
        "id": 65,
        "label": "ledger_state . rollover_units > 0"
      },
      {
        "id": 66,
        "label": "True body"
      },
      {
        "id": 67,
        "label": "let apply_units = core :: cmp :: min (ledger_state . rollover_units , charge_amount) ;"
      },
      {
        "id": 68,
        "label": "charge_amount = charge_amount - apply_units ;"
      },
      {
        "id": 69,
        "label": "ledger_state . rollover_units = ledger_state . rollover_units - apply_units ;"
      },
      {
        "id": 70,
        "label": "False body"
      },
      {
        "id": 71,
        "label": "No-op"
      },
      {
        "id": 72,
        "label": "merge"
      },
      {
        "id": 73,
        "label": "token :: transfer (ctx . accounts . member_to_treasury_ctx () , charge_amount) ? ;"
      },
      {
        "id": 74,
        "label": "ledger_state . net_collected = ledger_state . net_collected + charge_amount ;"
      },
      {
        "id": 75,
        "label": "merge"
      },
      {
        "id": 76,
        "label": "ledger_state . period_counter = ledger_state . period_counter + 1 ;"
      },
      {
        "id": 77,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 31,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 13,
        "to": 41,
        "label": "while"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 42,
        "to": 61,
        "label": "false"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "predicate"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 63,
        "to": 66,
        "label": "true"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 63,
        "to": 70,
        "label": "false"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 69,
        "to": 72,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 60,
        "to": 75,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      }
    ]
  }
]