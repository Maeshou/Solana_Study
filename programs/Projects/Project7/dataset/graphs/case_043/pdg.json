[
  {
    "name": "init_machine",
    "inputs": [
      "ctx: Context < InitMachine >",
      "base_rate_bps: u16"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let machine_state = & mut ctx . accounts . machine_state ;"
      },
      {
        "id": 2,
        "label": "machine_state . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "machine_state . rate_bps = if base_rate_bps < 50 { 50 } else { base_rate_bps } ;"
      },
      {
        "id": 4,
        "label": "50"
      },
      {
        "id": 5,
        "label": "base_rate_bps"
      },
      {
        "id": 6,
        "label": "machine_state . total_rolls = 4 ;"
      },
      {
        "id": 7,
        "label": "machine_state . total_hits = 1 ;"
      },
      {
        "id": 8,
        "label": "machine_state . medallion_points = 2 ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: machine_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: machine_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: machine_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: machine_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: machine_state"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: machine_state"
      }
    ]
  },
  {
    "name": "act_roll",
    "inputs": [
      "ctx: Context < ActRoll >",
      "ticket_units: u64",
      "random_seed: u64"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "let machine_state = & mut ctx . accounts . machine_state ;"
      },
      {
        "id": 12,
        "label": "let burn_units = if ticket_units < 1 { 1 } else { ticket_units } ;"
      },
      {
        "id": 13,
        "label": "1"
      },
      {
        "id": 14,
        "label": "ticket_units"
      },
      {
        "id": 15,
        "label": "token :: burn (ctx . accounts . burn_ctx () , burn_units) ? ;"
      },
      {
        "id": 16,
        "label": "let mask_a : u64 = (random_seed & 0x5555_5555_5555_5555) >> 1 ;"
      },
      {
        "id": 17,
        "label": "let mask_b : u64 = (random_seed & 0x3333_3333_3333_3333) >> 2 ;"
      },
      {
        "id": 18,
        "label": "let mask_c : u64 = (random_seed & 0x0f0f_0f0f_0f0f_0f0f) >> 4 ;"
      },
      {
        "id": 19,
        "label": "let combined_bits : u64 = mask_a ^ mask_b ^ mask_c ;"
      },
      {
        "id": 20,
        "label": "let mut weighted_score : u64 = combined_bits . count_ones () as u64 ;"
      },
      {
        "id": 21,
        "label": "if machine_state . medallion_points >= 5 { weighted_score = weighted_score + 6 ; }"
      },
      {
        "id": 22,
        "label": "weighted_score = weighted_score + 6 ;"
      },
      {
        "id": 23,
        "label": "let threshold_value : u64 = (machine_state . rate_bps as u64) / 7 + 4 ;"
      },
      {
        "id": 24,
        "label": "let is_win : bool = weighted_score > threshold_value ;"
      },
      {
        "id": 25,
        "label": "if is_win { let prize_units : u64 = burn_units * 14 ; token :: mint_to (ctx . accounts . mint_ctx () , prize_units) ? ; machine_state . total_hits = machine_state . total_hits + 1 ; if machine_state . medallion_points > 0 { machine_state . medallion_points = machine_state . medallion_points - 1 ; } }"
      },
      {
        "id": 26,
        "label": "let prize_units : u64 = burn_units * 14 ;"
      },
      {
        "id": 27,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , prize_units) ? ;"
      },
      {
        "id": 28,
        "label": "machine_state . total_hits = machine_state . total_hits + 1 ;"
      },
      {
        "id": 29,
        "label": "if machine_state . medallion_points > 0 { machine_state . medallion_points = machine_state . medallion_points - 1 ; }"
      },
      {
        "id": 30,
        "label": "machine_state . medallion_points = machine_state . medallion_points - 1 ;"
      },
      {
        "id": 31,
        "label": "if ! is_win { let consolation_units : u64 = burn_units / 5 + 1 ; token :: mint_to (ctx . accounts . mint_ctx () , consolation_units) ? ; machine_state . medallion_points = machine_state . medallion_points + 1 ; }"
      },
      {
        "id": 32,
        "label": "let consolation_units : u64 = burn_units / 5 + 1 ;"
      },
      {
        "id": 33,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , consolation_units) ? ;"
      },
      {
        "id": 34,
        "label": "machine_state . medallion_points = machine_state . medallion_points + 1 ;"
      },
      {
        "id": 35,
        "label": "machine_state . total_rolls = machine_state . total_rolls + 1 ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 11,
        "label": "def: machine_state"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: burn_units"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: burn_units"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 23,
        "label": "data_dep: machine_state"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: burn_units"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 25,
        "label": "data_dep: machine_state"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: burn_units"
      },
      {
        "from": 11,
        "to": 28,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 28,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 29,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 29,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 29,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 30,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 30,
        "label": "data_dep: machine_state"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: burn_units"
      },
      {
        "from": 11,
        "to": 31,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 31,
        "label": "data_dep: machine_state"
      },
      {
        "from": 12,
        "to": 32,
        "label": "data_dep: burn_units"
      },
      {
        "from": 11,
        "to": 34,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 34,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 35,
        "label": "data_dep: machine_state"
      },
      {
        "from": 11,
        "to": 35,
        "label": "data_dep: machine_state"
      }
    ]
  }
]