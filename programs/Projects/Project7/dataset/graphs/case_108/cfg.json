[
  {
    "name": "init",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . route ;"
      },
      {
        "id": 2,
        "label": "r . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "r . unit = unit . max (1) ;"
      },
      {
        "id": 4,
        "label": "r . counter = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "exec",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let r = & mut ctx . accounts . route ;"
      },
      {
        "id": 8,
        "label": "let m = r . counter % 3 ;"
      },
      {
        "id": 9,
        "label": "if statement"
      },
      {
        "id": 10,
        "label": "predicate"
      },
      {
        "id": 11,
        "label": "m == 0"
      },
      {
        "id": 12,
        "label": "True body"
      },
      {
        "id": 13,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Xfer { from : ctx . accounts . a_legacy . to_account_info () , to : ctx . accounts . b_legacy . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ,) , r . unit) ? ;"
      },
      {
        "id": 14,
        "label": "False body"
      },
      {
        "id": 15,
        "label": "No-op"
      },
      {
        "id": 16,
        "label": "merge"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "m == 1"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "token_2022 :: transfer (CpiContext :: new (ctx . accounts . token2022_program . to_account_info () , Xfer22 { from : ctx . accounts . a22 . to_account_info () , to : ctx . accounts . b22 . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ,) , r . unit) ? ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "m == 2"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "associated_token :: create (CpiContext :: new (ctx . accounts . associated_token_program . to_account_info () , Create { payer : ctx . accounts . owner . to_account_info () , associated_token : ctx . accounts . any_ata . to_account_info () , authority : ctx . accounts . owner . to_account_info () , mint : ctx . accounts . mint . to_account_info () , system_program : ctx . accounts . system_program . to_account_info () , token_program : ctx . accounts . token_program . to_account_info () , } ,)) ? ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "No-op"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "r . counter = r . counter . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "predicate"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 9,
        "to": 12,
        "label": "true"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "false"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 25,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  }
]