[
  {
    "name": "initialize_guild",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let guild = & mut ctx . accounts . guild_state ;"
      },
      {
        "id": 2,
        "label": "guild . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "guild . monthly_fee = monthly_fee ;"
      },
      {
        "id": 4,
        "label": "guild . member_count = 0 ;"
      },
      {
        "id": 5,
        "label": "guild . fee_token_mint = ctx . accounts . fee_token_mint . key () ;"
      },
      {
        "id": 6,
        "label": "guild . fee_collection_account = ctx . accounts . fee_collection_account . key () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "collect_dues",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let guild = & mut ctx . accounts . guild_state ;"
      },
      {
        "id": 10,
        "label": "let member_token_balance = ctx . accounts . member_token_account . amount ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "guild . monthly_fee > member_token_balance"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "return Err (ErrorCode :: InsufficientFundsForDues . into ()) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "let dues_context = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . member_token_account . to_account_info () , to : ctx . accounts . fee_collection_account . to_account_info () , authority : ctx . accounts . member . to_account_info () , } ,) ;"
      },
      {
        "id": 20,
        "label": "token :: transfer (dues_context , guild . monthly_fee) ? ;"
      },
      {
        "id": 21,
        "label": "let mut new_member = true ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "new_member"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "guild . member_count += 1 ;"
      },
      {
        "id": 28,
        "label": "new_member = false ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "No-op"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "Loop End"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 23,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 22,
        "to": 32,
        "label": "for"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      }
    ]
  }
]