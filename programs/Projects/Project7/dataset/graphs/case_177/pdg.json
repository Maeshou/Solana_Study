[
  {
    "name": "write_note",
    "inputs": [
      "ctx: Context < WriteNote >",
      "mut text: String"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "text = text . trim () . to_string () ;"
      },
      {
        "id": 2,
        "label": "if text . len () == 0 { text = \"empty\" . to_string () ; }"
      },
      {
        "id": 3,
        "label": "text = \"empty\" . to_string () ;"
      },
      {
        "id": 4,
        "label": "if text . len () > 256 { text . truncate (256) ; }"
      },
      {
        "id": 5,
        "label": "text . truncate (256) ;"
      },
      {
        "id": 6,
        "label": "let mut sum : u8 = 0 ;"
      },
      {
        "id": 7,
        "label": "for b in text . as_bytes () { sum ^= * b ; }"
      },
      {
        "id": 8,
        "label": "sum ^= * b ;"
      },
      {
        "id": 9,
        "label": "let mut data = Vec :: with_capacity (text . len () + 5) ;"
      },
      {
        "id": 10,
        "label": "data . extend_from_slice (& (text . len () as u32) . to_le_bytes ()) ;"
      },
      {
        "id": 11,
        "label": "data . push (sum) ;"
      },
      {
        "id": 12,
        "label": "data . extend_from_slice (text . as_bytes ()) ;"
      },
      {
        "id": 13,
        "label": "let metas = vec ! [AccountMeta :: new (ctx . accounts . log_cell . key () , false) , AccountMeta :: new_readonly (ctx . accounts . user . key () , false) ,] ;"
      },
      {
        "id": 14,
        "label": "let ix = Instruction { program_id : LOG_PROGRAM_ID , accounts : metas , data } ;"
      },
      {
        "id": 15,
        "label": "let mut attempts : u8 = 0 ;"
      },
      {
        "id": 16,
        "label": "if ! ctx . accounts . user . is_signer { attempts = attempts . saturating_add (1) ; }"
      },
      {
        "id": 17,
        "label": "attempts = attempts . saturating_add (1) ;"
      },
      {
        "id": 18,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 19,
        "label": "while i < 2 { let res = invoke (& ix , & [ctx . accounts . log_hint . to_account_info () , ctx . accounts . log_cell . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ; attempts = attempts . saturating_add (1) ; if res . is_ok () { break ; } i += 1 ; }"
      },
      {
        "id": 20,
        "label": "let res = invoke (& ix , & [ctx . accounts . log_hint . to_account_info () , ctx . accounts . log_cell . to_account_info () , ctx . accounts . user . to_account_info () ,] ,) ;"
      },
      {
        "id": 21,
        "label": "attempts = attempts . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "if res . is_ok () { break ; }"
      },
      {
        "id": 23,
        "label": "break ;"
      },
      {
        "id": 24,
        "label": "i += 1 ;"
      },
      {
        "id": 25,
        "label": "emit ! (LogWritten { len : text . len () as u32 , checksum : sum , attempts }) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: data"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: data"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: data"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: data"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: metas"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: ix"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: metas"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: data"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: i"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: ix"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: res"
      },
      {
        "from": 14,
        "to": 20,
        "label": "data_dep: ix"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: res"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: i"
      }
    ]
  }
]