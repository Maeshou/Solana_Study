[
  {
    "name": "init_machine",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . machine ;"
      },
      {
        "id": 2,
        "label": "m . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "m . jackpot_rate_bps = jackpot_bps . min (1000) . max (50) ;"
      },
      {
        "id": 4,
        "label": "m . pity_counter = pity_step . max (1) ;"
      },
      {
        "id": 5,
        "label": "m . rolls_done = pity_step as u64 ;"
      },
      {
        "id": 6,
        "label": "m . jackpots = 1 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_roll",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let m = & mut ctx . accounts . machine ;"
      },
      {
        "id": 10,
        "label": "token :: burn (ctx . accounts . burn_ctx () , ticket_cost . max (1)) ? ;"
      },
      {
        "id": 11,
        "label": "let mut score = 0u64 ;"
      },
      {
        "id": 12,
        "label": "let mut bit = 0u8 ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "let v = (entropy >> bit) & 1 ;"
      },
      {
        "id": 15,
        "label": "score = score . saturating_add (v + bit as u64) ;"
      },
      {
        "id": 16,
        "label": "bit = bit . saturating_add (1) ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "m . pity_counter >= 10"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "score = score . saturating_add (15) ;"
      },
      {
        "id": 23,
        "label": "False body"
      },
      {
        "id": 24,
        "label": "No-op"
      },
      {
        "id": 25,
        "label": "merge"
      },
      {
        "id": 26,
        "label": "let threshold = (m . jackpot_rate_bps as u64) . saturating_div (5) . max (5) ;"
      },
      {
        "id": 27,
        "label": "let win = score > threshold ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "win"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "let prize = ticket_cost . saturating_mul (12) ;"
      },
      {
        "id": 33,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , prize) ? ;"
      },
      {
        "id": 34,
        "label": "m . jackpots = m . jackpots . saturating_add (1) ;"
      },
      {
        "id": 35,
        "label": "m . pity_counter = 1 ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "let consolation = ticket_cost . saturating_div (8) . max (1) ;"
      },
      {
        "id": 38,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , consolation) ? ;"
      },
      {
        "id": 39,
        "label": "m . pity_counter = m . pity_counter . saturating_add (1) ;"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "m . rolls_done = m . rolls_done . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 13,
        "to": 17,
        "label": "while"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 18,
        "to": 23,
        "label": "false"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 28,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 35,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      }
    ]
  }
]