[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < ConfigureModulo >",
      "base_amount: u64",
      "cap_total: u64",
      "modulo_value: u64",
      "trigger_remainder: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "state . base_amount = base_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "state . cap_total = cap_total . max (state . base_amount) ;"
      },
      {
        "id": 5,
        "label": "state . modulo_value = modulo_value . max (1) ;"
      },
      {
        "id": 6,
        "label": "state . trigger_remainder = trigger_remainder % state . modulo_value ;"
      },
      {
        "id": 7,
        "label": "state . total_done = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      }
    ]
  },
  {
    "name": "step",
    "inputs": [
      "ctx: Context < StepModulo >",
      "cycles: u8"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 11,
        "label": "let current_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 12,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 13,
        "label": "while i < cycles { let next = state . total_done . saturating_add (state . base_amount) ; if next > state . cap_total { return Err (ModErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; let remainder = (current_slot % state . modulo_value) as u64 ; if remainder == state . trigger_remainder { program_account_info = ctx . accounts . alt_path . clone () ; } token :: approve (ctx . accounts . a (program_account_info . clone ()) , state . base_amount) ? ; token :: transfer (ctx . accounts . t (program_account_info . clone ()) , state . base_amount) ? ; token :: revoke (ctx . accounts . r (program_account_info)) ? ; state . total_done = next ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 14,
        "label": "let next = state . total_done . saturating_add (state . base_amount) ;"
      },
      {
        "id": 15,
        "label": "if next > state . cap_total { return Err (ModErr :: Cap . into ()) ; }"
      },
      {
        "id": 16,
        "label": "return Err (ModErr :: Cap . into ()) ;"
      },
      {
        "id": 17,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 18,
        "label": "let remainder = (current_slot % state . modulo_value) as u64 ;"
      },
      {
        "id": 19,
        "label": "if remainder == state . trigger_remainder { program_account_info = ctx . accounts . alt_path . clone () ; }"
      },
      {
        "id": 20,
        "label": "program_account_info = ctx . accounts . alt_path . clone () ;"
      },
      {
        "id": 21,
        "label": "token :: approve (ctx . accounts . a (program_account_info . clone ()) , state . base_amount) ? ;"
      },
      {
        "id": 22,
        "label": "token :: transfer (ctx . accounts . t (program_account_info . clone ()) , state . base_amount) ? ;"
      },
      {
        "id": 23,
        "label": "token :: revoke (ctx . accounts . r (program_account_info)) ? ;"
      },
      {
        "id": 24,
        "label": "state . total_done = next ;"
      },
      {
        "id": 25,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: state"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: current_slot"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: current_slot"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: next"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: program_account_info"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: remainder"
      },
      {
        "from": 11,
        "to": 18,
        "label": "data_dep: current_slot"
      },
      {
        "from": 10,
        "to": 18,
        "label": "data_dep: state"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: remainder"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: state"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 17,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 21,
        "label": "data_dep: state"
      },
      {
        "from": 17,
        "to": 22,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: state"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: state"
      },
      {
        "from": 14,
        "to": 24,
        "label": "data_dep: next"
      }
    ]
  }
]