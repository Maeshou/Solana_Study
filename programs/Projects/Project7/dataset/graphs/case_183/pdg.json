[
  {
    "name": "register",
    "inputs": [
      "ctx: Context < Init05 >",
      "unit: u64",
      "cap: u64",
      "hint_key: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . reg ;"
      },
      {
        "id": 2,
        "label": "r . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "r . unit = unit . max (1) ;"
      },
      {
        "id": 4,
        "label": "r . cap = cap . max (r . unit) ;"
      },
      {
        "id": 5,
        "label": "r . total = 0 ;"
      },
      {
        "id": 6,
        "label": "r . hint_key = hint_key ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: r"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "apply",
    "inputs": [
      "ctx: Context < Run05 >",
      "count: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let r = & mut ctx . accounts . reg ;"
      },
      {
        "id": 10,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 11,
        "label": "while i < count { let amt = r . unit ; let next = r . total . saturating_add (amt) ; if next > r . cap { return Err (E05 :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let mut j = 0usize ; while j < ctx . remaining_accounts . len () { let cand = & ctx . remaining_accounts [j] ; if cand . key () == r . hint_key { program_ai = cand . clone () ; break ; } j += 1 ; } token :: approve (ctx . accounts . a (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . t (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . r (program_ai)) ? ; r . total = next ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let amt = r . unit ;"
      },
      {
        "id": 13,
        "label": "let next = r . total . saturating_add (amt) ;"
      },
      {
        "id": 14,
        "label": "if next > r . cap { return Err (E05 :: Cap . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (E05 :: Cap . into ()) ;"
      },
      {
        "id": 16,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "let mut j = 0usize ;"
      },
      {
        "id": 18,
        "label": "while j < ctx . remaining_accounts . len () { let cand = & ctx . remaining_accounts [j] ; if cand . key () == r . hint_key { program_ai = cand . clone () ; break ; } j += 1 ; }"
      },
      {
        "id": 19,
        "label": "let cand = & ctx . remaining_accounts [j] ;"
      },
      {
        "id": 20,
        "label": "if cand . key () == r . hint_key { program_ai = cand . clone () ; break ; }"
      },
      {
        "id": 21,
        "label": "program_ai = cand . clone () ;"
      },
      {
        "id": 22,
        "label": "break ;"
      },
      {
        "id": 23,
        "label": "j += 1 ;"
      },
      {
        "id": 24,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 26,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 27,
        "label": "r . total = next ;"
      },
      {
        "id": 28,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: r"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: amt"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: r"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: next"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: r"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: amt"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_ai"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: j"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: j"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: j"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: cand"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: j"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: cand"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: cand"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: cand"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: j"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 25,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 9,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 13,
        "to": 27,
        "label": "data_dep: next"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: i"
      }
    ]
  }
]