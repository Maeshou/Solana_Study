[
  {
    "name": "register",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . reg ;"
      },
      {
        "id": 2,
        "label": "r . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "r . unit = unit . max (1) ;"
      },
      {
        "id": 4,
        "label": "r . cap = cap . max (r . unit) ;"
      },
      {
        "id": 5,
        "label": "r . total = 0 ;"
      },
      {
        "id": 6,
        "label": "r . hint_key = hint_key ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "apply",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let r = & mut ctx . accounts . reg ;"
      },
      {
        "id": 10,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let amt = r . unit ;"
      },
      {
        "id": 13,
        "label": "let next = r . total . saturating_add (amt) ;"
      },
      {
        "id": 14,
        "label": "if statement"
      },
      {
        "id": 15,
        "label": "predicate"
      },
      {
        "id": 16,
        "label": "next > r . cap"
      },
      {
        "id": 17,
        "label": "True body"
      },
      {
        "id": 18,
        "label": "return Err (E05 :: Cap . into ()) ;"
      },
      {
        "id": 19,
        "label": "False body"
      },
      {
        "id": 20,
        "label": "No-op"
      },
      {
        "id": 21,
        "label": "merge"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let mut j = 0usize ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let cand = & ctx . remaining_accounts [j] ;"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "cand . key () == r . hint_key"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "program_ai = cand . clone () ;"
      },
      {
        "id": 31,
        "label": "break ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "j += 1 ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 38,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 39,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 40,
        "label": "r . total = next ;"
      },
      {
        "id": 41,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "Loop End"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "predicate"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "true"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 14,
        "to": 19,
        "label": "false"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 26,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 24,
        "to": 36,
        "label": "while"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 11,
        "to": 42,
        "label": "while"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      }
    ]
  }
]