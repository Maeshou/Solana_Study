[
  {
    "name": "seed",
    "inputs": [
      "ctx: Context < SeedP >",
      "base: u64",
      "lid: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . panel ;"
      },
      {
        "id": 2,
        "label": "p . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "p . base = if base < 1 { 1 } else { base } ;"
      },
      {
        "id": 4,
        "label": "1"
      },
      {
        "id": 5,
        "label": "base"
      },
      {
        "id": 6,
        "label": "p . lid = if lid < p . base { p . base } else { lid } ;"
      },
      {
        "id": 7,
        "label": "p . base"
      },
      {
        "id": 8,
        "label": "lid"
      },
      {
        "id": 9,
        "label": "p . ct = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: p"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "fire",
    "inputs": [
      "ctx: Context < FireP >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let p = & mut ctx . accounts . panel ;"
      },
      {
        "id": 13,
        "label": "let mut rounds : u8 = 0 ;"
      },
      {
        "id": 14,
        "label": "while rounds < times { let mut amt = p . base ; if amt < 1 { amt = 1 ; } let plan = p . ct . saturating_add (amt) ; if plan > p . lid { return Err (ParityErr :: Overflow . into ()) ; } let odd = (plan % 2) == 1 ; let prg = if odd { ctx . accounts . switcher . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ; token :: approve (ctx . accounts . ctx_a (prg . clone ()) , amt) ? ; token :: transfer (ctx . accounts . ctx_t (prg . clone ()) , amt) ? ; token :: revoke (ctx . accounts . ctx_r (prg)) ? ; p . ct = plan ; if p . ct % (p . base * 8) == 0 { p . ct = p . ct ; } rounds = rounds . saturating_add (1) ; }"
      },
      {
        "id": 15,
        "label": "let mut amt = p . base ;"
      },
      {
        "id": 16,
        "label": "if amt < 1 { amt = 1 ; }"
      },
      {
        "id": 17,
        "label": "amt = 1 ;"
      },
      {
        "id": 18,
        "label": "let plan = p . ct . saturating_add (amt) ;"
      },
      {
        "id": 19,
        "label": "if plan > p . lid { return Err (ParityErr :: Overflow . into ()) ; }"
      },
      {
        "id": 20,
        "label": "return Err (ParityErr :: Overflow . into ()) ;"
      },
      {
        "id": 21,
        "label": "let odd = (plan % 2) == 1 ;"
      },
      {
        "id": 22,
        "label": "let prg = if odd { ctx . accounts . switcher . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 23,
        "label": "ctx . accounts . switcher . to_account_info ()"
      },
      {
        "id": 24,
        "label": "ctx . accounts . token_program . to_account_info ()"
      },
      {
        "id": 25,
        "label": "token :: approve (ctx . accounts . ctx_a (prg . clone ()) , amt) ? ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . ctx_t (prg . clone ()) , amt) ? ;"
      },
      {
        "id": 27,
        "label": "token :: revoke (ctx . accounts . ctx_r (prg)) ? ;"
      },
      {
        "id": 28,
        "label": "p . ct = plan ;"
      },
      {
        "id": 29,
        "label": "if p . ct % (p . base * 8) == 0 { p . ct = p . ct ; }"
      },
      {
        "id": 30,
        "label": "p . ct = p . ct ;"
      },
      {
        "id": 31,
        "label": "rounds = rounds . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: amt"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: plan"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: p"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: plan"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: p"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: odd"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: plan"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: prg"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: odd"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: prg"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: amt"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: prg"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: amt"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: prg"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: plan"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      }
    ]
  }
]