[
  {
    "name": "init_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool_info = & mut ctx . accounts . pool_info ;"
      },
      {
        "id": 2,
        "label": "pool_info . admin_key = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool_info . base_rate_bps = base_rate_bps . min (3000) . max (25) ;"
      },
      {
        "id": 4,
        "label": "pool_info . minimum_units = minimum_units . max (1) ;"
      },
      {
        "id": 5,
        "label": "pool_info . current_round = (warmup_rounds as u64) . max (1) ;"
      },
      {
        "id": 6,
        "label": "pool_info . cumulative_distributed = minimum_units . saturating_add (3) ;"
      },
      {
        "id": 7,
        "label": "pool_info . mode_flag = RewardMode :: Balanced ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_settle",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let pool_info = & mut ctx . accounts . pool_info ;"
      },
      {
        "id": 11,
        "label": "require ! (contributed_units >= pool_info . minimum_units , ErrStk :: TooSmall) ;"
      },
      {
        "id": 12,
        "label": "let mut fee_bps = 400u64 ;"
      },
      {
        "id": 13,
        "label": "let mut round_cursor = 1u64 ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "fee_bps > 100"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "fee_bps = fee_bps . saturating_sub (50) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "round_cursor = round_cursor . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "Loop End"
      },
      {
        "id": 25,
        "label": "let mut accumulated_bonus_bps = 0u64 ;"
      },
      {
        "id": 26,
        "label": "let mut epoch_cursor = 0u16 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "accumulated_bonus_bps = accumulated_bonus_bps . saturating_add (ramp_bps_per_epoch as u64) ;"
      },
      {
        "id": 29,
        "label": "epoch_cursor = epoch_cursor . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let mut effective_bps = pool_info . base_rate_bps as u64 ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "pool_info . mode_flag == RewardMode :: Cautious"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "effective_bps = effective_bps . saturating_sub (30) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "pool_info . mode_flag == RewardMode :: Focused"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "effective_bps = effective_bps . saturating_add (90) ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "let capped_bps = { let candidate = effective_bps . saturating_add (accumulated_bonus_bps) ; let ceiling = effective_bps . saturating_mul (3) ; if candidate > ceiling { ceiling } else { candidate } } ;"
      },
      {
        "id": 49,
        "label": "let gross_reward = contributed_units . saturating_mul (capped_bps) / 10_000 ;"
      },
      {
        "id": 50,
        "label": "let fee_amount = gross_reward . saturating_mul (fee_bps) / 10_000 ;"
      },
      {
        "id": 51,
        "label": "let distributable = gross_reward . saturating_sub (fee_amount) ;"
      },
      {
        "id": 52,
        "label": "if statement"
      },
      {
        "id": 53,
        "label": "predicate"
      },
      {
        "id": 54,
        "label": "distributable < pool_info . minimum_units . saturating_div (8)"
      },
      {
        "id": 55,
        "label": "True body"
      },
      {
        "id": 56,
        "label": "pool_info . mode_flag = RewardMode :: Cautious ;"
      },
      {
        "id": 57,
        "label": "pool_info . current_round = pool_info . current_round . saturating_add (1) ;"
      },
      {
        "id": 58,
        "label": "return Err (ErrStk :: InsufficientYield . into ()) ;"
      },
      {
        "id": 59,
        "label": "False body"
      },
      {
        "id": 60,
        "label": "No-op"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "token :: transfer (ctx . accounts . pool_to_staker () , distributable) ? ;"
      },
      {
        "id": 63,
        "label": "pool_info . cumulative_distributed = pool_info . cumulative_distributed . saturating_add (distributable) ;"
      },
      {
        "id": 64,
        "label": "pool_info . current_round = pool_info . current_round . saturating_add (1) ;"
      },
      {
        "id": 65,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 14,
        "to": 24,
        "label": "while"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "while"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 40,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "predicate"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "true"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 52,
        "to": 59,
        "label": "false"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      }
    ]
  }
]