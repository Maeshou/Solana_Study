[
  {
    "name": "improper_mint",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < MintCtx085 >"
    ],
    "attributes": [],
    "body": [
      "let total_amount = 830 ;",
      "let fee = total_amount * 15 / 100 ;",
      "let net = total_amount - fee ;",
      "let part1 = net / 3 ;",
      "let part2 = net - part1 ;",
      "let ix_fee = spl_token :: instruction :: mint_to (& ctx . accounts . token_prog . key () , & ctx . accounts . mint_acc . key () , & ctx . accounts . treasury_acc . key () , & ctx . accounts . authority . key () , & [] , fee ,) ? ;",
      "invoke_signed (& ix_fee , & [ctx . accounts . token_prog . to_account_info () , ctx . accounts . mint_acc . to_account_info () , ctx . accounts . treasury_acc . to_account_info () , ctx . accounts . authority . to_account_info () ,] , & []) ? ;",
      "let ix1 = spl_token :: instruction :: mint_to (& ctx . accounts . token_prog . key () , & ctx . accounts . mint_acc . key () , & ctx . accounts . recipient1 . key () , & ctx . accounts . authority . key () , & [] , part1 ,) ? ;",
      "invoke_signed (& ix1 , & [ctx . accounts . token_prog . to_account_info () , ctx . accounts . mint_acc . to_account_info () , ctx . accounts . recipient1 . to_account_info () , ctx . accounts . authority . to_account_info () ,] , & []) ? ;",
      "let ix2 = spl_token :: instruction :: mint_to (& ctx . accounts . token_prog . key () , & ctx . accounts . mint_acc . key () , & ctx . accounts . recipient2 . key () , & ctx . accounts . authority . key () , & [] , part2 ,) ? ;",
      "invoke_signed (& ix2 , & [ctx . accounts . token_prog . to_account_info () , ctx . accounts . mint_acc . to_account_info () , ctx . accounts . recipient2 . to_account_info () , ctx . accounts . authority . to_account_info () ,] , & []) ? ;",
      "msg ! (\"Distributed with fee {} to treasury, remaining {} split\" , fee , net) ;",
      "Ok (())"
    ]
  },
  {
    "name": "MintCtx085",
    "node_type": "struct",
    "fields": [
      {
        "name": "mint_acc",
        "attribute": "# [account (mut , has_one = auth)]",
        "field_type": "Account < 'info , Mint >"
      },
      {
        "name": "dest_acc",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "auth",
        "attribute": "# [account (signer)]",
        "field_type": "AccountInfo < 'info >"
      },
      {
        "name": "token_prog",
        "attribute": "# [doc = \" CHECK: token program unchecked\"]",
        "field_type": "UncheckedAccount < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]