[
  {
    "name": "init_project",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let project = & mut ctx . accounts . project ;"
      },
      {
        "id": 2,
        "label": "project . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "project . milestone_step = milestone_step_input ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "project . milestone_step < 5"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "project . milestone_step = 5 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "project . material_burned = 1 ;"
      },
      {
        "id": 13,
        "label": "project . progress_points = 0 ;"
      },
      {
        "id": 14,
        "label": "project . milestones_completed = 0 ;"
      },
      {
        "id": 15,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_build",
    "nodes": [
      {
        "id": 16,
        "label": "Entry"
      },
      {
        "id": 17,
        "label": "let project = & mut ctx . accounts . project ;"
      },
      {
        "id": 18,
        "label": "let mut burn_units : u64 = material_units ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "burn_units < 1"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "burn_units = 1 ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "token :: burn (ctx . accounts . burn_ctx () , burn_units) ? ;"
      },
      {
        "id": 28,
        "label": "let mut added_points : u64 = burn_units / 2 + 1 ;"
      },
      {
        "id": 29,
        "label": "let mut step_counter : u8 = 0 ;"
      },
      {
        "id": 30,
        "label": "Loop Start"
      },
      {
        "id": 31,
        "label": "added_points = added_points + step_counter as u64 ;"
      },
      {
        "id": 32,
        "label": "step_counter = step_counter + 1 ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "project . progress_points = project . progress_points + added_points ;"
      },
      {
        "id": 35,
        "label": "project . material_burned = project . material_burned + burn_units ;"
      },
      {
        "id": 36,
        "label": "let mut bonus_units : u64 = 0 ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "project . progress_points >= project . milestone_step"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "bonus_units = project . milestone_step / 3 + 1 ;"
      },
      {
        "id": 42,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , bonus_units) ? ;"
      },
      {
        "id": 43,
        "label": "project . progress_points = project . progress_points - project . milestone_step ;"
      },
      {
        "id": 44,
        "label": "project . milestones_completed = project . milestones_completed + 1 ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "if statement"
      },
      {
        "id": 49,
        "label": "predicate"
      },
      {
        "id": 50,
        "label": "project . milestones_completed % 5 == 0 && project . milestones_completed > 0"
      },
      {
        "id": 51,
        "label": "True body"
      },
      {
        "id": 52,
        "label": "let additional = bonus_units + 2 ;"
      },
      {
        "id": 53,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , additional) ? ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "while"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 37,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "predicate"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "true"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 48,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      }
    ]
  }
]