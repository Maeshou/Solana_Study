[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitParity >",
      "unit: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "ctx . accounts . cfg . unit = unit . max (1) ;"
      },
      {
        "id": 2,
        "label": "ctx . accounts . cfg . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "Ok (())"
      }
    ],
    "edges": []
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < RunParity >"
    ],
    "nodes": [
      {
        "id": 4,
        "label": "Entry"
      },
      {
        "id": 5,
        "label": "let slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 6,
        "label": "let odd = (slot % 2) != 0 ;"
      },
      {
        "id": 7,
        "label": "if odd { token_2022 :: transfer (CpiContext :: new (ctx . accounts . token2022_program . to_account_info () , Xfer22 { from : ctx . accounts . a22 . to_account_info () , to : ctx . accounts . b22 . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , ctx . accounts . cfg . unit) ? ; }"
      },
      {
        "id": 8,
        "label": "token_2022 :: transfer (CpiContext :: new (ctx . accounts . token2022_program . to_account_info () , Xfer22 { from : ctx . accounts . a22 . to_account_info () , to : ctx . accounts . b22 . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , ctx . accounts . cfg . unit) ? ;"
      },
      {
        "id": 9,
        "label": "if ! odd { token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Xfer { from : ctx . accounts . a_legacy . to_account_info () , to : ctx . accounts . b_legacy . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , ctx . accounts . cfg . unit) ? ; }"
      },
      {
        "id": 10,
        "label": "token :: transfer (CpiContext :: new (ctx . accounts . token_program . to_account_info () , Xfer { from : ctx . accounts . a_legacy . to_account_info () , to : ctx . accounts . b_legacy . to_account_info () , authority : ctx . accounts . operator . to_account_info () , } ,) , ctx . accounts . cfg . unit) ? ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 5,
        "label": "def: slot"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: odd"
      },
      {
        "from": 5,
        "to": 6,
        "label": "data_dep: slot"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: odd"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: odd"
      }
    ]
  }
]