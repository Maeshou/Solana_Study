[
  {
    "name": "init_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . base_bps = clip_u16 (base_bps , 25 , 3500) ;"
      },
      {
        "id": 4,
        "label": "s . min_units = if min_units < 1 { 1 } else { min_units } ;"
      },
      {
        "id": 5,
        "label": "s . round = 2 ;"
      },
      {
        "id": 6,
        "label": "s . paid = 3 ;"
      },
      {
        "id": 7,
        "label": "s . mode = Mode :: Neutral ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_settle",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let s = & mut ctx . accounts . pool ;"
      },
      {
        "id": 11,
        "label": "require ! (stake_units >= s . min_units , ErrStk :: TooSmall) ;"
      },
      {
        "id": 12,
        "label": "let mut bonus_bps : u64 = 0 ;"
      },
      {
        "id": 13,
        "label": "let mut i = 1u32 ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "bonus_bps = bonus_bps + (10_000 / ((i as u64) + 9)) ;"
      },
      {
        "id": 16,
        "label": "i = i + 1 ;"
      },
      {
        "id": 17,
        "label": "Loop End"
      },
      {
        "id": 18,
        "label": "let mut effective = s . base_bps as u64 ;"
      },
      {
        "id": 19,
        "label": "if statement"
      },
      {
        "id": 20,
        "label": "predicate"
      },
      {
        "id": 21,
        "label": "s . mode == Mode :: Conservative"
      },
      {
        "id": 22,
        "label": "True body"
      },
      {
        "id": 23,
        "label": "effective = effective - (effective / 20) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "s . mode == Mode :: Aggressive"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "effective = effective + (effective / 12) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "let mut total_bps = effective + bonus_bps / 40 ;"
      },
      {
        "id": 36,
        "label": "let ceiling = effective * 3 ;"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "total_bps > ceiling"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "total_bps = ceiling ;"
      },
      {
        "id": 42,
        "label": "False body"
      },
      {
        "id": 43,
        "label": "No-op"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "let mut fee_bps = 500u64 ;"
      },
      {
        "id": 46,
        "label": "let mut r = 0u64 ;"
      },
      {
        "id": 47,
        "label": "Loop Start"
      },
      {
        "id": 48,
        "label": "if statement"
      },
      {
        "id": 49,
        "label": "predicate"
      },
      {
        "id": 50,
        "label": "fee_bps > 100"
      },
      {
        "id": 51,
        "label": "True body"
      },
      {
        "id": 52,
        "label": "fee_bps = fee_bps - 100 ;"
      },
      {
        "id": 53,
        "label": "False body"
      },
      {
        "id": 54,
        "label": "No-op"
      },
      {
        "id": 55,
        "label": "merge"
      },
      {
        "id": 56,
        "label": "r = r + 1 ;"
      },
      {
        "id": 57,
        "label": "Loop End"
      },
      {
        "id": 58,
        "label": "let gross = mul_div (stake_units , total_bps , 10_000) ;"
      },
      {
        "id": 59,
        "label": "let fee = mul_div (gross , fee_bps , 10_000) ;"
      },
      {
        "id": 60,
        "label": "let net = gross - fee ;"
      },
      {
        "id": 61,
        "label": "if statement"
      },
      {
        "id": 62,
        "label": "predicate"
      },
      {
        "id": 63,
        "label": "net < s . min_units / 12"
      },
      {
        "id": 64,
        "label": "True body"
      },
      {
        "id": 65,
        "label": "s . mode = Mode :: Conservative ;"
      },
      {
        "id": 66,
        "label": "s . round = s . round + 1 ;"
      },
      {
        "id": 67,
        "label": "return Err (ErrStk :: Small . into ()) ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "token :: transfer (ctx . accounts . pool_to_user () , net) ? ;"
      },
      {
        "id": 72,
        "label": "s . paid = s . paid + net ;"
      },
      {
        "id": 73,
        "label": "s . round = s . round + 1 ;"
      },
      {
        "id": 74,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 14,
        "to": 17,
        "label": "while"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "predicate"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "true"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 19,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 37,
        "to": 42,
        "label": "false"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "predicate"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "true"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 48,
        "to": 53,
        "label": "false"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 47,
        "to": 57,
        "label": "while"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "predicate"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "true"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 61,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      }
    ]
  },
  {
    "name": "clip_u16",
    "nodes": [
      {
        "id": 75,
        "label": "Entry"
      },
      {
        "id": 76,
        "label": "let mut out = v ;"
      },
      {
        "id": 77,
        "label": "if statement"
      },
      {
        "id": 78,
        "label": "predicate"
      },
      {
        "id": 79,
        "label": "out < lo"
      },
      {
        "id": 80,
        "label": "True body"
      },
      {
        "id": 81,
        "label": "out = lo ;"
      },
      {
        "id": 82,
        "label": "False body"
      },
      {
        "id": 83,
        "label": "No-op"
      },
      {
        "id": 84,
        "label": "merge"
      },
      {
        "id": 85,
        "label": "if statement"
      },
      {
        "id": 86,
        "label": "predicate"
      },
      {
        "id": 87,
        "label": "out > hi"
      },
      {
        "id": 88,
        "label": "True body"
      },
      {
        "id": 89,
        "label": "out = hi ;"
      },
      {
        "id": 90,
        "label": "False body"
      },
      {
        "id": 91,
        "label": "No-op"
      },
      {
        "id": 92,
        "label": "merge"
      },
      {
        "id": 93,
        "label": "out"
      }
    ],
    "edges": [
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "predicate"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 77,
        "to": 80,
        "label": "true"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 77,
        "to": 82,
        "label": "false"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 81,
        "to": 84,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "predicate"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 85,
        "to": 88,
        "label": "true"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 85,
        "to": 90,
        "label": "false"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 89,
        "to": 92,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      }
    ]
  },
  {
    "name": "mul_div",
    "nodes": [
      {
        "id": 94,
        "label": "Entry"
      },
      {
        "id": 95,
        "label": "((a as u128 * b as u128) / d as u128) as u64"
      }
    ],
    "edges": [
      {
        "from": 94,
        "to": 95,
        "label": "next"
      }
    ]
  }
]