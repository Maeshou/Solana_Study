[
  {
    "name": "open",
    "inputs": [
      "ctx: Context < Init06 >",
      "step: u64",
      "cap: u64",
      "window: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . window ;"
      },
      {
        "id": 2,
        "label": "w . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "w . step = step . max (1) ;"
      },
      {
        "id": 4,
        "label": "w . cap = cap . max (w . step) ;"
      },
      {
        "id": 5,
        "label": "w . window = window . max (2) ;"
      },
      {
        "id": 6,
        "label": "w . pos = 0 ;"
      },
      {
        "id": 7,
        "label": "w . total = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: w"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: w"
      }
    ]
  },
  {
    "name": "pump",
    "inputs": [
      "ctx: Context < Run06 >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let w = & mut ctx . accounts . window ;"
      },
      {
        "id": 11,
        "label": "let mut t = 0u8 ;"
      },
      {
        "id": 12,
        "label": "while t < times { let amt = w . step ; let next = w . total . saturating_add (amt) ; if next > w . cap { return Err (E06 :: Cap . into ()) ; } let half = w . window / 2 ; let mut program_ai = ctx . accounts . token_program . to_account_info () ; if w . pos >= half { program_ai = ctx . accounts . gateway . clone () ; } token :: approve (ctx . accounts . ap (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . rv (program_ai)) ? ; w . total = next ; w . pos = w . pos . saturating_add (1) ; if w . pos % w . window == 0 { w . pos = 0 ; } t = t . saturating_add (1) ; }"
      },
      {
        "id": 13,
        "label": "let amt = w . step ;"
      },
      {
        "id": 14,
        "label": "let next = w . total . saturating_add (amt) ;"
      },
      {
        "id": 15,
        "label": "if next > w . cap { return Err (E06 :: Cap . into ()) ; }"
      },
      {
        "id": 16,
        "label": "return Err (E06 :: Cap . into ()) ;"
      },
      {
        "id": 17,
        "label": "let half = w . window / 2 ;"
      },
      {
        "id": 18,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 19,
        "label": "if w . pos >= half { program_ai = ctx . accounts . gateway . clone () ; }"
      },
      {
        "id": 20,
        "label": "program_ai = ctx . accounts . gateway . clone () ;"
      },
      {
        "id": 21,
        "label": "token :: approve (ctx . accounts . ap (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 22,
        "label": "token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 23,
        "label": "token :: revoke (ctx . accounts . rv (program_ai)) ? ;"
      },
      {
        "id": 24,
        "label": "w . total = next ;"
      },
      {
        "id": 25,
        "label": "w . pos = w . pos . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "if w . pos % w . window == 0 { w . pos = 0 ; }"
      },
      {
        "id": 27,
        "label": "w . pos = 0 ;"
      },
      {
        "id": 28,
        "label": "t = t . saturating_add (1) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: w"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: t"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: t"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: amt"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: w"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: next"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: w"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: amt"
      },
      {
        "from": 14,
        "to": 15,
        "label": "data_dep: next"
      },
      {
        "from": 10,
        "to": 15,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: half"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: program_ai"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: half"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: program_ai"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: amt"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: amt"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: program_ai"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: w"
      },
      {
        "from": 14,
        "to": 24,
        "label": "data_dep: next"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 26,
        "label": "data_dep: w"
      },
      {
        "from": 10,
        "to": 27,
        "label": "data_dep: w"
      },
      {
        "from": 11,
        "to": 28,
        "label": "data_dep: t"
      },
      {
        "from": 11,
        "to": 28,
        "label": "data_dep: t"
      }
    ]
  }
]