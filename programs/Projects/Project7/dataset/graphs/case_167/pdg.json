[
  {
    "name": "prepare",
    "inputs": [
      "ctx: Context < PrepareDivider >",
      "unit: u64",
      "top: u64",
      "divider: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dashboard ;"
      },
      {
        "id": 2,
        "label": "d . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "d . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if d . unit < 1 { d . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "d . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "d . top = top ;"
      },
      {
        "id": 7,
        "label": "if d . top < d . unit { d . top = d . unit ; }"
      },
      {
        "id": 8,
        "label": "d . top = d . unit ;"
      },
      {
        "id": 9,
        "label": "d . divider = if divider < 1 { 1 } else { divider } ;"
      },
      {
        "id": 10,
        "label": "1"
      },
      {
        "id": 11,
        "label": "divider"
      },
      {
        "id": 12,
        "label": "d . total = 0 ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: d"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: d"
      }
    ]
  },
  {
    "name": "process",
    "inputs": [
      "ctx: Context < ProcessDivider >",
      "steps: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let d = & mut ctx . accounts . dashboard ;"
      },
      {
        "id": 16,
        "label": "let mut s : u8 = 0 ;"
      },
      {
        "id": 17,
        "label": "while s < steps { let mut amount = d . unit ; if amount < 1 { amount = 1 ; } let next = d . total . saturating_add (amount) ; if next > d . top { return Err (DividerErr :: Top . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let mut index : usize = 0 ; if d . total >= d . divider { index = 1 ; } if ctx . remaining_accounts . len () > index { program_ai = ctx . remaining_accounts [index] . clone () ; } token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ; d . total = next ; if d . total % (d . unit * 5) == 0 { d . divider = d . divider . saturating_add (1) ; } s = s . saturating_add (1) ; }"
      },
      {
        "id": 18,
        "label": "let mut amount = d . unit ;"
      },
      {
        "id": 19,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 20,
        "label": "amount = 1 ;"
      },
      {
        "id": 21,
        "label": "let next = d . total . saturating_add (amount) ;"
      },
      {
        "id": 22,
        "label": "if next > d . top { return Err (DividerErr :: Top . into ()) ; }"
      },
      {
        "id": 23,
        "label": "return Err (DividerErr :: Top . into ()) ;"
      },
      {
        "id": 24,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 25,
        "label": "let mut index : usize = 0 ;"
      },
      {
        "id": 26,
        "label": "if d . total >= d . divider { index = 1 ; }"
      },
      {
        "id": 27,
        "label": "index = 1 ;"
      },
      {
        "id": 28,
        "label": "if ctx . remaining_accounts . len () > index { program_ai = ctx . remaining_accounts [index] . clone () ; }"
      },
      {
        "id": 29,
        "label": "program_ai = ctx . remaining_accounts [index] . clone () ;"
      },
      {
        "id": 30,
        "label": "token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 31,
        "label": "token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 32,
        "label": "token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ;"
      },
      {
        "id": 33,
        "label": "d . total = next ;"
      },
      {
        "id": 34,
        "label": "if d . total % (d . unit * 5) == 0 { d . divider = d . divider . saturating_add (1) ; }"
      },
      {
        "id": 35,
        "label": "d . divider = d . divider . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "s = s . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: amount"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: next"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: next"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: d"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: program_ai"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 26,
        "label": "data_dep: d"
      },
      {
        "from": 24,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 24,
        "to": 29,
        "label": "data_dep: program_ai"
      },
      {
        "from": 24,
        "to": 30,
        "label": "data_dep: program_ai"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: amount"
      },
      {
        "from": 24,
        "to": 31,
        "label": "data_dep: program_ai"
      },
      {
        "from": 18,
        "to": 31,
        "label": "data_dep: amount"
      },
      {
        "from": 24,
        "to": 32,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: next"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: d"
      },
      {
        "from": 15,
        "to": 35,
        "label": "data_dep: d"
      }
    ]
  }
]