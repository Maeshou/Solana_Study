[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitRelay >",
      "q: u64",
      "limit: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . stage ;"
      },
      {
        "id": 2,
        "label": "s . keyholder = ctx . accounts . keyholder . key () ;"
      },
      {
        "id": 3,
        "label": "s . q = if q < 1 { 1 } else { q } ;"
      },
      {
        "id": 4,
        "label": "1"
      },
      {
        "id": 5,
        "label": "q"
      },
      {
        "id": 6,
        "label": "s . limit = if limit < s . q { s . q } else { limit } ;"
      },
      {
        "id": 7,
        "label": "s . q"
      },
      {
        "id": 8,
        "label": "limit"
      },
      {
        "id": 9,
        "label": "s . done = 0 ;"
      },
      {
        "id": 10,
        "label": "s . toggle = 0 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecRelay >",
      "rounds: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let s = & mut ctx . accounts . stage ;"
      },
      {
        "id": 14,
        "label": "let mut c : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while c < rounds { let mut amt = s . q ; if amt < 1 { amt = 1 ; } let nxt = s . done . saturating_add (amt) ; if nxt > s . limit { return Err (RelayErr :: Bound . into ()) ; } let choose_alt = (s . toggle % 2) == 1 ; let prg = if choose_alt { ctx . accounts . flex . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ; token :: approve (ctx . accounts . ctx_approve (prg . clone ()) , amt) ? ; token :: transfer (ctx . accounts . ctx_transfer (prg . clone () , true) , amt) ? ; token :: transfer (ctx . accounts . ctx_transfer (prg . clone () , false) , amt) ? ; token :: revoke (ctx . accounts . ctx_revoke (prg)) ? ; s . done = nxt ; if s . done % (s . q * 2) == 0 { s . toggle = s . toggle . saturating_add (1) ; } c = c . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amt = s . q ;"
      },
      {
        "id": 17,
        "label": "if amt < 1 { amt = 1 ; }"
      },
      {
        "id": 18,
        "label": "amt = 1 ;"
      },
      {
        "id": 19,
        "label": "let nxt = s . done . saturating_add (amt) ;"
      },
      {
        "id": 20,
        "label": "if nxt > s . limit { return Err (RelayErr :: Bound . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (RelayErr :: Bound . into ()) ;"
      },
      {
        "id": 22,
        "label": "let choose_alt = (s . toggle % 2) == 1 ;"
      },
      {
        "id": 23,
        "label": "let prg = if choose_alt { ctx . accounts . flex . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . flex . to_account_info ()"
      },
      {
        "id": 25,
        "label": "ctx . accounts . token_program . to_account_info ()"
      },
      {
        "id": 26,
        "label": "token :: approve (ctx . accounts . ctx_approve (prg . clone ()) , amt) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . ctx_transfer (prg . clone () , true) , amt) ? ;"
      },
      {
        "id": 28,
        "label": "token :: transfer (ctx . accounts . ctx_transfer (prg . clone () , false) , amt) ? ;"
      },
      {
        "id": 29,
        "label": "token :: revoke (ctx . accounts . ctx_revoke (prg)) ? ;"
      },
      {
        "id": 30,
        "label": "s . done = nxt ;"
      },
      {
        "id": 31,
        "label": "if s . done % (s . q * 2) == 0 { s . toggle = s . toggle . saturating_add (1) ; }"
      },
      {
        "id": 32,
        "label": "s . toggle = s . toggle . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "c = c . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amt"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: nxt"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amt"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: nxt"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: choose_alt"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: prg"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: choose_alt"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: prg"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amt"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: prg"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: amt"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: prg"
      },
      {
        "from": 16,
        "to": 28,
        "label": "data_dep: amt"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: prg"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: nxt"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: s"
      }
    ]
  }
]