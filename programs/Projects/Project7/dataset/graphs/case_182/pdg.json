[
  {
    "name": "prime",
    "inputs": [
      "ctx: Context < Init04 >",
      "base: u64",
      "roof: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let m = & mut ctx . accounts . meas ;"
      },
      {
        "id": 2,
        "label": "m . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "m . base = base . max (1) ;"
      },
      {
        "id": 4,
        "label": "m . roof = roof . max (m . base) ;"
      },
      {
        "id": 5,
        "label": "m . acc = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: m"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: m"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: m"
      }
    ]
  },
  {
    "name": "push",
    "inputs": [
      "ctx: Context < Run04 >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let m = & mut ctx . accounts . meas ;"
      },
      {
        "id": 9,
        "label": "let mut n = 0u8 ;"
      },
      {
        "id": 10,
        "label": "while n < times { let amt = m . base ; let next = m . acc . saturating_add (amt) ; if next > m . roof { return Err (E04 :: Roof . into ()) ; } token :: approve (ctx . accounts . approve_token () , amt) ? ; let program_ai = ctx . accounts . any_program . clone () ; token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ; m . acc = next ; n = n . saturating_add (1) ; }"
      },
      {
        "id": 11,
        "label": "let amt = m . base ;"
      },
      {
        "id": 12,
        "label": "let next = m . acc . saturating_add (amt) ;"
      },
      {
        "id": 13,
        "label": "if next > m . roof { return Err (E04 :: Roof . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (E04 :: Roof . into ()) ;"
      },
      {
        "id": 15,
        "label": "token :: approve (ctx . accounts . approve_token () , amt) ? ;"
      },
      {
        "id": 16,
        "label": "let program_ai = ctx . accounts . any_program . clone () ;"
      },
      {
        "id": 17,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 18,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;"
      },
      {
        "id": 19,
        "label": "m . acc = next ;"
      },
      {
        "id": 20,
        "label": "n = n . saturating_add (1) ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: m"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: n"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: n"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: m"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: m"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: n"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: n"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: amt"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: m"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: m"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: amt"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: m"
      },
      {
        "from": 11,
        "to": 15,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_ai"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: program_ai"
      },
      {
        "from": 11,
        "to": 17,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 8,
        "to": 19,
        "label": "data_dep: m"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: n"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: n"
      }
    ]
  }
]