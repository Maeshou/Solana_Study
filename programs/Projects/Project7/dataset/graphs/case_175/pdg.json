[
  {
    "name": "boot",
    "inputs": [
      "ctx: Context < BootDual >",
      "base: u64",
      "ceiling: u64",
      "threshold_low: u64",
      "threshold_high: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let d = & mut ctx . accounts . dashboard ;"
      },
      {
        "id": 2,
        "label": "d . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "d . base = base ;"
      },
      {
        "id": 4,
        "label": "if d . base < 1 { d . base = 1 ; }"
      },
      {
        "id": 5,
        "label": "d . base = 1 ;"
      },
      {
        "id": 6,
        "label": "d . ceiling = ceiling ;"
      },
      {
        "id": 7,
        "label": "if d . ceiling < d . base { d . ceiling = d . base ; }"
      },
      {
        "id": 8,
        "label": "d . ceiling = d . base ;"
      },
      {
        "id": 9,
        "label": "d . threshold_low = if threshold_low < 1 { 1 } else { threshold_low } ;"
      },
      {
        "id": 10,
        "label": "1"
      },
      {
        "id": 11,
        "label": "threshold_low"
      },
      {
        "id": 12,
        "label": "d . threshold_high = if threshold_high < d . threshold_low { d . threshold_low } else { threshold_high } ;"
      },
      {
        "id": 13,
        "label": "d . threshold_low"
      },
      {
        "id": 14,
        "label": "threshold_high"
      },
      {
        "id": 15,
        "label": "d . total = 0 ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: d"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: d"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: d"
      }
    ]
  },
  {
    "name": "flow",
    "inputs": [
      "ctx: Context < FlowDual >",
      "count: u8"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let d = & mut ctx . accounts . dashboard ;"
      },
      {
        "id": 19,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 20,
        "label": "while i < count { let mut amount = d . base ; if amount < 1 { amount = 1 ; } let next = d . total . saturating_add (amount) ; if next > d . ceiling { return Err (DualErr :: Ceiling . into ()) ; } let mut use_external = false ; if d . total >= d . threshold_low { use_external = true ; } if d . total >= d . threshold_high { use_external = false ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if use_external { program_ai = ctx . accounts . external_path . clone () ; } token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ; d . total = next ; if d . total % (d . base * 7) == 0 { d . threshold_low = d . threshold_low . saturating_add (1) ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 21,
        "label": "let mut amount = d . base ;"
      },
      {
        "id": 22,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 23,
        "label": "amount = 1 ;"
      },
      {
        "id": 24,
        "label": "let next = d . total . saturating_add (amount) ;"
      },
      {
        "id": 25,
        "label": "if next > d . ceiling { return Err (DualErr :: Ceiling . into ()) ; }"
      },
      {
        "id": 26,
        "label": "return Err (DualErr :: Ceiling . into ()) ;"
      },
      {
        "id": 27,
        "label": "let mut use_external = false ;"
      },
      {
        "id": 28,
        "label": "if d . total >= d . threshold_low { use_external = true ; }"
      },
      {
        "id": 29,
        "label": "use_external = true ;"
      },
      {
        "id": 30,
        "label": "if d . total >= d . threshold_high { use_external = false ; }"
      },
      {
        "id": 31,
        "label": "use_external = false ;"
      },
      {
        "id": 32,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 33,
        "label": "if use_external { program_ai = ctx . accounts . external_path . clone () ; }"
      },
      {
        "id": 34,
        "label": "program_ai = ctx . accounts . external_path . clone () ;"
      },
      {
        "id": 35,
        "label": "token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 36,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 37,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;"
      },
      {
        "id": 38,
        "label": "d . total = next ;"
      },
      {
        "id": 39,
        "label": "if d . total % (d . base * 7) == 0 { d . threshold_low = d . threshold_low . saturating_add (1) ; }"
      },
      {
        "id": 40,
        "label": "d . threshold_low = d . threshold_low . saturating_add (1) ;"
      },
      {
        "id": 41,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 20,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: amount"
      },
      {
        "from": 18,
        "to": 21,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: amount"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: next"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: d"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: amount"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: next"
      },
      {
        "from": 18,
        "to": 25,
        "label": "data_dep: d"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: use_external"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: d"
      },
      {
        "from": 27,
        "to": 28,
        "label": "data_dep: use_external"
      },
      {
        "from": 27,
        "to": 29,
        "label": "data_dep: use_external"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 30,
        "label": "data_dep: d"
      },
      {
        "from": 27,
        "to": 30,
        "label": "data_dep: use_external"
      },
      {
        "from": 27,
        "to": 31,
        "label": "data_dep: use_external"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: program_ai"
      },
      {
        "from": 27,
        "to": 33,
        "label": "data_dep: use_external"
      },
      {
        "from": 32,
        "to": 33,
        "label": "data_dep: program_ai"
      },
      {
        "from": 32,
        "to": 34,
        "label": "data_dep: program_ai"
      },
      {
        "from": 32,
        "to": 35,
        "label": "data_dep: program_ai"
      },
      {
        "from": 21,
        "to": 35,
        "label": "data_dep: amount"
      },
      {
        "from": 32,
        "to": 36,
        "label": "data_dep: program_ai"
      },
      {
        "from": 21,
        "to": 36,
        "label": "data_dep: amount"
      },
      {
        "from": 32,
        "to": 37,
        "label": "data_dep: program_ai"
      },
      {
        "from": 18,
        "to": 38,
        "label": "data_dep: d"
      },
      {
        "from": 24,
        "to": 38,
        "label": "data_dep: next"
      },
      {
        "from": 18,
        "to": 39,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 39,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 39,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 39,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 40,
        "label": "data_dep: d"
      },
      {
        "from": 18,
        "to": 40,
        "label": "data_dep: d"
      }
    ]
  }
]