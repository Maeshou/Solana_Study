[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init01 >",
      "unit: u64",
      "cap: u64",
      "use_alt: bool"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "st . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "st . unit = unit . max (1) ;"
      },
      {
        "id": 4,
        "label": "st . cap = cap . max (st . unit) ;"
      },
      {
        "id": 5,
        "label": "st . sent = 0 ;"
      },
      {
        "id": 6,
        "label": "st . use_alt = use_alt ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "run",
    "inputs": [
      "ctx: Context < Run01 >",
      "n: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let st = & mut ctx . accounts . state ;"
      },
      {
        "id": 10,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 11,
        "label": "while i < n { let amt = st . unit ; let next = st . sent . saturating_add (amt) ; if next > st . cap { return Err (E01 :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if st . use_alt { program_ai = ctx . accounts . alt_program . clone () ; } token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ; st . sent = next ; if st . sent % (st . unit * 3) == 0 { st . use_alt = ! st . use_alt ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let amt = st . unit ;"
      },
      {
        "id": 13,
        "label": "let next = st . sent . saturating_add (amt) ;"
      },
      {
        "id": 14,
        "label": "if next > st . cap { return Err (E01 :: Cap . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (E01 :: Cap . into ()) ;"
      },
      {
        "id": 16,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "if st . use_alt { program_ai = ctx . accounts . alt_program . clone () ; }"
      },
      {
        "id": 18,
        "label": "program_ai = ctx . accounts . alt_program . clone () ;"
      },
      {
        "id": 19,
        "label": "token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 20,
        "label": "token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 21,
        "label": "token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ;"
      },
      {
        "id": 22,
        "label": "st . sent = next ;"
      },
      {
        "id": 23,
        "label": "if st . sent % (st . unit * 3) == 0 { st . use_alt = ! st . use_alt ; }"
      },
      {
        "id": 24,
        "label": "st . use_alt = ! st . use_alt ;"
      },
      {
        "id": 25,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: st"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: amt"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: next"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: st"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: amt"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_ai"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: amt"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_ai"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: next"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: st"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: st"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 25,
        "label": "data_dep: i"
      }
    ]
  }
]