[
  {
    "name": "init_field",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let field = & mut ctx . accounts . field ;"
      },
      {
        "id": 2,
        "label": "field . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "field . daily_cap = daily_cap_input ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "field . daily_cap < 10"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "field . daily_cap = 10 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "field . base_yield = base_yield_input ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "field . base_yield < 1"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "field . base_yield = 1 ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "field . issued_today = 1 ;"
      },
      {
        "id": 22,
        "label": "field . streak_days = 1 ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_harvest",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let field = & mut ctx . accounts . field ;"
      },
      {
        "id": 26,
        "label": "let mut burn_amount : u64 = fertilizer_units ;"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "burn_amount < 1"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "burn_amount = 1 ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "token :: burn (ctx . accounts . burn_ctx () , burn_amount) ? ;"
      },
      {
        "id": 36,
        "label": "let mut multiplier_percent : u64 = 100 ;"
      },
      {
        "id": 37,
        "label": "let mut day_counter : u8 = 0 ;"
      },
      {
        "id": 38,
        "label": "Loop Start"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "(day_counter + 1) % 2 == 0"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "multiplier_percent = multiplier_percent + 2 ;"
      },
      {
        "id": 44,
        "label": "False body"
      },
      {
        "id": 45,
        "label": "No-op"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "day_counter = day_counter + 1 ;"
      },
      {
        "id": 48,
        "label": "Loop End"
      },
      {
        "id": 49,
        "label": "let base_units : u64 = field . base_yield + burn_amount / 5 + 1 ;"
      },
      {
        "id": 50,
        "label": "let scaled_units : u64 = (base_units as u128 * multiplier_percent as u128 / 100u128) as u64 ;"
      },
      {
        "id": 51,
        "label": "let projected_total : u64 = field . issued_today + scaled_units ;"
      },
      {
        "id": 52,
        "label": "if statement"
      },
      {
        "id": 53,
        "label": "predicate"
      },
      {
        "id": 54,
        "label": "projected_total > field . daily_cap"
      },
      {
        "id": 55,
        "label": "True body"
      },
      {
        "id": 56,
        "label": "let mint_now = field . daily_cap - field . issued_today ;"
      },
      {
        "id": 57,
        "label": "if statement"
      },
      {
        "id": 58,
        "label": "predicate"
      },
      {
        "id": 59,
        "label": "mint_now > 0"
      },
      {
        "id": 60,
        "label": "True body"
      },
      {
        "id": 61,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , mint_now) ? ;"
      },
      {
        "id": 62,
        "label": "False body"
      },
      {
        "id": 63,
        "label": "No-op"
      },
      {
        "id": 64,
        "label": "merge"
      },
      {
        "id": 65,
        "label": "field . issued_today = field . daily_cap ;"
      },
      {
        "id": 66,
        "label": "field . streak_days = 1 ;"
      },
      {
        "id": 67,
        "label": "return Err (FieldErr :: DailyCap . into ()) ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , scaled_units) ? ;"
      },
      {
        "id": 72,
        "label": "field . issued_today = projected_total ;"
      },
      {
        "id": 73,
        "label": "field . streak_days = field . streak_days + 1 ;"
      },
      {
        "id": 74,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 39,
        "to": 44,
        "label": "false"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 43,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 38,
        "to": 48,
        "label": "while"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "predicate"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 52,
        "to": 55,
        "label": "true"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "predicate"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 57,
        "to": 60,
        "label": "true"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 57,
        "to": 62,
        "label": "false"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 52,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      }
    ]
  }
]