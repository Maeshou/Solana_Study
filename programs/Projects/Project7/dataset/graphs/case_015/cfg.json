[
  {
    "name": "init_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 2,
        "label": "pool . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "pool . base_rate_bps = base_bps . min (2500) . max (50) ;"
      },
      {
        "id": 4,
        "label": "pool . minimum_stake = min_units . max (1) ;"
      },
      {
        "id": 5,
        "label": "pool . current_round = early_rounds . max (1) as u64 ;"
      },
      {
        "id": 6,
        "label": "pool . cumulative_payout = min_units . saturating_div (3) . max (1) ;"
      },
      {
        "id": 7,
        "label": "pool . conservative_mode = false ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_settle",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let pool = & mut ctx . accounts . pool ;"
      },
      {
        "id": 11,
        "label": "require ! (deposit_units >= pool . minimum_stake , ErrStk :: TooSmall) ;"
      },
      {
        "id": 12,
        "label": "let mut fee_bps = 500u64 ;"
      },
      {
        "id": 13,
        "label": "let mut r = 1u64 ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "fee_bps > 100"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "fee_bps = fee_bps . saturating_sub (100) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "Loop End"
      },
      {
        "id": 25,
        "label": "let mut boost_bps = 0u64 ;"
      },
      {
        "id": 26,
        "label": "let mut e = 0u16 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "boost_bps = boost_bps . saturating_add (boost_step_bps as u64) ;"
      },
      {
        "id": 29,
        "label": "e = e . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let mut effective_bps = pool . base_rate_bps as u64 ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "pool . conservative_mode"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "effective_bps = effective_bps . saturating_sub (25) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let capped = effective_bps . saturating_add (boost_bps) ;"
      },
      {
        "id": 41,
        "label": "let bps_for_reward = if capped > effective_bps . saturating_mul (3) { effective_bps . saturating_mul (3) } else { capped } ;"
      },
      {
        "id": 42,
        "label": "let gross = deposit_units . saturating_mul (bps_for_reward) / 10_000 ;"
      },
      {
        "id": 43,
        "label": "let fee = gross . saturating_mul (fee_bps) / 10_000 ;"
      },
      {
        "id": 44,
        "label": "let net = gross . saturating_sub (fee) ;"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "net < pool . minimum_stake . saturating_div (12)"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "pool . conservative_mode = true ;"
      },
      {
        "id": 50,
        "label": "pool . current_round = pool . current_round . saturating_add (1) ;"
      },
      {
        "id": 51,
        "label": "return Err (ErrStk :: NoMeaningfulReward . into ()) ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "pool . cumulative_payout = pool . cumulative_payout . saturating_add (net) ;"
      },
      {
        "id": 56,
        "label": "pool . current_round = pool . current_round . saturating_add (1) ;"
      },
      {
        "id": 57,
        "label": "token :: transfer (ctx . accounts . pool_to_staker () , net) ? ;"
      },
      {
        "id": 58,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 14,
        "to": 24,
        "label": "while"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "while"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 45,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      }
    ]
  }
]