[
  {
    "name": "init_boss",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let boss_state = & mut ctx . accounts . boss_state ;"
      },
      {
        "id": 2,
        "label": "boss_state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "boss_state . default_reward = base_reward ;"
      },
      {
        "id": 4,
        "label": "boss_state . combo_step = combo_step . min (1000) ;"
      },
      {
        "id": 5,
        "label": "boss_state . defeats = 1 ;"
      },
      {
        "id": 6,
        "label": "boss_state . max_combo_seen = 1 ;"
      },
      {
        "id": 7,
        "label": "boss_state . hard_flag = false ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_distribute",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "require ! (party_size > 0 , RaidErr :: EmptyParty) ;"
      },
      {
        "id": 11,
        "label": "let boss_state = & mut ctx . accounts . boss_state ;"
      },
      {
        "id": 12,
        "label": "let mut group_bonus = 0u64 ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "group_bonus = group_bonus . saturating_add (boss_state . combo_step as u64) ;"
      },
      {
        "id": 15,
        "label": "Loop End"
      },
      {
        "id": 16,
        "label": "if statement"
      },
      {
        "id": 17,
        "label": "predicate"
      },
      {
        "id": 18,
        "label": "combo > boss_state . max_combo_seen"
      },
      {
        "id": 19,
        "label": "True body"
      },
      {
        "id": 20,
        "label": "boss_state . max_combo_seen = combo as u64 ;"
      },
      {
        "id": 21,
        "label": "False body"
      },
      {
        "id": 22,
        "label": "No-op"
      },
      {
        "id": 23,
        "label": "merge"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "combo >= 40"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "boss_state . hard_flag = true ;"
      },
      {
        "id": 29,
        "label": "False body"
      },
      {
        "id": 30,
        "label": "boss_state . hard_flag = false ;"
      },
      {
        "id": 31,
        "label": "merge"
      },
      {
        "id": 32,
        "label": "let mut payout = boss_state . default_reward . saturating_add (group_bonus) ;"
      },
      {
        "id": 33,
        "label": "if statement"
      },
      {
        "id": 34,
        "label": "predicate"
      },
      {
        "id": 35,
        "label": "boss_state . hard_flag"
      },
      {
        "id": 36,
        "label": "True body"
      },
      {
        "id": 37,
        "label": "payout = payout . saturating_mul (2) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "No-op"
      },
      {
        "id": 40,
        "label": "merge"
      },
      {
        "id": 41,
        "label": "let cpi = ctx . accounts . transfer_reward () ;"
      },
      {
        "id": 42,
        "label": "token :: transfer (cpi , payout) ? ;"
      },
      {
        "id": 43,
        "label": "boss_state . defeats = boss_state . defeats . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 13,
        "to": 15,
        "label": "for"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "predicate"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "true"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 16,
        "to": 21,
        "label": "false"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 20,
        "to": 23,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 24,
        "to": 29,
        "label": "false"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "predicate"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "true"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 33,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      }
    ]
  }
]