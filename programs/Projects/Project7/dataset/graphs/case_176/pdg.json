[
  {
    "name": "create",
    "inputs": [
      "ctx: Context < CreateFlip >",
      "unit: u64",
      "roof: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . flow ;"
      },
      {
        "id": 2,
        "label": "f . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "f . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if f . unit < 1 { f . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "f . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "f . roof = roof ;"
      },
      {
        "id": 7,
        "label": "if f . roof < f . unit { f . roof = f . unit ; }"
      },
      {
        "id": 8,
        "label": "f . roof = f . unit ;"
      },
      {
        "id": 9,
        "label": "f . total = 0 ;"
      },
      {
        "id": 10,
        "label": "f . even_round = true ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: f"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: f"
      }
    ]
  },
  {
    "name": "drive",
    "inputs": [
      "ctx: Context < DriveFlip >",
      "reps: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let f = & mut ctx . accounts . flow ;"
      },
      {
        "id": 14,
        "label": "let mut r : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while r < reps { let mut amount = f . unit ; if amount < 1 { amount = 1 ; } let plan = f . total . saturating_add (amount) ; if plan > f . roof { return Err (FlipErr :: Roof . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if f . even_round { program_ai = ctx . accounts . alt_path . clone () ; } token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . r (program_ai)) ? ; f . total = plan ; f . even_round = ! f . even_round ; r = r . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = f . unit ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let plan = f . total . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if plan > f . roof { return Err (FlipErr :: Roof . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (FlipErr :: Roof . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "if f . even_round { program_ai = ctx . accounts . alt_path . clone () ; }"
      },
      {
        "id": 24,
        "label": "program_ai = ctx . accounts . alt_path . clone () ;"
      },
      {
        "id": 25,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 28,
        "label": "f . total = plan ;"
      },
      {
        "id": 29,
        "label": "f . even_round = ! f . even_round ;"
      },
      {
        "id": 30,
        "label": "r = r . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: f"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: f"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: plan"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: f"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: plan"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: f"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: f"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: plan"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: f"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: f"
      }
    ]
  }
]