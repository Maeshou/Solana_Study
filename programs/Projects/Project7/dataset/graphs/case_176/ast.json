[
  {
    "name": "create",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < CreateFlip >",
      "unit: u64",
      "roof: u64"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . flow ;",
      "f . operator = ctx . accounts . operator . key () ;",
      "f . unit = unit ;",
      "if f . unit < 1",
      "{",
      "f . unit = 1 ;",
      "}",
      "f . roof = roof ;",
      "if f . roof < f . unit",
      "{",
      "f . roof = f . unit ;",
      "}",
      "f . total = 0 ;",
      "f . even_round = true ;",
      "Ok (())"
    ]
  },
  {
    "name": "drive",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < DriveFlip >",
      "reps: u8"
    ],
    "attributes": [],
    "body": [
      "let f = & mut ctx . accounts . flow ;",
      "let mut r : u8 = 0 ;",
      "while r < reps",
      "{",
      "let mut amount = f . unit ;",
      "if amount < 1",
      "{",
      "amount = 1 ;",
      "} let plan = f . total . saturating_add (amount) ;",
      "if plan > f . roof",
      "{",
      "return Err (FlipErr :: Roof . into ()) ;",
      "} let mut program_ai = ctx . accounts . token_program . to_account_info () ;",
      "if f . even_round",
      "{",
      "program_ai = ctx . accounts . alt_path . clone () ;",
      "} token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ;",
      "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ;",
      "token :: revoke (ctx . accounts . r (program_ai)) ? ;",
      "f . total = plan ;",
      "f . even_round = ! f . even_round ;",
      "r = r . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "CreateFlip",
    "node_type": "struct",
    "fields": [
      {
        "name": "flow",
        "attribute": "# [account (init , payer = operator , space = 8 + 32 + 8 + 8 + 8 + 1)]",
        "field_type": "Account < 'info , FlipState >"
      },
      {
        "name": "operator",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "DriveFlip",
    "node_type": "struct",
    "fields": [
      {
        "name": "flow",
        "attribute": "# [account (mut , has_one = operator)]",
        "field_type": "Account < 'info , FlipState >"
      },
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "stage_in",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "stage_out",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      },
      {
        "name": "alt_path",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "FlipState",
    "node_type": "struct",
    "fields": [
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "unit",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "roof",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "total",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "even_round",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]