[
  {
    "name": "set_route",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let route_config = & mut ctx . accounts . route_config ;"
      },
      {
        "id": 2,
        "label": "route_config . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "route_config . program_key = target_program_key ;"
      },
      {
        "id": 4,
        "label": "route_config . daily_cap = daily_cap ;"
      },
      {
        "id": 5,
        "label": "route_config . moved_today = 0 ;"
      },
      {
        "id": 6,
        "label": "route_config . last_day = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "hop",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let route_config = & mut ctx . accounts . route_config ;"
      },
      {
        "id": 10,
        "label": "let current_day = (Clock :: get () ? . unix_timestamp as u64) / 86_400 ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "route_config . last_day != current_day"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "route_config . last_day = current_day ;"
      },
      {
        "id": 16,
        "label": "route_config . moved_today = 0 ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let planned_total = route_config . moved_today . saturating_add (move_amount) ;"
      },
      {
        "id": 21,
        "label": "require ! (planned_total <= route_config . daily_cap , RouteErr :: DailyLimit) ;"
      },
      {
        "id": 22,
        "label": "let wanted_key = route_config . program_key ;"
      },
      {
        "id": 23,
        "label": "let mut selected_program : Option < AccountInfo > = None ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "if statement"
      },
      {
        "id": 26,
        "label": "predicate"
      },
      {
        "id": 27,
        "label": "candidate . key () == wanted_key"
      },
      {
        "id": 28,
        "label": "True body"
      },
      {
        "id": 29,
        "label": "selected_program = Some (candidate . clone ()) ;"
      },
      {
        "id": 30,
        "label": "break ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "No-op"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "let selected_program = selected_program . ok_or (RouteErr :: ProgramNotFound) ? ;"
      },
      {
        "id": 36,
        "label": "token :: approve (CpiContext :: new (selected_program . clone () , Approve { to : ctx . accounts . from_account . to_account_info () , delegate : ctx . accounts . to_account . to_account_info () , authority : ctx . accounts . admin . to_account_info () , }) , move_amount) ? ;"
      },
      {
        "id": 37,
        "label": "token :: transfer (CpiContext :: new (selected_program . clone () , Transfer { from : ctx . accounts . from_account . to_account_info () , to : ctx . accounts . to_account . to_account_info () , authority : ctx . accounts . admin . to_account_info () , }) , move_amount) ? ;"
      },
      {
        "id": 38,
        "label": "token :: revoke (CpiContext :: new (selected_program , Revoke { source : ctx . accounts . from_account . to_account_info () , authority : ctx . accounts . admin . to_account_info () , })) ? ;"
      },
      {
        "id": 39,
        "label": "route_config . moved_today = planned_total ;"
      },
      {
        "id": 40,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 11,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "predicate"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 25,
        "to": 28,
        "label": "true"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 25,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 24,
        "to": 34,
        "label": "for"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      }
    ]
  }
]