[
  {
    "name": "register",
    "inputs": [
      "ctx: Context < RegisterHint >",
      "unit: u64",
      "cap: u64",
      "hint_program_key: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 2,
        "label": "h . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "h . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if h . unit < 1 { h . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "h . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "h . cap = cap ;"
      },
      {
        "id": 7,
        "label": "if h . cap < h . unit { h . cap = h . unit ; }"
      },
      {
        "id": 8,
        "label": "h . cap = h . unit ;"
      },
      {
        "id": 9,
        "label": "h . total = 0 ;"
      },
      {
        "id": 10,
        "label": "h . hint_program_key = hint_program_key ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: h"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: h"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: h"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecuteHint >",
      "loops: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 14,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while i < loops { let mut amount = h . unit ; if amount < 1 { amount = 1 ; } let planned = h . total . saturating_add (amount) ; if planned > h . cap { return Err (HintErr :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let mut idx : usize = 0 ; while idx < ctx . remaining_accounts . len () { let candidate = & ctx . remaining_accounts [idx] ; if candidate . key () == h . hint_program_key { program_ai = candidate . clone () ; break ; } idx = idx . saturating_add (1) ; } token :: approve (ctx . accounts . ap (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . rv (program_ai)) ? ; h . total = planned ; if h . total % (h . unit * 5) == 0 { h . hint_program_key = h . hint_program_key ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = h . unit ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let planned = h . total . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if planned > h . cap { return Err (HintErr :: Cap . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (HintErr :: Cap . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let mut idx : usize = 0 ;"
      },
      {
        "id": 24,
        "label": "while idx < ctx . remaining_accounts . len () { let candidate = & ctx . remaining_accounts [idx] ; if candidate . key () == h . hint_program_key { program_ai = candidate . clone () ; break ; } idx = idx . saturating_add (1) ; }"
      },
      {
        "id": 25,
        "label": "let candidate = & ctx . remaining_accounts [idx] ;"
      },
      {
        "id": 26,
        "label": "if candidate . key () == h . hint_program_key { program_ai = candidate . clone () ; break ; }"
      },
      {
        "id": 27,
        "label": "program_ai = candidate . clone () ;"
      },
      {
        "id": 28,
        "label": "break ;"
      },
      {
        "id": 29,
        "label": "idx = idx . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "token :: approve (ctx . accounts . ap (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 31,
        "label": "token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 32,
        "label": "token :: revoke (ctx . accounts . rv (program_ai)) ? ;"
      },
      {
        "id": 33,
        "label": "h . total = planned ;"
      },
      {
        "id": 34,
        "label": "if h . total % (h . unit * 5) == 0 { h . hint_program_key = h . hint_program_key ; }"
      },
      {
        "id": 35,
        "label": "h . hint_program_key = h . hint_program_key ;"
      },
      {
        "id": 36,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: planned"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: h"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: planned"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 13,
        "to": 24,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: candidate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: candidate"
      },
      {
        "from": 13,
        "to": 26,
        "label": "data_dep: h"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: candidate"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: candidate"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 30,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 32,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 33,
        "label": "data_dep: h"
      },
      {
        "from": 19,
        "to": 33,
        "label": "data_dep: planned"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 34,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 35,
        "label": "data_dep: h"
      },
      {
        "from": 13,
        "to": 35,
        "label": "data_dep: h"
      }
    ]
  }
]