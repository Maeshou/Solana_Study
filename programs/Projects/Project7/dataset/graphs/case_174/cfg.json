[
  {
    "name": "register",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 2,
        "label": "h . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "h . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "h . unit < 1"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "h . unit = 1 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "h . cap = cap ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "h . cap < h . unit"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "h . cap = h . unit ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "h . total = 0 ;"
      },
      {
        "id": 22,
        "label": "h . hint_program_key = hint_program_key ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let h = & mut ctx . accounts . hub ;"
      },
      {
        "id": 26,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let mut amount = h . unit ;"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "amount < 1"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "amount = 1 ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "No-op"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "let planned = h . total . saturating_add (amount) ;"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "planned > h . cap"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "return Err (HintErr :: Cap . into ()) ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "No-op"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 47,
        "label": "let mut idx : usize = 0 ;"
      },
      {
        "id": 48,
        "label": "Loop Start"
      },
      {
        "id": 49,
        "label": "let candidate = & ctx . remaining_accounts [idx] ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "candidate . key () == h . hint_program_key"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "program_ai = candidate . clone () ;"
      },
      {
        "id": 55,
        "label": "break ;"
      },
      {
        "id": 56,
        "label": "False body"
      },
      {
        "id": 57,
        "label": "No-op"
      },
      {
        "id": 58,
        "label": "merge"
      },
      {
        "id": 59,
        "label": "idx = idx . saturating_add (1) ;"
      },
      {
        "id": 60,
        "label": "Loop End"
      },
      {
        "id": 61,
        "label": "token :: approve (ctx . accounts . ap (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 62,
        "label": "token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 63,
        "label": "token :: revoke (ctx . accounts . rv (program_ai)) ? ;"
      },
      {
        "id": 64,
        "label": "h . total = planned ;"
      },
      {
        "id": 65,
        "label": "if statement"
      },
      {
        "id": 66,
        "label": "predicate"
      },
      {
        "id": 67,
        "label": "h . total % (h . unit * 5) == 0"
      },
      {
        "id": 68,
        "label": "True body"
      },
      {
        "id": 69,
        "label": "h . hint_program_key = h . hint_program_key ;"
      },
      {
        "id": 70,
        "label": "False body"
      },
      {
        "id": 71,
        "label": "No-op"
      },
      {
        "id": 72,
        "label": "merge"
      },
      {
        "id": 73,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 74,
        "label": "Loop End"
      },
      {
        "id": 75,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 29,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 38,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 50,
        "to": 56,
        "label": "false"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 55,
        "to": 58,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 48,
        "to": 60,
        "label": "while"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "predicate"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 65,
        "to": 68,
        "label": "true"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 65,
        "to": 70,
        "label": "false"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 69,
        "to": 72,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 27,
        "to": 74,
        "label": "while"
      },
      {
        "from": 74,
        "to": 75,
        "label": "next"
      }
    ]
  }
]