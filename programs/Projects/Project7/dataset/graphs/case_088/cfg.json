[
  {
    "name": "init_staking_pool",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 2,
        "label": "pool . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "pool . reward_token_mint = ctx . accounts . reward_mint . key () ;"
      },
      {
        "id": 4,
        "label": "pool . stake_token_mint = ctx . accounts . stake_mint . key () ;"
      },
      {
        "id": 5,
        "label": "pool . reward_rate = reward_rate ;"
      },
      {
        "id": 6,
        "label": "pool . min_stake_amount = min_stake_amount ;"
      },
      {
        "id": 7,
        "label": "pool . total_staked = 0 ;"
      },
      {
        "id": 8,
        "label": "pool . last_update_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 9,
        "label": "pool . pool_status = PoolStatus :: Active ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "distribute_rewards",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 13,
        "label": "let current_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 14,
        "label": "let slot_diff = current_slot - pool . last_update_slot ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "pool . pool_status == PoolStatus :: Paused"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "return Ok (()) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "slot_diff > 0"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "let reward_per_slot = pool . reward_rate ;"
      },
      {
        "id": 28,
        "label": "let mut total_rewards = reward_per_slot * slot_diff ;"
      },
      {
        "id": 29,
        "label": "let max_rewards = 1_000_000 * 10u64 . pow (6) ;"
      },
      {
        "id": 30,
        "label": "if statement"
      },
      {
        "id": 31,
        "label": "predicate"
      },
      {
        "id": 32,
        "label": "total_rewards > max_rewards"
      },
      {
        "id": 33,
        "label": "True body"
      },
      {
        "id": 34,
        "label": "total_rewards = max_rewards ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "let stakers = & mut ctx . remaining_accounts ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "! stakers . is_empty ()"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "let reward_per_staker = total_rewards / stakers . len () as u64 ;"
      },
      {
        "id": 44,
        "label": "Loop Start"
      },
      {
        "id": 45,
        "label": "let staker_account = & stakers [i] ;"
      },
      {
        "id": 46,
        "label": "let staker_token_account = & stakers [i + 1] ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "reward_per_staker >= pool . min_stake_amount"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "Loop End"
      },
      {
        "id": 56,
        "label": "pool . last_update_slot = current_slot ;"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "False body"
      },
      {
        "id": 61,
        "label": "No-op"
      },
      {
        "id": 62,
        "label": "merge"
      },
      {
        "id": 63,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "predicate"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "true"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 44,
        "to": 55,
        "label": "for"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 39,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 23,
        "to": 60,
        "label": "false"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      }
    ]
  }
]