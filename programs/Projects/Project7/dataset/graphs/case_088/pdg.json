[
  {
    "name": "init_staking_pool",
    "inputs": [
      "ctx: Context < InitStakingPool >",
      "reward_rate: u64",
      "min_stake_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 2,
        "label": "pool . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "pool . reward_token_mint = ctx . accounts . reward_mint . key () ;"
      },
      {
        "id": 4,
        "label": "pool . stake_token_mint = ctx . accounts . stake_mint . key () ;"
      },
      {
        "id": 5,
        "label": "pool . reward_rate = reward_rate ;"
      },
      {
        "id": 6,
        "label": "pool . min_stake_amount = min_stake_amount ;"
      },
      {
        "id": 7,
        "label": "pool . total_staked = 0 ;"
      },
      {
        "id": 8,
        "label": "pool . last_update_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 9,
        "label": "pool . pool_status = PoolStatus :: Active ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: pool"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: pool"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: pool"
      }
    ]
  },
  {
    "name": "distribute_rewards",
    "inputs": [
      "ctx: Context < DistributeRewards >"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let pool = & mut ctx . accounts . staking_pool ;"
      },
      {
        "id": 13,
        "label": "let current_slot = Clock :: get () ? . slot ;"
      },
      {
        "id": 14,
        "label": "let slot_diff = current_slot - pool . last_update_slot ;"
      },
      {
        "id": 15,
        "label": "if pool . pool_status == PoolStatus :: Paused { return Ok (()) ; }"
      },
      {
        "id": 16,
        "label": "return Ok (()) ;"
      },
      {
        "id": 17,
        "label": "if slot_diff > 0 { let reward_per_slot = pool . reward_rate ; let mut total_rewards = reward_per_slot * slot_diff ; let max_rewards = 1_000_000 * 10u64 . pow (6) ; if total_rewards > max_rewards { total_rewards = max_rewards ; } let stakers = & mut ctx . remaining_accounts ; if ! stakers . is_empty () { let reward_per_staker = total_rewards / stakers . len () as u64 ; for i in (0 .. stakers . len ()) . step_by (2) { let staker_account = & stakers [i] ; let staker_token_account = & stakers [i + 1] ; if reward_per_staker >= pool . min_stake_amount { mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ; } } pool . last_update_slot = current_slot ; } }"
      },
      {
        "id": 18,
        "label": "let reward_per_slot = pool . reward_rate ;"
      },
      {
        "id": 19,
        "label": "let mut total_rewards = reward_per_slot * slot_diff ;"
      },
      {
        "id": 20,
        "label": "let max_rewards = 1_000_000 * 10u64 . pow (6) ;"
      },
      {
        "id": 21,
        "label": "if total_rewards > max_rewards { total_rewards = max_rewards ; }"
      },
      {
        "id": 22,
        "label": "total_rewards = max_rewards ;"
      },
      {
        "id": 23,
        "label": "let stakers = & mut ctx . remaining_accounts ;"
      },
      {
        "id": 24,
        "label": "if ! stakers . is_empty () { let reward_per_staker = total_rewards / stakers . len () as u64 ; for i in (0 .. stakers . len ()) . step_by (2) { let staker_account = & stakers [i] ; let staker_token_account = & stakers [i + 1] ; if reward_per_staker >= pool . min_stake_amount { mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ; } } pool . last_update_slot = current_slot ; }"
      },
      {
        "id": 25,
        "label": "let reward_per_staker = total_rewards / stakers . len () as u64 ;"
      },
      {
        "id": 26,
        "label": "for i in (0 .. stakers . len ()) . step_by (2) { let staker_account = & stakers [i] ; let staker_token_account = & stakers [i + 1] ; if reward_per_staker >= pool . min_stake_amount { mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ; } }"
      },
      {
        "id": 27,
        "label": "let staker_account = & stakers [i] ;"
      },
      {
        "id": 28,
        "label": "let staker_token_account = & stakers [i + 1] ;"
      },
      {
        "id": 29,
        "label": "if reward_per_staker >= pool . min_stake_amount { mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ; }"
      },
      {
        "id": 30,
        "label": "mint_to (ctx . accounts . mint_rewards_ctx () . with_signer (& [& [b\"pool\" , pool . authority . as_ref () , & [ctx . bumps . staking_pool]]]) , reward_per_staker ,) ? ;"
      },
      {
        "id": 31,
        "label": "pool . last_update_slot = current_slot ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: pool"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: current_slot"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: slot_diff"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: current_slot"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: pool"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: slot_diff"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: pool"
      },
      {
        "from": 14,
        "to": 17,
        "label": "data_dep: slot_diff"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 17,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 17,
        "label": "data_dep: current_slot"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: reward_per_slot"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: pool"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: total_rewards"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: reward_per_slot"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: slot_diff"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: max_rewards"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: total_rewards"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: max_rewards"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: total_rewards"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: max_rewards"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: total_rewards"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: max_rewards"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: stakers"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: stakers"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: total_rewards"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: stakers"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 24,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 24,
        "label": "data_dep: current_slot"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: reward_per_staker"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: total_rewards"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: stakers"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: stakers"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: reward_per_staker"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 26,
        "label": "data_dep: pool"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: reward_per_staker"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: staker_account"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: stakers"
      },
      {
        "from": 28,
        "to": 28,
        "label": "def: staker_token_account"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: stakers"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: reward_per_staker"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: pool"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: pool"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: reward_per_staker"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: pool"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: reward_per_staker"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: pool"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: current_slot"
      }
    ]
  }
]