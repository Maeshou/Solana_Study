[
  {
    "name": "create",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let flow = & mut ctx . accounts . flow ;"
      },
      {
        "id": 2,
        "label": "flow . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "flow . unit_tokens = unit_tokens . max (1) ;"
      },
      {
        "id": 4,
        "label": "flow . total_cap = total_cap . max (flow . unit_tokens) ;"
      },
      {
        "id": 5,
        "label": "flow . total_sum = 0 ;"
      },
      {
        "id": 6,
        "label": "flow . use_alternate_this_round = true ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "drive",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let flow = & mut ctx . accounts . flow ;"
      },
      {
        "id": 10,
        "label": "let mut step_counter : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "Loop Start"
      },
      {
        "id": 12,
        "label": "let updated_sum = flow . total_sum . saturating_add (flow . unit_tokens) ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "updated_sum > flow . total_cap"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "return Err (EvenRoundErr :: Cap . into ()) ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "flow . use_alternate_this_round"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "program_account_info = ctx . accounts . alternate_program . clone () ;"
      },
      {
        "id": 27,
        "label": "False body"
      },
      {
        "id": 28,
        "label": "No-op"
      },
      {
        "id": 29,
        "label": "merge"
      },
      {
        "id": 30,
        "label": "token :: approve (ctx . accounts . ap (program_account_info . clone ()) , flow . unit_tokens) ? ;"
      },
      {
        "id": 31,
        "label": "token :: transfer (ctx . accounts . tr (program_account_info . clone ()) , flow . unit_tokens) ? ;"
      },
      {
        "id": 32,
        "label": "token :: revoke (ctx . accounts . rv (program_account_info)) ? ;"
      },
      {
        "id": 33,
        "label": "flow . total_sum = updated_sum ;"
      },
      {
        "id": 34,
        "label": "flow . use_alternate_this_round = ! flow . use_alternate_this_round ;"
      },
      {
        "id": 35,
        "label": "step_counter = step_counter . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 22,
        "to": 27,
        "label": "false"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 11,
        "to": 36,
        "label": "while"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      }
    ]
  }
]