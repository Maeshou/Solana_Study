[
  {
    "name": "create",
    "inputs": [
      "ctx: Context < CreateEvenRound >",
      "unit_tokens: u64",
      "total_cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let flow = & mut ctx . accounts . flow ;"
      },
      {
        "id": 2,
        "label": "flow . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "flow . unit_tokens = unit_tokens . max (1) ;"
      },
      {
        "id": 4,
        "label": "flow . total_cap = total_cap . max (flow . unit_tokens) ;"
      },
      {
        "id": 5,
        "label": "flow . total_sum = 0 ;"
      },
      {
        "id": 6,
        "label": "flow . use_alternate_this_round = true ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: flow"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: flow"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: flow"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: flow"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: flow"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: flow"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: flow"
      }
    ]
  },
  {
    "name": "drive",
    "inputs": [
      "ctx: Context < DriveEvenRound >",
      "num_steps: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let flow = & mut ctx . accounts . flow ;"
      },
      {
        "id": 10,
        "label": "let mut step_counter : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while step_counter < num_steps { let updated_sum = flow . total_sum . saturating_add (flow . unit_tokens) ; if updated_sum > flow . total_cap { return Err (EvenRoundErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if flow . use_alternate_this_round { program_account_info = ctx . accounts . alternate_program . clone () ; } token :: approve (ctx . accounts . ap (program_account_info . clone ()) , flow . unit_tokens) ? ; token :: transfer (ctx . accounts . tr (program_account_info . clone ()) , flow . unit_tokens) ? ; token :: revoke (ctx . accounts . rv (program_account_info)) ? ; flow . total_sum = updated_sum ; flow . use_alternate_this_round = ! flow . use_alternate_this_round ; step_counter = step_counter . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let updated_sum = flow . total_sum . saturating_add (flow . unit_tokens) ;"
      },
      {
        "id": 13,
        "label": "if updated_sum > flow . total_cap { return Err (EvenRoundErr :: Cap . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (EvenRoundErr :: Cap . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "if flow . use_alternate_this_round { program_account_info = ctx . accounts . alternate_program . clone () ; }"
      },
      {
        "id": 17,
        "label": "program_account_info = ctx . accounts . alternate_program . clone () ;"
      },
      {
        "id": 18,
        "label": "token :: approve (ctx . accounts . ap (program_account_info . clone ()) , flow . unit_tokens) ? ;"
      },
      {
        "id": 19,
        "label": "token :: transfer (ctx . accounts . tr (program_account_info . clone ()) , flow . unit_tokens) ? ;"
      },
      {
        "id": 20,
        "label": "token :: revoke (ctx . accounts . rv (program_account_info)) ? ;"
      },
      {
        "id": 21,
        "label": "flow . total_sum = updated_sum ;"
      },
      {
        "id": 22,
        "label": "flow . use_alternate_this_round = ! flow . use_alternate_this_round ;"
      },
      {
        "id": 23,
        "label": "step_counter = step_counter . saturating_add (1) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: flow"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: updated_sum"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: flow"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: updated_sum"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: flow"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: flow"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: flow"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 19,
        "label": "data_dep: flow"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 21,
        "label": "data_dep: flow"
      },
      {
        "from": 12,
        "to": 21,
        "label": "data_dep: updated_sum"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: flow"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: flow"
      }
    ]
  }
]