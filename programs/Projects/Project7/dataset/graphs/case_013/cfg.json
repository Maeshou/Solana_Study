[
  {
    "name": "init_guild",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let guild = & mut ctx . accounts . guild ;"
      },
      {
        "id": 2,
        "label": "guild . leader = ctx . accounts . leader . key () ;"
      },
      {
        "id": 3,
        "label": "guild . due_units = monthly_due ;"
      },
      {
        "id": 4,
        "label": "guild . refund_bps = refund_ratio_bps . min (6000) ;"
      },
      {
        "id": 5,
        "label": "guild . period_count = 1 ;"
      },
      {
        "id": 6,
        "label": "guild . collected_units = monthly_due ;"
      },
      {
        "id": 7,
        "label": "guild . strict = strict_mode ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_collect_or_refund",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let guild = & mut ctx . accounts . guild ;"
      },
      {
        "id": 11,
        "label": "let mut aggregate = guild . due_units ;"
      },
      {
        "id": 12,
        "label": "let mut idx = 1u8 ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "aggregate = aggregate . saturating_add (guild . due_units) ;"
      },
      {
        "id": 15,
        "label": "idx = idx . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "do_refund"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "let refund_amount = aggregate . saturating_mul (guild . refund_bps as u64) / 10_000 ;"
      },
      {
        "id": 22,
        "label": "let cpi = ctx . accounts . pay_from_treasury_to_member () ;"
      },
      {
        "id": 23,
        "label": "token :: transfer (cpi , refund_amount) ? ;"
      },
      {
        "id": 24,
        "label": "guild . collected_units = guild . collected_units . saturating_sub (refund_amount) ;"
      },
      {
        "id": 25,
        "label": "False body"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "guild . strict"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "let cpi = ctx . accounts . pay_from_member_to_treasury () ;"
      },
      {
        "id": 31,
        "label": "token :: transfer (cpi , aggregate) ? ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "let cpi = ctx . accounts . pay_from_member_to_treasury () ;"
      },
      {
        "id": 34,
        "label": "token :: transfer (cpi , aggregate / 2) ? ;"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "guild . collected_units = guild . collected_units . saturating_add (aggregate) ;"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "guild . period_count = guild . period_count . saturating_add (1) ;"
      },
      {
        "id": 39,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "while"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 17,
        "to": 25,
        "label": "false"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 26,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 31,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 24,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      }
    ]
  }
]