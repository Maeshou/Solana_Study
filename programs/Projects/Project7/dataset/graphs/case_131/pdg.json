[
  {
    "name": "set_route",
    "inputs": [
      "ctx: Context < SetRoute >",
      "program_hint: Pubkey"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . router ;"
      },
      {
        "id": 2,
        "label": "st . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "st . program_hint = program_hint ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "hop",
    "inputs": [
      "ctx: Context < Hop >",
      "amount: u64"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let want = ctx . accounts . router . program_hint ;"
      },
      {
        "id": 7,
        "label": "let mut chosen = None ;"
      },
      {
        "id": 8,
        "label": "for ai in ctx . remaining_accounts . iter () { if ai . key () == want { chosen = Some (ai . clone ()) ; break ; } }"
      },
      {
        "id": 9,
        "label": "if ai . key () == want { chosen = Some (ai . clone ()) ; break ; }"
      },
      {
        "id": 10,
        "label": "chosen = Some (ai . clone ()) ;"
      },
      {
        "id": 11,
        "label": "break ;"
      },
      {
        "id": 12,
        "label": "let p = chosen . ok_or (ErrorCode :: NoRoute) ? ;"
      },
      {
        "id": 13,
        "label": "token :: transfer (CpiContext :: new (p , Transfer { from : ctx . accounts . from_ata . to_account_info () , to : ctx . accounts . to_ata . to_account_info () , authority : ctx . accounts . admin . to_account_info () , } ,) , amount ,) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: want"
      },
      {
        "from": 7,
        "to": 7,
        "label": "def: chosen"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: want"
      },
      {
        "from": 7,
        "to": 8,
        "label": "data_dep: chosen"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: want"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: chosen"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: chosen"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: p"
      },
      {
        "from": 7,
        "to": 12,
        "label": "data_dep: chosen"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: p"
      }
    ]
  }
]