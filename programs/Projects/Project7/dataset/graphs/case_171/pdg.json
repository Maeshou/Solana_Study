[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < ConfigureParam >",
      "base: u64",
      "cap: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "c . supervisor = ctx . accounts . supervisor . key () ;"
      },
      {
        "id": 3,
        "label": "c . base = base ;"
      },
      {
        "id": 4,
        "label": "if c . base < 1 { c . base = 1 ; }"
      },
      {
        "id": 5,
        "label": "c . base = 1 ;"
      },
      {
        "id": 6,
        "label": "c . cap = cap ;"
      },
      {
        "id": 7,
        "label": "if c . cap < c . base { c . cap = c . base ; }"
      },
      {
        "id": 8,
        "label": "c . cap = c . base ;"
      },
      {
        "id": 9,
        "label": "c . total = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: c"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: c"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: c"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecuteParam >",
      "iterations: u8",
      "prefer_external: bool"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let c = & mut ctx . accounts . config ;"
      },
      {
        "id": 13,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 14,
        "label": "while i < iterations { let mut amount = c . base ; if amount < 1 { amount = 1 ; } let after = c . total . saturating_add (amount) ; if after > c . cap { return Err (ParamErr :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if prefer_external { program_ai = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ; c . total = after ; if c . total % (c . base * 2) == 0 { c . total = c . total ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 15,
        "label": "let mut amount = c . base ;"
      },
      {
        "id": 16,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 17,
        "label": "amount = 1 ;"
      },
      {
        "id": 18,
        "label": "let after = c . total . saturating_add (amount) ;"
      },
      {
        "id": 19,
        "label": "if after > c . cap { return Err (ParamErr :: Cap . into ()) ; }"
      },
      {
        "id": 20,
        "label": "return Err (ParamErr :: Cap . into ()) ;"
      },
      {
        "id": 21,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 22,
        "label": "if prefer_external { program_ai = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 23,
        "label": "program_ai = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 24,
        "label": "token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 26,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;"
      },
      {
        "id": 27,
        "label": "c . total = after ;"
      },
      {
        "id": 28,
        "label": "if c . total % (c . base * 2) == 0 { c . total = c . total ; }"
      },
      {
        "id": 29,
        "label": "c . total = c . total ;"
      },
      {
        "id": 30,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: c"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: amount"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: c"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: amount"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: amount"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: after"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: c"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: c"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: program_ai"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: program_ai"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: program_ai"
      },
      {
        "from": 21,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 24,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: amount"
      },
      {
        "from": 21,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 27,
        "label": "data_dep: c"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 28,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: c"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: c"
      }
    ]
  }
]