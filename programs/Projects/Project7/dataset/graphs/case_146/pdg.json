[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitTime >",
      "base: u64",
      "ceiling: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let g = & mut ctx . accounts . gate ;"
      },
      {
        "id": 2,
        "label": "g . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "g . base = if base < 1 { 1 } else { base } ;"
      },
      {
        "id": 4,
        "label": "1"
      },
      {
        "id": 5,
        "label": "base"
      },
      {
        "id": 6,
        "label": "g . ceiling = if ceiling < g . base { g . base } else { ceiling } ;"
      },
      {
        "id": 7,
        "label": "g . base"
      },
      {
        "id": 8,
        "label": "ceiling"
      },
      {
        "id": 9,
        "label": "g . count = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: g"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: g"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: g"
      }
    ]
  },
  {
    "name": "tick",
    "inputs": [
      "ctx: Context < TickTime >",
      "steps: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let g = & mut ctx . accounts . gate ;"
      },
      {
        "id": 13,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 14,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while i < steps { let mut size = g . base ; if size < 1 { size = 1 ; } let next = g . count . saturating_add (size) ; if next > g . ceiling { return Err (TGateErr :: Ceil . into ()) ; } let use_alt = (now % 2) != 0 ; let prg = if use_alt { ctx . accounts . plugin . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ; token :: approve (ctx . accounts . approve_with (prg . clone ()) , size) ? ; token :: transfer (ctx . accounts . transfer_with (prg . clone ()) , size) ? ; token :: revoke (ctx . accounts . revoke_with (prg)) ? ; g . count = next ; if g . count % (g . base * 4) == 0 { g . count = g . count ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut size = g . base ;"
      },
      {
        "id": 17,
        "label": "if size < 1 { size = 1 ; }"
      },
      {
        "id": 18,
        "label": "size = 1 ;"
      },
      {
        "id": 19,
        "label": "let next = g . count . saturating_add (size) ;"
      },
      {
        "id": 20,
        "label": "if next > g . ceiling { return Err (TGateErr :: Ceil . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (TGateErr :: Ceil . into ()) ;"
      },
      {
        "id": 22,
        "label": "let use_alt = (now % 2) != 0 ;"
      },
      {
        "id": 23,
        "label": "let prg = if use_alt { ctx . accounts . plugin . to_account_info () } else { ctx . accounts . token_program . to_account_info () } ;"
      },
      {
        "id": 24,
        "label": "ctx . accounts . plugin . to_account_info ()"
      },
      {
        "id": 25,
        "label": "ctx . accounts . token_program . to_account_info ()"
      },
      {
        "id": 26,
        "label": "token :: approve (ctx . accounts . approve_with (prg . clone ()) , size) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . transfer_with (prg . clone ()) , size) ? ;"
      },
      {
        "id": 28,
        "label": "token :: revoke (ctx . accounts . revoke_with (prg)) ? ;"
      },
      {
        "id": 29,
        "label": "g . count = next ;"
      },
      {
        "id": 30,
        "label": "if g . count % (g . base * 4) == 0 { g . count = g . count ; }"
      },
      {
        "id": 31,
        "label": "g . count = g . count ;"
      },
      {
        "id": 32,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: g"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: g"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: size"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: g"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: size"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: size"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: size"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: next"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: g"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: size"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: next"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: g"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: use_alt"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: now"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: prg"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: use_alt"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: prg"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: size"
      },
      {
        "from": 23,
        "to": 27,
        "label": "data_dep: prg"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: size"
      },
      {
        "from": 23,
        "to": 28,
        "label": "data_dep: prg"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: g"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: next"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: g"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: g"
      }
    ]
  }
]