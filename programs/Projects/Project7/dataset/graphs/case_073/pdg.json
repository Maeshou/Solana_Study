[
  {
    "name": "init_event",
    "inputs": [
      "ctx: Context < InitEvent >",
      "base_fee_input: u64",
      "cap_per_round_input: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let event = & mut ctx . accounts . event_state ;"
      },
      {
        "id": 2,
        "label": "event . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "event . base_fee = base_fee_input ;"
      },
      {
        "id": 4,
        "label": "if event . base_fee < 1 { event . base_fee = 1 ; }"
      },
      {
        "id": 5,
        "label": "event . base_fee = 1 ;"
      },
      {
        "id": 6,
        "label": "event . cap_per_round = cap_per_round_input ;"
      },
      {
        "id": 7,
        "label": "if event . cap_per_round < event . base_fee { event . cap_per_round = event . base_fee ; }"
      },
      {
        "id": 8,
        "label": "event . cap_per_round = event . base_fee ;"
      },
      {
        "id": 9,
        "label": "event . issued_in_round = 0 ;"
      },
      {
        "id": 10,
        "label": "event . first_bonus_issued = 0 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: event"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: event"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: event"
      }
    ]
  },
  {
    "name": "act_rebate",
    "inputs": [
      "ctx: Context < ActRebate >",
      "entrants_count: u16",
      "is_early_bird: bool"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let event = & mut ctx . accounts . event_state ;"
      },
      {
        "id": 14,
        "label": "let mut rebate_units : u64 = event . base_fee / 5 + 1 ;"
      },
      {
        "id": 15,
        "label": "let mut entrant_cursor : u16 = 1 ;"
      },
      {
        "id": 16,
        "label": "while entrant_cursor < entrants_count { rebate_units = rebate_units + (entrant_cursor as u64 % 5) ; entrant_cursor = entrant_cursor + 1 ; }"
      },
      {
        "id": 17,
        "label": "rebate_units = rebate_units + (entrant_cursor as u64 % 5) ;"
      },
      {
        "id": 18,
        "label": "entrant_cursor = entrant_cursor + 1 ;"
      },
      {
        "id": 19,
        "label": "if is_early_bird { rebate_units = rebate_units + 2 ; }"
      },
      {
        "id": 20,
        "label": "rebate_units = rebate_units + 2 ;"
      },
      {
        "id": 21,
        "label": "let projected = event . issued_in_round + rebate_units ;"
      },
      {
        "id": 22,
        "label": "if projected > event . cap_per_round { let remaining = event . cap_per_round - event . issued_in_round ; token :: transfer (ctx . accounts . pool_to_participant () , remaining) ? ; event . issued_in_round = event . cap_per_round ; return Err (EventErr :: Cap . into ()) ; }"
      },
      {
        "id": 23,
        "label": "let remaining = event . cap_per_round - event . issued_in_round ;"
      },
      {
        "id": 24,
        "label": "token :: transfer (ctx . accounts . pool_to_participant () , remaining) ? ;"
      },
      {
        "id": 25,
        "label": "event . issued_in_round = event . cap_per_round ;"
      },
      {
        "id": 26,
        "label": "return Err (EventErr :: Cap . into ()) ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . pool_to_participant () , rebate_units) ? ;"
      },
      {
        "id": 28,
        "label": "event . issued_in_round = projected ;"
      },
      {
        "id": 29,
        "label": "if is_early_bird { event . first_bonus_issued = event . first_bonus_issued + 1 ; }"
      },
      {
        "id": 30,
        "label": "event . first_bonus_issued = event . first_bonus_issued + 1 ;"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: event"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: event"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: projected"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: event"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: event"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: remaining"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: event"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: remaining"
      },
      {
        "from": 13,
        "to": 25,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 25,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: event"
      },
      {
        "from": 21,
        "to": 28,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: event"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: event"
      }
    ]
  }
]