[
  {
    "name": "init_event",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let event = & mut ctx . accounts . event_state ;"
      },
      {
        "id": 2,
        "label": "event . organizer = ctx . accounts . organizer . key () ;"
      },
      {
        "id": 3,
        "label": "event . base_fee = base_fee_input ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "event . base_fee < 1"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "event . base_fee = 1 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "event . cap_per_round = cap_per_round_input ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "event . cap_per_round < event . base_fee"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "event . cap_per_round = event . base_fee ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "event . issued_in_round = 0 ;"
      },
      {
        "id": 22,
        "label": "event . first_bonus_issued = 0 ;"
      },
      {
        "id": 23,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_rebate",
    "nodes": [
      {
        "id": 24,
        "label": "Entry"
      },
      {
        "id": 25,
        "label": "let event = & mut ctx . accounts . event_state ;"
      },
      {
        "id": 26,
        "label": "let mut rebate_units : u64 = event . base_fee / 5 + 1 ;"
      },
      {
        "id": 27,
        "label": "let mut entrant_cursor : u16 = 1 ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "rebate_units = rebate_units + (entrant_cursor as u64 % 5) ;"
      },
      {
        "id": 30,
        "label": "entrant_cursor = entrant_cursor + 1 ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "is_early_bird"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "rebate_units = rebate_units + 2 ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "let projected = event . issued_in_round + rebate_units ;"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "projected > event . cap_per_round"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "let remaining = event . cap_per_round - event . issued_in_round ;"
      },
      {
        "id": 46,
        "label": "token :: transfer (ctx . accounts . pool_to_participant () , remaining) ? ;"
      },
      {
        "id": 47,
        "label": "event . issued_in_round = event . cap_per_round ;"
      },
      {
        "id": 48,
        "label": "return Err (EventErr :: Cap . into ()) ;"
      },
      {
        "id": 49,
        "label": "False body"
      },
      {
        "id": 50,
        "label": "No-op"
      },
      {
        "id": 51,
        "label": "merge"
      },
      {
        "id": 52,
        "label": "token :: transfer (ctx . accounts . pool_to_participant () , rebate_units) ? ;"
      },
      {
        "id": 53,
        "label": "event . issued_in_round = projected ;"
      },
      {
        "id": 54,
        "label": "if statement"
      },
      {
        "id": 55,
        "label": "predicate"
      },
      {
        "id": 56,
        "label": "is_early_bird"
      },
      {
        "id": 57,
        "label": "True body"
      },
      {
        "id": 58,
        "label": "event . first_bonus_issued = event . first_bonus_issued + 1 ;"
      },
      {
        "id": 59,
        "label": "False body"
      },
      {
        "id": 60,
        "label": "No-op"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "while"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 41,
        "to": 49,
        "label": "false"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 48,
        "to": 51,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "predicate"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "true"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 54,
        "to": 59,
        "label": "false"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      }
    ]
  }
]