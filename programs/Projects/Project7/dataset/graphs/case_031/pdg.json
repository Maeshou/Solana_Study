[
  {
    "name": "init_station",
    "inputs": [
      "ctx: Context < InitStation >",
      "daily_limit: u64",
      "chunk_units: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let station = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "station . manager_key = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "station . daily_limit = daily_limit . max (12) ;"
      },
      {
        "id": 4,
        "label": "station . units_sent_today = chunk_units . max (4) ;"
      },
      {
        "id": 5,
        "label": "station . chunk_units = chunk_units . max (4) ;"
      },
      {
        "id": 6,
        "label": "station . stop_flag = false ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: station"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: station"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: station"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: station"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: station"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: station"
      }
    ]
  },
  {
    "name": "act_dispatch",
    "inputs": [
      "ctx: Context < ActDispatch >",
      "burst_times: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let station = & mut ctx . accounts . station ;"
      },
      {
        "id": 10,
        "label": "require ! (! station . stop_flag , ErrEnergy :: Paused) ;"
      },
      {
        "id": 11,
        "label": "let mut burst_cursor = 0u8 ;"
      },
      {
        "id": 12,
        "label": "while burst_cursor < burst_times { let projected = station . units_sent_today . saturating_add (station . chunk_units) ; if projected > station . daily_limit { station . stop_flag = true ; return Err (ErrEnergy :: OverLimit . into ()) ; } token :: approve (ctx . accounts . approve_ctx () , station . chunk_units) ? ; token :: transfer (ctx . accounts . transfer_ctx () , station . chunk_units) ? ; token :: revoke (ctx . accounts . revoke_ctx ()) ? ; station . units_sent_today = projected ; burst_cursor = burst_cursor . saturating_add (1) ; }"
      },
      {
        "id": 13,
        "label": "let projected = station . units_sent_today . saturating_add (station . chunk_units) ;"
      },
      {
        "id": 14,
        "label": "if projected > station . daily_limit { station . stop_flag = true ; return Err (ErrEnergy :: OverLimit . into ()) ; }"
      },
      {
        "id": 15,
        "label": "station . stop_flag = true ;"
      },
      {
        "id": 16,
        "label": "return Err (ErrEnergy :: OverLimit . into ()) ;"
      },
      {
        "id": 17,
        "label": "token :: approve (ctx . accounts . approve_ctx () , station . chunk_units) ? ;"
      },
      {
        "id": 18,
        "label": "token :: transfer (ctx . accounts . transfer_ctx () , station . chunk_units) ? ;"
      },
      {
        "id": 19,
        "label": "token :: revoke (ctx . accounts . revoke_ctx ()) ? ;"
      },
      {
        "id": 20,
        "label": "station . units_sent_today = projected ;"
      },
      {
        "id": 21,
        "label": "burst_cursor = burst_cursor . saturating_add (1) ;"
      },
      {
        "id": 22,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: station"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: burst_cursor"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: burst_cursor"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: station"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: burst_cursor"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: burst_cursor"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: projected"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: station"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: projected"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: station"
      },
      {
        "from": 9,
        "to": 20,
        "label": "data_dep: station"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: projected"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: burst_cursor"
      },
      {
        "from": 11,
        "to": 21,
        "label": "data_dep: burst_cursor"
      }
    ]
  }
]