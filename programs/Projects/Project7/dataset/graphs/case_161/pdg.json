[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitChrono >",
      "base: u64",
      "threshold: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let cfg = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 2,
        "label": "cfg . controller = ctx . accounts . controller . key () ;"
      },
      {
        "id": 3,
        "label": "cfg . base = base ;"
      },
      {
        "id": 4,
        "label": "if cfg . base < 1 { cfg . base = 1 ; }"
      },
      {
        "id": 5,
        "label": "cfg . base = 1 ;"
      },
      {
        "id": 6,
        "label": "cfg . threshold = threshold ;"
      },
      {
        "id": 7,
        "label": "if cfg . threshold < cfg . base { cfg . threshold = cfg . base ; }"
      },
      {
        "id": 8,
        "label": "cfg . threshold = cfg . base ;"
      },
      {
        "id": 9,
        "label": "cfg . progress = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: cfg"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: cfg"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: cfg"
      }
    ]
  },
  {
    "name": "tick",
    "inputs": [
      "ctx: Context < TickChrono >",
      "reps: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let cfg = & mut ctx . accounts . cfg ;"
      },
      {
        "id": 13,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 14,
        "label": "let mut n : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while n < reps { let mut amount = cfg . base ; if amount < 1 { amount = 1 ; } let after = cfg . progress . saturating_add (amount) ; if after > cfg . threshold { return Err (ChronoErr :: Limit . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let is_odd = (now % 2) != 0 ; if is_odd { if ctx . remaining_accounts . len () > 0 { program_ai = ctx . remaining_accounts [0] . clone () ; } } token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ; cfg . progress = after ; if cfg . progress % (cfg . base * 6) == 0 { cfg . progress = cfg . progress ; } n = n . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = cfg . base ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let after = cfg . progress . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if after > cfg . threshold { return Err (ChronoErr :: Limit . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (ChronoErr :: Limit . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let is_odd = (now % 2) != 0 ;"
      },
      {
        "id": 24,
        "label": "if is_odd { if ctx . remaining_accounts . len () > 0 { program_ai = ctx . remaining_accounts [0] . clone () ; } }"
      },
      {
        "id": 25,
        "label": "if ctx . remaining_accounts . len () > 0 { program_ai = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 26,
        "label": "program_ai = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 27,
        "label": "token :: approve (ctx . accounts . approve_ctx (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 28,
        "label": "token :: transfer (ctx . accounts . transfer_ctx (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 29,
        "label": "token :: revoke (ctx . accounts . revoke_ctx (program_ai)) ? ;"
      },
      {
        "id": 30,
        "label": "cfg . progress = after ;"
      },
      {
        "id": 31,
        "label": "if cfg . progress % (cfg . base * 6) == 0 { cfg . progress = cfg . progress ; }"
      },
      {
        "id": 32,
        "label": "cfg . progress = cfg . progress ;"
      },
      {
        "id": 33,
        "label": "n = n . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: cfg"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: cfg"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: cfg"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: after"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: cfg"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: cfg"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: is_odd"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: now"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: is_odd"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 28,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 29,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: cfg"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 32,
        "label": "data_dep: cfg"
      },
      {
        "from": 12,
        "to": 32,
        "label": "data_dep: cfg"
      }
    ]
  }
]