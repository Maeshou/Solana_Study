[
  {
    "name": "init_market",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitMarket >",
      "fee_bps_input: u16"
    ],
    "attributes": [],
    "body": [
      "let market = & mut ctx . accounts . market ;",
      "market . operator = ctx . accounts . operator . key () ;",
      "market . fee_bps = clamp_u16 (fee_bps_input , 0 , 2000) ;",
      "market . round_index = 1 ;",
      "market . total_settled = 1 ;",
      "market . last_outcome_yes = false ;",
      "Ok (())"
    ]
  },
  {
    "name": "act_settle",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < ActSettle >",
      "yes_pool_units: u64",
      "no_pool_units: u64",
      "outcome_yes_flag: bool"
    ],
    "attributes": [],
    "body": [
      "let market = & mut ctx . accounts . market ;",
      "let combined_pool : u64 = yes_pool_units + no_pool_units ;",
      "let mut winner_pool : u64 = yes_pool_units ;",
      "let mut loser_pool : u64 = no_pool_units ;",
      "if ! outcome_yes_flag",
      "{",
      "winner_pool = no_pool_units ;",
      "loser_pool = yes_pool_units ;",
      "}",
      "let fee_amount : u64 = (combined_pool as u128 * market . fee_bps as u128 / 10_000u128) as u64 ;",
      "let distributable : u64 = combined_pool - fee_amount ;",
      "let mut winner_payout : u64 = distributable ;",
      "if loser_pool > 0",
      "{",
      "winner_payout = distributable ;",
      "}",
      "if loser_pool == 0",
      "{",
      "winner_payout = distributable ;",
      "}",
      "token :: transfer (ctx . accounts . pool_to_winners () , winner_payout) ? ;",
      "token :: transfer (ctx . accounts . pool_to_fee () , fee_amount) ? ;",
      "market . total_settled = market . total_settled + distributable ;",
      "market . round_index = market . round_index + 1 ;",
      "market . last_outcome_yes = outcome_yes_flag ;",
      "Ok (())"
    ]
  },
  {
    "name": "InitMarket",
    "node_type": "struct",
    "fields": [
      {
        "name": "market",
        "attribute": "# [account (init , payer = operator , space = 8 + 32 + 2 + 8 + 8 + 1)]",
        "field_type": "Account < 'info , MarketState >"
      },
      {
        "name": "operator",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ActSettle",
    "node_type": "struct",
    "fields": [
      {
        "name": "market",
        "attribute": "# [account (mut , has_one = operator)]",
        "field_type": "Account < 'info , MarketState >"
      },
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "outcome_pool_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "winners_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "fee_vault",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "MarketState",
    "node_type": "struct",
    "fields": [
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "fee_bps",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "round_index",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "total_settled",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "last_outcome_yes",
        "attribute": null,
        "field_type": "bool"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "clamp_u16",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "v: u16",
      "lo: u16",
      "hi: u16"
    ],
    "attributes": [],
    "body": [
      "let mut o = v ;",
      "if o < lo",
      "{",
      "o = lo ;",
      "}",
      "if o > hi",
      "{",
      "o = hi ;",
      "}",
      "o"
    ]
  }
]