[
  {
    "name": "boot",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . reg ;"
      },
      {
        "id": 2,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "st . allow = list ;"
      },
      {
        "id": 4,
        "label": "st . quota = quota . max (10) ;"
      },
      {
        "id": 5,
        "label": "st . emitted = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "spray",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . reg ;"
      },
      {
        "id": 9,
        "label": "let program_id = st . allow [index as usize] ;"
      },
      {
        "id": 10,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (Errs :: NoProgram) ? ;"
      },
      {
        "id": 11,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 12,
        "label": "Loop Start"
      },
      {
        "id": 13,
        "label": "let amt = (st . quota / 3) . max (1) + (i as u64) ;"
      },
      {
        "id": 14,
        "label": "token :: approve (ctx . accounts . approve_ctx_with (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 15,
        "label": "token :: transfer (ctx . accounts . transfer_ctx_with (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 16,
        "label": "token :: revoke (ctx . accounts . revoke_ctx_with (program_ai . clone ())) ? ;"
      },
      {
        "id": 17,
        "label": "st . emitted = st . emitted . saturating_add (amt) ;"
      },
      {
        "id": 18,
        "label": "i += 1 ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "let _unused = program_id ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 12,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  }
]