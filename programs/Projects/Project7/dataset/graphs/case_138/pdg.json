[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "base: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . base = base . max (2) ;"
      },
      {
        "id": 4,
        "label": "s . pick = Pubkey :: new_from_array ([2u8 ; 32]) ;"
      },
      {
        "id": 5,
        "label": "s . total = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "set_pick",
    "inputs": [
      "ctx: Context < SetPick >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 9,
        "label": "require_keys_eq ! (s . admin , ctx . accounts . admin . key () , Errs :: Denied) ;"
      },
      {
        "id": 10,
        "label": "s . pick = pid ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: s"
      },
      {
        "from": 8,
        "to": 10,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "stream",
    "inputs": [
      "ctx: Context < Stream >",
      "steps: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let s = & mut ctx . accounts . state ;"
      },
      {
        "id": 14,
        "label": "let program_ai = ctx . remaining_accounts . get (0) . ok_or (Errs :: NoProgram) ? ;"
      },
      {
        "id": 15,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 16,
        "label": "while i < steps { let amt = s . base + (seed as u64 % 5) ; token :: approve (ctx . accounts . approve_ctx_with (program_ai . clone ()) , amt) ? ; token :: transfer (ctx . accounts . transfer_ctx_with (program_ai . clone ()) , amt) ? ; token :: revoke (ctx . accounts . revoke_ctx_with (program_ai . clone ())) ? ; s . total = s . total . saturating_add (amt) ; i += 1 ; }"
      },
      {
        "id": 17,
        "label": "let amt = s . base + (seed as u64 % 5) ;"
      },
      {
        "id": 18,
        "label": "token :: approve (ctx . accounts . approve_ctx_with (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 19,
        "label": "token :: transfer (ctx . accounts . transfer_ctx_with (program_ai . clone ()) , amt) ? ;"
      },
      {
        "id": 20,
        "label": "token :: revoke (ctx . accounts . revoke_ctx_with (program_ai . clone ())) ? ;"
      },
      {
        "id": 21,
        "label": "s . total = s . total . saturating_add (amt) ;"
      },
      {
        "id": 22,
        "label": "i += 1 ;"
      },
      {
        "id": 23,
        "label": "let _maybe_unused = s . pick ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: s"
      },
      {
        "from": 14,
        "to": 14,
        "label": "def: program_ai"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: i"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: i"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: program_ai"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: program_ai"
      },
      {
        "from": 14,
        "to": 16,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 16,
        "label": "data_dep: i"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: amt"
      },
      {
        "from": 13,
        "to": 17,
        "label": "data_dep: s"
      },
      {
        "from": 14,
        "to": 18,
        "label": "data_dep: program_ai"
      },
      {
        "from": 17,
        "to": 18,
        "label": "data_dep: amt"
      },
      {
        "from": 14,
        "to": 19,
        "label": "data_dep: program_ai"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: amt"
      },
      {
        "from": 14,
        "to": 20,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: s"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: amt"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: i"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: _maybe_unused"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: s"
      }
    ]
  }
]