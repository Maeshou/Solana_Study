[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < Init >",
      "chunk: u64",
      "limit: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let st = & mut ctx . accounts . station ;"
      },
      {
        "id": 2,
        "label": "st . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "st . chunk = chunk . max (1) ;"
      },
      {
        "id": 4,
        "label": "st . daily_limit = limit . max (st . chunk) ;"
      },
      {
        "id": 5,
        "label": "st . sent_today = 0 ;"
      },
      {
        "id": 6,
        "label": "st . cool = 1 ;"
      },
      {
        "id": 7,
        "label": "st . route_pubkey = Pubkey :: new_from_array ([9u8 ; 32]) ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: st"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: st"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "set_route",
    "inputs": [
      "ctx: Context < SetRoute >",
      "pid: Pubkey"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let st = & mut ctx . accounts . station ;"
      },
      {
        "id": 11,
        "label": "require_keys_eq ! (st . manager , ctx . accounts . manager . key () , DripErr :: Denied) ;"
      },
      {
        "id": 12,
        "label": "st . route_pubkey = pid ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: st"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "drip",
    "inputs": [
      "ctx: Context < Drip >",
      "bursts: u8"
    ],
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let st = & mut ctx . accounts . station ;"
      },
      {
        "id": 16,
        "label": "let mut i = 0u8 ;"
      },
      {
        "id": 17,
        "label": "while i < bursts { let divisor = st . cool + 1 ; let mut amount = st . chunk / divisor ; if amount < 1 { amount = 1 ; } let projected = st . sent_today . saturating_add (amount) ; if projected > st . daily_limit { st . cool = st . cool . saturating_add (1) ; return Err (DripErr :: Daily . into ()) ; } let prog_ai = ctx . remaining_accounts . get (0) . ok_or (DripErr :: NoProgram) ? ; token :: approve (ctx . accounts . approve_ctx_with (prog_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_ctx_with (prog_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_ctx_with (prog_ai . clone ())) ? ; st . sent_today = projected ; if st . sent_today % (st . chunk . saturating_mul (3)) == 0 { if st . cool > 0 { st . cool -= 1 ; } } else { st . cool = st . cool . saturating_add (0) ; } i += 1 ; }"
      },
      {
        "id": 18,
        "label": "let divisor = st . cool + 1 ;"
      },
      {
        "id": 19,
        "label": "let mut amount = st . chunk / divisor ;"
      },
      {
        "id": 20,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 21,
        "label": "amount = 1 ;"
      },
      {
        "id": 22,
        "label": "let projected = st . sent_today . saturating_add (amount) ;"
      },
      {
        "id": 23,
        "label": "if projected > st . daily_limit { st . cool = st . cool . saturating_add (1) ; return Err (DripErr :: Daily . into ()) ; }"
      },
      {
        "id": 24,
        "label": "st . cool = st . cool . saturating_add (1) ;"
      },
      {
        "id": 25,
        "label": "return Err (DripErr :: Daily . into ()) ;"
      },
      {
        "id": 26,
        "label": "let prog_ai = ctx . remaining_accounts . get (0) . ok_or (DripErr :: NoProgram) ? ;"
      },
      {
        "id": 27,
        "label": "token :: approve (ctx . accounts . approve_ctx_with (prog_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 28,
        "label": "token :: transfer (ctx . accounts . transfer_ctx_with (prog_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 29,
        "label": "token :: revoke (ctx . accounts . revoke_ctx_with (prog_ai . clone ())) ? ;"
      },
      {
        "id": 30,
        "label": "st . sent_today = projected ;"
      },
      {
        "id": 31,
        "label": "if st . sent_today % (st . chunk . saturating_mul (3)) == 0 { if st . cool > 0 { st . cool -= 1 ; } } else { st . cool = st . cool . saturating_add (0) ; }"
      },
      {
        "id": 32,
        "label": "if st . cool > 0 { st . cool -= 1 ; }"
      },
      {
        "id": 33,
        "label": "st . cool -= 1 ;"
      },
      {
        "id": 34,
        "label": "st . cool = st . cool . saturating_add (0) ;"
      },
      {
        "id": 35,
        "label": "i += 1 ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 15,
        "label": "def: st"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: i"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: i"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: divisor"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: amount"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: st"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: divisor"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: projected"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: st"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: projected"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 24,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 24,
        "label": "data_dep: st"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: prog_ai"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: amount"
      },
      {
        "from": 26,
        "to": 28,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: amount"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: prog_ai"
      },
      {
        "from": 15,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 22,
        "to": 30,
        "label": "data_dep: projected"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 31,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 32,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 15,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 16,
        "to": 35,
        "label": "data_dep: i"
      }
    ]
  }
]