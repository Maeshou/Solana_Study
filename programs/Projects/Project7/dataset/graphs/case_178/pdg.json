[
  {
    "name": "open",
    "inputs": [
      "ctx: Context < OpenWindow >",
      "step: u64",
      "cap: u64",
      "window_size: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . window ;"
      },
      {
        "id": 2,
        "label": "w . guard = ctx . accounts . guard . key () ;"
      },
      {
        "id": 3,
        "label": "w . step = step ;"
      },
      {
        "id": 4,
        "label": "if w . step < 1 { w . step = 1 ; }"
      },
      {
        "id": 5,
        "label": "w . step = 1 ;"
      },
      {
        "id": 6,
        "label": "w . cap = cap ;"
      },
      {
        "id": 7,
        "label": "if w . cap < w . step { w . cap = w . step ; }"
      },
      {
        "id": 8,
        "label": "w . cap = w . step ;"
      },
      {
        "id": 9,
        "label": "w . window_size = if window_size < 2 { 2 } else { window_size } ;"
      },
      {
        "id": 10,
        "label": "2"
      },
      {
        "id": 11,
        "label": "window_size"
      },
      {
        "id": 12,
        "label": "w . position = 0 ;"
      },
      {
        "id": 13,
        "label": "w . total = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: w"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: w"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: w"
      }
    ]
  },
  {
    "name": "pump",
    "inputs": [
      "ctx: Context < PumpWindow >",
      "count: u8"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let w = & mut ctx . accounts . window ;"
      },
      {
        "id": 17,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 18,
        "label": "while i < count { let mut amount = w . step ; if amount < 1 { amount = 1 ; } let next = w . total . saturating_add (amount) ; if next > w . cap { return Err (WindowErr :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let half = w . window_size / 2 ; if w . position >= half { program_ai = ctx . accounts . gateway . clone () ; } token :: approve (ctx . accounts . ap (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . rv (program_ai)) ? ; w . total = next ; w . position = w . position . saturating_add (1) ; if w . position % w . window_size == 0 { w . position = 0 ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 19,
        "label": "let mut amount = w . step ;"
      },
      {
        "id": 20,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 21,
        "label": "amount = 1 ;"
      },
      {
        "id": 22,
        "label": "let next = w . total . saturating_add (amount) ;"
      },
      {
        "id": 23,
        "label": "if next > w . cap { return Err (WindowErr :: Cap . into ()) ; }"
      },
      {
        "id": 24,
        "label": "return Err (WindowErr :: Cap . into ()) ;"
      },
      {
        "id": 25,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 26,
        "label": "let half = w . window_size / 2 ;"
      },
      {
        "id": 27,
        "label": "if w . position >= half { program_ai = ctx . accounts . gateway . clone () ; }"
      },
      {
        "id": 28,
        "label": "program_ai = ctx . accounts . gateway . clone () ;"
      },
      {
        "id": 29,
        "label": "token :: approve (ctx . accounts . ap (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 30,
        "label": "token :: transfer (ctx . accounts . tr (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 31,
        "label": "token :: revoke (ctx . accounts . rv (program_ai)) ? ;"
      },
      {
        "id": 32,
        "label": "w . total = next ;"
      },
      {
        "id": 33,
        "label": "w . position = w . position . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "if w . position % w . window_size == 0 { w . position = 0 ; }"
      },
      {
        "id": 35,
        "label": "w . position = 0 ;"
      },
      {
        "id": 36,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: w"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: amount"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: w"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: next"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: w"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: next"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: w"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: program_ai"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: half"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: w"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: half"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: amount"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 30,
        "label": "data_dep: amount"
      },
      {
        "from": 25,
        "to": 31,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 32,
        "label": "data_dep: w"
      },
      {
        "from": 22,
        "to": 32,
        "label": "data_dep: next"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: w"
      },
      {
        "from": 16,
        "to": 35,
        "label": "data_dep: w"
      }
    ]
  }
]