[
  {
    "name": "initialize_pass_state",
    "inputs": [
      "ctx: Context < InitializePassState >",
      "max_charges: u32",
      "charge_token_amount: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let pass_state = & mut ctx . accounts . pass_state ;"
      },
      {
        "id": 2,
        "label": "pass_state . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "pass_state . charges_left = max_charges ;"
      },
      {
        "id": 4,
        "label": "pass_state . max_charges = max_charges ;"
      },
      {
        "id": 5,
        "label": "pass_state . charge_token_amount = charge_token_amount ;"
      },
      {
        "id": 6,
        "label": "pass_state . charge_token_mint = ctx . accounts . charge_token_mint . key () ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: pass_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: pass_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: pass_state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: pass_state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: pass_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: pass_state"
      }
    ]
  },
  {
    "name": "charge_pass",
    "inputs": [
      "ctx: Context < ChargePass >"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let pass_state = & mut ctx . accounts . pass_state ;"
      },
      {
        "id": 10,
        "label": "if pass_state . charges_left == 0 { return Err (ErrorCode :: PassFullyCharged . into ()) ; }"
      },
      {
        "id": 11,
        "label": "return Err (ErrorCode :: PassFullyCharged . into ()) ;"
      },
      {
        "id": 12,
        "label": "let mut charges_added = 0 ;"
      },
      {
        "id": 13,
        "label": "let mut loop_counter = 0 ;"
      },
      {
        "id": 14,
        "label": "while loop_counter < 5 { if pass_state . charges_left > 0 { let charge_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . owner_token_account . to_account_info () , to : ctx . accounts . pass_token_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ,) ; token :: transfer (charge_ctx , pass_state . charge_token_amount) ? ; pass_state . charges_left -= 1 ; charges_added += 1 ; } else { break ; } loop_counter += 1 ; }"
      },
      {
        "id": 15,
        "label": "if pass_state . charges_left > 0 { let charge_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . owner_token_account . to_account_info () , to : ctx . accounts . pass_token_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ,) ; token :: transfer (charge_ctx , pass_state . charge_token_amount) ? ; pass_state . charges_left -= 1 ; charges_added += 1 ; } else { break ; }"
      },
      {
        "id": 16,
        "label": "let charge_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Transfer { from : ctx . accounts . owner_token_account . to_account_info () , to : ctx . accounts . pass_token_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ,) ;"
      },
      {
        "id": 17,
        "label": "token :: transfer (charge_ctx , pass_state . charge_token_amount) ? ;"
      },
      {
        "id": 18,
        "label": "pass_state . charges_left -= 1 ;"
      },
      {
        "id": 19,
        "label": "charges_added += 1 ;"
      },
      {
        "id": 20,
        "label": "break ;"
      },
      {
        "id": 21,
        "label": "loop_counter += 1 ;"
      },
      {
        "id": 22,
        "label": "if charges_added == 0 { return Err (ErrorCode :: PassFullyCharged . into ()) ; }"
      },
      {
        "id": 23,
        "label": "return Err (ErrorCode :: PassFullyCharged . into ()) ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: pass_state"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: pass_state"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: charges_added"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: loop_counter"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: loop_counter"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: pass_state"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: pass_state"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: pass_state"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: charges_added"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: loop_counter"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: pass_state"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: pass_state"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: pass_state"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: charges_added"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: charge_ctx"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: charge_ctx"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: pass_state"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: pass_state"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: charges_added"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: loop_counter"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: charges_added"
      }
    ]
  }
]