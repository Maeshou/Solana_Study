[
  {
    "name": "init_boss",
    "inputs": [
      "ctx: Context < InitBoss >",
      "base_reward: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let boss_state = & mut ctx . accounts . boss_state ;"
      },
      {
        "id": 2,
        "label": "boss_state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "boss_state . base_reward = if base_reward < 2 { 2 } else { base_reward } ;"
      },
      {
        "id": 4,
        "label": "2"
      },
      {
        "id": 5,
        "label": "base_reward"
      },
      {
        "id": 6,
        "label": "boss_state . clear_count = 2 ;"
      },
      {
        "id": 7,
        "label": "boss_state . max_combo_seen = 5 ;"
      },
      {
        "id": 8,
        "label": "boss_state . challenge_flag = false ;"
      },
      {
        "id": 9,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: boss_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: boss_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: boss_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: boss_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: boss_state"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: boss_state"
      }
    ]
  },
  {
    "name": "act_distribute",
    "inputs": [
      "ctx: Context < ActDistribute >",
      "party_size: u8",
      "combo_value: u32"
    ],
    "nodes": [
      {
        "id": 10,
        "label": "Entry"
      },
      {
        "id": 11,
        "label": "require ! (party_size > 0 , RaidErr :: NoMembers) ;"
      },
      {
        "id": 12,
        "label": "let boss_state = & mut ctx . accounts . boss_state ;"
      },
      {
        "id": 13,
        "label": "let mut group_bonus : u64 = 0 ;"
      },
      {
        "id": 14,
        "label": "let mut party_index : u8 = 1 ;"
      },
      {
        "id": 15,
        "label": "while party_index <= party_size { if party_index <= 3 { group_bonus = group_bonus + 8 ; } if party_index > 3 { group_bonus = group_bonus + 5 ; } if party_index > 7 { group_bonus = group_bonus + 2 ; } party_index = party_index + 1 ; }"
      },
      {
        "id": 16,
        "label": "if party_index <= 3 { group_bonus = group_bonus + 8 ; }"
      },
      {
        "id": 17,
        "label": "group_bonus = group_bonus + 8 ;"
      },
      {
        "id": 18,
        "label": "if party_index > 3 { group_bonus = group_bonus + 5 ; }"
      },
      {
        "id": 19,
        "label": "group_bonus = group_bonus + 5 ;"
      },
      {
        "id": 20,
        "label": "if party_index > 7 { group_bonus = group_bonus + 2 ; }"
      },
      {
        "id": 21,
        "label": "group_bonus = group_bonus + 2 ;"
      },
      {
        "id": 22,
        "label": "party_index = party_index + 1 ;"
      },
      {
        "id": 23,
        "label": "let mut sqrt_estimate : u64 = 1 ;"
      },
      {
        "id": 24,
        "label": "let mut iteration_step : u8 = 0 ;"
      },
      {
        "id": 25,
        "label": "while iteration_step < 6 { let divisor = sqrt_estimate ; let adjusted = if divisor < 1 { 1 } else { divisor } ; sqrt_estimate = (sqrt_estimate + ((combo_value as u64) / adjusted)) / 2 ; iteration_step = iteration_step + 1 ; }"
      },
      {
        "id": 26,
        "label": "let divisor = sqrt_estimate ;"
      },
      {
        "id": 27,
        "label": "let adjusted = if divisor < 1 { 1 } else { divisor } ;"
      },
      {
        "id": 28,
        "label": "1"
      },
      {
        "id": 29,
        "label": "divisor"
      },
      {
        "id": 30,
        "label": "sqrt_estimate = (sqrt_estimate + ((combo_value as u64) / adjusted)) / 2 ;"
      },
      {
        "id": 31,
        "label": "iteration_step = iteration_step + 1 ;"
      },
      {
        "id": 32,
        "label": "if combo_value as u64 > boss_state . max_combo_seen { boss_state . max_combo_seen = combo_value as u64 ; }"
      },
      {
        "id": 33,
        "label": "boss_state . max_combo_seen = combo_value as u64 ;"
      },
      {
        "id": 34,
        "label": "if sqrt_estimate >= 8 { boss_state . challenge_flag = true ; }"
      },
      {
        "id": 35,
        "label": "boss_state . challenge_flag = true ;"
      },
      {
        "id": 36,
        "label": "if sqrt_estimate < 5 { boss_state . challenge_flag = false ; }"
      },
      {
        "id": 37,
        "label": "boss_state . challenge_flag = false ;"
      },
      {
        "id": 38,
        "label": "let mut payout_amount : u64 = boss_state . base_reward + group_bonus + sqrt_estimate ;"
      },
      {
        "id": 39,
        "label": "if boss_state . challenge_flag { payout_amount = payout_amount + payout_amount / 2 ; }"
      },
      {
        "id": 40,
        "label": "payout_amount = payout_amount + payout_amount / 2 ;"
      },
      {
        "id": 41,
        "label": "token :: transfer (ctx . accounts . treasury_to_player_ctx () , payout_amount) ? ;"
      },
      {
        "id": 42,
        "label": "boss_state . clear_count = boss_state . clear_count + 1 ;"
      },
      {
        "id": 43,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: boss_state"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: divisor"
      },
      {
        "from": 27,
        "to": 27,
        "label": "def: adjusted"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: divisor"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: divisor"
      },
      {
        "from": 26,
        "to": 29,
        "label": "data_dep: divisor"
      },
      {
        "from": 27,
        "to": 30,
        "label": "data_dep: adjusted"
      },
      {
        "from": 12,
        "to": 32,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 32,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 33,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 34,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 35,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 36,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 37,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 38,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 39,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 42,
        "label": "data_dep: boss_state"
      },
      {
        "from": 12,
        "to": 42,
        "label": "data_dep: boss_state"
      }
    ]
  }
]