[
  {
    "name": "seed",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SeedParity2 >",
      "base: u64",
      "maxv: u64"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . switcher ;",
      "s . admin = ctx . accounts . admin . key () ;",
      "s . base = base ;",
      "if s . base < 1",
      "{",
      "s . base = 1 ;",
      "}",
      "s . maxv = maxv ;",
      "if s . maxv < s . base",
      "{",
      "s . maxv = s . base ;",
      "}",
      "s . sent = 0 ;",
      "s . parity_counter = 0 ;",
      "Ok (())"
    ]
  },
  {
    "name": "fire",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < FireParity2 >",
      "times: u8"
    ],
    "attributes": [],
    "body": [
      "let s = & mut ctx . accounts . switcher ;",
      "let mut k : u8 = 0 ;",
      "while k < times",
      "{",
      "let mut amount = s . base ;",
      "if amount < 1",
      "{",
      "amount = 1 ;",
      "} let projected = s . sent . saturating_add (amount) ;",
      "if projected > s . maxv",
      "{",
      "return Err (Parity2Err :: Max . into ()) ;",
      "} let mut program_ai = ctx . accounts . token_program . to_account_info () ;",
      "let odd = (s . parity_counter % 2) == 1 ;",
      "if odd",
      "{",
      "program_ai = ctx . accounts . alternate_path . clone () ;",
      "} token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ;",
      "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ;",
      "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;",
      "s . sent = projected ;",
      "s . parity_counter = s . parity_counter . saturating_add (1) ;",
      "k = k . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "SeedParity2",
    "node_type": "struct",
    "fields": [
      {
        "name": "switcher",
        "attribute": "# [account (init , payer = admin , space = 8 + 32 + 8 + 8 + 8 + 8)]",
        "field_type": "Account < 'info , Parity2State >"
      },
      {
        "name": "admin",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "FireParity2",
    "node_type": "struct",
    "fields": [
      {
        "name": "switcher",
        "attribute": "# [account (mut , has_one = admin)]",
        "field_type": "Account < 'info , Parity2State >"
      },
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "tank_left",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "tank_right",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      },
      {
        "name": "alternate_path",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Parity2State",
    "node_type": "struct",
    "fields": [
      {
        "name": "admin",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "base",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "maxv",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "sent",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "parity_counter",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]