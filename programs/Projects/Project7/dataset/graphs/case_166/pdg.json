[
  {
    "name": "seed",
    "inputs": [
      "ctx: Context < SeedParity2 >",
      "base: u64",
      "maxv: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . switcher ;"
      },
      {
        "id": 2,
        "label": "s . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "s . base = base ;"
      },
      {
        "id": 4,
        "label": "if s . base < 1 { s . base = 1 ; }"
      },
      {
        "id": 5,
        "label": "s . base = 1 ;"
      },
      {
        "id": 6,
        "label": "s . maxv = maxv ;"
      },
      {
        "id": 7,
        "label": "if s . maxv < s . base { s . maxv = s . base ; }"
      },
      {
        "id": 8,
        "label": "s . maxv = s . base ;"
      },
      {
        "id": 9,
        "label": "s . sent = 0 ;"
      },
      {
        "id": 10,
        "label": "s . parity_counter = 0 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "fire",
    "inputs": [
      "ctx: Context < FireParity2 >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let s = & mut ctx . accounts . switcher ;"
      },
      {
        "id": 14,
        "label": "let mut k : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while k < times { let mut amount = s . base ; if amount < 1 { amount = 1 ; } let projected = s . sent . saturating_add (amount) ; if projected > s . maxv { return Err (Parity2Err :: Max . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let odd = (s . parity_counter % 2) == 1 ; if odd { program_ai = ctx . accounts . alternate_path . clone () ; } token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ; s . sent = projected ; s . parity_counter = s . parity_counter . saturating_add (1) ; k = k . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = s . base ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let projected = s . sent . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if projected > s . maxv { return Err (Parity2Err :: Max . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (Parity2Err :: Max . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let odd = (s . parity_counter % 2) == 1 ;"
      },
      {
        "id": 24,
        "label": "if odd { program_ai = ctx . accounts . alternate_path . clone () ; }"
      },
      {
        "id": 25,
        "label": "program_ai = ctx . accounts . alternate_path . clone () ;"
      },
      {
        "id": 26,
        "label": "token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 28,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;"
      },
      {
        "id": 29,
        "label": "s . sent = projected ;"
      },
      {
        "id": 30,
        "label": "s . parity_counter = s . parity_counter . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "k = k . saturating_add (1) ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: projected"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: s"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: odd"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: odd"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: s"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: projected"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: s"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: s"
      }
    ]
  }
]