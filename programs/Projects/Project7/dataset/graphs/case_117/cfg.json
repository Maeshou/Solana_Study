[
  {
    "name": "setup_options",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let options_state = & mut ctx . accounts . options_state ;"
      },
      {
        "id": 2,
        "label": "options_state . signer = ctx . accounts . signer . key () ;"
      },
      {
        "id": 3,
        "label": "options_state . allowed_program = allowed_program ;"
      },
      {
        "id": 4,
        "label": "options_state . total_processed = 0 ;"
      },
      {
        "id": 5,
        "label": "options_state . call_count = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "process",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let options_state = & mut ctx . accounts . options_state ;"
      },
      {
        "id": 9,
        "label": "let mut program_account : Option < AccountInfo > = None ;"
      },
      {
        "id": 10,
        "label": "Loop Start"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "account_info_entry . key () == options_state . allowed_program"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "program_account = Some (account_info_entry . clone ()) ;"
      },
      {
        "id": 16,
        "label": "break ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "Loop End"
      },
      {
        "id": 21,
        "label": "let program_account = program_account . ok_or (ProcessErr :: ProgramMissing) ? ;"
      },
      {
        "id": 22,
        "label": "options_state . call_count = options_state . call_count . saturating_add (1) ;"
      },
      {
        "id": 23,
        "label": "msg ! (\"selected program call #{}\" , options_state . call_count) ;"
      },
      {
        "id": 24,
        "label": "token :: approve (CpiContext :: new (program_account . clone () , Approve { to : ctx . accounts . source_tokens . to_account_info () , delegate : ctx . accounts . destination_tokens . to_account_info () , authority : ctx . accounts . signer . to_account_info () , }) , move_amount) ? ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (CpiContext :: new (program_account . clone () , Transfer { from : ctx . accounts . source_tokens . to_account_info () , to : ctx . accounts . destination_tokens . to_account_info () , authority : ctx . accounts . signer . to_account_info () , }) , move_amount) ? ;"
      },
      {
        "id": 26,
        "label": "token :: revoke (CpiContext :: new (program_account , Revoke { source : ctx . accounts . source_tokens . to_account_info () , authority : ctx . accounts . signer . to_account_info () , })) ? ;"
      },
      {
        "id": 27,
        "label": "options_state . total_processed = options_state . total_processed . saturating_add (move_amount) ;"
      },
      {
        "id": 28,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 11,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 10,
        "to": 20,
        "label": "for"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      }
    ]
  }
]