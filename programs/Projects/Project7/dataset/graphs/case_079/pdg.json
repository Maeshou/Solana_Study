[
  {
    "name": "init_policy",
    "inputs": [
      "ctx: Context < InitPolicy >",
      "deductible_bps_input: u16",
      "max_payout_input: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . policy ;"
      },
      {
        "id": 2,
        "label": "p . carrier = ctx . accounts . carrier . key () ;"
      },
      {
        "id": 3,
        "label": "p . deductible_bps = clamp_u16 (deductible_bps_input , 0 , 3000) ;"
      },
      {
        "id": 4,
        "label": "p . max_payout = max_payout_input ;"
      },
      {
        "id": 5,
        "label": "if p . max_payout < 10 { p . max_payout = 10 ; }"
      },
      {
        "id": 6,
        "label": "p . max_payout = 10 ;"
      },
      {
        "id": 7,
        "label": "p . claim_count = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: p"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "act_claim",
    "inputs": [
      "ctx: Context < ActClaim >",
      "claim_amount: u64",
      "severity_level: u8"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let p = & mut ctx . accounts . policy ;"
      },
      {
        "id": 11,
        "label": "let deductible = claim_amount * p . deductible_bps as u64 / 10_000 ;"
      },
      {
        "id": 12,
        "label": "let base_after_deduct = if claim_amount > deductible { claim_amount - deductible } else { 0 } ;"
      },
      {
        "id": 13,
        "label": "claim_amount - deductible"
      },
      {
        "id": 14,
        "label": "0"
      },
      {
        "id": 15,
        "label": "let mut multiplier_percent : u64 = 100 ;"
      },
      {
        "id": 16,
        "label": "let mut step : u8 = 0 ;"
      },
      {
        "id": 17,
        "label": "while step < severity_level { multiplier_percent = multiplier_percent + 5 ; step = step + 1 ; }"
      },
      {
        "id": 18,
        "label": "multiplier_percent = multiplier_percent + 5 ;"
      },
      {
        "id": 19,
        "label": "step = step + 1 ;"
      },
      {
        "id": 20,
        "label": "let mut payout = (base_after_deduct as u128 * multiplier_percent as u128 / 100u128) as u64 ;"
      },
      {
        "id": 21,
        "label": "if payout > p . max_payout { payout = p . max_payout ; }"
      },
      {
        "id": 22,
        "label": "payout = p . max_payout ;"
      },
      {
        "id": 23,
        "label": "if payout < 1 { payout = 1 ; }"
      },
      {
        "id": 24,
        "label": "payout = 1 ;"
      },
      {
        "id": 25,
        "label": "let fee_units = claim_amount / 100 + 1 ;"
      },
      {
        "id": 26,
        "label": "token :: transfer (ctx . accounts . pool_to_claimant () , payout) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . pool_to_admin_fee () , fee_units) ? ;"
      },
      {
        "id": 28,
        "label": "p . claim_count = p . claim_count + 1 ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: p"
      },
      {
        "from": 11,
        "to": 11,
        "label": "def: deductible"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: base_after_deduct"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: deductible"
      },
      {
        "from": 11,
        "to": 12,
        "label": "data_dep: deductible"
      },
      {
        "from": 11,
        "to": 13,
        "label": "data_dep: deductible"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: payout"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: base_after_deduct"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: payout"
      },
      {
        "from": 10,
        "to": 21,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: payout"
      },
      {
        "from": 10,
        "to": 21,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: payout"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: p"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: payout"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: payout"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: payout"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: fee_units"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: payout"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: fee_units"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: p"
      },
      {
        "from": 10,
        "to": 28,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "clamp_u16",
    "inputs": [
      "v: u16",
      "lo: u16",
      "hi: u16"
    ],
    "nodes": [
      {
        "id": 34,
        "label": "Entry"
      },
      {
        "id": 35,
        "label": "let mut o = v ;"
      },
      {
        "id": 36,
        "label": "if o < lo { o = lo ; }"
      },
      {
        "id": 37,
        "label": "o = lo ;"
      },
      {
        "id": 38,
        "label": "if o > hi { o = hi ; }"
      },
      {
        "id": 39,
        "label": "o = hi ;"
      },
      {
        "id": 40,
        "label": "o"
      }
    ],
    "edges": [
      {
        "from": 35,
        "to": 35,
        "label": "def: o"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 39,
        "label": "data_dep: o"
      },
      {
        "from": 35,
        "to": 40,
        "label": "data_dep: o"
      }
    ]
  }
]