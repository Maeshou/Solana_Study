[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < ConfigureIndexSlot >",
      "base: u64",
      "cap: u64",
      "preferred_slot: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "state . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "state . base = base ;"
      },
      {
        "id": 4,
        "label": "if state . base < 1 { state . base = 1 ; }"
      },
      {
        "id": 5,
        "label": "state . base = 1 ;"
      },
      {
        "id": 6,
        "label": "state . cap = cap ;"
      },
      {
        "id": 7,
        "label": "if state . cap < state . base { state . cap = state . base ; }"
      },
      {
        "id": 8,
        "label": "state . cap = state . base ;"
      },
      {
        "id": 9,
        "label": "state . count = 0 ;"
      },
      {
        "id": 10,
        "label": "state . preferred_slot = preferred_slot ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: state"
      }
    ]
  },
  {
    "name": "execute",
    "inputs": [
      "ctx: Context < ExecuteIndexSlot >",
      "times: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 14,
        "label": "let mut round : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while round < times { let mut amount = state . base ; if amount < 1 { amount = 1 ; } let next = state . count . saturating_add (amount) ; if next > state . cap { return Err (IndexSlotErr :: Cap . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let slot = state . preferred_slot as usize ; if ctx . remaining_accounts . len () > slot { program_ai = ctx . remaining_accounts [slot] . clone () ; } token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ; state . count = next ; if state . count % (state . base * 3) == 0 { state . preferred_slot = state . preferred_slot . wrapping_add (1) ; } round = round . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = state . base ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let next = state . count . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if next > state . cap { return Err (IndexSlotErr :: Cap . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (IndexSlotErr :: Cap . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let slot = state . preferred_slot as usize ;"
      },
      {
        "id": 24,
        "label": "if ctx . remaining_accounts . len () > slot { program_ai = ctx . remaining_accounts [slot] . clone () ; }"
      },
      {
        "id": 25,
        "label": "program_ai = ctx . remaining_accounts [slot] . clone () ;"
      },
      {
        "id": 26,
        "label": "token :: approve (ctx . accounts . approve_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 28,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_ai)) ? ;"
      },
      {
        "id": 29,
        "label": "state . count = next ;"
      },
      {
        "id": 30,
        "label": "if state . count % (state . base * 3) == 0 { state . preferred_slot = state . preferred_slot . wrapping_add (1) ; }"
      },
      {
        "id": 31,
        "label": "state . preferred_slot = state . preferred_slot . wrapping_add (1) ;"
      },
      {
        "id": 32,
        "label": "round = round . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: next"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: state"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: slot"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: slot"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: slot"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 23,
        "to": 25,
        "label": "data_dep: slot"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: state"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: next"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: state"
      }
    ]
  }
]