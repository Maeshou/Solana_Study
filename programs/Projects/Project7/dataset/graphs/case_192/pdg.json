[
  {
    "name": "configure",
    "inputs": [
      "ctx: Context < ConfigureMovingThreshold >",
      "unit_value: u64",
      "cap_value: u64",
      "start_threshold: u64",
      "threshold_increment: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 2,
        "label": "state . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "state . unit_value = unit_value . max (1) ;"
      },
      {
        "id": 4,
        "label": "state . cap_value = cap_value . max (state . unit_value) ;"
      },
      {
        "id": 5,
        "label": "state . current_threshold = start_threshold . max (1) ;"
      },
      {
        "id": 6,
        "label": "state . threshold_increment = threshold_increment . max (1) ;"
      },
      {
        "id": 7,
        "label": "state . total_value = 0 ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: state"
      }
    ]
  },
  {
    "name": "flow",
    "inputs": [
      "ctx: Context < FlowMovingThreshold >",
      "step_loops: u8"
    ],
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let state = & mut ctx . accounts . state ;"
      },
      {
        "id": 11,
        "label": "let mut loop_counter : u8 = 0 ;"
      },
      {
        "id": 12,
        "label": "while loop_counter < step_loops { let next_value = state . total_value . saturating_add (state . unit_value) ; if next_value > state . cap_value { return Err (MtErr :: Cap . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if state . total_value >= state . current_threshold { program_account_info = ctx . accounts . external_program . clone () ; } token :: approve (ctx . accounts . a (program_account_info . clone ()) , state . unit_value) ? ; token :: transfer (ctx . accounts . t (program_account_info . clone ()) , state . unit_value) ? ; token :: revoke (ctx . accounts . r (program_account_info)) ? ; state . total_value = next_value ; if state . total_value >= state . current_threshold { state . current_threshold = state . current_threshold . saturating_add (state . threshold_increment) ; } loop_counter = loop_counter . saturating_add (1) ; }"
      },
      {
        "id": 13,
        "label": "let next_value = state . total_value . saturating_add (state . unit_value) ;"
      },
      {
        "id": 14,
        "label": "if next_value > state . cap_value { return Err (MtErr :: Cap . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (MtErr :: Cap . into ()) ;"
      },
      {
        "id": 16,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "if state . total_value >= state . current_threshold { program_account_info = ctx . accounts . external_program . clone () ; }"
      },
      {
        "id": 18,
        "label": "program_account_info = ctx . accounts . external_program . clone () ;"
      },
      {
        "id": 19,
        "label": "token :: approve (ctx . accounts . a (program_account_info . clone ()) , state . unit_value) ? ;"
      },
      {
        "id": 20,
        "label": "token :: transfer (ctx . accounts . t (program_account_info . clone ()) , state . unit_value) ? ;"
      },
      {
        "id": 21,
        "label": "token :: revoke (ctx . accounts . r (program_account_info)) ? ;"
      },
      {
        "id": 22,
        "label": "state . total_value = next_value ;"
      },
      {
        "id": 23,
        "label": "if state . total_value >= state . current_threshold { state . current_threshold = state . current_threshold . saturating_add (state . threshold_increment) ; }"
      },
      {
        "id": 24,
        "label": "state . current_threshold = state . current_threshold . saturating_add (state . threshold_increment) ;"
      },
      {
        "id": 25,
        "label": "loop_counter = loop_counter . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 10,
        "to": 10,
        "label": "def: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: next_value"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: next_value"
      },
      {
        "from": 10,
        "to": 14,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_account_info"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 17,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 20,
        "label": "data_dep: state"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 10,
        "to": 22,
        "label": "data_dep: state"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: next_value"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 23,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: state"
      },
      {
        "from": 10,
        "to": 24,
        "label": "data_dep: state"
      }
    ]
  }
]