[
  {
    "name": "init",
    "inputs": [
      "ctx: Context < InitTimeParity >",
      "base_amount: u64",
      "max_total: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let panel = & mut ctx . accounts . panel ;"
      },
      {
        "id": 2,
        "label": "panel . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "panel . base_amount = base_amount . max (1) ;"
      },
      {
        "id": 4,
        "label": "panel . max_total = max_total . max (panel . base_amount) ;"
      },
      {
        "id": 5,
        "label": "panel . total_value = 0 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: panel"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: panel"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: panel"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: panel"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: panel"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: panel"
      }
    ]
  },
  {
    "name": "tick",
    "inputs": [
      "ctx: Context < TickTimeParity >",
      "step_count: u8"
    ],
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let panel = & mut ctx . accounts . panel ;"
      },
      {
        "id": 9,
        "label": "let unix_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 10,
        "label": "let mut step_index : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while step_index < step_count { let next_value = panel . total_value . saturating_add (panel . base_amount) ; if next_value > panel . max_total { return Err (TimeParityErr :: Max . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; let is_odd_second = (unix_time % 2) != 0 ; if is_odd_second { if ctx . remaining_accounts . len () > 0 { program_account_info = ctx . remaining_accounts [0] . clone () ; } } token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , panel . base_amount) ? ; token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , panel . base_amount) ? ; token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ; panel . total_value = next_value ; if panel . total_value % (panel . base_amount * 6) == 0 { } step_index = step_index . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let next_value = panel . total_value . saturating_add (panel . base_amount) ;"
      },
      {
        "id": 13,
        "label": "if next_value > panel . max_total { return Err (TimeParityErr :: Max . into ()) ; }"
      },
      {
        "id": 14,
        "label": "return Err (TimeParityErr :: Max . into ()) ;"
      },
      {
        "id": 15,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 16,
        "label": "let is_odd_second = (unix_time % 2) != 0 ;"
      },
      {
        "id": 17,
        "label": "if is_odd_second { if ctx . remaining_accounts . len () > 0 { program_account_info = ctx . remaining_accounts [0] . clone () ; } }"
      },
      {
        "id": 18,
        "label": "if ctx . remaining_accounts . len () > 0 { program_account_info = ctx . remaining_accounts [0] . clone () ; }"
      },
      {
        "id": 19,
        "label": "program_account_info = ctx . remaining_accounts [0] . clone () ;"
      },
      {
        "id": 20,
        "label": "token :: approve (ctx . accounts . approve_with (program_account_info . clone ()) , panel . base_amount) ? ;"
      },
      {
        "id": 21,
        "label": "token :: transfer (ctx . accounts . transfer_with (program_account_info . clone ()) , panel . base_amount) ? ;"
      },
      {
        "id": 22,
        "label": "token :: revoke (ctx . accounts . revoke_with (program_account_info)) ? ;"
      },
      {
        "id": 23,
        "label": "panel . total_value = next_value ;"
      },
      {
        "id": 24,
        "label": "if panel . total_value % (panel . base_amount * 6) == 0 { }"
      },
      {
        "id": 25,
        "label": "step_index = step_index . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 8,
        "label": "def: panel"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: unix_time"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: unix_time"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: panel"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: next_value"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: panel"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: next_value"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: panel"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: program_account_info"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: is_odd_second"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: unix_time"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: is_odd_second"
      },
      {
        "from": 15,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 15,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 20,
        "label": "data_dep: panel"
      },
      {
        "from": 15,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 21,
        "label": "data_dep: panel"
      },
      {
        "from": 15,
        "to": 22,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 8,
        "to": 23,
        "label": "data_dep: panel"
      },
      {
        "from": 12,
        "to": 23,
        "label": "data_dep: next_value"
      },
      {
        "from": 8,
        "to": 24,
        "label": "data_dep: panel"
      },
      {
        "from": 8,
        "to": 24,
        "label": "data_dep: panel"
      }
    ]
  }
]