[
  {
    "name": "init_station",
    "inputs": [
      "ctx: Context < InitStation >",
      "daily_limit: u64",
      "chunk_units: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let station_state = & mut ctx . accounts . station_state ;"
      },
      {
        "id": 2,
        "label": "station_state . manager = ctx . accounts . manager . key () ;"
      },
      {
        "id": 3,
        "label": "station_state . daily_limit = if daily_limit < 12 { 12 } else { daily_limit } ;"
      },
      {
        "id": 4,
        "label": "12"
      },
      {
        "id": 5,
        "label": "daily_limit"
      },
      {
        "id": 6,
        "label": "station_state . distributed_today = chunk_units + 3 ;"
      },
      {
        "id": 7,
        "label": "station_state . base_chunk = if chunk_units < 4 { 4 } else { chunk_units } ;"
      },
      {
        "id": 8,
        "label": "4"
      },
      {
        "id": 9,
        "label": "chunk_units"
      },
      {
        "id": 10,
        "label": "station_state . cool_level = 1 ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: station_state"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: station_state"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: station_state"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: station_state"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: station_state"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: station_state"
      }
    ]
  },
  {
    "name": "act_dispatch",
    "inputs": [
      "ctx: Context < ActDispatch >",
      "burst_times: u8"
    ],
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let station_state = & mut ctx . accounts . station_state ;"
      },
      {
        "id": 14,
        "label": "let mut dispatch_index : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while dispatch_index < burst_times { let divisor = station_state . cool_level + 1 ; let mut effective_chunk : u64 = station_state . base_chunk / divisor ; if effective_chunk < 1 { effective_chunk = 1 ; } let projected_total : u64 = station_state . distributed_today + effective_chunk ; if projected_total > station_state . daily_limit { station_state . cool_level = station_state . cool_level + 1 ; return Err (EnErr :: OverDailyLimit . into ()) ; } token :: approve (ctx . accounts . approve_ctx () , effective_chunk) ? ; token :: transfer (ctx . accounts . transfer_ctx () , effective_chunk) ? ; token :: revoke (ctx . accounts . revoke_ctx ()) ? ; station_state . distributed_today = projected_total ; let milestone : u64 = station_state . base_chunk * 2 ; if milestone > 0 { if station_state . distributed_today % milestone == 0 { if station_state . cool_level > 0 { station_state . cool_level = station_state . cool_level - 1 ; } } } dispatch_index = dispatch_index + 1 ; }"
      },
      {
        "id": 16,
        "label": "let divisor = station_state . cool_level + 1 ;"
      },
      {
        "id": 17,
        "label": "let mut effective_chunk : u64 = station_state . base_chunk / divisor ;"
      },
      {
        "id": 18,
        "label": "if effective_chunk < 1 { effective_chunk = 1 ; }"
      },
      {
        "id": 19,
        "label": "effective_chunk = 1 ;"
      },
      {
        "id": 20,
        "label": "let projected_total : u64 = station_state . distributed_today + effective_chunk ;"
      },
      {
        "id": 21,
        "label": "if projected_total > station_state . daily_limit { station_state . cool_level = station_state . cool_level + 1 ; return Err (EnErr :: OverDailyLimit . into ()) ; }"
      },
      {
        "id": 22,
        "label": "station_state . cool_level = station_state . cool_level + 1 ;"
      },
      {
        "id": 23,
        "label": "return Err (EnErr :: OverDailyLimit . into ()) ;"
      },
      {
        "id": 24,
        "label": "token :: approve (ctx . accounts . approve_ctx () , effective_chunk) ? ;"
      },
      {
        "id": 25,
        "label": "token :: transfer (ctx . accounts . transfer_ctx () , effective_chunk) ? ;"
      },
      {
        "id": 26,
        "label": "token :: revoke (ctx . accounts . revoke_ctx ()) ? ;"
      },
      {
        "id": 27,
        "label": "station_state . distributed_today = projected_total ;"
      },
      {
        "id": 28,
        "label": "let milestone : u64 = station_state . base_chunk * 2 ;"
      },
      {
        "id": 29,
        "label": "if milestone > 0 { if station_state . distributed_today % milestone == 0 { if station_state . cool_level > 0 { station_state . cool_level = station_state . cool_level - 1 ; } } }"
      },
      {
        "id": 30,
        "label": "if station_state . distributed_today % milestone == 0 { if station_state . cool_level > 0 { station_state . cool_level = station_state . cool_level - 1 ; } }"
      },
      {
        "id": 31,
        "label": "if station_state . cool_level > 0 { station_state . cool_level = station_state . cool_level - 1 ; }"
      },
      {
        "id": 32,
        "label": "station_state . cool_level = station_state . cool_level - 1 ;"
      },
      {
        "id": 33,
        "label": "dispatch_index = dispatch_index + 1 ;"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 13,
        "to": 13,
        "label": "def: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: station_state"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: divisor"
      },
      {
        "from": 13,
        "to": 16,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 17,
        "label": "data_dep: station_state"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: divisor"
      },
      {
        "from": 13,
        "to": 20,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 21,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 27,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 28,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 29,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 30,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 31,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: station_state"
      },
      {
        "from": 13,
        "to": 32,
        "label": "data_dep: station_state"
      }
    ]
  }
]