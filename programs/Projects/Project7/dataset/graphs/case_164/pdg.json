[
  {
    "name": "open",
    "inputs": [
      "ctx: Context < OpenRateWindow >",
      "unit: u64",
      "ceiling: u64",
      "window_size: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let r = & mut ctx . accounts . regulator ;"
      },
      {
        "id": 2,
        "label": "r . guard = ctx . accounts . guard . key () ;"
      },
      {
        "id": 3,
        "label": "r . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if r . unit < 1 { r . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "r . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "r . ceiling = ceiling ;"
      },
      {
        "id": 7,
        "label": "if r . ceiling < r . unit { r . ceiling = r . unit ; }"
      },
      {
        "id": 8,
        "label": "r . ceiling = r . unit ;"
      },
      {
        "id": 9,
        "label": "r . window_size = if window_size < 1 { 1 } else { window_size } ;"
      },
      {
        "id": 10,
        "label": "1"
      },
      {
        "id": 11,
        "label": "window_size"
      },
      {
        "id": 12,
        "label": "r . window_counter = 0 ;"
      },
      {
        "id": 13,
        "label": "r . sent_total = 0 ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: r"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: r"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: r"
      }
    ]
  },
  {
    "name": "pump",
    "inputs": [
      "ctx: Context < PumpRateWindow >",
      "steps: u8"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let r = & mut ctx . accounts . regulator ;"
      },
      {
        "id": 17,
        "label": "let mut i : u8 = 0 ;"
      },
      {
        "id": 18,
        "label": "while i < steps { let mut amount = r . unit ; if amount < 1 { amount = 1 ; } let next = r . sent_total . saturating_add (amount) ; if next > r . ceiling { return Err (RateWinErr :: Ceiling . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; if r . window_counter >= r . window_size { program_ai = ctx . accounts . alt_path . clone () ; } token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . r (program_ai)) ? ; r . sent_total = next ; r . window_counter = r . window_counter . saturating_add (1) ; if r . window_counter % (r . window_size * 2) == 0 { r . window_counter = 0 ; } i = i . saturating_add (1) ; }"
      },
      {
        "id": 19,
        "label": "let mut amount = r . unit ;"
      },
      {
        "id": 20,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 21,
        "label": "amount = 1 ;"
      },
      {
        "id": 22,
        "label": "let next = r . sent_total . saturating_add (amount) ;"
      },
      {
        "id": 23,
        "label": "if next > r . ceiling { return Err (RateWinErr :: Ceiling . into ()) ; }"
      },
      {
        "id": 24,
        "label": "return Err (RateWinErr :: Ceiling . into ()) ;"
      },
      {
        "id": 25,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 26,
        "label": "if r . window_counter >= r . window_size { program_ai = ctx . accounts . alt_path . clone () ; }"
      },
      {
        "id": 27,
        "label": "program_ai = ctx . accounts . alt_path . clone () ;"
      },
      {
        "id": 28,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 29,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 30,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 31,
        "label": "r . sent_total = next ;"
      },
      {
        "id": 32,
        "label": "r . window_counter = r . window_counter . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "if r . window_counter % (r . window_size * 2) == 0 { r . window_counter = 0 ; }"
      },
      {
        "id": 34,
        "label": "r . window_counter = 0 ;"
      },
      {
        "id": 35,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: amount"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 21,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: next"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 23,
        "label": "data_dep: next"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: r"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: amount"
      },
      {
        "from": 25,
        "to": 29,
        "label": "data_dep: program_ai"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: amount"
      },
      {
        "from": 25,
        "to": 30,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 31,
        "label": "data_dep: r"
      },
      {
        "from": 22,
        "to": 31,
        "label": "data_dep: next"
      },
      {
        "from": 16,
        "to": 32,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 32,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 33,
        "label": "data_dep: r"
      },
      {
        "from": 16,
        "to": 34,
        "label": "data_dep: r"
      }
    ]
  }
]