[
  {
    "name": "initialize",
    "inputs": [
      "ctx: Context < InitializeRouteFlag >",
      "unit_size: u64",
      "max_capacity: u64",
      "use_router_path: bool"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 2,
        "label": "config . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "config . unit_size = unit_size . max (1) ;"
      },
      {
        "id": 4,
        "label": "config . max_capacity = max_capacity . max (config . unit_size) ;"
      },
      {
        "id": 5,
        "label": "config . total_sent = 0 ;"
      },
      {
        "id": 6,
        "label": "config . use_router_path = use_router_path ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: config"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: config"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: config"
      }
    ]
  },
  {
    "name": "process",
    "inputs": [
      "ctx: Context < ProcessRouteFlag >",
      "num_rounds: u8"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let config = & mut ctx . accounts . config ;"
      },
      {
        "id": 10,
        "label": "let mut current_round : u8 = 0 ;"
      },
      {
        "id": 11,
        "label": "while current_round < num_rounds { let transfer_amount = config . unit_size ; let next_total = config . total_sent . saturating_add (transfer_amount) ; if next_total > config . max_capacity { return Err (RouteFlagErr :: Capacity . into ()) ; } let mut program_account_info = ctx . accounts . token_program . to_account_info () ; if config . use_router_path { program_account_info = ctx . accounts . router_program . clone () ; } token :: approve (ctx . accounts . approve_ctx (program_account_info . clone ()) , transfer_amount) ? ; token :: transfer (ctx . accounts . transfer_ctx (program_account_info . clone ()) , transfer_amount) ? ; token :: revoke (ctx . accounts . revoke_ctx (program_account_info)) ? ; config . total_sent = next_total ; if config . total_sent % (config . unit_size * 4) == 0 { config . use_router_path = ! config . use_router_path ; } current_round = current_round . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let transfer_amount = config . unit_size ;"
      },
      {
        "id": 13,
        "label": "let next_total = config . total_sent . saturating_add (transfer_amount) ;"
      },
      {
        "id": 14,
        "label": "if next_total > config . max_capacity { return Err (RouteFlagErr :: Capacity . into ()) ; }"
      },
      {
        "id": 15,
        "label": "return Err (RouteFlagErr :: Capacity . into ()) ;"
      },
      {
        "id": 16,
        "label": "let mut program_account_info = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 17,
        "label": "if config . use_router_path { program_account_info = ctx . accounts . router_program . clone () ; }"
      },
      {
        "id": 18,
        "label": "program_account_info = ctx . accounts . router_program . clone () ;"
      },
      {
        "id": 19,
        "label": "token :: approve (ctx . accounts . approve_ctx (program_account_info . clone ()) , transfer_amount) ? ;"
      },
      {
        "id": 20,
        "label": "token :: transfer (ctx . accounts . transfer_ctx (program_account_info . clone ()) , transfer_amount) ? ;"
      },
      {
        "id": 21,
        "label": "token :: revoke (ctx . accounts . revoke_ctx (program_account_info)) ? ;"
      },
      {
        "id": 22,
        "label": "config . total_sent = next_total ;"
      },
      {
        "id": 23,
        "label": "if config . total_sent % (config . unit_size * 4) == 0 { config . use_router_path = ! config . use_router_path ; }"
      },
      {
        "id": 24,
        "label": "config . use_router_path = ! config . use_router_path ;"
      },
      {
        "id": 25,
        "label": "current_round = current_round . saturating_add (1) ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: config"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: transfer_amount"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: next_total"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: config"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: transfer_amount"
      },
      {
        "from": 13,
        "to": 14,
        "label": "data_dep: next_total"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: program_account_info"
      },
      {
        "from": 9,
        "to": 17,
        "label": "data_dep: config"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: transfer_amount"
      },
      {
        "from": 16,
        "to": 20,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: transfer_amount"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: program_account_info"
      },
      {
        "from": 9,
        "to": 22,
        "label": "data_dep: config"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: next_total"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 23,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: config"
      },
      {
        "from": 9,
        "to": 24,
        "label": "data_dep: config"
      }
    ]
  }
]