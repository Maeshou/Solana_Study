[
  {
    "name": "initialize_gacha",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let gacha = & mut ctx . accounts . gacha_state ;"
      },
      {
        "id": 2,
        "label": "gacha . admin = ctx . accounts . admin . key () ;"
      },
      {
        "id": 3,
        "label": "gacha . ticket_price = ticket_price ;"
      },
      {
        "id": 4,
        "label": "gacha . ticket_mint = ctx . accounts . ticket_mint . key () ;"
      },
      {
        "id": 5,
        "label": "gacha . item_mint = ctx . accounts . item_mint . key () ;"
      },
      {
        "id": 6,
        "label": "gacha . rewards_granted = 0 ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "pull_gacha",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let gacha = & mut ctx . accounts . gacha_state ;"
      },
      {
        "id": 10,
        "label": "let tickets_owned = ctx . accounts . player_ticket_account . amount ;"
      },
      {
        "id": 11,
        "label": "if statement"
      },
      {
        "id": 12,
        "label": "predicate"
      },
      {
        "id": 13,
        "label": "tickets_owned < gacha . ticket_price"
      },
      {
        "id": 14,
        "label": "True body"
      },
      {
        "id": 15,
        "label": "return Err (ErrorCode :: InsufficientTickets . into ()) ;"
      },
      {
        "id": 16,
        "label": "False body"
      },
      {
        "id": 17,
        "label": "No-op"
      },
      {
        "id": 18,
        "label": "merge"
      },
      {
        "id": 19,
        "label": "let mut remaining_tickets = tickets_owned ;"
      },
      {
        "id": 20,
        "label": "let mut pull_count = 0 ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "if statement"
      },
      {
        "id": 23,
        "label": "predicate"
      },
      {
        "id": 24,
        "label": "remaining_tickets >= gacha . ticket_price"
      },
      {
        "id": 25,
        "label": "True body"
      },
      {
        "id": 26,
        "label": "let burn_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , Burn { mint : ctx . accounts . ticket_mint . to_account_info () , from : ctx . accounts . player_ticket_account . to_account_info () , authority : ctx . accounts . player . to_account_info () , } ,) ;"
      },
      {
        "id": 27,
        "label": "token :: burn (burn_ctx , gacha . ticket_price) ? ;"
      },
      {
        "id": 28,
        "label": "remaining_tickets -= gacha . ticket_price ;"
      },
      {
        "id": 29,
        "label": "pull_count += 1 ;"
      },
      {
        "id": 30,
        "label": "False body"
      },
      {
        "id": 31,
        "label": "break ;"
      },
      {
        "id": 32,
        "label": "merge"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "if statement"
      },
      {
        "id": 35,
        "label": "predicate"
      },
      {
        "id": 36,
        "label": "pull_count > 0"
      },
      {
        "id": 37,
        "label": "True body"
      },
      {
        "id": 38,
        "label": "let prize_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , MintTo { mint : ctx . accounts . item_mint . to_account_info () , to : ctx . accounts . player_item_account . to_account_info () , authority : ctx . accounts . admin . to_account_info () , } ,) ;"
      },
      {
        "id": 39,
        "label": "token :: mint_to (prize_ctx , pull_count as u64) ? ;"
      },
      {
        "id": 40,
        "label": "gacha . rewards_granted += pull_count as u64 ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "No-op"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "predicate"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 11,
        "to": 14,
        "label": "true"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 11,
        "to": 16,
        "label": "false"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "predicate"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 22,
        "to": 25,
        "label": "true"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 22,
        "to": 30,
        "label": "false"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 21,
        "to": 33,
        "label": "for"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "predicate"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "true"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 34,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      }
    ]
  }
]