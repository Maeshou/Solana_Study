[
  {
    "name": "init_plan",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let plan = & mut ctx . accounts . plan ;"
      },
      {
        "id": 2,
        "label": "plan . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "plan . daily_cap = daily_cap_input ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "plan . daily_cap < 20"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "plan . daily_cap = 20 ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "plan . base_point = base_point_input ;"
      },
      {
        "id": 13,
        "label": "if statement"
      },
      {
        "id": 14,
        "label": "predicate"
      },
      {
        "id": 15,
        "label": "plan . base_point < 1"
      },
      {
        "id": 16,
        "label": "True body"
      },
      {
        "id": 17,
        "label": "plan . base_point = 1 ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "No-op"
      },
      {
        "id": 20,
        "label": "merge"
      },
      {
        "id": 21,
        "label": "plan . multiplier_bps = clamp_u16 (mult_bps_input , 0 , 3000) ;"
      },
      {
        "id": 22,
        "label": "plan . issued_today = 0 ;"
      },
      {
        "id": 23,
        "label": "plan . streak_days = 1 ;"
      },
      {
        "id": 24,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "predicate"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 13,
        "to": 16,
        "label": "true"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 13,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      }
    ]
  },
  {
    "name": "act_award",
    "nodes": [
      {
        "id": 25,
        "label": "Entry"
      },
      {
        "id": 26,
        "label": "let plan = & mut ctx . accounts . plan ;"
      },
      {
        "id": 27,
        "label": "let mut scaled = plan . base_point ;"
      },
      {
        "id": 28,
        "label": "let mut walked = steps ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "scaled = scaled + 1 + (walked % 3000) / 1000 ;"
      },
      {
        "id": 31,
        "label": "if statement"
      },
      {
        "id": 32,
        "label": "predicate"
      },
      {
        "id": 33,
        "label": "walked >= 1000"
      },
      {
        "id": 34,
        "label": "True body"
      },
      {
        "id": 35,
        "label": "walked = walked - 1000 ;"
      },
      {
        "id": 36,
        "label": "False body"
      },
      {
        "id": 37,
        "label": "walked = 0 ;"
      },
      {
        "id": 38,
        "label": "merge"
      },
      {
        "id": 39,
        "label": "Loop End"
      },
      {
        "id": 40,
        "label": "let mut bps = plan . multiplier_bps as u64 ;"
      },
      {
        "id": 41,
        "label": "if statement"
      },
      {
        "id": 42,
        "label": "predicate"
      },
      {
        "id": 43,
        "label": "streak_flag"
      },
      {
        "id": 44,
        "label": "True body"
      },
      {
        "id": 45,
        "label": "bps = bps + 150 ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "plan . streak_days % 7 == 0"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "bps = bps + 200 ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "let boosted = scaled + (scaled * bps / 10_000) ;"
      },
      {
        "id": 58,
        "label": "let projected = plan . issued_today + boosted ;"
      },
      {
        "id": 59,
        "label": "if statement"
      },
      {
        "id": 60,
        "label": "predicate"
      },
      {
        "id": 61,
        "label": "projected > plan . daily_cap"
      },
      {
        "id": 62,
        "label": "True body"
      },
      {
        "id": 63,
        "label": "let rest = plan . daily_cap - plan . issued_today ;"
      },
      {
        "id": 64,
        "label": "if statement"
      },
      {
        "id": 65,
        "label": "predicate"
      },
      {
        "id": 66,
        "label": "rest > 0"
      },
      {
        "id": 67,
        "label": "True body"
      },
      {
        "id": 68,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , rest) ? ;"
      },
      {
        "id": 69,
        "label": "False body"
      },
      {
        "id": 70,
        "label": "No-op"
      },
      {
        "id": 71,
        "label": "merge"
      },
      {
        "id": 72,
        "label": "plan . issued_today = plan . daily_cap ;"
      },
      {
        "id": 73,
        "label": "plan . streak_days = 1 ;"
      },
      {
        "id": 74,
        "label": "return Err (FitErr :: DailyCap . into ()) ;"
      },
      {
        "id": 75,
        "label": "False body"
      },
      {
        "id": 76,
        "label": "No-op"
      },
      {
        "id": 77,
        "label": "merge"
      },
      {
        "id": 78,
        "label": "token :: mint_to (ctx . accounts . mint_ctx () , boosted) ? ;"
      },
      {
        "id": 79,
        "label": "plan . issued_today = projected ;"
      },
      {
        "id": 80,
        "label": "plan . streak_days = plan . streak_days + 1 ;"
      },
      {
        "id": 81,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "predicate"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "true"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 31,
        "to": 36,
        "label": "false"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 29,
        "to": 39,
        "label": "while"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "predicate"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "true"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 41,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "predicate"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 59,
        "to": 62,
        "label": "true"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "predicate"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 64,
        "to": 67,
        "label": "true"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 64,
        "to": 69,
        "label": "false"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 68,
        "to": 71,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 59,
        "to": 75,
        "label": "false"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "next"
      },
      {
        "from": 76,
        "to": 77,
        "label": "next"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 79,
        "to": 80,
        "label": "next"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      }
    ]
  },
  {
    "name": "clamp_u16",
    "nodes": [
      {
        "id": 82,
        "label": "Entry"
      },
      {
        "id": 83,
        "label": "let mut o = v ;"
      },
      {
        "id": 84,
        "label": "if statement"
      },
      {
        "id": 85,
        "label": "predicate"
      },
      {
        "id": 86,
        "label": "o < lo"
      },
      {
        "id": 87,
        "label": "True body"
      },
      {
        "id": 88,
        "label": "o = lo ;"
      },
      {
        "id": 89,
        "label": "False body"
      },
      {
        "id": 90,
        "label": "No-op"
      },
      {
        "id": 91,
        "label": "merge"
      },
      {
        "id": 92,
        "label": "if statement"
      },
      {
        "id": 93,
        "label": "predicate"
      },
      {
        "id": 94,
        "label": "o > hi"
      },
      {
        "id": 95,
        "label": "True body"
      },
      {
        "id": 96,
        "label": "o = hi ;"
      },
      {
        "id": 97,
        "label": "False body"
      },
      {
        "id": 98,
        "label": "No-op"
      },
      {
        "id": 99,
        "label": "merge"
      },
      {
        "id": 100,
        "label": "o"
      }
    ],
    "edges": [
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "predicate"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 84,
        "to": 87,
        "label": "true"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 84,
        "to": 89,
        "label": "false"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 88,
        "to": 91,
        "label": "next"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "predicate"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 92,
        "to": 95,
        "label": "true"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 92,
        "to": 97,
        "label": "false"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 96,
        "to": 99,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "next"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      }
    ]
  }
]