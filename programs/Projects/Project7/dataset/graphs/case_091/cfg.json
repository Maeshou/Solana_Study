[
  {
    "name": "init_crafting_station",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let station = & mut ctx . accounts . crafting_station ;"
      },
      {
        "id": 2,
        "label": "station . crafter = ctx . accounts . crafter . key () ;"
      },
      {
        "id": 3,
        "label": "station . material_mint = ctx . accounts . material_mint . key () ;"
      },
      {
        "id": 4,
        "label": "station . base_material_cost = base_material_cost ;"
      },
      {
        "id": 5,
        "label": "station . success_rate = success_rate ;"
      },
      {
        "id": 6,
        "label": "station . total_crafts_attempted = 0 ;"
      },
      {
        "id": 7,
        "label": "station . successful_crafts = 0 ;"
      },
      {
        "id": 8,
        "label": "station . materials_consumed = 0 ;"
      },
      {
        "id": 9,
        "label": "station . station_type = StationType :: Basic ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute_craft_attempt",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let station = & mut ctx . accounts . crafting_station ;"
      },
      {
        "id": 13,
        "label": "let random_seed = Clock :: get () ? . unix_timestamp as u64 ;"
      },
      {
        "id": 14,
        "label": "let recipe_multiplier = match recipe_type { CraftingRecipe :: Common => 1 , CraftingRecipe :: Rare => 3 , CraftingRecipe :: Epic => 7 , CraftingRecipe :: Legendary => 15 , } ;"
      },
      {
        "id": 15,
        "label": "let enhancement_multiplier = (enhancement_level as u64) . saturating_add (1) ;"
      },
      {
        "id": 16,
        "label": "let total_material_cost = station . base_material_cost * recipe_multiplier * enhancement_multiplier ;"
      },
      {
        "id": 17,
        "label": "let mut success_chance = station . success_rate ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "station . successful_crafts > 10 && station . station_type == StationType :: Basic"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "station . station_type = StationType :: Advanced ;"
      },
      {
        "id": 23,
        "label": "success_chance = success_chance . saturating_add (20) ;"
      },
      {
        "id": 24,
        "label": "False body"
      },
      {
        "id": 25,
        "label": "No-op"
      },
      {
        "id": 26,
        "label": "merge"
      },
      {
        "id": 27,
        "label": "let mut remaining_cost = total_material_cost ;"
      },
      {
        "id": 28,
        "label": "Loop Start"
      },
      {
        "id": 29,
        "label": "let burn_amount = std :: cmp :: min (remaining_cost , 50_000 * 10u64 . pow (6)) ;"
      },
      {
        "id": 30,
        "label": "burn (ctx . accounts . burn_materials_ctx () , burn_amount ,) ? ;"
      },
      {
        "id": 31,
        "label": "remaining_cost -= burn_amount ;"
      },
      {
        "id": 32,
        "label": "Loop End"
      },
      {
        "id": 33,
        "label": "station . materials_consumed += total_material_cost ;"
      },
      {
        "id": 34,
        "label": "station . total_crafts_attempted += 1 ;"
      },
      {
        "id": 35,
        "label": "let success = (random_seed % 100) < success_chance as u64 ;"
      },
      {
        "id": 36,
        "label": "if statement"
      },
      {
        "id": 37,
        "label": "predicate"
      },
      {
        "id": 38,
        "label": "success"
      },
      {
        "id": 39,
        "label": "True body"
      },
      {
        "id": 40,
        "label": "station . successful_crafts += 1 ;"
      },
      {
        "id": 41,
        "label": "mint_to (ctx . accounts . mint_nft_ctx () , 1 ,) ? ;"
      },
      {
        "id": 42,
        "label": "False body"
      },
      {
        "id": 43,
        "label": "No-op"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 18,
        "to": 24,
        "label": "false"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 28,
        "to": 32,
        "label": "while"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "predicate"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "true"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 36,
        "to": 42,
        "label": "false"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      }
    ]
  }
]