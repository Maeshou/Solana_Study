[
  {
    "name": "set",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < SetParity >",
      "unit: u64",
      "limit: u64"
    ],
    "attributes": [],
    "body": [
      "let p = & mut ctx . accounts . panel ;",
      "p . operator = ctx . accounts . operator . key () ;",
      "p . unit = unit ;",
      "if p . unit < 1",
      "{",
      "p . unit = 1 ;",
      "}",
      "p . limit = limit ;",
      "if p . limit < p . unit",
      "{",
      "p . limit = p . unit ;",
      "}",
      "p . progress = 0 ;",
      "Ok (())"
    ]
  },
  {
    "name": "step",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < StepParity >",
      "cycles: u8"
    ],
    "attributes": [],
    "body": [
      "let p = & mut ctx . accounts . panel ;",
      "let now = Clock :: get () ? . unix_timestamp ;",
      "let mut c : u8 = 0 ;",
      "while c < cycles",
      "{",
      "let mut amount = p . unit ;",
      "if amount < 1",
      "{",
      "amount = 1 ;",
      "} let after = p . progress . saturating_add (amount) ;",
      "if after > p . limit",
      "{",
      "return Err (ParityErr :: Limit . into ()) ;",
      "} let mut program_ai = ctx . accounts . token_program . to_account_info () ;",
      "let odd = (now % 2) != 0 ;",
      "if odd",
      "{",
      "program_ai = ctx . accounts . alternate_path . clone () ;",
      "} token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ;",
      "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ;",
      "token :: revoke (ctx . accounts . r (program_ai)) ? ;",
      "p . progress = after ;",
      "if p . progress % (p . unit * 6) == 0",
      "{",
      "p . progress = p . progress ;",
      "} c = c . saturating_add (1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "SetParity",
    "node_type": "struct",
    "fields": [
      {
        "name": "panel",
        "attribute": "# [account (init , payer = operator , space = 8 + 32 + 8 + 8 + 8)]",
        "field_type": "Account < 'info , ParityState >"
      },
      {
        "name": "operator",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "StepParity",
    "node_type": "struct",
    "fields": [
      {
        "name": "panel",
        "attribute": "# [account (mut , has_one = operator)]",
        "field_type": "Account < 'info , ParityState >"
      },
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Signer < 'info >"
      },
      {
        "name": "debit",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "credit",
        "attribute": "# [account (mut)]",
        "field_type": "Account < 'info , TokenAccount >"
      },
      {
        "name": "token_program",
        "attribute": null,
        "field_type": "Program < 'info , Token >"
      },
      {
        "name": "alternate_path",
        "attribute": null,
        "field_type": "AccountInfo < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "ParityState",
    "node_type": "struct",
    "fields": [
      {
        "name": "operator",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "unit",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "limit",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "progress",
        "attribute": null,
        "field_type": "u64"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]