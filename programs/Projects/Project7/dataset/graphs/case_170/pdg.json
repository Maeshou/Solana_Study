[
  {
    "name": "set",
    "inputs": [
      "ctx: Context < SetParity >",
      "unit: u64",
      "limit: u64"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let p = & mut ctx . accounts . panel ;"
      },
      {
        "id": 2,
        "label": "p . operator = ctx . accounts . operator . key () ;"
      },
      {
        "id": 3,
        "label": "p . unit = unit ;"
      },
      {
        "id": 4,
        "label": "if p . unit < 1 { p . unit = 1 ; }"
      },
      {
        "id": 5,
        "label": "p . unit = 1 ;"
      },
      {
        "id": 6,
        "label": "p . limit = limit ;"
      },
      {
        "id": 7,
        "label": "if p . limit < p . unit { p . limit = p . unit ; }"
      },
      {
        "id": 8,
        "label": "p . limit = p . unit ;"
      },
      {
        "id": 9,
        "label": "p . progress = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: p"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: p"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: p"
      }
    ]
  },
  {
    "name": "step",
    "inputs": [
      "ctx: Context < StepParity >",
      "cycles: u8"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "let p = & mut ctx . accounts . panel ;"
      },
      {
        "id": 13,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 14,
        "label": "let mut c : u8 = 0 ;"
      },
      {
        "id": 15,
        "label": "while c < cycles { let mut amount = p . unit ; if amount < 1 { amount = 1 ; } let after = p . progress . saturating_add (amount) ; if after > p . limit { return Err (ParityErr :: Limit . into ()) ; } let mut program_ai = ctx . accounts . token_program . to_account_info () ; let odd = (now % 2) != 0 ; if odd { program_ai = ctx . accounts . alternate_path . clone () ; } token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ; token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ; token :: revoke (ctx . accounts . r (program_ai)) ? ; p . progress = after ; if p . progress % (p . unit * 6) == 0 { p . progress = p . progress ; } c = c . saturating_add (1) ; }"
      },
      {
        "id": 16,
        "label": "let mut amount = p . unit ;"
      },
      {
        "id": 17,
        "label": "if amount < 1 { amount = 1 ; }"
      },
      {
        "id": 18,
        "label": "amount = 1 ;"
      },
      {
        "id": 19,
        "label": "let after = p . progress . saturating_add (amount) ;"
      },
      {
        "id": 20,
        "label": "if after > p . limit { return Err (ParityErr :: Limit . into ()) ; }"
      },
      {
        "id": 21,
        "label": "return Err (ParityErr :: Limit . into ()) ;"
      },
      {
        "id": 22,
        "label": "let mut program_ai = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 23,
        "label": "let odd = (now % 2) != 0 ;"
      },
      {
        "id": 24,
        "label": "if odd { program_ai = ctx . accounts . alternate_path . clone () ; }"
      },
      {
        "id": 25,
        "label": "program_ai = ctx . accounts . alternate_path . clone () ;"
      },
      {
        "id": 26,
        "label": "token :: approve (ctx . accounts . a (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 27,
        "label": "token :: transfer (ctx . accounts . t (program_ai . clone ()) , amount) ? ;"
      },
      {
        "id": 28,
        "label": "token :: revoke (ctx . accounts . r (program_ai)) ? ;"
      },
      {
        "id": 29,
        "label": "p . progress = after ;"
      },
      {
        "id": 30,
        "label": "if p . progress % (p . unit * 6) == 0 { p . progress = p . progress ; }"
      },
      {
        "id": 31,
        "label": "p . progress = p . progress ;"
      },
      {
        "id": 32,
        "label": "c = c . saturating_add (1) ;"
      },
      {
        "id": 33,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 12,
        "label": "def: p"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 13,
        "to": 15,
        "label": "data_dep: now"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: amount"
      },
      {
        "from": 12,
        "to": 16,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: amount"
      },
      {
        "from": 16,
        "to": 18,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: after"
      },
      {
        "from": 12,
        "to": 19,
        "label": "data_dep: p"
      },
      {
        "from": 16,
        "to": 19,
        "label": "data_dep: amount"
      },
      {
        "from": 19,
        "to": 20,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 20,
        "label": "data_dep: p"
      },
      {
        "from": 22,
        "to": 22,
        "label": "def: program_ai"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: odd"
      },
      {
        "from": 13,
        "to": 23,
        "label": "data_dep: now"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: odd"
      },
      {
        "from": 22,
        "to": 24,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 25,
        "label": "data_dep: program_ai"
      },
      {
        "from": 22,
        "to": 26,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 26,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 27,
        "label": "data_dep: program_ai"
      },
      {
        "from": 16,
        "to": 27,
        "label": "data_dep: amount"
      },
      {
        "from": 22,
        "to": 28,
        "label": "data_dep: program_ai"
      },
      {
        "from": 12,
        "to": 29,
        "label": "data_dep: p"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: after"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 30,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: p"
      },
      {
        "from": 12,
        "to": 31,
        "label": "data_dep: p"
      }
    ]
  }
]