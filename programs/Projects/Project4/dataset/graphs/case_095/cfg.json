[
  {
    "name": "init_zeta",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acc = & mut ctx . accounts . zeta_account ;"
      },
      {
        "id": 2,
        "label": "acc . m = m ;"
      },
      {
        "id": 3,
        "label": "acc . n = n ;"
      },
      {
        "id": 4,
        "label": "acc . o = o ;"
      },
      {
        "id": 5,
        "label": "acc . bump = * ctx . bumps . get (\"zeta_account\") . unwrap () ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_zeta",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let acc = & mut ctx . accounts . zeta_account ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "i % 6 == 0"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "msg ! (\"divisible by 6: {}\" , i) ;"
      },
      {
        "id": 15,
        "label": "acc . n = acc . n . checked_add (1) . unwrap () ;"
      },
      {
        "id": 16,
        "label": "acc . m = acc . m . checked_add (2) . unwrap () ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"m & n incremented\") ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "msg ! (\"not divisible by 6: {}\" , i) ;"
      },
      {
        "id": 20,
        "label": "acc . o = acc . o . checked_mul (3) . unwrap () ;"
      },
      {
        "id": 21,
        "label": "msg ! (\"o tripled\") ;"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "acc . m > 10"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "msg ! (\"m large\") ;"
      },
      {
        "id": 29,
        "label": "acc . o = acc . o . checked_sub (acc . m as u64) . unwrap () ;"
      },
      {
        "id": 30,
        "label": "acc . n = acc . n . checked_mul (2) . unwrap () ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "msg ! (\"m small\") ;"
      },
      {
        "id": 33,
        "label": "acc . m = acc . m . checked_add (5) . unwrap () ;"
      },
      {
        "id": 34,
        "label": "msg ! (\"m +5\") ;"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 10,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 9,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 24,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]