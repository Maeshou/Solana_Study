[
  {
    "name": "create_event",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 2,
        "label": "let e = & mut ctx . accounts . event ;"
      },
      {
        "id": 3,
        "label": "e . start = start ;"
      },
      {
        "id": 4,
        "label": "e . end = end ;"
      },
      {
        "id": 5,
        "label": "e . created_at = now ;"
      },
      {
        "id": 6,
        "label": "if statement"
      },
      {
        "id": 7,
        "label": "predicate"
      },
      {
        "id": 8,
        "label": "e . end < e . start"
      },
      {
        "id": 9,
        "label": "True body"
      },
      {
        "id": 10,
        "label": "let tmp = e . start ;"
      },
      {
        "id": 11,
        "label": "e . start = e . end ;"
      },
      {
        "id": 12,
        "label": "e . end = tmp ;"
      },
      {
        "id": 13,
        "label": "False body"
      },
      {
        "id": 14,
        "label": "No-op"
      },
      {
        "id": 15,
        "label": "merge"
      },
      {
        "id": 16,
        "label": "e . duration = e . end - e . start ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "predicate"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 6,
        "to": 9,
        "label": "true"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 6,
        "to": 13,
        "label": "false"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      }
    ]
  },
  {
    "name": "cancel_event",
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 20,
        "label": "let ev = & mut ctx . accounts . event ;"
      },
      {
        "id": 21,
        "label": "ev . canceled = true ;"
      },
      {
        "id": 22,
        "label": "ev . canceled_at = now ;"
      },
      {
        "id": 23,
        "label": "if statement"
      },
      {
        "id": 24,
        "label": "predicate"
      },
      {
        "id": 25,
        "label": "now < ev . start"
      },
      {
        "id": 26,
        "label": "True body"
      },
      {
        "id": 27,
        "label": "ev . early_cancel = true ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "ev . early_cancel = false ;"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "predicate"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 23,
        "to": 26,
        "label": "true"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 23,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      }
    ]
  }
]