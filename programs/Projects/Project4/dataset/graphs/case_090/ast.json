[
  {
    "name": "init_alpha",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitAlpha >",
      "data1: u8",
      "data2: u32",
      "data3: u64"
    ],
    "attributes": [],
    "body": [
      "let acc = & mut ctx . accounts . alpha_account ;",
      "acc . data1 = data1 ;",
      "acc . data2 = data2 ;",
      "acc . data3 = data3 ;",
      "acc . bump = * ctx . bumps . get (\"alpha_account\") . unwrap () ;",
      "Ok (())"
    ]
  },
  {
    "name": "update_alpha",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < UpdateAlpha >"
    ],
    "attributes": [],
    "body": [
      "let acc = & mut ctx . accounts . alpha_account ;",
      "for i in 0 .. (acc . data2 as usize)",
      "{",
      "if i % 2 == 0",
      "{",
      "msg ! (\"even idx: {}\" , i) ;",
      "acc . data2 = acc . data2 . checked_add (i as u32) . unwrap () ;",
      "acc . data1 = acc . data1 . checked_add (1) . unwrap () ;",
      "msg ! (\"data1 now",
      "{",
      "}\" , acc . data1) ;",
      "} else",
      "{",
      "msg ! (\"odd idx: {}\" , i) ;",
      "let prod = acc . data3 . checked_mul (i as u64) . unwrap () ;",
      "acc . data3 = prod ;",
      "msg ! (\"data3 now",
      "{",
      "}\" , acc . data3) ;",
      "}",
      "}",
      "if acc . data2 > 1000",
      "{",
      "msg ! (\"data2 is large:",
      "{",
      "}\" , acc . data2) ;",
      "acc . data3 = acc . data3 . checked_sub (acc . data2 as u64) . unwrap () ;",
      "acc . data2 = acc . data2 . checked_mul (2) . unwrap () ;",
      "} else",
      "{",
      "msg ! (\"data2 is small: {}\" , acc . data2) ;",
      "acc . data1 = acc . data1 . checked_sub (1) . unwrap () ;",
      "msg ! (\"data1 decremented to",
      "{",
      "}\" , acc . data1) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitAlpha",
    "node_type": "struct",
    "fields": [
      {
        "name": "alpha_account",
        "attribute": "# [account (init , seeds = [b\"alpha\"] , bump , payer = payer , space = 8 + 1 + 4 + 8 + 1)]",
        "field_type": "Account < 'info , AlphaAccount >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "UpdateAlpha",
    "node_type": "struct",
    "fields": [
      {
        "name": "alpha_account",
        "attribute": "# [account (mut , seeds = [b\"alpha\"] , bump)]",
        "field_type": "Account < 'info , AlphaAccount >"
      },
      {
        "name": "payer",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "AlphaAccount",
    "node_type": "struct",
    "fields": [
      {
        "name": "data1",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "data2",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "data3",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "bump",
        "attribute": null,
        "field_type": "u8"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]