[
  {
    "name": "init_iota",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let acc = & mut ctx . accounts . iota_account ;"
      },
      {
        "id": 2,
        "label": "acc . d1 = d1 ;"
      },
      {
        "id": 3,
        "label": "acc . d2 = d2 ;"
      },
      {
        "id": 4,
        "label": "acc . d3 = d3 ;"
      },
      {
        "id": 5,
        "label": "acc . bump = * ctx . bumps . get (\"iota_account\") . unwrap () ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_iota",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let acc = & mut ctx . accounts . iota_account ;"
      },
      {
        "id": 9,
        "label": "Loop Start"
      },
      {
        "id": 10,
        "label": "if statement"
      },
      {
        "id": 11,
        "label": "predicate"
      },
      {
        "id": 12,
        "label": "i % 2 == 0"
      },
      {
        "id": 13,
        "label": "True body"
      },
      {
        "id": 14,
        "label": "msg ! (\"even i: {}\" , i) ;"
      },
      {
        "id": 15,
        "label": "acc . d2 = acc . d2 . checked_add (i as u32) . unwrap () ;"
      },
      {
        "id": 16,
        "label": "acc . d1 = acc . d1 . checked_add (1) . unwrap () ;"
      },
      {
        "id": 17,
        "label": "msg ! (\"d1 & d2 updated\") ;"
      },
      {
        "id": 18,
        "label": "False body"
      },
      {
        "id": 19,
        "label": "msg ! (\"odd i: {}\" , i) ;"
      },
      {
        "id": 20,
        "label": "acc . d3 = acc . d3 . checked_mul (2) . unwrap () ;"
      },
      {
        "id": 21,
        "label": "msg ! (\"d3 doubled\") ;"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "acc . d3 > 1000"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "msg ! (\"d3 big\") ;"
      },
      {
        "id": 29,
        "label": "acc . d1 = acc . d1 . checked_sub (1) . unwrap () ;"
      },
      {
        "id": 30,
        "label": "acc . d2 = acc . d2 . checked_mul (3) . unwrap () ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "msg ! (\"d3 small\") ;"
      },
      {
        "id": 33,
        "label": "acc . d3 = acc . d3 . checked_add (acc . d2 as u64) . unwrap () ;"
      },
      {
        "id": 34,
        "label": "msg ! (\"d3 increased\") ;"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "predicate"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 10,
        "to": 13,
        "label": "true"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 10,
        "to": 18,
        "label": "false"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 9,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 24,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]