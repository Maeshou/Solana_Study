[
  {
    "name": "init_user",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let mut sum = 0u32 ;"
      },
      {
        "id": 2,
        "label": "let mut vowels = 0u32 ;"
      },
      {
        "id": 3,
        "label": "let mut consonants = 0u32 ;"
      },
      {
        "id": 4,
        "label": "Loop Start"
      },
      {
        "id": 5,
        "label": "let code = c as u32 ;"
      },
      {
        "id": 6,
        "label": "sum += code ;"
      },
      {
        "id": 7,
        "label": "match c . to_ascii_lowercase () { 'a' | 'e' | 'i' | 'o' | 'u' => vowels += 1 , ch if ch . is_ascii_alphabetic () => consonants += 1 , _ => { } }"
      },
      {
        "id": 8,
        "label": "Loop End"
      },
      {
        "id": 9,
        "label": "let profile = & mut ctx . accounts . profile ;"
      },
      {
        "id": 10,
        "label": "profile . owner = ctx . accounts . user . key () ;"
      },
      {
        "id": 11,
        "label": "profile . ascii_sum = sum ;"
      },
      {
        "id": 12,
        "label": "profile . vowels = vowels ;"
      },
      {
        "id": 13,
        "label": "profile . consonants = consonants ;"
      },
      {
        "id": 14,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 15,
        "label": "let mut clean = String :: new () ;"
      },
      {
        "id": 16,
        "label": "Loop Start"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "! ('0' <= ch && ch <= '9')"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "clean . push (ch) ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "No-op"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "if statement"
      },
      {
        "id": 27,
        "label": "predicate"
      },
      {
        "id": 28,
        "label": "clean . len () % 2 == 0"
      },
      {
        "id": 29,
        "label": "True body"
      },
      {
        "id": 30,
        "label": "settings . theme = clean . to_uppercase () ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "settings . theme = clean . to_lowercase () ;"
      },
      {
        "id": 33,
        "label": "merge"
      },
      {
        "id": 34,
        "label": "settings . ascii_mod = (sum % 100) as u8 ;"
      },
      {
        "id": 35,
        "label": "let notifications = & mut ctx . accounts . notifications ;"
      },
      {
        "id": 36,
        "label": "notifications . email = notify_email ;"
      },
      {
        "id": 37,
        "label": "notifications . sms = ! notify_email ;"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 4,
        "to": 8,
        "label": "for"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 16,
        "to": 25,
        "label": "for"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "predicate"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 26,
        "to": 29,
        "label": "true"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 26,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 30,
        "to": 33,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_settings",
    "nodes": [
      {
        "id": 39,
        "label": "Entry"
      },
      {
        "id": 40,
        "label": "let settings = & mut ctx . accounts . settings ;"
      },
      {
        "id": 41,
        "label": "let prefix = \">>\" ;"
      },
      {
        "id": 42,
        "label": "if statement"
      },
      {
        "id": 43,
        "label": "predicate"
      },
      {
        "id": 44,
        "label": "new_theme . starts_with (prefix)"
      },
      {
        "id": 45,
        "label": "True body"
      },
      {
        "id": 46,
        "label": "settings . theme = new_theme [prefix . len () ..] . to_string () ;"
      },
      {
        "id": 47,
        "label": "False body"
      },
      {
        "id": 48,
        "label": "settings . theme = new_theme . clone () ;"
      },
      {
        "id": 49,
        "label": "merge"
      },
      {
        "id": 50,
        "label": "let mut hash = 0u8 ;"
      },
      {
        "id": 51,
        "label": "Loop Start"
      },
      {
        "id": 52,
        "label": "hash = hash . wrapping_add ((c as u8) . wrapping_mul ((i as u8) . wrapping_add (1))) ;"
      },
      {
        "id": 53,
        "label": "Loop End"
      },
      {
        "id": 54,
        "label": "settings . ascii_mod = hash ;"
      },
      {
        "id": 55,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "predicate"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "true"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 42,
        "to": 47,
        "label": "false"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 51,
        "to": 53,
        "label": "for"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      }
    ]
  }
]