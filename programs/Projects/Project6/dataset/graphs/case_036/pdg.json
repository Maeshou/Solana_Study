[
  {
    "name": "advance_tournament_bracket",
    "inputs": [
      "ctx: Context < AdvanceTournament >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let t = & mut ctx . accounts . tournament ;"
      },
      {
        "id": 2,
        "label": "let wp = & mut ctx . accounts . winner_profile ;"
      },
      {
        "id": 3,
        "label": "let lp = & mut ctx . accounts . loser_profile ;"
      },
      {
        "id": 4,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 5,
        "label": "require ! (now >= t . round_start_time , BracketErr :: RoundNotStarted) ;"
      },
      {
        "id": 6,
        "label": "require ! (now <= t . round_end_time , BracketErr :: RoundExpired) ;"
      },
      {
        "id": 7,
        "label": "require ! (t . current_round < t . max_rounds , BracketErr :: TournamentCompleted) ;"
      },
      {
        "id": 8,
        "label": "let mul = [150u64 , 100 , 75] ;"
      },
      {
        "id": 9,
        "label": "let mut w_power = 0u64 ;"
      },
      {
        "id": 10,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 11,
        "label": "while i < wp . equipped_items . len () { let e = & wp . equipped_items [i] ; let idx = if let EquipmentType :: Weapon = e . equipment_type { 0 } else { if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 } } ; w_power = w_power . saturating_add (e . power_level . saturating_mul (mul [idx])) ; i = i . saturating_add (1) ; }"
      },
      {
        "id": 12,
        "label": "let e = & wp . equipped_items [i] ;"
      },
      {
        "id": 13,
        "label": "let idx = if let EquipmentType :: Weapon = e . equipment_type { 0 } else { if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 } } ;"
      },
      {
        "id": 14,
        "label": "0"
      },
      {
        "id": 15,
        "label": "if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 }"
      },
      {
        "id": 16,
        "label": "1"
      },
      {
        "id": 17,
        "label": "2"
      },
      {
        "id": 18,
        "label": "w_power = w_power . saturating_add (e . power_level . saturating_mul (mul [idx])) ;"
      },
      {
        "id": 19,
        "label": "i = i . saturating_add (1) ;"
      },
      {
        "id": 20,
        "label": "let mut l_power = 0u64 ;"
      },
      {
        "id": 21,
        "label": "let mut j = 0usize ;"
      },
      {
        "id": 22,
        "label": "while j < lp . equipped_items . len () { let e = & lp . equipped_items [j] ; let idx = if let EquipmentType :: Weapon = e . equipment_type { 0 } else { if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 } } ; l_power = l_power . saturating_add (e . power_level . saturating_mul (mul [idx])) ; j = j . saturating_add (1) ; }"
      },
      {
        "id": 23,
        "label": "let e = & lp . equipped_items [j] ;"
      },
      {
        "id": 24,
        "label": "let idx = if let EquipmentType :: Weapon = e . equipment_type { 0 } else { if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 } } ;"
      },
      {
        "id": 25,
        "label": "0"
      },
      {
        "id": 26,
        "label": "if let EquipmentType :: Armor = e . equipment_type { 1 } else { 2 }"
      },
      {
        "id": 27,
        "label": "1"
      },
      {
        "id": 28,
        "label": "2"
      },
      {
        "id": 29,
        "label": "l_power = l_power . saturating_add (e . power_level . saturating_mul (mul [idx])) ;"
      },
      {
        "id": 30,
        "label": "j = j . saturating_add (1) ;"
      },
      {
        "id": 31,
        "label": "w_power = w_power . saturating_add (wp . skill_level . saturating_mul (200)) ;"
      },
      {
        "id": 32,
        "label": "l_power = l_power . saturating_add (lp . skill_level . saturating_mul (200)) ;"
      },
      {
        "id": 33,
        "label": "let diff = w_power . saturating_sub (l_power) ;"
      },
      {
        "id": 34,
        "label": "let mut vt = VictoryType :: Narrow ;"
      },
      {
        "id": 35,
        "label": "if diff > 500 { vt = VictoryType :: Clear ; }"
      },
      {
        "id": 36,
        "label": "vt = VictoryType :: Clear ;"
      },
      {
        "id": 37,
        "label": "if diff > 1000 { vt = VictoryType :: Decisive ; }"
      },
      {
        "id": 38,
        "label": "vt = VictoryType :: Decisive ;"
      },
      {
        "id": 39,
        "label": "let base = t . prize_pool . saturating_div (16) ;"
      },
      {
        "id": 40,
        "label": "let mut v = base ;"
      },
      {
        "id": 41,
        "label": "if let VictoryType :: Clear = vt { v = base . saturating_mul (125) / 100 ; }"
      },
      {
        "id": 42,
        "label": "v = base . saturating_mul (125) / 100 ;"
      },
      {
        "id": 43,
        "label": "if let VictoryType :: Decisive = vt { v = base . saturating_mul (150) / 100 ; }"
      },
      {
        "id": 44,
        "label": "v = base . saturating_mul (150) / 100 ;"
      },
      {
        "id": 45,
        "label": "let multi = t . current_round . saturating_add (1) as u64 ;"
      },
      {
        "id": 46,
        "label": "let final_reward = v . saturating_mul (multi) ;"
      },
      {
        "id": 47,
        "label": "wp . tournament_earnings = wp . tournament_earnings . saturating_add (final_reward) ;"
      },
      {
        "id": 48,
        "label": "wp . wins = wp . wins . saturating_add (1) ;"
      },
      {
        "id": 49,
        "label": "wp . current_win_streak = wp . current_win_streak . saturating_add (1) ;"
      },
      {
        "id": 50,
        "label": "lp . losses = lp . losses . saturating_add (1) ;"
      },
      {
        "id": 51,
        "label": "lp . current_win_streak = 0 ;"
      },
      {
        "id": 52,
        "label": "if wp . current_win_streak >= 5 { let add = (wp . current_win_streak as u64) . saturating_mul (100) ; wp . tournament_earnings = wp . tournament_earnings . saturating_add (add) ; }"
      },
      {
        "id": 53,
        "label": "let add = (wp . current_win_streak as u64) . saturating_mul (100) ;"
      },
      {
        "id": 54,
        "label": "wp . tournament_earnings = wp . tournament_earnings . saturating_add (add) ;"
      },
      {
        "id": 55,
        "label": "t . current_round = t . current_round . saturating_add (1) ;"
      },
      {
        "id": 56,
        "label": "t . round_start_time = now + 1800 ;"
      },
      {
        "id": 57,
        "label": "t . round_end_time = t . round_start_time + 3600 ;"
      },
      {
        "id": 58,
        "label": "if t . current_round >= t . max_rounds { t . tournament_status = TournamentStatus :: Finals ; t . champion = wp . player ; }"
      },
      {
        "id": 59,
        "label": "t . tournament_status = TournamentStatus :: Finals ;"
      },
      {
        "id": 60,
        "label": "t . champion = wp . player ;"
      },
      {
        "id": 61,
        "label": "emit ! (MatchCompleted { tournament_id : t . tournament_id , winner : wp . player , loser : lp . player , round : t . current_round , victory_type : vt . clone () , reward_earned : final_reward , }) ;"
      },
      {
        "id": 62,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: t"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: wp"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: lp"
      },
      {
        "from": 4,
        "to": 4,
        "label": "def: now"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: mul"
      },
      {
        "from": 9,
        "to": 9,
        "label": "def: w_power"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 11,
        "label": "data_dep: wp"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: w_power"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: w_power"
      },
      {
        "from": 8,
        "to": 11,
        "label": "data_dep: mul"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: i"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: e"
      },
      {
        "from": 2,
        "to": 12,
        "label": "data_dep: wp"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: i"
      },
      {
        "from": 13,
        "to": 13,
        "label": "def: idx"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: e"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: w_power"
      },
      {
        "from": 9,
        "to": 18,
        "label": "data_dep: w_power"
      },
      {
        "from": 12,
        "to": 18,
        "label": "data_dep: e"
      },
      {
        "from": 8,
        "to": 18,
        "label": "data_dep: mul"
      },
      {
        "from": 13,
        "to": 18,
        "label": "data_dep: idx"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 10,
        "to": 19,
        "label": "data_dep: i"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: l_power"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: j"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: j"
      },
      {
        "from": 3,
        "to": 22,
        "label": "data_dep: lp"
      },
      {
        "from": 3,
        "to": 22,
        "label": "data_dep: lp"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: j"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: e"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: e"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: l_power"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: l_power"
      },
      {
        "from": 12,
        "to": 22,
        "label": "data_dep: e"
      },
      {
        "from": 8,
        "to": 22,
        "label": "data_dep: mul"
      },
      {
        "from": 13,
        "to": 22,
        "label": "data_dep: idx"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: j"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: j"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: e"
      },
      {
        "from": 3,
        "to": 23,
        "label": "data_dep: lp"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: j"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: idx"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 23,
        "to": 26,
        "label": "data_dep: e"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: l_power"
      },
      {
        "from": 20,
        "to": 29,
        "label": "data_dep: l_power"
      },
      {
        "from": 23,
        "to": 29,
        "label": "data_dep: e"
      },
      {
        "from": 8,
        "to": 29,
        "label": "data_dep: mul"
      },
      {
        "from": 24,
        "to": 29,
        "label": "data_dep: idx"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: j"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: j"
      },
      {
        "from": 9,
        "to": 31,
        "label": "data_dep: w_power"
      },
      {
        "from": 9,
        "to": 31,
        "label": "data_dep: w_power"
      },
      {
        "from": 2,
        "to": 31,
        "label": "data_dep: wp"
      },
      {
        "from": 20,
        "to": 32,
        "label": "data_dep: l_power"
      },
      {
        "from": 20,
        "to": 32,
        "label": "data_dep: l_power"
      },
      {
        "from": 3,
        "to": 32,
        "label": "data_dep: lp"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: diff"
      },
      {
        "from": 9,
        "to": 33,
        "label": "data_dep: w_power"
      },
      {
        "from": 20,
        "to": 33,
        "label": "data_dep: l_power"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: vt"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: diff"
      },
      {
        "from": 34,
        "to": 35,
        "label": "data_dep: vt"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: vt"
      },
      {
        "from": 33,
        "to": 37,
        "label": "data_dep: diff"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: vt"
      },
      {
        "from": 34,
        "to": 38,
        "label": "data_dep: vt"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: base"
      },
      {
        "from": 1,
        "to": 39,
        "label": "data_dep: t"
      },
      {
        "from": 40,
        "to": 40,
        "label": "def: v"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: base"
      },
      {
        "from": 34,
        "to": 41,
        "label": "data_dep: vt"
      },
      {
        "from": 40,
        "to": 41,
        "label": "data_dep: v"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: base"
      },
      {
        "from": 40,
        "to": 42,
        "label": "data_dep: v"
      },
      {
        "from": 39,
        "to": 42,
        "label": "data_dep: base"
      },
      {
        "from": 34,
        "to": 43,
        "label": "data_dep: vt"
      },
      {
        "from": 40,
        "to": 43,
        "label": "data_dep: v"
      },
      {
        "from": 39,
        "to": 43,
        "label": "data_dep: base"
      },
      {
        "from": 40,
        "to": 44,
        "label": "data_dep: v"
      },
      {
        "from": 39,
        "to": 44,
        "label": "data_dep: base"
      },
      {
        "from": 45,
        "to": 45,
        "label": "def: multi"
      },
      {
        "from": 1,
        "to": 45,
        "label": "data_dep: t"
      },
      {
        "from": 46,
        "to": 46,
        "label": "def: final_reward"
      },
      {
        "from": 40,
        "to": 46,
        "label": "data_dep: v"
      },
      {
        "from": 45,
        "to": 46,
        "label": "data_dep: multi"
      },
      {
        "from": 2,
        "to": 47,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 47,
        "label": "data_dep: wp"
      },
      {
        "from": 46,
        "to": 47,
        "label": "data_dep: final_reward"
      },
      {
        "from": 2,
        "to": 48,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 48,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 49,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 49,
        "label": "data_dep: wp"
      },
      {
        "from": 3,
        "to": 50,
        "label": "data_dep: lp"
      },
      {
        "from": 3,
        "to": 50,
        "label": "data_dep: lp"
      },
      {
        "from": 3,
        "to": 51,
        "label": "data_dep: lp"
      },
      {
        "from": 2,
        "to": 52,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 52,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 52,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 52,
        "label": "data_dep: wp"
      },
      {
        "from": 53,
        "to": 53,
        "label": "def: add"
      },
      {
        "from": 2,
        "to": 53,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 54,
        "label": "data_dep: wp"
      },
      {
        "from": 2,
        "to": 54,
        "label": "data_dep: wp"
      },
      {
        "from": 53,
        "to": 54,
        "label": "data_dep: add"
      },
      {
        "from": 1,
        "to": 55,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 55,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 56,
        "label": "data_dep: t"
      },
      {
        "from": 4,
        "to": 56,
        "label": "data_dep: now"
      },
      {
        "from": 1,
        "to": 57,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 57,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 58,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 58,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 58,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 58,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 58,
        "label": "data_dep: wp"
      },
      {
        "from": 1,
        "to": 59,
        "label": "data_dep: t"
      },
      {
        "from": 1,
        "to": 60,
        "label": "data_dep: t"
      },
      {
        "from": 2,
        "to": 60,
        "label": "data_dep: wp"
      }
    ]
  }
]