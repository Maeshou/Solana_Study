[
  {
    "name": "init_orchestra",
    "inputs": [
      "ctx: Context < InitOrchestra >",
      "name: String",
      "seed: u64",
      "seats_mask: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let o = & mut ctx . accounts . orchestra ;"
      },
      {
        "id": 2,
        "label": "o . owner = ctx . accounts . maestro . key () ;"
      },
      {
        "id": 3,
        "label": "let mut nm = name ;"
      },
      {
        "id": 4,
        "label": "if nm . len () > 64 { nm . truncate (64) ; }"
      },
      {
        "id": 5,
        "label": "nm . truncate (64) ;"
      },
      {
        "id": 6,
        "label": "o . name = nm ;"
      },
      {
        "id": 7,
        "label": "o . seats_mask = seats_mask ;"
      },
      {
        "id": 8,
        "label": "o . revision = 1 ;"
      },
      {
        "id": 9,
        "label": "o . mix = (seats_mask ^ (seed as u32)) . rotate_left (7) ;"
      },
      {
        "id": 10,
        "label": "let mut s = seed ^ 0xC3A5_C85C_97CB_3127u64 ;"
      },
      {
        "id": 11,
        "label": "for i in 0 .. o . beat_table . len () { s = s . rotate_left (11) ^ (seats_mask as u64) ; o . beat_table [i] = ((s >> (i * 5)) as u16) & 0x3FFF ; }"
      },
      {
        "id": 12,
        "label": "s = s . rotate_left (11) ^ (seats_mask as u64) ;"
      },
      {
        "id": 13,
        "label": "o . beat_table [i] = ((s >> (i * 5)) as u16) & 0x3FFF ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: o"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: o"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: nm"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: nm"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: nm"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: nm"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: o"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: nm"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: o"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: o"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: o"
      },
      {
        "from": 10,
        "to": 10,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: o"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: o"
      },
      {
        "from": 10,
        "to": 11,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 10,
        "to": 12,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: o"
      },
      {
        "from": 10,
        "to": 13,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "init_score",
    "inputs": [
      "ctx: Context < InitScore >",
      "part: Part",
      "seat: u8",
      "tempo_bias: u16"
    ],
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let sc = & mut ctx . accounts . score ;"
      },
      {
        "id": 17,
        "label": "sc . orchestra = ctx . accounts . orchestra . key () ;"
      },
      {
        "id": 18,
        "label": "require ! (seat < 32 , ErrCode :: SeatOutOfRange) ;"
      },
      {
        "id": 19,
        "label": "let allowed = (ctx . accounts . orchestra . seats_mask >> seat) & 1 ;"
      },
      {
        "id": 20,
        "label": "require ! (allowed == 1 , ErrCode :: SeatDisabled) ;"
      },
      {
        "id": 21,
        "label": "sc . part = part ;"
      },
      {
        "id": 22,
        "label": "sc . seat = seat ;"
      },
      {
        "id": 23,
        "label": "sc . potential = 300 + ((tempo_bias as u32) % 500) ;"
      },
      {
        "id": 24,
        "label": "for i in 0 .. sc . dynamics . len () { sc . dynamics [i] = ((sc . potential as u16) ^ ((i as u16) * 257)) & 0x7FFF ; }"
      },
      {
        "id": 25,
        "label": "sc . dynamics [i] = ((sc . potential as u16) ^ ((i as u16) * 257)) & 0x7FFF ;"
      },
      {
        "id": 26,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 16,
        "to": 16,
        "label": "def: sc"
      },
      {
        "from": 16,
        "to": 17,
        "label": "data_dep: sc"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: allowed"
      },
      {
        "from": 16,
        "to": 21,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 22,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 24,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: sc"
      },
      {
        "from": 16,
        "to": 25,
        "label": "data_dep: sc"
      }
    ]
  },
  {
    "name": "perform",
    "inputs": [
      "ctx: Context < Perform >",
      "score_delta: i16",
      "jitter: u16"
    ],
    "nodes": [
      {
        "id": 27,
        "label": "Entry"
      },
      {
        "id": 28,
        "label": "let orch = & mut ctx . accounts . orchestra ;"
      },
      {
        "id": 29,
        "label": "let actor = & mut ctx . accounts . actor ;"
      },
      {
        "id": 30,
        "label": "let partner = & mut ctx . accounts . partner ;"
      },
      {
        "id": 31,
        "label": "let board = & mut ctx . accounts . board ;"
      },
      {
        "id": 32,
        "label": "let mut acc : u32 = 0 ;"
      },
      {
        "id": 33,
        "label": "for i in 0 .. orch . beat_table . len () { let local = ((orch . beat_table [i] as u32) ^ (jitter as u32) . rotate_left ((i as u32) & 15)) . wrapping_add (((score_delta as i32) . unsigned_abs ()) & 0x3FFF) ; let idx = i % actor . dynamics . len () ; actor . dynamics [idx] = (actor . dynamics [idx] as u32 ^ (local & 0x7FFF)) as u16 ; acc = acc . wrapping_add (local & 0x1FFF) ; }"
      },
      {
        "id": 34,
        "label": "let local = ((orch . beat_table [i] as u32) ^ (jitter as u32) . rotate_left ((i as u32) & 15)) . wrapping_add (((score_delta as i32) . unsigned_abs ()) & 0x3FFF) ;"
      },
      {
        "id": 35,
        "label": "let idx = i % actor . dynamics . len () ;"
      },
      {
        "id": 36,
        "label": "actor . dynamics [idx] = (actor . dynamics [idx] as u32 ^ (local & 0x7FFF)) as u16 ;"
      },
      {
        "id": 37,
        "label": "acc = acc . wrapping_add (local & 0x1FFF) ;"
      },
      {
        "id": 38,
        "label": "if actor . part == Part :: Conductor { actor . potential = actor . potential . saturating_add ((acc & 0x0FFF) + (jitter as u32)) ; orch . revision = orch . revision . saturating_add (1) ; board . lines = board . lines . saturating_add (1) ; board . hash = board . hash . wrapping_add ((acc as u64) . rotate_left (17)) ; msg ! (\"Conductor path: actor boosted, orchestra revised, board appended\") ; } else { partner . potential = partner . potential . saturating_add (((acc >> 2) & 0x0FFF) + (score_delta . unsigned_abs () as u32)) ; orch . mix = orch . mix . rotate_right (5) ^ ((partner . seat as u32) << 9) ; board . lines = board . lines . saturating_add (2) ; board . hash = board . hash ^ ((acc as u64) . rotate_right (11)) ; msg ! (\"Non-Conductor path: partner boosted, mix updated, board branched\") ; }"
      },
      {
        "id": 39,
        "label": "actor . potential = actor . potential . saturating_add ((acc & 0x0FFF) + (jitter as u32)) ;"
      },
      {
        "id": 40,
        "label": "orch . revision = orch . revision . saturating_add (1) ;"
      },
      {
        "id": 41,
        "label": "board . lines = board . lines . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "board . hash = board . hash . wrapping_add ((acc as u64) . rotate_left (17)) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"Conductor path: actor boosted, orchestra revised, board appended\") ;"
      },
      {
        "id": 44,
        "label": "partner . potential = partner . potential . saturating_add (((acc >> 2) & 0x0FFF) + (score_delta . unsigned_abs () as u32)) ;"
      },
      {
        "id": 45,
        "label": "orch . mix = orch . mix . rotate_right (5) ^ ((partner . seat as u32) << 9) ;"
      },
      {
        "id": 46,
        "label": "board . lines = board . lines . saturating_add (2) ;"
      },
      {
        "id": 47,
        "label": "board . hash = board . hash ^ ((acc as u64) . rotate_right (11)) ;"
      },
      {
        "id": 48,
        "label": "msg ! (\"Non-Conductor path: partner boosted, mix updated, board branched\") ;"
      },
      {
        "id": 49,
        "label": "for i in 0 .. board . trace . len () { board . trace [i] = board . trace [i] . rotate_left ((i as u32) & 7) ^ (orch . mix & 0xFFFF) ; }"
      },
      {
        "id": 50,
        "label": "board . trace [i] = board . trace [i] . rotate_left ((i as u32) & 7) ^ (orch . mix & 0xFFFF) ;"
      },
      {
        "id": 51,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 28,
        "to": 28,
        "label": "def: orch"
      },
      {
        "from": 29,
        "to": 29,
        "label": "def: actor"
      },
      {
        "from": 30,
        "to": 30,
        "label": "def: partner"
      },
      {
        "from": 31,
        "to": 31,
        "label": "def: board"
      },
      {
        "from": 28,
        "to": 33,
        "label": "data_dep: orch"
      },
      {
        "from": 28,
        "to": 33,
        "label": "data_dep: orch"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 33,
        "label": "data_dep: actor"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: local"
      },
      {
        "from": 28,
        "to": 34,
        "label": "data_dep: orch"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: idx"
      },
      {
        "from": 29,
        "to": 35,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: actor"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: idx"
      },
      {
        "from": 29,
        "to": 36,
        "label": "data_dep: actor"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: idx"
      },
      {
        "from": 34,
        "to": 36,
        "label": "data_dep: local"
      },
      {
        "from": 34,
        "to": 37,
        "label": "data_dep: local"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 38,
        "label": "data_dep: actor"
      },
      {
        "from": 28,
        "to": 38,
        "label": "data_dep: orch"
      },
      {
        "from": 28,
        "to": 38,
        "label": "data_dep: orch"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 30,
        "to": 38,
        "label": "data_dep: partner"
      },
      {
        "from": 30,
        "to": 38,
        "label": "data_dep: partner"
      },
      {
        "from": 28,
        "to": 38,
        "label": "data_dep: orch"
      },
      {
        "from": 28,
        "to": 38,
        "label": "data_dep: orch"
      },
      {
        "from": 30,
        "to": 38,
        "label": "data_dep: partner"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 38,
        "label": "data_dep: board"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: actor"
      },
      {
        "from": 29,
        "to": 39,
        "label": "data_dep: actor"
      },
      {
        "from": 28,
        "to": 40,
        "label": "data_dep: orch"
      },
      {
        "from": 28,
        "to": 40,
        "label": "data_dep: orch"
      },
      {
        "from": 31,
        "to": 41,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 41,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 42,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 42,
        "label": "data_dep: board"
      },
      {
        "from": 30,
        "to": 44,
        "label": "data_dep: partner"
      },
      {
        "from": 30,
        "to": 44,
        "label": "data_dep: partner"
      },
      {
        "from": 28,
        "to": 45,
        "label": "data_dep: orch"
      },
      {
        "from": 28,
        "to": 45,
        "label": "data_dep: orch"
      },
      {
        "from": 30,
        "to": 45,
        "label": "data_dep: partner"
      },
      {
        "from": 31,
        "to": 46,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 46,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 47,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 47,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 49,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 49,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 49,
        "label": "data_dep: board"
      },
      {
        "from": 28,
        "to": 49,
        "label": "data_dep: orch"
      },
      {
        "from": 31,
        "to": 50,
        "label": "data_dep: board"
      },
      {
        "from": 31,
        "to": 50,
        "label": "data_dep: board"
      },
      {
        "from": 28,
        "to": 50,
        "label": "data_dep: orch"
      }
    ]
  }
]