[
  {
    "name": "init_blueprint",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . blueprint ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "b . name = name ;"
      },
      {
        "id": 4,
        "label": "b . lane = lane ;"
      },
      {
        "id": 5,
        "label": "b . quality = 1 ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_line",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let l = & mut ctx . accounts . line ;"
      },
      {
        "id": 9,
        "label": "let inv = & mut ctx . accounts . inventory ;"
      },
      {
        "id": 10,
        "label": "l . parent = ctx . accounts . blueprint . key () ;"
      },
      {
        "id": 11,
        "label": "l . batch = 0 ;"
      },
      {
        "id": 12,
        "label": "l . fail = 0 ;"
      },
      {
        "id": 13,
        "label": "l . ok = 0 ;"
      },
      {
        "id": 14,
        "label": "inv . parent = ctx . accounts . blueprint . key () ;"
      },
      {
        "id": 15,
        "label": "inv . count = 0 ;"
      },
      {
        "id": 16,
        "label": "inv . scrap = 0 ;"
      },
      {
        "id": 17,
        "label": "inv . hash = 0 ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      }
    ]
  },
  {
    "name": "process_line",
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let bp = & mut ctx . accounts . blueprint ;"
      },
      {
        "id": 21,
        "label": "let line = & mut ctx . accounts . line ;"
      },
      {
        "id": 22,
        "label": "let inv = & mut ctx . accounts . inventory ;"
      },
      {
        "id": 23,
        "label": "let mut c = 0u16 ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let mut x = (bp . quality as u64) . max (1) ;"
      },
      {
        "id": 26,
        "label": "let mut k = 0 ;"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "x = (x + (bp . quality as u64) . max (1) / x) . max (1) / 2 ;"
      },
      {
        "id": 29,
        "label": "k += 1 ;"
      },
      {
        "id": 30,
        "label": "Loop End"
      },
      {
        "id": 31,
        "label": "let pass = ((x as u32) & 1) == 0 ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "pass"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "line . ok = line . ok . saturating_add (1) ;"
      },
      {
        "id": 37,
        "label": "inv . count = inv . count . saturating_add (1) ;"
      },
      {
        "id": 38,
        "label": "inv . hash ^= inv . count . rotate_left ((inv . count % 31) as u32) ;"
      },
      {
        "id": 39,
        "label": "bp . quality = (bp . quality + 1) . min (100) ;"
      },
      {
        "id": 40,
        "label": "msg ! (\"produce ok: +1, inv={}, q={}\" , inv . count , bp . quality) ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "line . fail = line . fail . saturating_add (1) ;"
      },
      {
        "id": 43,
        "label": "inv . scrap = inv . scrap . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "bp . quality = bp . quality . saturating_sub (1) . max (1) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"produce fail: scrap+1, q={}\" , bp . quality) ;"
      },
      {
        "id": 46,
        "label": "merge"
      },
      {
        "id": 47,
        "label": "line . batch = line . batch . wrapping_add (1) ;"
      },
      {
        "id": 48,
        "label": "c += 1 ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "while"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 32,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 40,
        "to": 46,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 24,
        "to": 49,
        "label": "while"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      }
    ]
  }
]