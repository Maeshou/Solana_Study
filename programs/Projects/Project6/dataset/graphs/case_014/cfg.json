[
  {
    "name": "initialize_player",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let progression = & mut ctx . accounts . player_progression ;"
      },
      {
        "id": 2,
        "label": "let energy = & mut ctx . accounts . player_energy ;"
      },
      {
        "id": 3,
        "label": "progression . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 4,
        "label": "progression . level = 1 ;"
      },
      {
        "id": 5,
        "label": "progression . experience = 0 ;"
      },
      {
        "id": 6,
        "label": "progression . role = player_role ;"
      },
      {
        "id": 7,
        "label": "energy . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 8,
        "label": "energy . current_energy = 100 ;"
      },
      {
        "id": 9,
        "label": "energy . max_energy = 100 ;"
      },
      {
        "id": 10,
        "label": "energy . last_updated = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 11,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      }
    ]
  },
  {
    "name": "gain_experience_and_consume_energy",
    "nodes": [
      {
        "id": 12,
        "label": "Entry"
      },
      {
        "id": 13,
        "label": "let progression = & mut ctx . accounts . player_progression ;"
      },
      {
        "id": 14,
        "label": "let energy = & mut ctx . accounts . player_energy ;"
      },
      {
        "id": 15,
        "label": "if statement"
      },
      {
        "id": 16,
        "label": "predicate"
      },
      {
        "id": 17,
        "label": "energy . current_energy < energy_cost"
      },
      {
        "id": 18,
        "label": "True body"
      },
      {
        "id": 19,
        "label": "return err ! (ErrorCode :: NotEnoughEnergy) ;"
      },
      {
        "id": 20,
        "label": "False body"
      },
      {
        "id": 21,
        "label": "No-op"
      },
      {
        "id": 22,
        "label": "merge"
      },
      {
        "id": 23,
        "label": "energy . current_energy = energy . current_energy . checked_sub (energy_cost) . unwrap () ;"
      },
      {
        "id": 24,
        "label": "progression . experience = progression . experience . checked_add (xp_gain) . unwrap () ;"
      },
      {
        "id": 25,
        "label": "let mut xp_threshold = 100u32 ;"
      },
      {
        "id": 26,
        "label": "let mut level_up = false ;"
      },
      {
        "id": 27,
        "label": "let new_level = progression . level . checked_add (1) . unwrap () ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "progression . experience > xp_threshold"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "progression . experience = 0 ;"
      },
      {
        "id": 33,
        "label": "progression . level = new_level ;"
      },
      {
        "id": 34,
        "label": "level_up = true ;"
      },
      {
        "id": 35,
        "label": "False body"
      },
      {
        "id": 36,
        "label": "No-op"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "if statement"
      },
      {
        "id": 39,
        "label": "predicate"
      },
      {
        "id": 40,
        "label": "level_up"
      },
      {
        "id": 41,
        "label": "True body"
      },
      {
        "id": 42,
        "label": "msg ! (\"Player leveled up to {}!\" , new_level) ;"
      },
      {
        "id": 43,
        "label": "False body"
      },
      {
        "id": 44,
        "label": "msg ! (\"Player gained some experience.\") ;"
      },
      {
        "id": 45,
        "label": "merge"
      },
      {
        "id": 46,
        "label": "let mut status_flags : u8 = 0b00000001 ;"
      },
      {
        "id": 47,
        "label": "if statement"
      },
      {
        "id": 48,
        "label": "predicate"
      },
      {
        "id": 49,
        "label": "progression . level > 10"
      },
      {
        "id": 50,
        "label": "True body"
      },
      {
        "id": 51,
        "label": "status_flags |= 0b00000010 ;"
      },
      {
        "id": 52,
        "label": "False body"
      },
      {
        "id": 53,
        "label": "No-op"
      },
      {
        "id": 54,
        "label": "merge"
      },
      {
        "id": 55,
        "label": "msg ! (\"Status flags: {:?}\" , status_flags) ;"
      },
      {
        "id": 56,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "predicate"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "true"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 15,
        "to": 20,
        "label": "false"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 19,
        "to": 22,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 28,
        "to": 35,
        "label": "false"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 34,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "predicate"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 38,
        "to": 41,
        "label": "true"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 38,
        "to": 43,
        "label": "false"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 42,
        "to": 45,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "predicate"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "true"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 47,
        "to": 52,
        "label": "false"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 51,
        "to": 54,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      }
    ]
  }
]