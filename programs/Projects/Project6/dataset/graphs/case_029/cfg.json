[
  {
    "name": "init_player",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let player = & mut ctx . accounts . player ;"
      },
      {
        "id": 2,
        "label": "player . authority = ctx . accounts . authority . key () ;"
      },
      {
        "id": 3,
        "label": "player . level = 1 ;"
      },
      {
        "id": 4,
        "label": "player . exp = 0 ;"
      },
      {
        "id": 5,
        "label": "player . last_crafted = 0 ;"
      },
      {
        "id": 6,
        "label": "player . bump = * ctx . bumps . get (\"player\") . ok_or (error ! (GameErr :: MissingBump)) ? ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_inventory",
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let inv = & mut ctx . accounts . inventory ;"
      },
      {
        "id": 10,
        "label": "inv . owner = ctx . accounts . player . key () ;"
      },
      {
        "id": 11,
        "label": "inv . slots = slots ;"
      },
      {
        "id": 12,
        "label": "inv . seed_tag = * b\"inv_v1__\" ;"
      },
      {
        "id": 13,
        "label": "inv . bump = * ctx . bumps . get (\"inventory\") . ok_or (error ! (GameErr :: MissingBump)) ? ;"
      },
      {
        "id": 14,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_recipe",
    "nodes": [
      {
        "id": 15,
        "label": "Entry"
      },
      {
        "id": 16,
        "label": "let recipe = & mut ctx . accounts . recipe ;"
      },
      {
        "id": 17,
        "label": "recipe . mint = ctx . accounts . item_mint . key () ;"
      },
      {
        "id": 18,
        "label": "recipe . cost = cost ;"
      },
      {
        "id": 19,
        "label": "recipe . min_level = min_level ;"
      },
      {
        "id": 20,
        "label": "recipe . bump = * ctx . bumps . get (\"recipe\") . ok_or (error ! (GameErr :: MissingBump)) ? ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "craft_item",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let player = & mut ctx . accounts . player ;"
      },
      {
        "id": 24,
        "label": "let inv = & mut ctx . accounts . inventory ;"
      },
      {
        "id": 25,
        "label": "let recipe = & ctx . accounts . recipe ;"
      },
      {
        "id": 26,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 27,
        "label": "if statement"
      },
      {
        "id": 28,
        "label": "predicate"
      },
      {
        "id": 29,
        "label": "player . level < recipe . min_level"
      },
      {
        "id": 30,
        "label": "True body"
      },
      {
        "id": 31,
        "label": "player . exp = player . exp . saturating_add ((recipe . min_level as u64) . saturating_mul (3)) ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "No-op"
      },
      {
        "id": 34,
        "label": "merge"
      },
      {
        "id": 35,
        "label": "if statement"
      },
      {
        "id": 36,
        "label": "predicate"
      },
      {
        "id": 37,
        "label": "spend > recipe . cost"
      },
      {
        "id": 38,
        "label": "True body"
      },
      {
        "id": 39,
        "label": "let surplus = spend . saturating_sub (recipe . cost) ;"
      },
      {
        "id": 40,
        "label": "player . exp = player . exp . saturating_add (surplus . rotate_left (1)) ;"
      },
      {
        "id": 41,
        "label": "False body"
      },
      {
        "id": 42,
        "label": "No-op"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "let delta = now . saturating_sub (player . last_crafted) ;"
      },
      {
        "id": 45,
        "label": "if statement"
      },
      {
        "id": 46,
        "label": "predicate"
      },
      {
        "id": 47,
        "label": "delta < 5"
      },
      {
        "id": 48,
        "label": "True body"
      },
      {
        "id": 49,
        "label": "if statement"
      },
      {
        "id": 50,
        "label": "predicate"
      },
      {
        "id": 51,
        "label": "inv . slots > 0"
      },
      {
        "id": 52,
        "label": "True body"
      },
      {
        "id": 53,
        "label": "inv . slots = inv . slots . saturating_sub (1) ;"
      },
      {
        "id": 54,
        "label": "False body"
      },
      {
        "id": 55,
        "label": "No-op"
      },
      {
        "id": 56,
        "label": "merge"
      },
      {
        "id": 57,
        "label": "False body"
      },
      {
        "id": 58,
        "label": "No-op"
      },
      {
        "id": 59,
        "label": "merge"
      },
      {
        "id": 60,
        "label": "player . last_crafted = now ;"
      },
      {
        "id": 61,
        "label": "if statement"
      },
      {
        "id": 62,
        "label": "predicate"
      },
      {
        "id": 63,
        "label": "spend > 0"
      },
      {
        "id": 64,
        "label": "True body"
      },
      {
        "id": 65,
        "label": "let cpi_accounts = Transfer { from : ctx . accounts . user_token . to_account_info () , to : ctx . accounts . vault_token . to_account_info () , authority : ctx . accounts . authority . to_account_info () , } ;"
      },
      {
        "id": 66,
        "label": "let cpi_ctx = CpiContext :: new (ctx . accounts . token_program . to_account_info () , cpi_accounts) ;"
      },
      {
        "id": 67,
        "label": "token :: transfer (cpi_ctx , spend) ? ;"
      },
      {
        "id": 68,
        "label": "False body"
      },
      {
        "id": 69,
        "label": "No-op"
      },
      {
        "id": 70,
        "label": "merge"
      },
      {
        "id": 71,
        "label": "let mut step = 0u8 ;"
      },
      {
        "id": 72,
        "label": "Loop Start"
      },
      {
        "id": 73,
        "label": "let threshold = 50u64 . saturating_mul ((step as u64) . saturating_add (1)) ;"
      },
      {
        "id": 74,
        "label": "if statement"
      },
      {
        "id": 75,
        "label": "predicate"
      },
      {
        "id": 76,
        "label": "player . exp >= threshold"
      },
      {
        "id": 77,
        "label": "True body"
      },
      {
        "id": 78,
        "label": "player . level = player . level . saturating_add (1) ;"
      },
      {
        "id": 79,
        "label": "player . exp = player . exp . saturating_sub (threshold / 2) ;"
      },
      {
        "id": 80,
        "label": "False body"
      },
      {
        "id": 81,
        "label": "No-op"
      },
      {
        "id": 82,
        "label": "merge"
      },
      {
        "id": 83,
        "label": "step = step . saturating_add (1) ;"
      },
      {
        "id": 84,
        "label": "Loop End"
      },
      {
        "id": 85,
        "label": "let mut rolled = [0u8 ; 8] ;"
      },
      {
        "id": 86,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 87,
        "label": "Loop Start"
      },
      {
        "id": 88,
        "label": "let v = inv . seed_tag [i] ;"
      },
      {
        "id": 89,
        "label": "rolled [i] = v . rotate_left ((i as u32) & 3) ;"
      },
      {
        "id": 90,
        "label": "i += 1 ;"
      },
      {
        "id": 91,
        "label": "Loop End"
      },
      {
        "id": 92,
        "label": "inv . seed_tag = rolled ;"
      },
      {
        "id": 93,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "predicate"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "true"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 27,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 31,
        "to": 34,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "predicate"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 35,
        "to": 38,
        "label": "true"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 35,
        "to": 41,
        "label": "false"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "predicate"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "true"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "predicate"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 49,
        "to": 52,
        "label": "true"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 49,
        "to": 54,
        "label": "false"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 53,
        "to": 56,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 45,
        "to": 57,
        "label": "false"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 56,
        "to": 59,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "predicate"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 61,
        "to": 64,
        "label": "true"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 61,
        "to": 68,
        "label": "false"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 67,
        "to": 70,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "predicate"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "true"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 74,
        "to": 80,
        "label": "false"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 79,
        "to": 82,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 72,
        "to": 84,
        "label": "while"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "next"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 89,
        "to": 90,
        "label": "next"
      },
      {
        "from": 87,
        "to": 91,
        "label": "while"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      }
    ]
  },
  {
    "name": "bind_untyped_inventory",
    "nodes": [
      {
        "id": 94,
        "label": "Entry"
      },
      {
        "id": 95,
        "label": "let ai = & ctx . accounts . untyped_inventory ;"
      },
      {
        "id": 96,
        "label": "assert_account_type :: < Inventory > (ai) . map_err (| _ | error ! (GameErr :: AccountTypeMismatch)) ? ;"
      },
      {
        "id": 97,
        "label": "let mut inv : Account < Inventory > = Account :: < Inventory > :: try_from (ai) ? ;"
      },
      {
        "id": 98,
        "label": "if statement"
      },
      {
        "id": 99,
        "label": "predicate"
      },
      {
        "id": 100,
        "label": "inv . slots < 10"
      },
      {
        "id": 101,
        "label": "True body"
      },
      {
        "id": 102,
        "label": "inv . slots = inv . slots . saturating_add (2) ;"
      },
      {
        "id": 103,
        "label": "False body"
      },
      {
        "id": 104,
        "label": "No-op"
      },
      {
        "id": 105,
        "label": "merge"
      },
      {
        "id": 106,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 94,
        "to": 95,
        "label": "next"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "predicate"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "true"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 98,
        "to": 103,
        "label": "false"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 102,
        "to": 105,
        "label": "next"
      },
      {
        "from": 104,
        "to": 105,
        "label": "next"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      }
    ]
  },
  {
    "name": "assert_account_type",
    "nodes": [
      {
        "id": 107,
        "label": "Entry"
      },
      {
        "id": 108,
        "label": "let data = acc . try_borrow_data () ? ;"
      },
      {
        "id": 109,
        "label": "if statement"
      },
      {
        "id": 110,
        "label": "predicate"
      },
      {
        "id": 111,
        "label": "data . len () < 8"
      },
      {
        "id": 112,
        "label": "True body"
      },
      {
        "id": 113,
        "label": "return Err (error ! (GameErr :: AccountDataTooSmall)) ;"
      },
      {
        "id": 114,
        "label": "False body"
      },
      {
        "id": 115,
        "label": "No-op"
      },
      {
        "id": 116,
        "label": "merge"
      },
      {
        "id": 117,
        "label": "let expected = T :: discriminator () ;"
      },
      {
        "id": 118,
        "label": "let mut same = true ;"
      },
      {
        "id": 119,
        "label": "let mut i = 0usize ;"
      },
      {
        "id": 120,
        "label": "Loop Start"
      },
      {
        "id": 121,
        "label": "if statement"
      },
      {
        "id": 122,
        "label": "predicate"
      },
      {
        "id": 123,
        "label": "data [i] != expected [i]"
      },
      {
        "id": 124,
        "label": "True body"
      },
      {
        "id": 125,
        "label": "same = false ;"
      },
      {
        "id": 126,
        "label": "False body"
      },
      {
        "id": 127,
        "label": "No-op"
      },
      {
        "id": 128,
        "label": "merge"
      },
      {
        "id": 129,
        "label": "i += 1 ;"
      },
      {
        "id": 130,
        "label": "Loop End"
      },
      {
        "id": 131,
        "label": "if statement"
      },
      {
        "id": 132,
        "label": "predicate"
      },
      {
        "id": 133,
        "label": "! same"
      },
      {
        "id": 134,
        "label": "True body"
      },
      {
        "id": 135,
        "label": "return Err (error ! (GameErr :: AccountTypeMismatch)) ;"
      },
      {
        "id": 136,
        "label": "False body"
      },
      {
        "id": 137,
        "label": "No-op"
      },
      {
        "id": 138,
        "label": "merge"
      },
      {
        "id": 139,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "predicate"
      },
      {
        "from": 110,
        "to": 111,
        "label": "next"
      },
      {
        "from": 109,
        "to": 112,
        "label": "true"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 109,
        "to": 114,
        "label": "false"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 113,
        "to": 116,
        "label": "next"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "next"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      },
      {
        "from": 118,
        "to": 119,
        "label": "next"
      },
      {
        "from": 119,
        "to": 120,
        "label": "next"
      },
      {
        "from": 120,
        "to": 121,
        "label": "next"
      },
      {
        "from": 121,
        "to": 122,
        "label": "predicate"
      },
      {
        "from": 122,
        "to": 123,
        "label": "next"
      },
      {
        "from": 121,
        "to": 124,
        "label": "true"
      },
      {
        "from": 124,
        "to": 125,
        "label": "next"
      },
      {
        "from": 121,
        "to": 126,
        "label": "false"
      },
      {
        "from": 126,
        "to": 127,
        "label": "next"
      },
      {
        "from": 125,
        "to": 128,
        "label": "next"
      },
      {
        "from": 127,
        "to": 128,
        "label": "next"
      },
      {
        "from": 128,
        "to": 129,
        "label": "next"
      },
      {
        "from": 120,
        "to": 130,
        "label": "while"
      },
      {
        "from": 130,
        "to": 131,
        "label": "next"
      },
      {
        "from": 131,
        "to": 132,
        "label": "predicate"
      },
      {
        "from": 132,
        "to": 133,
        "label": "next"
      },
      {
        "from": 131,
        "to": 134,
        "label": "true"
      },
      {
        "from": 134,
        "to": 135,
        "label": "next"
      },
      {
        "from": 131,
        "to": 136,
        "label": "false"
      },
      {
        "from": 136,
        "to": 137,
        "label": "next"
      },
      {
        "from": 135,
        "to": 138,
        "label": "next"
      },
      {
        "from": 137,
        "to": 138,
        "label": "next"
      },
      {
        "from": 138,
        "to": 139,
        "label": "next"
      }
    ]
  }
]