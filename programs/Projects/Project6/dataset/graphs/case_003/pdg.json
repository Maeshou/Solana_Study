[
  {
    "name": "init_scout",
    "inputs": [
      "ctx: Context < InitScout >",
      "seat: u8"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let s = & mut ctx . accounts . scout ;"
      },
      {
        "id": 2,
        "label": "s . parent = ctx . accounts . result_board . key () ;"
      },
      {
        "id": 3,
        "label": "s . seat = seat ;"
      },
      {
        "id": 4,
        "label": "s . power = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "init_result",
    "inputs": [
      "ctx: Context < InitResult >"
    ],
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let r = & mut ctx . accounts . result_board ;"
      },
      {
        "id": 8,
        "label": "let st = & mut ctx . accounts . stats ;"
      },
      {
        "id": 9,
        "label": "r . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 10,
        "label": "r . last = 0 ;"
      },
      {
        "id": 11,
        "label": "r . hist = [0 ; 6] ;"
      },
      {
        "id": 12,
        "label": "st . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 13,
        "label": "st . win = 0 ;"
      },
      {
        "id": 14,
        "label": "st . lose = 0 ;"
      },
      {
        "id": 15,
        "label": "st . score = 0 ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 7,
        "label": "def: r"
      },
      {
        "from": 8,
        "to": 8,
        "label": "def: st"
      },
      {
        "from": 7,
        "to": 9,
        "label": "data_dep: r"
      },
      {
        "from": 7,
        "to": 10,
        "label": "data_dep: r"
      },
      {
        "from": 7,
        "to": 11,
        "label": "data_dep: r"
      },
      {
        "from": 8,
        "to": 12,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 13,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 14,
        "label": "data_dep: st"
      },
      {
        "from": 8,
        "to": 15,
        "label": "data_dep: st"
      }
    ]
  },
  {
    "name": "process_raid",
    "inputs": [
      "ctx: Context < ProcessRaid >",
      "energy: u32"
    ],
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let a = & mut ctx . accounts . scout_a ;"
      },
      {
        "id": 19,
        "label": "let b = & mut ctx . accounts . scout_b ;"
      },
      {
        "id": 20,
        "label": "let r = & mut ctx . accounts . result_board ;"
      },
      {
        "id": 21,
        "label": "let st = & mut ctx . accounts . stats ;"
      },
      {
        "id": 22,
        "label": "for i in 0 .. 6 { let e = (energy as u64) . rotate_left ((i as u32) & 31) ^ (a . power ^ b . power) ; let gain = ((e & 0xFFFF) as u32) % 1000 ; r . hist [i] = r . hist [i] . saturating_add (gain) ; r . last = r . hist [i] ; }"
      },
      {
        "id": 23,
        "label": "let e = (energy as u64) . rotate_left ((i as u32) & 31) ^ (a . power ^ b . power) ;"
      },
      {
        "id": 24,
        "label": "let gain = ((e & 0xFFFF) as u32) % 1000 ;"
      },
      {
        "id": 25,
        "label": "r . hist [i] = r . hist [i] . saturating_add (gain) ;"
      },
      {
        "id": 26,
        "label": "r . last = r . hist [i] ;"
      },
      {
        "id": 27,
        "label": "if (r . last & 1) == 0 { a . power = a . power . saturating_add ((r . last / 3) as u64) ; st . win = st . win . saturating_add (1) ; st . score = st . score . saturating_add (r . last as u64) ; msg ! (\"A boosted\") ; } else { b . power = b . power . saturating_add ((r . last / 2) as u64) ; st . lose = st . lose . saturating_add (1) ; st . score = st . score . saturating_add ((r . last / 2) as u64) ; msg ! (\"B boosted\") ; }"
      },
      {
        "id": 28,
        "label": "a . power = a . power . saturating_add ((r . last / 3) as u64) ;"
      },
      {
        "id": 29,
        "label": "st . win = st . win . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "st . score = st . score . saturating_add (r . last as u64) ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"A boosted\") ;"
      },
      {
        "id": 32,
        "label": "b . power = b . power . saturating_add ((r . last / 2) as u64) ;"
      },
      {
        "id": 33,
        "label": "st . lose = st . lose . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "st . score = st . score . saturating_add ((r . last / 2) as u64) ;"
      },
      {
        "id": 35,
        "label": "msg ! (\"B boosted\") ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 18,
        "to": 18,
        "label": "def: a"
      },
      {
        "from": 19,
        "to": 19,
        "label": "def: b"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: r"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: st"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: a"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: r"
      },
      {
        "from": 23,
        "to": 23,
        "label": "def: e"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: a"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: gain"
      },
      {
        "from": 23,
        "to": 24,
        "label": "data_dep: e"
      },
      {
        "from": 20,
        "to": 25,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 25,
        "label": "data_dep: r"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: gain"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: r"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: a"
      },
      {
        "from": 18,
        "to": 27,
        "label": "data_dep: a"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 27,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 27,
        "label": "data_dep: r"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: a"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: a"
      },
      {
        "from": 20,
        "to": 28,
        "label": "data_dep: r"
      },
      {
        "from": 21,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 29,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 30,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 30,
        "label": "data_dep: r"
      },
      {
        "from": 19,
        "to": 32,
        "label": "data_dep: b"
      },
      {
        "from": 19,
        "to": 32,
        "label": "data_dep: b"
      },
      {
        "from": 20,
        "to": 32,
        "label": "data_dep: r"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 33,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 21,
        "to": 34,
        "label": "data_dep: st"
      },
      {
        "from": 20,
        "to": 34,
        "label": "data_dep: r"
      }
    ]
  }
]