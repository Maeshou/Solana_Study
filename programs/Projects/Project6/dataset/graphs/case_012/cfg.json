[
  {
    "name": "initialize_equipment",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let equipment = & mut ctx . accounts . equipment ;"
      },
      {
        "id": 2,
        "label": "equipment . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "equipment . item_id = item_id ;"
      },
      {
        "id": 4,
        "label": "equipment . level = 0 ;"
      },
      {
        "id": 5,
        "label": "equipment . enhancement_level = 0 ;"
      },
      {
        "id": 6,
        "label": "equipment . is_active = true ;"
      },
      {
        "id": 7,
        "label": "equipment . stat_boosts = [0 ; 4] ;"
      },
      {
        "id": 8,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      }
    ]
  },
  {
    "name": "enhance_equipment",
    "nodes": [
      {
        "id": 9,
        "label": "Entry"
      },
      {
        "id": 10,
        "label": "let equipment = & mut ctx . accounts . equipment ;"
      },
      {
        "id": 11,
        "label": "let material = & mut ctx . accounts . material_token_account ;"
      },
      {
        "id": 12,
        "label": "if statement"
      },
      {
        "id": 13,
        "label": "predicate"
      },
      {
        "id": 14,
        "label": "material . amount < 1"
      },
      {
        "id": 15,
        "label": "True body"
      },
      {
        "id": 16,
        "label": "return err ! (ErrorCode :: NotEnoughMaterials) ;"
      },
      {
        "id": 17,
        "label": "False body"
      },
      {
        "id": 18,
        "label": "No-op"
      },
      {
        "id": 19,
        "label": "merge"
      },
      {
        "id": 20,
        "label": "let cpi_program = ctx . accounts . token_program . to_account_info () ;"
      },
      {
        "id": 21,
        "label": "let cpi_accounts = token :: Burn { mint : ctx . accounts . material_mint . to_account_info () , from : ctx . accounts . material_token_account . to_account_info () , authority : ctx . accounts . owner . to_account_info () , } ;"
      },
      {
        "id": 22,
        "label": "let cpi_ctx = CpiContext :: new (cpi_program , cpi_accounts) ;"
      },
      {
        "id": 23,
        "label": "token :: burn (cpi_ctx , 1) ? ;"
      },
      {
        "id": 24,
        "label": "let mut new_level = equipment . enhancement_level . checked_add (1) . unwrap () ;"
      },
      {
        "id": 25,
        "label": "equipment . enhancement_level = new_level ;"
      },
      {
        "id": 26,
        "label": "let stat_boost = new_level . checked_mul (2) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 27,
        "label": "equipment . stat_boosts [0] = stat_boost ;"
      },
      {
        "id": 28,
        "label": "equipment . stat_boosts [1] = stat_boost . wrapping_add (1) ;"
      },
      {
        "id": 29,
        "label": "Loop Start"
      },
      {
        "id": 30,
        "label": "equipment . stat_boosts [i] = equipment . stat_boosts [i] . checked_add (new_level . into ()) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 31,
        "label": "Loop End"
      },
      {
        "id": 32,
        "label": "let base_stat = 100u64 ;"
      },
      {
        "id": 33,
        "label": "let mut x = base_stat ;"
      },
      {
        "id": 34,
        "label": "Loop Start"
      },
      {
        "id": 35,
        "label": "x = (x + base_stat . checked_div (x) . unwrap_or (1)) / 2 ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "if statement"
      },
      {
        "id": 38,
        "label": "predicate"
      },
      {
        "id": 39,
        "label": "equipment . enhancement_level % 5 == 0"
      },
      {
        "id": 40,
        "label": "True body"
      },
      {
        "id": 41,
        "label": "msg ! (\"Major enhancement achieved!\") ;"
      },
      {
        "id": 42,
        "label": "False body"
      },
      {
        "id": 43,
        "label": "msg ! (\"Minor enhancement.\") ;"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "predicate"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 12,
        "to": 15,
        "label": "true"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 12,
        "to": 17,
        "label": "false"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 16,
        "to": 19,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 31,
        "label": "for"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 36,
        "label": "for"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "predicate"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 37,
        "to": 40,
        "label": "true"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 37,
        "to": 42,
        "label": "false"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 41,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      }
    ]
  }
]