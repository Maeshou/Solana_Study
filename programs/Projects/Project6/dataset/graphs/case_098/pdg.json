[
  {
    "name": "init_vault",
    "inputs": [
      "ctx: Context < InitVault >",
      "label: String",
      "nonce: u32"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let v = & mut ctx . accounts . vault ;"
      },
      {
        "id": 2,
        "label": "v . owner = ctx . accounts . curator . key () ;"
      },
      {
        "id": 3,
        "label": "let mut name = label ;"
      },
      {
        "id": 4,
        "label": "if name . len () > 64 { name . truncate (64) ; }"
      },
      {
        "id": 5,
        "label": "name . truncate (64) ;"
      },
      {
        "id": 6,
        "label": "v . label = name ;"
      },
      {
        "id": 7,
        "label": "let mut fp : u32 = 0x811C9DC5 ^ nonce ;"
      },
      {
        "id": 8,
        "label": "for (i , b) in v . label . as_bytes () . iter () . enumerate () { fp = fp . rotate_left ((i as u32) & 7) ^ (* b as u32) ; fp = fp . wrapping_mul (0x01000193) ; }"
      },
      {
        "id": 9,
        "label": "fp = fp . rotate_left ((i as u32) & 7) ^ (* b as u32) ;"
      },
      {
        "id": 10,
        "label": "fp = fp . wrapping_mul (0x01000193) ;"
      },
      {
        "id": 11,
        "label": "v . fingerprint = fp ;"
      },
      {
        "id": 12,
        "label": "let mut s = (nonce as u64) ^ 0x9E3779B97F4A7C15 ;"
      },
      {
        "id": 13,
        "label": "for i in 0 .. v . noise . len () { s = s . rotate_left (9) ^ (fp as u64) ; v . noise [i] = (s as u32) ^ fp . rotate_right ((i as u32) & 31) ; }"
      },
      {
        "id": 14,
        "label": "s = s . rotate_left (9) ^ (fp as u64) ;"
      },
      {
        "id": 15,
        "label": "v . noise [i] = (s as u32) ^ fp . rotate_right ((i as u32) & 31) ;"
      },
      {
        "id": 16,
        "label": "v . epoch = ((nonce % 251) + 1) as u16 ;"
      },
      {
        "id": 17,
        "label": "v . ledger_mix = 0 ;"
      },
      {
        "id": 18,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: v"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: v"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: name"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: name"
      },
      {
        "from": 3,
        "to": 4,
        "label": "data_dep: name"
      },
      {
        "from": 3,
        "to": 5,
        "label": "data_dep: name"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: v"
      },
      {
        "from": 3,
        "to": 6,
        "label": "data_dep: name"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 11,
        "label": "data_dep: v"
      },
      {
        "from": 12,
        "to": 12,
        "label": "def: s"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: v"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: v"
      },
      {
        "from": 12,
        "to": 13,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 12,
        "to": 14,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 15,
        "label": "data_dep: v"
      },
      {
        "from": 12,
        "to": 15,
        "label": "data_dep: s"
      },
      {
        "from": 1,
        "to": 16,
        "label": "data_dep: v"
      },
      {
        "from": 1,
        "to": 17,
        "label": "data_dep: v"
      }
    ]
  },
  {
    "name": "init_keycard",
    "inputs": [
      "ctx: Context < InitKeyCard >",
      "tier: Tier",
      "channel: u8",
      "seed: u64"
    ],
    "nodes": [
      {
        "id": 19,
        "label": "Entry"
      },
      {
        "id": 20,
        "label": "let k = & mut ctx . accounts . keycard ;"
      },
      {
        "id": 21,
        "label": "k . vault = ctx . accounts . vault . key () ;"
      },
      {
        "id": 22,
        "label": "k . tier = tier ;"
      },
      {
        "id": 23,
        "label": "k . channel = channel ;"
      },
      {
        "id": 24,
        "label": "k . power = 0 ;"
      },
      {
        "id": 25,
        "label": "let mut s = seed ^ ((channel as u64) << 17) ;"
      },
      {
        "id": 26,
        "label": "for i in 0 .. k . hist . len () { s = s . rotate_left (7) ^ 0xC3A5C85C97CB3127u64 ; k . hist [i] = ((s >> (i * 6)) as u32) & 0x3FFF ; }"
      },
      {
        "id": 27,
        "label": "s = s . rotate_left (7) ^ 0xC3A5C85C97CB3127u64 ;"
      },
      {
        "id": 28,
        "label": "k . hist [i] = ((s >> (i * 6)) as u32) & 0x3FFF ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 20,
        "label": "def: k"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: k"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: k"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: k"
      },
      {
        "from": 20,
        "to": 24,
        "label": "data_dep: k"
      },
      {
        "from": 25,
        "to": 25,
        "label": "def: s"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: k"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 26,
        "label": "data_dep: k"
      },
      {
        "from": 25,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 25,
        "to": 27,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 28,
        "label": "data_dep: k"
      },
      {
        "from": 25,
        "to": 28,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "rotate_audit",
    "inputs": [
      "ctx: Context < RotateAudit >",
      "delta: u16",
      "hint: u32"
    ],
    "nodes": [
      {
        "id": 30,
        "label": "Entry"
      },
      {
        "id": 31,
        "label": "let v = & mut ctx . accounts . vault ;"
      },
      {
        "id": 32,
        "label": "let kc = & mut ctx . accounts . keycard ;"
      },
      {
        "id": 33,
        "label": "let ac = & mut ctx . accounts . auditcard ;"
      },
      {
        "id": 34,
        "label": "let l = & mut ctx . accounts . log ;"
      },
      {
        "id": 35,
        "label": "let mut x = (v . ledger_mix as u64 + hint as u64) . max (1) ;"
      },
      {
        "id": 36,
        "label": "let n = x ;"
      },
      {
        "id": 37,
        "label": "for _ in 0 .. 6 { x = (x + n / x) >> 1 ; }"
      },
      {
        "id": 38,
        "label": "x = (x + n / x) >> 1 ;"
      },
      {
        "id": 39,
        "label": "let scale = (x as u32) . min (65_535) ;"
      },
      {
        "id": 40,
        "label": "if kc . tier == Tier1 { kc . power = kc . power . saturating_add ((scale & 0x3FF) + delta as u32) ; v . ledger_mix = v . ledger_mix . rotate_left (3) ^ ((kc . channel as u32) << 4) ; l . lines = l . lines . saturating_add (1) ; l . hash = l . hash . wrapping_add ((scale as u64) . rotate_left (11)) ; msg ! (\"Tier1 path: keycard power boosted, vault mixed\") ; } else { ac . audit = ac . audit . saturating_add (((scale >> 2) & 0x1FF) + (delta as u32 / 2)) ; v . ledger_mix = v . ledger_mix . rotate_right (5) ^ ((ac . channel as u32) << 6) ; l . lines = l . lines . saturating_add (2) ; l . hash = l . hash ^ ((scale as u64) . rotate_right (9)) ; msg ! (\"Non-Tier1 path: auditcard updated, vault mixed differently\") ; }"
      },
      {
        "id": 41,
        "label": "kc . power = kc . power . saturating_add ((scale & 0x3FF) + delta as u32) ;"
      },
      {
        "id": 42,
        "label": "v . ledger_mix = v . ledger_mix . rotate_left (3) ^ ((kc . channel as u32) << 4) ;"
      },
      {
        "id": 43,
        "label": "l . lines = l . lines . saturating_add (1) ;"
      },
      {
        "id": 44,
        "label": "l . hash = l . hash . wrapping_add ((scale as u64) . rotate_left (11)) ;"
      },
      {
        "id": 45,
        "label": "msg ! (\"Tier1 path: keycard power boosted, vault mixed\") ;"
      },
      {
        "id": 46,
        "label": "ac . audit = ac . audit . saturating_add (((scale >> 2) & 0x1FF) + (delta as u32 / 2)) ;"
      },
      {
        "id": 47,
        "label": "v . ledger_mix = v . ledger_mix . rotate_right (5) ^ ((ac . channel as u32) << 6) ;"
      },
      {
        "id": 48,
        "label": "l . lines = l . lines . saturating_add (2) ;"
      },
      {
        "id": 49,
        "label": "l . hash = l . hash ^ ((scale as u64) . rotate_right (9)) ;"
      },
      {
        "id": 50,
        "label": "msg ! (\"Non-Tier1 path: auditcard updated, vault mixed differently\") ;"
      },
      {
        "id": 51,
        "label": "for i in 0 .. v . noise . len () { v . noise [i] = v . noise [i] . rotate_left ((i as u32) & 7) ^ (l . hash as u32 & 0xFFFF) ; }"
      },
      {
        "id": 52,
        "label": "v . noise [i] = v . noise [i] . rotate_left ((i as u32) & 7) ^ (l . hash as u32 & 0xFFFF) ;"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 31,
        "to": 31,
        "label": "def: v"
      },
      {
        "from": 32,
        "to": 32,
        "label": "def: kc"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: ac"
      },
      {
        "from": 34,
        "to": 34,
        "label": "def: l"
      },
      {
        "from": 35,
        "to": 35,
        "label": "def: x"
      },
      {
        "from": 31,
        "to": 35,
        "label": "data_dep: v"
      },
      {
        "from": 36,
        "to": 36,
        "label": "def: n"
      },
      {
        "from": 35,
        "to": 36,
        "label": "data_dep: x"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: x"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: x"
      },
      {
        "from": 36,
        "to": 37,
        "label": "data_dep: n"
      },
      {
        "from": 35,
        "to": 37,
        "label": "data_dep: x"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: x"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: x"
      },
      {
        "from": 36,
        "to": 38,
        "label": "data_dep: n"
      },
      {
        "from": 35,
        "to": 38,
        "label": "data_dep: x"
      },
      {
        "from": 39,
        "to": 39,
        "label": "def: scale"
      },
      {
        "from": 35,
        "to": 39,
        "label": "data_dep: x"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: kc"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: kc"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: kc"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: scale"
      },
      {
        "from": 31,
        "to": 40,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 40,
        "label": "data_dep: v"
      },
      {
        "from": 32,
        "to": 40,
        "label": "data_dep: kc"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: scale"
      },
      {
        "from": 33,
        "to": 40,
        "label": "data_dep: ac"
      },
      {
        "from": 33,
        "to": 40,
        "label": "data_dep: ac"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: scale"
      },
      {
        "from": 31,
        "to": 40,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 40,
        "label": "data_dep: v"
      },
      {
        "from": 33,
        "to": 40,
        "label": "data_dep: ac"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 40,
        "label": "data_dep: l"
      },
      {
        "from": 39,
        "to": 40,
        "label": "data_dep: scale"
      },
      {
        "from": 32,
        "to": 41,
        "label": "data_dep: kc"
      },
      {
        "from": 32,
        "to": 41,
        "label": "data_dep: kc"
      },
      {
        "from": 39,
        "to": 41,
        "label": "data_dep: scale"
      },
      {
        "from": 31,
        "to": 42,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 42,
        "label": "data_dep: v"
      },
      {
        "from": 32,
        "to": 42,
        "label": "data_dep: kc"
      },
      {
        "from": 34,
        "to": 43,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 43,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 44,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 44,
        "label": "data_dep: l"
      },
      {
        "from": 39,
        "to": 44,
        "label": "data_dep: scale"
      },
      {
        "from": 33,
        "to": 46,
        "label": "data_dep: ac"
      },
      {
        "from": 33,
        "to": 46,
        "label": "data_dep: ac"
      },
      {
        "from": 39,
        "to": 46,
        "label": "data_dep: scale"
      },
      {
        "from": 31,
        "to": 47,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 47,
        "label": "data_dep: v"
      },
      {
        "from": 33,
        "to": 47,
        "label": "data_dep: ac"
      },
      {
        "from": 34,
        "to": 48,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 48,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 49,
        "label": "data_dep: l"
      },
      {
        "from": 34,
        "to": 49,
        "label": "data_dep: l"
      },
      {
        "from": 39,
        "to": 49,
        "label": "data_dep: scale"
      },
      {
        "from": 31,
        "to": 51,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 51,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 51,
        "label": "data_dep: v"
      },
      {
        "from": 34,
        "to": 51,
        "label": "data_dep: l"
      },
      {
        "from": 31,
        "to": 52,
        "label": "data_dep: v"
      },
      {
        "from": 31,
        "to": 52,
        "label": "data_dep: v"
      },
      {
        "from": 34,
        "to": 52,
        "label": "data_dep: l"
      }
    ]
  }
]