[
  {
    "name": "init_arena",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let a = & mut ctx . accounts . arena ;"
      },
      {
        "id": 2,
        "label": "a . manager = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "a . seed = 0xDEAD_BEEF ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "enroll",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let t = & mut ctx . accounts . team ;"
      },
      {
        "id": 7,
        "label": "t . parent = ctx . accounts . arena . key () ;"
      },
      {
        "id": 8,
        "label": "t . side = side ;"
      },
      {
        "id": 9,
        "label": "t . power = 0 ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "tally",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require ! (ctx . accounts . badge_ta . mint == ctx . accounts . badge_mint . key () , ArenaErr :: MintMismatch) ;"
      },
      {
        "id": 13,
        "label": "require ! (ctx . accounts . badge_ta . owner == ctx . accounts . owner . key () , ArenaErr :: OwnerMismatch) ;"
      },
      {
        "id": 14,
        "label": "let a = & mut ctx . accounts . arena ;"
      },
      {
        "id": 15,
        "label": "let x = & mut ctx . accounts . team_x ;"
      },
      {
        "id": 16,
        "label": "let y = & mut ctx . accounts . team_y ;"
      },
      {
        "id": 17,
        "label": "let r = & mut ctx . accounts . record ;"
      },
      {
        "id": 18,
        "label": "let mut s = 0u32 ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "let v = ((bias as u32) + (i as u32 * 23)) & 0x3FFF ;"
      },
      {
        "id": 21,
        "label": "r . rings [i] = r . rings [i] . saturating_add (v) ;"
      },
      {
        "id": 22,
        "label": "s = s . saturating_add (v) ;"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "x . side as u8 != y . side as u8"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "x . power = x . power . saturating_add ((s / 8) as u64) ;"
      },
      {
        "id": 29,
        "label": "r . win = r . win . saturating_add (1) ;"
      },
      {
        "id": 30,
        "label": "a . seed = a . seed . rotate_left (3) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "y . power = y . power . saturating_add ((s / 7) as u64) ;"
      },
      {
        "id": 33,
        "label": "r . lose = r . lose . saturating_add (1) ;"
      },
      {
        "id": 34,
        "label": "a . seed = a . seed . rotate_right (4) ;"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 19,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 24,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]