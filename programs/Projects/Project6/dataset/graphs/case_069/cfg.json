[
  {
    "name": "init_cauldron",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let c = & mut ctx . accounts . cauldron ;"
      },
      {
        "id": 2,
        "label": "c . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "c . seed = seed ;"
      },
      {
        "id": 4,
        "label": "c . brews = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "enroll_caster",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let c = & mut ctx . accounts . cauldron ;"
      },
      {
        "id": 8,
        "label": "let a = & mut ctx . accounts . adept ;"
      },
      {
        "id": 9,
        "label": "a . cauldron = c . key () ;"
      },
      {
        "id": 10,
        "label": "a . kind = kind ;"
      },
      {
        "id": 11,
        "label": "a . sigil = sigil ;"
      },
      {
        "id": 12,
        "label": "a . power = 0 ;"
      },
      {
        "id": 13,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      }
    ]
  },
  {
    "name": "brew",
    "nodes": [
      {
        "id": 14,
        "label": "Entry"
      },
      {
        "id": 15,
        "label": "let c = & mut ctx . accounts . cauldron ;"
      },
      {
        "id": 16,
        "label": "let x = & mut ctx . accounts . actor ;"
      },
      {
        "id": 17,
        "label": "let y = & mut ctx . accounts . partner ;"
      },
      {
        "id": 18,
        "label": "let v = & mut ctx . accounts . vessel ;"
      },
      {
        "id": 19,
        "label": "let l = & mut ctx . accounts . brew_log ;"
      },
      {
        "id": 20,
        "label": "let mut s : u32 = 0 ;"
      },
      {
        "id": 21,
        "label": "let mut mix : u16 = 0 ;"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let q = (sh & 0x3FF) as u32 ;"
      },
      {
        "id": 24,
        "label": "s = s . saturating_add (q) ;"
      },
      {
        "id": 25,
        "label": "mix ^= (sh . rotate_left (2)) ^ 0x0F0F ;"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "let base = s + (mix as u32 & 0xFF) ;"
      },
      {
        "id": 28,
        "label": "if statement"
      },
      {
        "id": 29,
        "label": "predicate"
      },
      {
        "id": 30,
        "label": "x . kind == Arch"
      },
      {
        "id": 31,
        "label": "True body"
      },
      {
        "id": 32,
        "label": "x . power = x . power . saturating_add ((base / 2) as u16) ;"
      },
      {
        "id": 33,
        "label": "y . power = y . power . saturating_add (((mix >> 3) & 0x3F) as u16) ;"
      },
      {
        "id": 34,
        "label": "v . quality = v . quality . saturating_add ((base / 4) as u16) ;"
      },
      {
        "id": 35,
        "label": "c . brews = c . brews . saturating_add (1) ;"
      },
      {
        "id": 36,
        "label": "msg ! (\"Arch branch: base={}, xP={}, yP={}, q={}\" , base , x . power , y . power , v . quality) ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "x . power = x . power . saturating_add ((base / 3) as u16) ;"
      },
      {
        "id": 39,
        "label": "y . power = y . power . saturating_add (((mix >> 1) & 0x7F) as u16) ;"
      },
      {
        "id": 40,
        "label": "v . quality = v . quality . saturating_add ((base / 5) as u16) ;"
      },
      {
        "id": 41,
        "label": "c . brews = c . brews . saturating_add (1) ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Mage/Novice branch: base={}, xP={}, yP={}, q={}\" , base , x . power , y . power , v . quality) ;"
      },
      {
        "id": 43,
        "label": "merge"
      },
      {
        "id": 44,
        "label": "let mut t = (c . brews as u128) . max (1) ;"
      },
      {
        "id": 45,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 46,
        "label": "Loop Start"
      },
      {
        "id": 47,
        "label": "t = (t + (c . brews as u128 / t)) . max (1) / 2 ;"
      },
      {
        "id": 48,
        "label": "i += 1 ;"
      },
      {
        "id": 49,
        "label": "Loop End"
      },
      {
        "id": 50,
        "label": "l . cauldron = c . key () ;"
      },
      {
        "id": 51,
        "label": "l . index = (t as u32) . min (1_000_000) ;"
      },
      {
        "id": 52,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 22,
        "to": 26,
        "label": "for"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "predicate"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 28,
        "to": 31,
        "label": "true"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 28,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 36,
        "to": 43,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "while"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      }
    ]
  }
]