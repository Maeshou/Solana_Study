[
  {
    "name": "init_warehouse",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let w = & mut ctx . accounts . warehouse ;"
      },
      {
        "id": 2,
        "label": "w . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "w . code = code ;"
      },
      {
        "id": 4,
        "label": "w . items = 0 ;"
      },
      {
        "id": 5,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      }
    ]
  },
  {
    "name": "create_slots",
    "nodes": [
      {
        "id": 6,
        "label": "Entry"
      },
      {
        "id": 7,
        "label": "let w = & mut ctx . accounts . warehouse ;"
      },
      {
        "id": 8,
        "label": "let a = & mut ctx . accounts . input_slot ;"
      },
      {
        "id": 9,
        "label": "a . warehouse = w . key () ;"
      },
      {
        "id": 10,
        "label": "a . kind = input_kind ;"
      },
      {
        "id": 11,
        "label": "a . count = 0 ;"
      },
      {
        "id": 12,
        "label": "let b = & mut ctx . accounts . output_slot ;"
      },
      {
        "id": 13,
        "label": "b . warehouse = w . key () ;"
      },
      {
        "id": 14,
        "label": "b . kind = output_kind ;"
      },
      {
        "id": 15,
        "label": "b . count = 0 ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      }
    ]
  },
  {
    "name": "move_items",
    "nodes": [
      {
        "id": 17,
        "label": "Entry"
      },
      {
        "id": 18,
        "label": "let w = & mut ctx . accounts . warehouse ;"
      },
      {
        "id": 19,
        "label": "let input = & mut ctx . accounts . input_slot ;"
      },
      {
        "id": 20,
        "label": "let output = & mut ctx . accounts . output_slot ;"
      },
      {
        "id": 21,
        "label": "let rec = & mut ctx . accounts . record ;"
      },
      {
        "id": 22,
        "label": "let mut moved : u32 = 0 ;"
      },
      {
        "id": 23,
        "label": "let mut entropy : u16 = 0 ;"
      },
      {
        "id": 24,
        "label": "Loop Start"
      },
      {
        "id": 25,
        "label": "let cap = b . min (1000) ;"
      },
      {
        "id": 26,
        "label": "moved = moved . saturating_add (cap as u32) ;"
      },
      {
        "id": 27,
        "label": "entropy ^= (cap << 1) | (cap >> 1) ;"
      },
      {
        "id": 28,
        "label": "Loop End"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "input . kind == Inlet"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "let take = moved . min (input . count as u32) ;"
      },
      {
        "id": 34,
        "label": "input . count = input . count . saturating_sub (take as u16) ;"
      },
      {
        "id": 35,
        "label": "output . count = output . count . saturating_add ((take as u16) . min (2000)) ;"
      },
      {
        "id": 36,
        "label": "w . items = w . items . saturating_add (take) ;"
      },
      {
        "id": 37,
        "label": "msg ! (\"Inlet path: moved={}, in.count={}, out.count={}\" , moved , input . count , output . count) ;"
      },
      {
        "id": 38,
        "label": "False body"
      },
      {
        "id": 39,
        "label": "let give = moved . min (2000) ;"
      },
      {
        "id": 40,
        "label": "input . count = input . count . saturating_add (give as u16) ;"
      },
      {
        "id": 41,
        "label": "output . count = output . count . saturating_sub (give . min (output . count as u32) as u16) ;"
      },
      {
        "id": 42,
        "label": "w . items = w . items . saturating_add (give) ;"
      },
      {
        "id": 43,
        "label": "msg ! (\"Outlet path: moved={}, in.count={}, out.count={}\" , moved , input . count , output . count) ;"
      },
      {
        "id": 44,
        "label": "merge"
      },
      {
        "id": 45,
        "label": "let mut x = (w . items as u128) . max (1) ;"
      },
      {
        "id": 46,
        "label": "let mut i = 0 ;"
      },
      {
        "id": 47,
        "label": "Loop Start"
      },
      {
        "id": 48,
        "label": "x = (x + (w . items as u128 / x)) . max (1) / 2 ;"
      },
      {
        "id": 49,
        "label": "i += 1 ;"
      },
      {
        "id": 50,
        "label": "Loop End"
      },
      {
        "id": 51,
        "label": "rec . warehouse = w . key () ;"
      },
      {
        "id": 52,
        "label": "rec . heat = (x as u32) . saturating_add (entropy as u32) ;"
      },
      {
        "id": 53,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 24,
        "to": 28,
        "label": "for"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 29,
        "to": 38,
        "label": "false"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 37,
        "to": 44,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 47,
        "to": 50,
        "label": "while"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      }
    ]
  }
]