[
  {
    "name": "initiate_guild_war",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let attacking_guild = & mut ctx . accounts . attacking_guild ;"
      },
      {
        "id": 2,
        "label": "let defending_guild = & mut ctx . accounts . defending_guild ;"
      },
      {
        "id": 3,
        "label": "let battle_arena = & mut ctx . accounts . battle_arena ;"
      },
      {
        "id": 4,
        "label": "require ! (attacking_guild . member_count >= 10 , BattleError :: InsufficientMembers) ;"
      },
      {
        "id": 5,
        "label": "require ! (defending_guild . member_count >= 10 , BattleError :: InsufficientMembers) ;"
      },
      {
        "id": 6,
        "label": "require ! (attacking_guild . guild_level >= 5 , BattleError :: GuildLevelTooLow) ;"
      },
      {
        "id": 7,
        "label": "let current_time = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 8,
        "label": "let last_battle_time = attacking_guild . last_battle_time ;"
      },
      {
        "id": 9,
        "label": "let cooldown_period = 86400 ;"
      },
      {
        "id": 10,
        "label": "require ! (current_time >= last_battle_time + cooldown_period , BattleError :: CooldownActive) ;"
      },
      {
        "id": 11,
        "label": "battle_arena . battle_id = battle_arena . total_battles + 1 ;"
      },
      {
        "id": 12,
        "label": "battle_arena . attacking_guild_id = attacking_guild . guild_id ;"
      },
      {
        "id": 13,
        "label": "battle_arena . defending_guild_id = defending_guild . guild_id ;"
      },
      {
        "id": 14,
        "label": "battle_arena . battle_status = BattleStatus :: Preparation ;"
      },
      {
        "id": 15,
        "label": "battle_arena . preparation_end_time = current_time + 3600 ;"
      },
      {
        "id": 16,
        "label": "let max_participants = std :: cmp :: min (attacking_guild . member_count , defending_guild . member_count) ;"
      },
      {
        "id": 17,
        "label": "let actual_participants = std :: cmp :: min (max_participants , 20) ;"
      },
      {
        "id": 18,
        "label": "let mut attacking_power = 0u64 ;"
      },
      {
        "id": 19,
        "label": "let mut defending_power = 0u64 ;"
      },
      {
        "id": 20,
        "label": "Loop Start"
      },
      {
        "id": 21,
        "label": "let member_level = attacking_guild . member_levels . get (member_index) . unwrap_or (& 1) ;"
      },
      {
        "id": 22,
        "label": "let equipment_bonus = attacking_guild . equipment_scores . get (member_index) . unwrap_or (& 0) ;"
      },
      {
        "id": 23,
        "label": "let member_power = member_level . checked_mul (100) . unwrap () . checked_add (* equipment_bonus) . unwrap () ;"
      },
      {
        "id": 24,
        "label": "attacking_power = attacking_power . checked_add (member_power) . unwrap () ;"
      },
      {
        "id": 25,
        "label": "Loop End"
      },
      {
        "id": 26,
        "label": "Loop Start"
      },
      {
        "id": 27,
        "label": "Loop Start"
      },
      {
        "id": 28,
        "label": "let member_level = defending_guild . member_levels . get (member_index) . unwrap_or (& 1) ;"
      },
      {
        "id": 29,
        "label": "let defense_bonus = defending_guild . fortress_level * 50 ;"
      },
      {
        "id": 30,
        "label": "let member_power = member_level . checked_mul (100) . unwrap () . checked_add (defense_bonus) . unwrap () ;"
      },
      {
        "id": 31,
        "label": "defending_power = defending_power . checked_add (member_power) . unwrap () ;"
      },
      {
        "id": 32,
        "label": "defending_power = defending_power . checked_mul (110) . unwrap () / 100 ;"
      },
      {
        "id": 33,
        "label": "break ;"
      },
      {
        "id": 34,
        "label": "Loop End"
      },
      {
        "id": 35,
        "label": "break ;"
      },
      {
        "id": 36,
        "label": "Loop End"
      },
      {
        "id": 37,
        "label": "battle_arena . attacking_power = attacking_power ;"
      },
      {
        "id": 38,
        "label": "battle_arena . defending_power = defending_power ;"
      },
      {
        "id": 39,
        "label": "battle_arena . total_battles = battle_arena . total_battles . checked_add (1) . unwrap () ;"
      },
      {
        "id": 40,
        "label": "attacking_guild . last_battle_time = current_time ;"
      },
      {
        "id": 41,
        "label": "attacking_guild . total_wars_initiated = attacking_guild . total_wars_initiated . checked_add (1) . unwrap () ;"
      },
      {
        "id": 42,
        "label": "defending_guild . total_wars_defended = defending_guild . total_wars_defended . checked_add (1) . unwrap () ;"
      },
      {
        "id": 43,
        "label": "emit ! (GuildWarInitiated { attacking_guild : attacking_guild . guild_id , defending_guild : defending_guild . guild_id , battle_id : battle_arena . battle_id , participants : actual_participants , }) ;"
      },
      {
        "id": 44,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 20,
        "to": 25,
        "label": "for"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 27,
        "to": 34,
        "label": "for"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 26,
        "to": 36,
        "label": "while"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      }
    ]
  }
]