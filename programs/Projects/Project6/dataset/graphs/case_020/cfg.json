[
  {
    "name": "register_tamer",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let tamer = & mut ctx . accounts . tamer_profile ;"
      },
      {
        "id": 2,
        "label": "tamer . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "tamer . name = tamer_name ;"
      },
      {
        "id": 4,
        "label": "tamer . pet_count = 0 ;"
      },
      {
        "id": 5,
        "label": "tamer . role_tag = TamerRole :: Apprentice ;"
      },
      {
        "id": 6,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      }
    ]
  },
  {
    "name": "update_pet_score",
    "nodes": [
      {
        "id": 7,
        "label": "Entry"
      },
      {
        "id": 8,
        "label": "let tamer = & mut ctx . accounts . tamer_profile ;"
      },
      {
        "id": 9,
        "label": "let pet = & mut ctx . accounts . pet_score ;"
      },
      {
        "id": 10,
        "label": "pet . score = pet . score . checked_add (training_points) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 11,
        "label": "let pet_average = pet . score . checked_div (pet . matches_played as u64) . unwrap_or (0) ;"
      },
      {
        "id": 12,
        "label": "let max_level = 100u8 ;"
      },
      {
        "id": 13,
        "label": "pet . level = (pet_average . checked_div (100) . unwrap_or (0) as u8) . min (max_level) ;"
      },
      {
        "id": 14,
        "label": "Loop Start"
      },
      {
        "id": 15,
        "label": "tamer . pet_count = tamer . pet_count . wrapping_add (1) ;"
      },
      {
        "id": 16,
        "label": "Loop End"
      },
      {
        "id": 17,
        "label": "if statement"
      },
      {
        "id": 18,
        "label": "predicate"
      },
      {
        "id": 19,
        "label": "pet . level >= 50"
      },
      {
        "id": 20,
        "label": "True body"
      },
      {
        "id": 21,
        "label": "msg ! (\"Pet has reached a high level!\") ;"
      },
      {
        "id": 22,
        "label": "False body"
      },
      {
        "id": 23,
        "label": "msg ! (\"Pet is still in training.\") ;"
      },
      {
        "id": 24,
        "label": "merge"
      },
      {
        "id": 25,
        "label": "let mut xor_val = pet . score as u32 ;"
      },
      {
        "id": 26,
        "label": "let mask = 0b10101010 ;"
      },
      {
        "id": 27,
        "label": "xor_val ^= mask ;"
      },
      {
        "id": 28,
        "label": "msg ! (\"XOR value: {}\" , xor_val) ;"
      },
      {
        "id": 29,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 14,
        "to": 16,
        "label": "for"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "predicate"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 17,
        "to": 20,
        "label": "true"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 17,
        "to": 22,
        "label": "false"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 21,
        "to": 24,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      }
    ]
  }
]