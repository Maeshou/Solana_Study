[
  {
    "name": "craft_legendary_weapon",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let crafting_station = & mut ctx . accounts . crafting_station ;"
      },
      {
        "id": 2,
        "label": "let player_inventory = & mut ctx . accounts . player_inventory ;"
      },
      {
        "id": 3,
        "label": "let mut material_cost_total = 0u64 ;"
      },
      {
        "id": 4,
        "label": "let required_materials = vec ! [(MaterialType :: DragonScale , 5) , (MaterialType :: MithrilOre , 10) , (MaterialType :: PhoenixFeather , 2) ,] ;"
      },
      {
        "id": 5,
        "label": "Loop Start"
      },
      {
        "id": 6,
        "label": "let available_amount = player_inventory . materials . get (material_type) . unwrap_or (& 0) ;"
      },
      {
        "id": 7,
        "label": "require ! (* available_amount >= * required_amount , CraftingError :: InsufficientMaterials) ;"
      },
      {
        "id": 8,
        "label": "let base_cost = match material_type { MaterialType :: DragonScale => 1000 , MaterialType :: MithrilOre => 500 , MaterialType :: PhoenixFeather => 2000 , } ;"
      },
      {
        "id": 9,
        "label": "material_cost_total = material_cost_total . checked_add (base_cost . checked_mul (* required_amount as u64) . unwrap ()) . unwrap () ;"
      },
      {
        "id": 10,
        "label": "player_inventory . materials . insert (* material_type , available_amount . checked_sub (* required_amount) . unwrap ()) ;"
      },
      {
        "id": 11,
        "label": "Loop End"
      },
      {
        "id": 12,
        "label": "let mut success_rate = 70u8 ;"
      },
      {
        "id": 13,
        "label": "let crafting_level_bonus = crafting_station . crafting_level / 5 ;"
      },
      {
        "id": 14,
        "label": "success_rate = success_rate . saturating_add (crafting_level_bonus as u8) ;"
      },
      {
        "id": 15,
        "label": "let clock = Clock :: get () ? ;"
      },
      {
        "id": 16,
        "label": "let random_seed = clock . unix_timestamp as u64 ;"
      },
      {
        "id": 17,
        "label": "let craft_success = (random_seed % 100) < success_rate as u64 ;"
      },
      {
        "id": 18,
        "label": "if statement"
      },
      {
        "id": 19,
        "label": "predicate"
      },
      {
        "id": 20,
        "label": "! craft_success"
      },
      {
        "id": 21,
        "label": "True body"
      },
      {
        "id": 22,
        "label": "Loop Start"
      },
      {
        "id": 23,
        "label": "let return_amount = required_amount / 2 ;"
      },
      {
        "id": 24,
        "label": "let current_amount = player_inventory . materials . get (material_type) . unwrap_or (& 0) ;"
      },
      {
        "id": 25,
        "label": "player_inventory . materials . insert (* material_type , current_amount . checked_add (return_amount) . unwrap ()) ;"
      },
      {
        "id": 26,
        "label": "Loop End"
      },
      {
        "id": 27,
        "label": "return Err (CraftingError :: CraftingFailed . into ()) ;"
      },
      {
        "id": 28,
        "label": "False body"
      },
      {
        "id": 29,
        "label": "No-op"
      },
      {
        "id": 30,
        "label": "merge"
      },
      {
        "id": 31,
        "label": "let weapon_stats = WeaponStats { attack_damage : 250 + (crafting_station . crafting_level * 5) , critical_rate : 15 + (crafting_station . crafting_level / 2) , durability : 1000 , enchantment_slots : 3 , } ;"
      },
      {
        "id": 32,
        "label": "player_inventory . weapons . push (CraftedWeapon { weapon_id : player_inventory . weapons . len () as u32 , weapon_type : WeaponType :: LegendarySword , stats : weapon_stats , crafted_at : clock . unix_timestamp , crafter : ctx . accounts . player . key () , }) ;"
      },
      {
        "id": 33,
        "label": "crafting_station . crafting_level = crafting_station . crafting_level . checked_add (1) . unwrap () ;"
      },
      {
        "id": 34,
        "label": "crafting_station . total_items_crafted = crafting_station . total_items_crafted . checked_add (1) . unwrap () ;"
      },
      {
        "id": 35,
        "label": "emit ! (WeaponCrafted { player : ctx . accounts . player . key () , weapon_type : WeaponType :: LegendarySword , success : true , }) ;"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 5,
        "to": 11,
        "label": "for"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "predicate"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 18,
        "to": 21,
        "label": "true"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 22,
        "to": 26,
        "label": "for"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 18,
        "to": 28,
        "label": "false"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 27,
        "to": 30,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]