[
  {
    "name": "initiate_combat_challenge",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let challenger_account = & mut ctx . accounts . challenger_account ;"
      },
      {
        "id": 2,
        "label": "let defender_account = & mut ctx . accounts . defender_account ;"
      },
      {
        "id": 3,
        "label": "let battle_session = & mut ctx . accounts . battle_session ;"
      },
      {
        "id": 4,
        "label": "require ! (challenger_account . warrior_tokens . contains (& challenger_warrior_id) , BattleError :: WarriorNotOwned) ;"
      },
      {
        "id": 5,
        "label": "require ! (defender_account . warrior_tokens . contains (& defender_warrior_id) , BattleError :: DefenderWarriorInvalid) ;"
      },
      {
        "id": 6,
        "label": "let challenger_power = calculate_warrior_combat_rating (challenger_warrior_id) ;"
      },
      {
        "id": 7,
        "label": "let defender_power = calculate_warrior_combat_rating (defender_warrior_id) ;"
      },
      {
        "id": 8,
        "label": "battle_session . challenger_address = ctx . accounts . challenger . key () ;"
      },
      {
        "id": 9,
        "label": "battle_session . defender_address = ctx . accounts . defender . key () ;"
      },
      {
        "id": 10,
        "label": "battle_session . challenger_warrior = challenger_warrior_id ;"
      },
      {
        "id": 11,
        "label": "battle_session . defender_warrior = defender_warrior_id ;"
      },
      {
        "id": 12,
        "label": "battle_session . battle_status = BattleStatus :: InProgress ;"
      },
      {
        "id": 13,
        "label": "battle_session . combat_rounds_remaining = 10 ;"
      },
      {
        "id": 14,
        "label": "battle_session . challenger_health = 1000 ;"
      },
      {
        "id": 15,
        "label": "battle_session . defender_health = 1000 ;"
      },
      {
        "id": 16,
        "label": "let initial_damage = challenger_power / 20 ;"
      },
      {
        "id": 17,
        "label": "battle_session . defender_health = battle_session . defender_health . saturating_sub (initial_damage) ;"
      },
      {
        "id": 18,
        "label": "emit ! (CombatInitiated { battle_id : battle_session . key () , challenger : ctx . accounts . challenger . key () , defender : ctx . accounts . defender . key () , }) ;"
      },
      {
        "id": 19,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      }
    ]
  },
  {
    "name": "execute_combat_round",
    "nodes": [
      {
        "id": 20,
        "label": "Entry"
      },
      {
        "id": 21,
        "label": "let battle_session = & mut ctx . accounts . battle_session ;"
      },
      {
        "id": 22,
        "label": "let attacker_account = & ctx . accounts . attacker_account ;"
      },
      {
        "id": 23,
        "label": "require ! (battle_session . battle_status == BattleStatus :: InProgress , BattleError :: BattleNotActive) ;"
      },
      {
        "id": 24,
        "label": "require ! (battle_session . combat_rounds_remaining > 0 , BattleError :: BattleAlreadyFinished) ;"
      },
      {
        "id": 25,
        "label": "let attacker_warrior_id = if ctx . accounts . attacker . key () == battle_session . challenger_address { battle_session . challenger_warrior } else { battle_session . defender_warrior } ;"
      },
      {
        "id": 26,
        "label": "let base_attack_damage = calculate_attack_damage (attacker_warrior_id , attack_strategy) ;"
      },
      {
        "id": 27,
        "label": "let critical_hit_chance = attacker_warrior_id % 20 ;"
      },
      {
        "id": 28,
        "label": "let final_damage = if critical_hit_chance > 15 { base_attack_damage * 2 } else { base_attack_damage } ;"
      },
      {
        "id": 29,
        "label": "if statement"
      },
      {
        "id": 30,
        "label": "predicate"
      },
      {
        "id": 31,
        "label": "ctx . accounts . attacker . key () == battle_session . challenger_address"
      },
      {
        "id": 32,
        "label": "True body"
      },
      {
        "id": 33,
        "label": "battle_session . defender_health = battle_session . defender_health . saturating_sub (final_damage) ;"
      },
      {
        "id": 34,
        "label": "False body"
      },
      {
        "id": 35,
        "label": "battle_session . challenger_health = battle_session . challenger_health . saturating_sub (final_damage) ;"
      },
      {
        "id": 36,
        "label": "merge"
      },
      {
        "id": 37,
        "label": "battle_session . combat_rounds_remaining -= 1 ;"
      },
      {
        "id": 38,
        "label": "let victory_condition = battle_session . challenger_health > 0 && battle_session . defender_health > 0 ;"
      },
      {
        "id": 39,
        "label": "if statement"
      },
      {
        "id": 40,
        "label": "predicate"
      },
      {
        "id": 41,
        "label": "! victory_condition || battle_session . combat_rounds_remaining <= 0"
      },
      {
        "id": 42,
        "label": "True body"
      },
      {
        "id": 43,
        "label": "battle_session . battle_status = BattleStatus :: Completed ;"
      },
      {
        "id": 44,
        "label": "let winner_address = if battle_session . challenger_health > battle_session . defender_health { battle_session . challenger_address } else { battle_session . defender_address } ;"
      },
      {
        "id": 45,
        "label": "emit ! (BattleCompleted { battle_id : battle_session . key () , winner : winner_address , final_damage : final_damage , }) ;"
      },
      {
        "id": 46,
        "label": "False body"
      },
      {
        "id": 47,
        "label": "No-op"
      },
      {
        "id": 48,
        "label": "merge"
      },
      {
        "id": 49,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "predicate"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 29,
        "to": 32,
        "label": "true"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 29,
        "to": 34,
        "label": "false"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 33,
        "to": 36,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "predicate"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 39,
        "to": 42,
        "label": "true"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 44,
        "to": 45,
        "label": "next"
      },
      {
        "from": 39,
        "to": 46,
        "label": "false"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 45,
        "to": 48,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      }
    ]
  },
  {
    "name": "upgrade_warrior_equipment",
    "nodes": [
      {
        "id": 50,
        "label": "Entry"
      },
      {
        "id": 51,
        "label": "let warrior_owner = & mut ctx . accounts . warrior_owner ;"
      },
      {
        "id": 52,
        "label": "let equipment_forge = & ctx . accounts . equipment_forge ;"
      },
      {
        "id": 53,
        "label": "require ! (warrior_owner . warrior_tokens . contains (& warrior_id) , BattleError :: WarriorNotOwned) ;"
      },
      {
        "id": 54,
        "label": "let upgrade_cost_calculation = (upgrade_level as u64) * 500 ;"
      },
      {
        "id": 55,
        "label": "let equipment_multiplier = match equipment_type { EquipmentType :: Weapon => 3 , EquipmentType :: Armor => 2 , EquipmentType :: Accessory => 1 , } ;"
      },
      {
        "id": 56,
        "label": "let total_upgrade_cost = upgrade_cost_calculation * equipment_multiplier ;"
      },
      {
        "id": 57,
        "label": "require ! (warrior_owner . battle_tokens >= total_upgrade_cost , BattleError :: InsufficientUpgradeFunds) ;"
      },
      {
        "id": 58,
        "label": "warrior_owner . battle_tokens -= total_upgrade_cost ;"
      },
      {
        "id": 59,
        "label": "let equipment_bonus = upgrade_level as u32 * 25 ;"
      },
      {
        "id": 60,
        "label": "warrior_owner . total_warrior_power += equipment_bonus ;"
      },
      {
        "id": 61,
        "label": "let upgraded_equipment_id = warrior_id + (equipment_bonus * 1000) ;"
      },
      {
        "id": 62,
        "label": "warrior_owner . equipment_inventory . push (upgraded_equipment_id) ;"
      },
      {
        "id": 63,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 54,
        "to": 55,
        "label": "next"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      }
    ]
  },
  {
    "name": "calculate_warrior_combat_rating",
    "nodes": [
      {
        "id": 64,
        "label": "Entry"
      },
      {
        "id": 65,
        "label": "let base_power = warrior_id % 1000 ;"
      },
      {
        "id": 66,
        "label": "let rarity_bonus = warrior_id / 10000 ;"
      },
      {
        "id": 67,
        "label": "base_power + (rarity_bonus * 50)"
      }
    ],
    "edges": [
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      }
    ]
  },
  {
    "name": "calculate_attack_damage",
    "nodes": [
      {
        "id": 68,
        "label": "Entry"
      },
      {
        "id": 69,
        "label": "let base_damage = warrior_id % 100 ;"
      },
      {
        "id": 70,
        "label": "let strategy_modifier = match strategy { AttackStrategy :: Aggressive => base_damage + 20 , AttackStrategy :: Defensive => base_damage + 5 , AttackStrategy :: Balanced => base_damage + 12 , } ;"
      },
      {
        "id": 71,
        "label": "strategy_modifier"
      }
    ],
    "edges": [
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      }
    ]
  }
]