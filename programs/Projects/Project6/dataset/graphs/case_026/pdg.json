[
  {
    "name": "init_factory",
    "inputs": [
      "ctx: Context < InitFactory >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . factory ;"
      },
      {
        "id": 2,
        "label": "f . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "f . hash = 0 ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: f"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: f"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: f"
      }
    ]
  },
  {
    "name": "init_slot",
    "inputs": [
      "ctx: Context < InitSlot >",
      "idx: u8"
    ],
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let s = & mut ctx . accounts . slot ;"
      },
      {
        "id": 7,
        "label": "s . parent = ctx . accounts . factory . key () ;"
      },
      {
        "id": 8,
        "label": "s . idx = idx ;"
      },
      {
        "id": 9,
        "label": "s . used = false ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 6,
        "to": 6,
        "label": "def: s"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: s"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: s"
      }
    ]
  },
  {
    "name": "batch",
    "inputs": [
      "ctx: Context < Batch >",
      "bias: u16"
    ],
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require ! (ctx . accounts . mat_ta . mint == ctx . accounts . mat_mint . key () , CFErr :: MintMismatch) ;"
      },
      {
        "id": 13,
        "label": "require ! (ctx . accounts . mat_ta . owner == ctx . accounts . owner . key () , CFErr :: OwnerMismatch) ;"
      },
      {
        "id": 14,
        "label": "let f = & mut ctx . accounts . factory ;"
      },
      {
        "id": 15,
        "label": "let a = & mut ctx . accounts . slot_a ;"
      },
      {
        "id": 16,
        "label": "let b = & mut ctx . accounts . slot_b ;"
      },
      {
        "id": 17,
        "label": "let w = & mut ctx . accounts . warehouse ;"
      },
      {
        "id": 18,
        "label": "let mut s = 0u32 ;"
      },
      {
        "id": 19,
        "label": "for i in 0 .. w . blks . len () { let v = ((bias as u32) + i as u32 * 9) & 0xFFF ; w . blks [i] = w . blks [i] . saturating_add (v) ; s = s . saturating_add (v) ; }"
      },
      {
        "id": 20,
        "label": "let v = ((bias as u32) + i as u32 * 9) & 0xFFF ;"
      },
      {
        "id": 21,
        "label": "w . blks [i] = w . blks [i] . saturating_add (v) ;"
      },
      {
        "id": 22,
        "label": "s = s . saturating_add (v) ;"
      },
      {
        "id": 23,
        "label": "if a . idx != b . idx { w . ok = w . ok . saturating_add ((s / 8) as u64) ; a . used = true ; f . hash ^= (s as u64) . rotate_left (11) ; msg ! (\"different slot: ok+\") ; } else { w . ng = w . ng . saturating_add ((s / 7) as u64) ; b . used = true ; f . hash = f . hash . rotate_right (9) ^ 0xA5A5u64 ; msg ! (\"same slot: ng+\") ; }"
      },
      {
        "id": 24,
        "label": "w . ok = w . ok . saturating_add ((s / 8) as u64) ;"
      },
      {
        "id": 25,
        "label": "a . used = true ;"
      },
      {
        "id": 26,
        "label": "f . hash ^= (s as u64) . rotate_left (11) ;"
      },
      {
        "id": 27,
        "label": "msg ! (\"different slot: ok+\") ;"
      },
      {
        "id": 28,
        "label": "w . ng = w . ng . saturating_add ((s / 7) as u64) ;"
      },
      {
        "id": 29,
        "label": "b . used = true ;"
      },
      {
        "id": 30,
        "label": "f . hash = f . hash . rotate_right (9) ^ 0xA5A5u64 ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"same slot: ng+\") ;"
      },
      {
        "id": 32,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 14,
        "to": 14,
        "label": "def: f"
      },
      {
        "from": 15,
        "to": 15,
        "label": "def: a"
      },
      {
        "from": 16,
        "to": 16,
        "label": "def: b"
      },
      {
        "from": 17,
        "to": 17,
        "label": "def: w"
      },
      {
        "from": 18,
        "to": 18,
        "label": "def: s"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 19,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 18,
        "to": 19,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: v"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 21,
        "label": "data_dep: w"
      },
      {
        "from": 20,
        "to": 21,
        "label": "data_dep: v"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 18,
        "to": 22,
        "label": "data_dep: s"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: v"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: a"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 23,
        "label": "data_dep: a"
      },
      {
        "from": 14,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 23,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 23,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 23,
        "label": "data_dep: b"
      },
      {
        "from": 14,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 14,
        "to": 23,
        "label": "data_dep: f"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 24,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 24,
        "label": "data_dep: s"
      },
      {
        "from": 15,
        "to": 25,
        "label": "data_dep: a"
      },
      {
        "from": 14,
        "to": 26,
        "label": "data_dep: f"
      },
      {
        "from": 18,
        "to": 26,
        "label": "data_dep: s"
      },
      {
        "from": 17,
        "to": 28,
        "label": "data_dep: w"
      },
      {
        "from": 17,
        "to": 28,
        "label": "data_dep: w"
      },
      {
        "from": 18,
        "to": 28,
        "label": "data_dep: s"
      },
      {
        "from": 16,
        "to": 29,
        "label": "data_dep: b"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: f"
      },
      {
        "from": 14,
        "to": 30,
        "label": "data_dep: f"
      }
    ]
  }
]