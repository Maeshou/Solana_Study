[
  {
    "name": "init_factory",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let f = & mut ctx . accounts . factory ;"
      },
      {
        "id": 2,
        "label": "f . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "f . hash = 0 ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_slot",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let s = & mut ctx . accounts . slot ;"
      },
      {
        "id": 7,
        "label": "s . parent = ctx . accounts . factory . key () ;"
      },
      {
        "id": 8,
        "label": "s . idx = idx ;"
      },
      {
        "id": 9,
        "label": "s . used = false ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "batch",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require ! (ctx . accounts . mat_ta . mint == ctx . accounts . mat_mint . key () , CFErr :: MintMismatch) ;"
      },
      {
        "id": 13,
        "label": "require ! (ctx . accounts . mat_ta . owner == ctx . accounts . owner . key () , CFErr :: OwnerMismatch) ;"
      },
      {
        "id": 14,
        "label": "let f = & mut ctx . accounts . factory ;"
      },
      {
        "id": 15,
        "label": "let a = & mut ctx . accounts . slot_a ;"
      },
      {
        "id": 16,
        "label": "let b = & mut ctx . accounts . slot_b ;"
      },
      {
        "id": 17,
        "label": "let w = & mut ctx . accounts . warehouse ;"
      },
      {
        "id": 18,
        "label": "let mut s = 0u32 ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "let v = ((bias as u32) + i as u32 * 9) & 0xFFF ;"
      },
      {
        "id": 21,
        "label": "w . blks [i] = w . blks [i] . saturating_add (v) ;"
      },
      {
        "id": 22,
        "label": "s = s . saturating_add (v) ;"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "a . idx != b . idx"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "w . ok = w . ok . saturating_add ((s / 8) as u64) ;"
      },
      {
        "id": 29,
        "label": "a . used = true ;"
      },
      {
        "id": 30,
        "label": "f . hash ^= (s as u64) . rotate_left (11) ;"
      },
      {
        "id": 31,
        "label": "msg ! (\"different slot: ok+\") ;"
      },
      {
        "id": 32,
        "label": "False body"
      },
      {
        "id": 33,
        "label": "w . ng = w . ng . saturating_add ((s / 7) as u64) ;"
      },
      {
        "id": 34,
        "label": "b . used = true ;"
      },
      {
        "id": 35,
        "label": "f . hash = f . hash . rotate_right (9) ^ 0xA5A5u64 ;"
      },
      {
        "id": 36,
        "label": "msg ! (\"same slot: ng+\") ;"
      },
      {
        "id": 37,
        "label": "merge"
      },
      {
        "id": 38,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 19,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 24,
        "to": 32,
        "label": "false"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 31,
        "to": 37,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      }
    ]
  }
]