[
  {
    "name": "init_track",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let t = & mut ctx . accounts . track ;"
      },
      {
        "id": 2,
        "label": "t . owner = ctx . accounts . marshal . key () ;"
      },
      {
        "id": 3,
        "label": "let mut tt = title ;"
      },
      {
        "id": 4,
        "label": "if statement"
      },
      {
        "id": 5,
        "label": "predicate"
      },
      {
        "id": 6,
        "label": "tt . len () > 64"
      },
      {
        "id": 7,
        "label": "True body"
      },
      {
        "id": 8,
        "label": "tt . truncate (64) ;"
      },
      {
        "id": 9,
        "label": "False body"
      },
      {
        "id": 10,
        "label": "No-op"
      },
      {
        "id": 11,
        "label": "merge"
      },
      {
        "id": 12,
        "label": "t . title = tt ;"
      },
      {
        "id": 13,
        "label": "t . lanes_mask = lanes_mask ;"
      },
      {
        "id": 14,
        "label": "let mut s = seed ^ 0xD6E8FEB86659FD93u64 ;"
      },
      {
        "id": 15,
        "label": "Loop Start"
      },
      {
        "id": 16,
        "label": "s = s . rotate_left (13) ^ (lanes_mask as u64) ;"
      },
      {
        "id": 17,
        "label": "t . wind [i] = ((s >> (i * 5)) as u16) & 0x3FFF ;"
      },
      {
        "id": 18,
        "label": "Loop End"
      },
      {
        "id": 19,
        "label": "t . epoch = ((seed as u32) % 997 + 1) as u16 ;"
      },
      {
        "id": 20,
        "label": "t . mix = (lanes_mask ^ (seed as u32)) & 0xFFFF_FFFF ;"
      },
      {
        "id": 21,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "predicate"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 4,
        "to": 7,
        "label": "true"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 4,
        "to": 9,
        "label": "false"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 8,
        "to": 11,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 15,
        "to": 18,
        "label": "for"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_craft",
    "nodes": [
      {
        "id": 22,
        "label": "Entry"
      },
      {
        "id": 23,
        "label": "let c = & mut ctx . accounts . craft_card ;"
      },
      {
        "id": 24,
        "label": "c . track = ctx . accounts . track . key () ;"
      },
      {
        "id": 25,
        "label": "require ! (lane < 32 , ErrCode :: LaneOutOfRange) ;"
      },
      {
        "id": 26,
        "label": "let allowed = (ctx . accounts . track . lanes_mask >> lane) & 1 ;"
      },
      {
        "id": 27,
        "label": "require ! (allowed == 1 , ErrCode :: LaneDisabled) ;"
      },
      {
        "id": 28,
        "label": "c . kind = craft ;"
      },
      {
        "id": 29,
        "label": "c . lane = lane ;"
      },
      {
        "id": 30,
        "label": "c . energy = 500 + (bias as u32 % 300) ;"
      },
      {
        "id": 31,
        "label": "Loop Start"
      },
      {
        "id": 32,
        "label": "c . telemetry [i] = ((c . energy as u16) ^ ((i as u16) * 123)) & 0x7FFF ;"
      },
      {
        "id": 33,
        "label": "Loop End"
      },
      {
        "id": 34,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 26,
        "to": 27,
        "label": "next"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 31,
        "to": 33,
        "label": "for"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      }
    ]
  },
  {
    "name": "fly_epoch",
    "nodes": [
      {
        "id": 35,
        "label": "Entry"
      },
      {
        "id": 36,
        "label": "let tr = & mut ctx . accounts . track ;"
      },
      {
        "id": 37,
        "label": "let a = & mut ctx . accounts . actor ;"
      },
      {
        "id": 38,
        "label": "let r = & mut ctx . accounts . rival ;"
      },
      {
        "id": 39,
        "label": "let l = & mut ctx . accounts . log ;"
      },
      {
        "id": 40,
        "label": "let mut acc : u32 = 0 ;"
      },
      {
        "id": 41,
        "label": "Loop Start"
      },
      {
        "id": 42,
        "label": "let local = ((tr . wind [i] as u32) ^ (drift as u32) . rotate_left ((i as u32) & 15)) . wrapping_add ((factor as u32) * ((i as u32) + 1)) ;"
      },
      {
        "id": 43,
        "label": "a . telemetry [i % a . telemetry . len ()] = (a . telemetry [i % a . telemetry . len ()] as u32 ^ (local & 0x7FFF)) as u16 ;"
      },
      {
        "id": 44,
        "label": "acc = acc . wrapping_add (local & 0x3FFF) ;"
      },
      {
        "id": 45,
        "label": "Loop End"
      },
      {
        "id": 46,
        "label": "if statement"
      },
      {
        "id": 47,
        "label": "predicate"
      },
      {
        "id": 48,
        "label": "a . kind == Falcon"
      },
      {
        "id": 49,
        "label": "True body"
      },
      {
        "id": 50,
        "label": "a . energy = a . energy . saturating_add ((acc & 0x1FFF) + (factor as u32)) ;"
      },
      {
        "id": 51,
        "label": "tr . mix = tr . mix . rotate_left (5) ^ ((a . lane as u32) << 7) ;"
      },
      {
        "id": 52,
        "label": "l . rounds = l . rounds . saturating_add (1) ;"
      },
      {
        "id": 53,
        "label": "l . hash = l . hash . wrapping_add ((acc as u64) . rotate_left (17)) ;"
      },
      {
        "id": 54,
        "label": "msg ! (\"Falcon path: energy boosted and track mixed\") ;"
      },
      {
        "id": 55,
        "label": "False body"
      },
      {
        "id": 56,
        "label": "r . energy = r . energy . saturating_add (((acc >> 2) & 0x0FFF) + (drift as u32)) ;"
      },
      {
        "id": 57,
        "label": "tr . mix = tr . mix . rotate_right (3) ^ ((r . lane as u32) << 9) ;"
      },
      {
        "id": 58,
        "label": "l . rounds = l . rounds . saturating_add (2) ;"
      },
      {
        "id": 59,
        "label": "l . hash = l . hash ^ ((acc as u64) . rotate_right (11)) ;"
      },
      {
        "id": 60,
        "label": "msg ! (\"Non-Falcon path: rival boosted and track mixed differently\") ;"
      },
      {
        "id": 61,
        "label": "merge"
      },
      {
        "id": 62,
        "label": "Loop Start"
      },
      {
        "id": 63,
        "label": "l . trace [i] = l . trace [i] . rotate_left ((i as u32) & 7) ^ (tr . mix & 0xFFFF) ;"
      },
      {
        "id": 64,
        "label": "Loop End"
      },
      {
        "id": 65,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 36,
        "to": 37,
        "label": "next"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "next"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 42,
        "to": 43,
        "label": "next"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 41,
        "to": 45,
        "label": "for"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "predicate"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 46,
        "to": 49,
        "label": "true"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "next"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 52,
        "to": 53,
        "label": "next"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 46,
        "to": 55,
        "label": "false"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "next"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 54,
        "to": 61,
        "label": "next"
      },
      {
        "from": 60,
        "to": 61,
        "label": "next"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 62,
        "to": 63,
        "label": "next"
      },
      {
        "from": 62,
        "to": 64,
        "label": "for"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      }
    ]
  }
]