[
  {
    "name": "init_board",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 2,
        "label": "b . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 3,
        "label": "b . seed = 0xABCD ;"
      },
      {
        "id": 4,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      }
    ]
  },
  {
    "name": "init_ticket",
    "nodes": [
      {
        "id": 5,
        "label": "Entry"
      },
      {
        "id": 6,
        "label": "let t = & mut ctx . accounts . ticket ;"
      },
      {
        "id": 7,
        "label": "t . parent = ctx . accounts . board . key () ;"
      },
      {
        "id": 8,
        "label": "t . lane = lane ;"
      },
      {
        "id": 9,
        "label": "t . used = false ;"
      },
      {
        "id": 10,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      }
    ]
  },
  {
    "name": "run",
    "nodes": [
      {
        "id": 11,
        "label": "Entry"
      },
      {
        "id": 12,
        "label": "require ! (ctx . accounts . reward_ta . mint == ctx . accounts . reward_mint . key () , QuestErr :: MintMismatch) ;"
      },
      {
        "id": 13,
        "label": "require ! (ctx . accounts . reward_ta . owner == ctx . accounts . owner . key () , QuestErr :: OwnerMismatch) ;"
      },
      {
        "id": 14,
        "label": "let b = & mut ctx . accounts . board ;"
      },
      {
        "id": 15,
        "label": "let a = & mut ctx . accounts . ticket_a ;"
      },
      {
        "id": 16,
        "label": "let c = & mut ctx . accounts . ticket_c ;"
      },
      {
        "id": 17,
        "label": "let r = & mut ctx . accounts . record ;"
      },
      {
        "id": 18,
        "label": "let mut sum = 0u32 ;"
      },
      {
        "id": 19,
        "label": "Loop Start"
      },
      {
        "id": 20,
        "label": "let v = ((bonus as u32) ^ (i as u32 * 17)) & 0x7FF ;"
      },
      {
        "id": 21,
        "label": "r . steps [i] = r . steps [i] . saturating_add (v) ;"
      },
      {
        "id": 22,
        "label": "sum = sum . saturating_add (v) ;"
      },
      {
        "id": 23,
        "label": "Loop End"
      },
      {
        "id": 24,
        "label": "if statement"
      },
      {
        "id": 25,
        "label": "predicate"
      },
      {
        "id": 26,
        "label": "(a . lane ^ c . lane) & 1 == 0"
      },
      {
        "id": 27,
        "label": "True body"
      },
      {
        "id": 28,
        "label": "a . used = true ;"
      },
      {
        "id": 29,
        "label": "r . ok = r . ok . saturating_add (sum / 8) ;"
      },
      {
        "id": 30,
        "label": "b . seed = b . seed . rotate_left ((sum % 16) as u32) ;"
      },
      {
        "id": 31,
        "label": "False body"
      },
      {
        "id": 32,
        "label": "c . used = true ;"
      },
      {
        "id": 33,
        "label": "r . ng = r . ng . saturating_add (sum / 9) ;"
      },
      {
        "id": 34,
        "label": "b . seed = b . seed . rotate_right ((sum % 13) as u32) ;"
      },
      {
        "id": 35,
        "label": "merge"
      },
      {
        "id": 36,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 18,
        "to": 19,
        "label": "next"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 19,
        "to": 23,
        "label": "for"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "predicate"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 24,
        "to": 27,
        "label": "true"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 24,
        "to": 31,
        "label": "false"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "next"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 30,
        "to": 35,
        "label": "next"
      },
      {
        "from": 34,
        "to": 35,
        "label": "next"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      }
    ]
  }
]