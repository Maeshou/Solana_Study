[
  {
    "name": "init_treasury",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitTreasury >",
      "name: String",
      "config_nonce: u32",
      "lanes_mask: u32"
    ],
    "attributes": [
      "# [doc = \" Treasury初期化：\"]",
      "# [doc = \" - nameからfingerprintを算出\"]",
      "# [doc = \" - config_nonceから初期epochを導出\"]",
      "# [doc = \" - lanes_maskで使用可能レーン集合を指定（ビットマスク）\"]",
      "# [doc = \" - rolling配列はnonceとnameを混ぜてループで初期化\"]"
    ],
    "body": [
      "let t = & mut ctx . accounts . treasury ;",
      "t . owner = ctx . accounts . chair . key () ;",
      "let mut nm = name ;",
      "if nm . len () > 64",
      "{",
      "nm . truncate (64) ;",
      "}",
      "t . name = nm ;",
      "let mut fp : u32 = 0x811C9DC5 ^ config_nonce ;",
      "for (i , b) in t . name . as_bytes () . iter () . enumerate ()",
      "{",
      "fp = fp . rotate_left ((i as u32) & 7) ^ (* b as u32) ;",
      "fp = fp . wrapping_mul (0x01000193) ;",
      "}",
      "t . fingerprint = fp ;",
      "t . epoch = ((config_nonce % 97) + 1) as u16 ;",
      "t . lanes_mask = lanes_mask ;",
      "let mut state = (config_nonce as u64) ^ 0x9E37_79B9_7F4A_7C15 ;",
      "for i in 0 .. t . rolling . len ()",
      "{",
      "state = state . rotate_left (9) ^ (fp as u64) . rotate_right ((i as u32) & 31) ;",
      "t . rolling [i] = (state as u32) ^ (fp . rotate_left (i as u32)) ;",
      "}",
      "t . net = 0 ;",
      "t . audit_flags = (t . name . len () as u32) & 0x3FF ;",
      "Ok (())"
    ]
  },
  {
    "name": "init_voucher",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < InitVoucher >",
      "kind: VoucherKind",
      "lane: u8",
      "hint: u32",
      "seed: u64"
    ],
    "attributes": [
      "# [doc = \" Voucher初期化：\"]",
      "# [doc = \" - laneの範囲／許可ビット検証\"]",
      "# [doc = \" - seedとkindから初期amountを非線形に生成\"]",
      "# [doc = \" - window配列もseedとhintで初期化\"]"
    ],
    "body": [
      "let v = & mut ctx . accounts . voucher ;",
      "v . treasury = ctx . accounts . treasury . key () ;",
      "v . kind = kind ;",
      "require ! (lane < 32 , ErrCode :: LaneOutOfRange) ;",
      "let allowed = (ctx . accounts . treasury . lanes_mask >> lane) & 1 ;",
      "require ! (allowed == 1 , ErrCode :: LaneDisabled) ;",
      "v . lane = lane ;",
      "let base = seed . rotate_left ((lane as u32) & 31) . wrapping_add (hint as u64) ^ 0xC3A5_C85C_97CB_3127u64 ;",
      "let weight = match kind { Expense => 3u64 , Income => 5u64 , Transfer => 2u64 , } ;",
      "v . amount = ((base & 0xFFFF_FFFF) * weight) . saturating_rem (1_000_000) ;",
      "let mut s = base ^ (v . amount as u64) ;",
      "for i in 0 .. v . window . len ()",
      "{",
      "s = s . rotate_left (7) ^ ((hint as u64) << (i as u32 & 15)) ;",
      "v . window [i] = ((s ^ (i as u64 * 0x9E37)) as u32) & 0x3FFF_FFFF ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "settle",
    "node_type": "function",
    "fields": null,
    "inputs": [
      "ctx: Context < Settle >",
      "batch: [i64 ; 5]"
    ],
    "attributes": [
      "# [doc = \" 既存の settle（更新系命令）はそのまま利用可：\"]",
      "# [doc = \" - 異なるVoucher（lane不一致）を要求\"]",
      "# [doc = \" - has_one/ownerで型・所有者・親子リンクを担保\"]"
    ],
    "body": [
      "let tr = & mut ctx . accounts . treasury ;",
      "let debit = & mut ctx . accounts . debit ;",
      "let credit = & mut ctx . accounts . credit ;",
      "let q = & mut ctx . accounts . queue ;",
      "let mut acc : i128 = 0 ;",
      "for i in 0 .. 5",
      "{",
      "let scaled = (batch [i] as i128) * ((i as i128) + 1) ;",
      "acc = (acc + scaled) . clamp (- 1_000_000 , 1_000_000) ;",
      "debit . window [i] = debit . window [i] . saturating_add ((scaled . unsigned_abs () as u32) & 0x3FFF) ;",
      "}",
      "if debit . kind == VoucherKind :: Expense",
      "{",
      "let delta = (acc . unsigned_abs () as u64) & 0x00FF_FFFF ;",
      "tr . net = tr . net . saturating_sub (delta) ;",
      "q . cursor = q . cursor . saturating_add (1) ;",
      "q . mix = q . mix ^ (delta . rotate_left (11)) ;",
      "q . last = q . last . wrapping_add (delta as u128) ;",
      "msg ! (\"Expense path applied\") ;",
      "} else",
      "{",
      "let delta = ((acc . abs () as u64) & 0x01FF_FFFF) . saturating_add (credit . amount & 0xFFFF) ;",
      "tr . net = tr . net . saturating_add (delta) ;",
      "q . cursor = q . cursor . saturating_add (2) ;",
      "q . mix = q . mix . rotate_right (5) ^ delta ;",
      "q . last = q . last ^ ((delta as u128) << 16) ;",
      "msg ! (\"Non-expense path applied\") ;",
      "}",
      "for i in 0 .. tr . rolling . len ()",
      "{",
      "tr . rolling [i] = tr . rolling [i] . rotate_left ((i as u32) & 7) ^ (q . mix & 0xFFFF) ;",
      "}",
      "Ok (())"
    ]
  },
  {
    "name": "InitTreasury",
    "node_type": "struct",
    "fields": [
      {
        "name": "treasury",
        "attribute": "# [account (init , payer = chair , space = 8 + Treasury :: MAX)]",
        "field_type": "Account < 'info , Treasury >"
      },
      {
        "name": "chair",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "InitVoucher",
    "node_type": "struct",
    "fields": [
      {
        "name": "treasury",
        "attribute": "# [account (mut , has_one = owner , owner = crate :: ID)]",
        "field_type": "Account < 'info , Treasury >"
      },
      {
        "name": "voucher",
        "attribute": "# [account (init , payer = user , space = 8 + Voucher :: MAX)]",
        "field_type": "Account < 'info , Voucher >"
      },
      {
        "name": "user",
        "attribute": "# [account (mut)]",
        "field_type": "Signer < 'info >"
      },
      {
        "name": "system_program",
        "attribute": null,
        "field_type": "Program < 'info , System >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Settle",
    "node_type": "struct",
    "fields": [
      {
        "name": "treasury",
        "attribute": "# [account (mut , has_one = owner , owner = crate :: ID)]",
        "field_type": "Account < 'info , Treasury >"
      },
      {
        "name": "queue",
        "attribute": "# [account (mut , has_one = treasury , owner = crate :: ID)]",
        "field_type": "Account < 'info , TxQueue >"
      },
      {
        "name": "debit",
        "attribute": "# [account (mut , has_one = treasury , owner = crate :: ID)]",
        "field_type": "Account < 'info , Voucher >"
      },
      {
        "name": "credit",
        "attribute": "# [account (mut , has_one = treasury , owner = crate :: ID , constraint = debit . lane != credit . lane @ ErrCode :: CosplayBlocked)]",
        "field_type": "Account < 'info , Voucher >"
      },
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Signer < 'info >"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Treasury",
    "node_type": "struct",
    "fields": [
      {
        "name": "owner",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "name",
        "attribute": null,
        "field_type": "String"
      },
      {
        "name": "net",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "epoch",
        "attribute": null,
        "field_type": "u16"
      },
      {
        "name": "fingerprint",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "lanes_mask",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "audit_flags",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "rolling",
        "attribute": null,
        "field_type": "[u32 ; 5]"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "Voucher",
    "node_type": "struct",
    "fields": [
      {
        "name": "treasury",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "kind",
        "attribute": null,
        "field_type": "VoucherKind"
      },
      {
        "name": "lane",
        "attribute": null,
        "field_type": "u8"
      },
      {
        "name": "amount",
        "attribute": null,
        "field_type": "u64"
      },
      {
        "name": "window",
        "attribute": null,
        "field_type": "[u32 ; 5]"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  },
  {
    "name": "TxQueue",
    "node_type": "struct",
    "fields": [
      {
        "name": "treasury",
        "attribute": null,
        "field_type": "Pubkey"
      },
      {
        "name": "mix",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "cursor",
        "attribute": null,
        "field_type": "u32"
      },
      {
        "name": "last",
        "attribute": null,
        "field_type": "u128"
      }
    ],
    "inputs": null,
    "attributes": null,
    "body": null
  }
]