[
  {
    "name": "advance_tournament_bracket",
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let tournament = & mut ctx . accounts . tournament ;"
      },
      {
        "id": 2,
        "label": "let winner_profile = & mut ctx . accounts . winner_profile ;"
      },
      {
        "id": 3,
        "label": "let loser_profile = & mut ctx . accounts . loser_profile ;"
      },
      {
        "id": 4,
        "label": "require ! (matches ! (tournament . tournament_status , TournamentStatus :: InProgress) , TournamentError :: TournamentNotActive) ;"
      },
      {
        "id": 5,
        "label": "require ! (tournament . current_round < tournament . max_rounds , TournamentError :: TournamentCompleted) ;"
      },
      {
        "id": 6,
        "label": "let now = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 7,
        "label": "require ! (now >= tournament . round_start_time , TournamentError :: RoundNotStarted) ;"
      },
      {
        "id": 8,
        "label": "require ! (now <= tournament . round_end_time , TournamentError :: RoundExpired) ;"
      },
      {
        "id": 9,
        "label": "let mut winner_power : u64 = 0 ;"
      },
      {
        "id": 10,
        "label": "let mut loser_power : u64 = 0 ;"
      },
      {
        "id": 11,
        "label": "let multipliers : [u64 ; 3] = [150 , 100 , 75] ;"
      },
      {
        "id": 12,
        "label": "let mut wi = 0usize ;"
      },
      {
        "id": 13,
        "label": "Loop Start"
      },
      {
        "id": 14,
        "label": "let e = & winner_profile . equipped_items [wi] ;"
      },
      {
        "id": 15,
        "label": "let idx = e . kind_index () ;"
      },
      {
        "id": 16,
        "label": "let m = multipliers [idx] ;"
      },
      {
        "id": 17,
        "label": "winner_power = winner_power . checked_add (e . power_level . saturating_mul (m)) . unwrap () ;"
      },
      {
        "id": 18,
        "label": "wi += 1 ;"
      },
      {
        "id": 19,
        "label": "Loop End"
      },
      {
        "id": 20,
        "label": "let mut li = 0usize ;"
      },
      {
        "id": 21,
        "label": "Loop Start"
      },
      {
        "id": 22,
        "label": "let e = & loser_profile . equipped_items [li] ;"
      },
      {
        "id": 23,
        "label": "let idx = e . kind_index () ;"
      },
      {
        "id": 24,
        "label": "let m = multipliers [idx] ;"
      },
      {
        "id": 25,
        "label": "loser_power = loser_power . checked_add (e . power_level . saturating_mul (m)) . unwrap () ;"
      },
      {
        "id": 26,
        "label": "li += 1 ;"
      },
      {
        "id": 27,
        "label": "Loop End"
      },
      {
        "id": 28,
        "label": "winner_power = winner_power . checked_add (winner_profile . skill_level . saturating_mul (200)) . unwrap () ;"
      },
      {
        "id": 29,
        "label": "loser_power = loser_power . checked_add (loser_profile . skill_level . saturating_mul (200)) . unwrap () ;"
      },
      {
        "id": 30,
        "label": "let diff = winner_power . saturating_sub (loser_power) ;"
      },
      {
        "id": 31,
        "label": "let mut margin = VictoryType :: Narrow ;"
      },
      {
        "id": 32,
        "label": "if statement"
      },
      {
        "id": 33,
        "label": "predicate"
      },
      {
        "id": 34,
        "label": "diff > 500"
      },
      {
        "id": 35,
        "label": "True body"
      },
      {
        "id": 36,
        "label": "margin = VictoryType :: Clear ;"
      },
      {
        "id": 37,
        "label": "False body"
      },
      {
        "id": 38,
        "label": "No-op"
      },
      {
        "id": 39,
        "label": "merge"
      },
      {
        "id": 40,
        "label": "if statement"
      },
      {
        "id": 41,
        "label": "predicate"
      },
      {
        "id": 42,
        "label": "diff > 1000"
      },
      {
        "id": 43,
        "label": "True body"
      },
      {
        "id": 44,
        "label": "margin = VictoryType :: Decisive ;"
      },
      {
        "id": 45,
        "label": "False body"
      },
      {
        "id": 46,
        "label": "No-op"
      },
      {
        "id": 47,
        "label": "merge"
      },
      {
        "id": 48,
        "label": "let base_reward = tournament . prize_pool / (tournament . remaining_participants as u64) ;"
      },
      {
        "id": 49,
        "label": "let mut victory_bonus = base_reward ;"
      },
      {
        "id": 50,
        "label": "if statement"
      },
      {
        "id": 51,
        "label": "predicate"
      },
      {
        "id": 52,
        "label": "let VictoryType :: Clear = margin"
      },
      {
        "id": 53,
        "label": "True body"
      },
      {
        "id": 54,
        "label": "victory_bonus = base_reward . checked_mul (125) . unwrap () / 100 ;"
      },
      {
        "id": 55,
        "label": "False body"
      },
      {
        "id": 56,
        "label": "No-op"
      },
      {
        "id": 57,
        "label": "merge"
      },
      {
        "id": 58,
        "label": "if statement"
      },
      {
        "id": 59,
        "label": "predicate"
      },
      {
        "id": 60,
        "label": "let VictoryType :: Decisive = margin"
      },
      {
        "id": 61,
        "label": "True body"
      },
      {
        "id": 62,
        "label": "victory_bonus = base_reward . checked_mul (150) . unwrap () / 100 ;"
      },
      {
        "id": 63,
        "label": "False body"
      },
      {
        "id": 64,
        "label": "No-op"
      },
      {
        "id": 65,
        "label": "merge"
      },
      {
        "id": 66,
        "label": "let round_multiplier = tournament . current_round . checked_add (1) . unwrap () ;"
      },
      {
        "id": 67,
        "label": "let final_reward = victory_bonus . checked_mul (round_multiplier as u64) . unwrap () ;"
      },
      {
        "id": 68,
        "label": "winner_profile . tournament_earnings = winner_profile . tournament_earnings . checked_add (final_reward) . unwrap () ;"
      },
      {
        "id": 69,
        "label": "winner_profile . wins = winner_profile . wins . saturating_add (1) ;"
      },
      {
        "id": 70,
        "label": "winner_profile . current_win_streak = winner_profile . current_win_streak . saturating_add (1) ;"
      },
      {
        "id": 71,
        "label": "loser_profile . losses = loser_profile . losses . saturating_add (1) ;"
      },
      {
        "id": 72,
        "label": "loser_profile . current_win_streak = 0 ;"
      },
      {
        "id": 73,
        "label": "loser_profile . elimination_round = tournament . current_round ;"
      },
      {
        "id": 74,
        "label": "if statement"
      },
      {
        "id": 75,
        "label": "predicate"
      },
      {
        "id": 76,
        "label": "winner_profile . current_win_streak >= 5"
      },
      {
        "id": 77,
        "label": "True body"
      },
      {
        "id": 78,
        "label": "let s = winner_profile . current_win_streak . saturating_mul (100) ;"
      },
      {
        "id": 79,
        "label": "winner_profile . tournament_earnings = winner_profile . tournament_earnings . saturating_add (s as u64) ;"
      },
      {
        "id": 80,
        "label": "False body"
      },
      {
        "id": 81,
        "label": "No-op"
      },
      {
        "id": 82,
        "label": "merge"
      },
      {
        "id": 83,
        "label": "tournament . remaining_participants = tournament . remaining_participants . saturating_sub (1) ;"
      },
      {
        "id": 84,
        "label": "tournament . completed_matches = tournament . completed_matches . saturating_add (1) ;"
      },
      {
        "id": 85,
        "label": "tournament . total_prize_distributed = tournament . total_prize_distributed . saturating_add (final_reward) ;"
      },
      {
        "id": 86,
        "label": "let matches_per_round = tournament . remaining_participants / 2 ;"
      },
      {
        "id": 87,
        "label": "if statement"
      },
      {
        "id": 88,
        "label": "predicate"
      },
      {
        "id": 89,
        "label": "tournament . completed_matches >= matches_per_round"
      },
      {
        "id": 90,
        "label": "True body"
      },
      {
        "id": 91,
        "label": "tournament . current_round = tournament . current_round . saturating_add (1) ;"
      },
      {
        "id": 92,
        "label": "tournament . completed_matches = 0 ;"
      },
      {
        "id": 93,
        "label": "tournament . round_start_time = now + 1800 ;"
      },
      {
        "id": 94,
        "label": "tournament . round_end_time = tournament . round_start_time + 3600 ;"
      },
      {
        "id": 95,
        "label": "False body"
      },
      {
        "id": 96,
        "label": "No-op"
      },
      {
        "id": 97,
        "label": "merge"
      },
      {
        "id": 98,
        "label": "if statement"
      },
      {
        "id": 99,
        "label": "predicate"
      },
      {
        "id": 100,
        "label": "tournament . remaining_participants <= 2"
      },
      {
        "id": 101,
        "label": "True body"
      },
      {
        "id": 102,
        "label": "if statement"
      },
      {
        "id": 103,
        "label": "predicate"
      },
      {
        "id": 104,
        "label": "tournament . current_round >= tournament . max_rounds"
      },
      {
        "id": 105,
        "label": "True body"
      },
      {
        "id": 106,
        "label": "tournament . tournament_status = TournamentStatus :: Finals ;"
      },
      {
        "id": 107,
        "label": "tournament . champion = winner_profile . player ;"
      },
      {
        "id": 108,
        "label": "let champion_bonus = tournament . prize_pool / 4 ;"
      },
      {
        "id": 109,
        "label": "winner_profile . tournament_earnings = winner_profile . tournament_earnings . saturating_add (champion_bonus) ;"
      },
      {
        "id": 110,
        "label": "winner_profile . championships_won = winner_profile . championships_won . saturating_add (1) ;"
      },
      {
        "id": 111,
        "label": "False body"
      },
      {
        "id": 112,
        "label": "No-op"
      },
      {
        "id": 113,
        "label": "merge"
      },
      {
        "id": 114,
        "label": "False body"
      },
      {
        "id": 115,
        "label": "No-op"
      },
      {
        "id": 116,
        "label": "merge"
      },
      {
        "id": 117,
        "label": "emit ! (MatchCompleted { tournament_id : tournament . tournament_id , winner : winner_profile . player , loser : loser_profile . player , round : tournament . current_round , victory_type : margin . clone () , reward_earned : final_reward , }) ;"
      },
      {
        "id": 118,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 0,
        "to": 1,
        "label": "next"
      },
      {
        "from": 1,
        "to": 2,
        "label": "next"
      },
      {
        "from": 2,
        "to": 3,
        "label": "next"
      },
      {
        "from": 3,
        "to": 4,
        "label": "next"
      },
      {
        "from": 4,
        "to": 5,
        "label": "next"
      },
      {
        "from": 5,
        "to": 6,
        "label": "next"
      },
      {
        "from": 6,
        "to": 7,
        "label": "next"
      },
      {
        "from": 7,
        "to": 8,
        "label": "next"
      },
      {
        "from": 8,
        "to": 9,
        "label": "next"
      },
      {
        "from": 9,
        "to": 10,
        "label": "next"
      },
      {
        "from": 10,
        "to": 11,
        "label": "next"
      },
      {
        "from": 11,
        "to": 12,
        "label": "next"
      },
      {
        "from": 12,
        "to": 13,
        "label": "next"
      },
      {
        "from": 13,
        "to": 14,
        "label": "next"
      },
      {
        "from": 14,
        "to": 15,
        "label": "next"
      },
      {
        "from": 15,
        "to": 16,
        "label": "next"
      },
      {
        "from": 16,
        "to": 17,
        "label": "next"
      },
      {
        "from": 17,
        "to": 18,
        "label": "next"
      },
      {
        "from": 13,
        "to": 19,
        "label": "while"
      },
      {
        "from": 19,
        "to": 20,
        "label": "next"
      },
      {
        "from": 20,
        "to": 21,
        "label": "next"
      },
      {
        "from": 21,
        "to": 22,
        "label": "next"
      },
      {
        "from": 22,
        "to": 23,
        "label": "next"
      },
      {
        "from": 23,
        "to": 24,
        "label": "next"
      },
      {
        "from": 24,
        "to": 25,
        "label": "next"
      },
      {
        "from": 25,
        "to": 26,
        "label": "next"
      },
      {
        "from": 21,
        "to": 27,
        "label": "while"
      },
      {
        "from": 27,
        "to": 28,
        "label": "next"
      },
      {
        "from": 28,
        "to": 29,
        "label": "next"
      },
      {
        "from": 29,
        "to": 30,
        "label": "next"
      },
      {
        "from": 30,
        "to": 31,
        "label": "next"
      },
      {
        "from": 31,
        "to": 32,
        "label": "next"
      },
      {
        "from": 32,
        "to": 33,
        "label": "predicate"
      },
      {
        "from": 33,
        "to": 34,
        "label": "next"
      },
      {
        "from": 32,
        "to": 35,
        "label": "true"
      },
      {
        "from": 35,
        "to": 36,
        "label": "next"
      },
      {
        "from": 32,
        "to": 37,
        "label": "false"
      },
      {
        "from": 37,
        "to": 38,
        "label": "next"
      },
      {
        "from": 36,
        "to": 39,
        "label": "next"
      },
      {
        "from": 38,
        "to": 39,
        "label": "next"
      },
      {
        "from": 39,
        "to": 40,
        "label": "next"
      },
      {
        "from": 40,
        "to": 41,
        "label": "predicate"
      },
      {
        "from": 41,
        "to": 42,
        "label": "next"
      },
      {
        "from": 40,
        "to": 43,
        "label": "true"
      },
      {
        "from": 43,
        "to": 44,
        "label": "next"
      },
      {
        "from": 40,
        "to": 45,
        "label": "false"
      },
      {
        "from": 45,
        "to": 46,
        "label": "next"
      },
      {
        "from": 44,
        "to": 47,
        "label": "next"
      },
      {
        "from": 46,
        "to": 47,
        "label": "next"
      },
      {
        "from": 47,
        "to": 48,
        "label": "next"
      },
      {
        "from": 48,
        "to": 49,
        "label": "next"
      },
      {
        "from": 49,
        "to": 50,
        "label": "next"
      },
      {
        "from": 50,
        "to": 51,
        "label": "predicate"
      },
      {
        "from": 51,
        "to": 52,
        "label": "next"
      },
      {
        "from": 50,
        "to": 53,
        "label": "true"
      },
      {
        "from": 53,
        "to": 54,
        "label": "next"
      },
      {
        "from": 50,
        "to": 55,
        "label": "false"
      },
      {
        "from": 55,
        "to": 56,
        "label": "next"
      },
      {
        "from": 54,
        "to": 57,
        "label": "next"
      },
      {
        "from": 56,
        "to": 57,
        "label": "next"
      },
      {
        "from": 57,
        "to": 58,
        "label": "next"
      },
      {
        "from": 58,
        "to": 59,
        "label": "predicate"
      },
      {
        "from": 59,
        "to": 60,
        "label": "next"
      },
      {
        "from": 58,
        "to": 61,
        "label": "true"
      },
      {
        "from": 61,
        "to": 62,
        "label": "next"
      },
      {
        "from": 58,
        "to": 63,
        "label": "false"
      },
      {
        "from": 63,
        "to": 64,
        "label": "next"
      },
      {
        "from": 62,
        "to": 65,
        "label": "next"
      },
      {
        "from": 64,
        "to": 65,
        "label": "next"
      },
      {
        "from": 65,
        "to": 66,
        "label": "next"
      },
      {
        "from": 66,
        "to": 67,
        "label": "next"
      },
      {
        "from": 67,
        "to": 68,
        "label": "next"
      },
      {
        "from": 68,
        "to": 69,
        "label": "next"
      },
      {
        "from": 69,
        "to": 70,
        "label": "next"
      },
      {
        "from": 70,
        "to": 71,
        "label": "next"
      },
      {
        "from": 71,
        "to": 72,
        "label": "next"
      },
      {
        "from": 72,
        "to": 73,
        "label": "next"
      },
      {
        "from": 73,
        "to": 74,
        "label": "next"
      },
      {
        "from": 74,
        "to": 75,
        "label": "predicate"
      },
      {
        "from": 75,
        "to": 76,
        "label": "next"
      },
      {
        "from": 74,
        "to": 77,
        "label": "true"
      },
      {
        "from": 77,
        "to": 78,
        "label": "next"
      },
      {
        "from": 78,
        "to": 79,
        "label": "next"
      },
      {
        "from": 74,
        "to": 80,
        "label": "false"
      },
      {
        "from": 80,
        "to": 81,
        "label": "next"
      },
      {
        "from": 79,
        "to": 82,
        "label": "next"
      },
      {
        "from": 81,
        "to": 82,
        "label": "next"
      },
      {
        "from": 82,
        "to": 83,
        "label": "next"
      },
      {
        "from": 83,
        "to": 84,
        "label": "next"
      },
      {
        "from": 84,
        "to": 85,
        "label": "next"
      },
      {
        "from": 85,
        "to": 86,
        "label": "next"
      },
      {
        "from": 86,
        "to": 87,
        "label": "next"
      },
      {
        "from": 87,
        "to": 88,
        "label": "predicate"
      },
      {
        "from": 88,
        "to": 89,
        "label": "next"
      },
      {
        "from": 87,
        "to": 90,
        "label": "true"
      },
      {
        "from": 90,
        "to": 91,
        "label": "next"
      },
      {
        "from": 91,
        "to": 92,
        "label": "next"
      },
      {
        "from": 92,
        "to": 93,
        "label": "next"
      },
      {
        "from": 93,
        "to": 94,
        "label": "next"
      },
      {
        "from": 87,
        "to": 95,
        "label": "false"
      },
      {
        "from": 95,
        "to": 96,
        "label": "next"
      },
      {
        "from": 94,
        "to": 97,
        "label": "next"
      },
      {
        "from": 96,
        "to": 97,
        "label": "next"
      },
      {
        "from": 97,
        "to": 98,
        "label": "next"
      },
      {
        "from": 98,
        "to": 99,
        "label": "predicate"
      },
      {
        "from": 99,
        "to": 100,
        "label": "next"
      },
      {
        "from": 98,
        "to": 101,
        "label": "true"
      },
      {
        "from": 101,
        "to": 102,
        "label": "next"
      },
      {
        "from": 102,
        "to": 103,
        "label": "predicate"
      },
      {
        "from": 103,
        "to": 104,
        "label": "next"
      },
      {
        "from": 102,
        "to": 105,
        "label": "true"
      },
      {
        "from": 105,
        "to": 106,
        "label": "next"
      },
      {
        "from": 106,
        "to": 107,
        "label": "next"
      },
      {
        "from": 107,
        "to": 108,
        "label": "next"
      },
      {
        "from": 108,
        "to": 109,
        "label": "next"
      },
      {
        "from": 109,
        "to": 110,
        "label": "next"
      },
      {
        "from": 102,
        "to": 111,
        "label": "false"
      },
      {
        "from": 111,
        "to": 112,
        "label": "next"
      },
      {
        "from": 110,
        "to": 113,
        "label": "next"
      },
      {
        "from": 112,
        "to": 113,
        "label": "next"
      },
      {
        "from": 98,
        "to": 114,
        "label": "false"
      },
      {
        "from": 114,
        "to": 115,
        "label": "next"
      },
      {
        "from": 113,
        "to": 116,
        "label": "next"
      },
      {
        "from": 115,
        "to": 116,
        "label": "next"
      },
      {
        "from": 116,
        "to": 117,
        "label": "next"
      },
      {
        "from": 117,
        "to": 118,
        "label": "next"
      }
    ]
  }
]