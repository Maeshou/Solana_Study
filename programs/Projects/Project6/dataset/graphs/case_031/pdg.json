[
  {
    "name": "level_up_character",
    "inputs": [
      "ctx: Context < LevelUpCharacter >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let character = & mut ctx . accounts . character ;"
      },
      {
        "id": 2,
        "label": "let player = & ctx . accounts . player ;"
      },
      {
        "id": 3,
        "label": "let required_exp = character . level . checked_mul (100) . unwrap () ;"
      },
      {
        "id": 4,
        "label": "require ! (character . experience >= required_exp , GameError :: InsufficientExperience) ;"
      },
      {
        "id": 5,
        "label": "for bonus_tier in 1 ..= 5 { let tier_multiplier = bonus_tier . checked_mul (10) . unwrap () ; character . attack_power = character . attack_power . checked_add (tier_multiplier) . unwrap () ; character . defense_power = character . defense_power . checked_add (tier_multiplier / 2) . unwrap () ; while character . level >= bonus_tier * 10 { character . special_skills . push (SpecialSkill { skill_id : bonus_tier as u32 , power_level : tier_multiplier as u32 , cooldown : 30 , }) ; break ; } }"
      },
      {
        "id": 6,
        "label": "let tier_multiplier = bonus_tier . checked_mul (10) . unwrap () ;"
      },
      {
        "id": 7,
        "label": "character . attack_power = character . attack_power . checked_add (tier_multiplier) . unwrap () ;"
      },
      {
        "id": 8,
        "label": "character . defense_power = character . defense_power . checked_add (tier_multiplier / 2) . unwrap () ;"
      },
      {
        "id": 9,
        "label": "while character . level >= bonus_tier * 10 { character . special_skills . push (SpecialSkill { skill_id : bonus_tier as u32 , power_level : tier_multiplier as u32 , cooldown : 30 , }) ; break ; }"
      },
      {
        "id": 10,
        "label": "character . special_skills . push (SpecialSkill { skill_id : bonus_tier as u32 , power_level : tier_multiplier as u32 , cooldown : 30 , }) ;"
      },
      {
        "id": 11,
        "label": "break ;"
      },
      {
        "id": 12,
        "label": "character . level = character . level . checked_add (1) . unwrap () ;"
      },
      {
        "id": 13,
        "label": "character . experience = character . experience . checked_sub (required_exp) . unwrap () ;"
      },
      {
        "id": 14,
        "label": "character . last_level_up = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 15,
        "label": "emit ! (CharacterLeveledUp { player : player . key () , character : character . key () , new_level : character . level , }) ;"
      },
      {
        "id": 16,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: character"
      },
      {
        "from": 2,
        "to": 2,
        "label": "def: player"
      },
      {
        "from": 3,
        "to": 3,
        "label": "def: required_exp"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: character"
      },
      {
        "from": 6,
        "to": 6,
        "label": "def: tier_multiplier"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 7,
        "label": "data_dep: character"
      },
      {
        "from": 6,
        "to": 7,
        "label": "data_dep: tier_multiplier"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 8,
        "label": "data_dep: character"
      },
      {
        "from": 6,
        "to": 8,
        "label": "data_dep: tier_multiplier"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 9,
        "label": "data_dep: character"
      },
      {
        "from": 6,
        "to": 9,
        "label": "data_dep: tier_multiplier"
      },
      {
        "from": 1,
        "to": 10,
        "label": "data_dep: character"
      },
      {
        "from": 6,
        "to": 10,
        "label": "data_dep: tier_multiplier"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 12,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: character"
      },
      {
        "from": 1,
        "to": 13,
        "label": "data_dep: character"
      },
      {
        "from": 3,
        "to": 13,
        "label": "data_dep: required_exp"
      },
      {
        "from": 1,
        "to": 14,
        "label": "data_dep: character"
      }
    ]
  }
]