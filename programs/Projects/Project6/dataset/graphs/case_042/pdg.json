[
  {
    "name": "init_forge",
    "inputs": [
      "ctx: Context < InitForge >"
    ],
    "nodes": [
      {
        "id": 0,
        "label": "Entry"
      },
      {
        "id": 1,
        "label": "let forge = & mut ctx . accounts . forge ;"
      },
      {
        "id": 2,
        "label": "forge . master = ctx . accounts . master . key () ;"
      },
      {
        "id": 3,
        "label": "forge . total_enhancements = 0 ;"
      },
      {
        "id": 4,
        "label": "forge . success_rate = 75 ;"
      },
      {
        "id": 5,
        "label": "forge . operational = true ;"
      },
      {
        "id": 6,
        "label": "forge . last_maintenance = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 7,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 1,
        "to": 1,
        "label": "def: forge"
      },
      {
        "from": 1,
        "to": 2,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 3,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 4,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 5,
        "label": "data_dep: forge"
      },
      {
        "from": 1,
        "to": 6,
        "label": "data_dep: forge"
      }
    ]
  },
  {
    "name": "init_equipment",
    "inputs": [
      "ctx: Context < InitEquipment >",
      "eq_type: EquipmentType",
      "base_power: u32"
    ],
    "nodes": [
      {
        "id": 8,
        "label": "Entry"
      },
      {
        "id": 9,
        "label": "let equipment = & mut ctx . accounts . equipment ;"
      },
      {
        "id": 10,
        "label": "equipment . forge = ctx . accounts . forge . key () ;"
      },
      {
        "id": 11,
        "label": "equipment . owner = ctx . accounts . owner . key () ;"
      },
      {
        "id": 12,
        "label": "equipment . eq_type = eq_type ;"
      },
      {
        "id": 13,
        "label": "equipment . enhancement_level = 0 ;"
      },
      {
        "id": 14,
        "label": "equipment . base_power = base_power ;"
      },
      {
        "id": 15,
        "label": "equipment . durability = 100 ;"
      },
      {
        "id": 16,
        "label": "equipment . enchanted = false ;"
      },
      {
        "id": 17,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 9,
        "to": 9,
        "label": "def: equipment"
      },
      {
        "from": 9,
        "to": 10,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 11,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 12,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 13,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 14,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 15,
        "label": "data_dep: equipment"
      },
      {
        "from": 9,
        "to": 16,
        "label": "data_dep: equipment"
      }
    ]
  },
  {
    "name": "enhance_equipment_batch",
    "inputs": [
      "ctx: Context < EnhanceEquipment >"
    ],
    "nodes": [
      {
        "id": 18,
        "label": "Entry"
      },
      {
        "id": 19,
        "label": "let primary = & mut ctx . accounts . primary_equipment ;"
      },
      {
        "id": 20,
        "label": "let catalyst = & mut ctx . accounts . catalyst_equipment ;"
      },
      {
        "id": 21,
        "label": "let forge = & mut ctx . accounts . forge ;"
      },
      {
        "id": 22,
        "label": "while primary . enhancement_level < 10 && catalyst . durability > 0 { if primary . base_power > catalyst . base_power { let current_level = primary . enhancement_level ; primary . enhancement_level = current_level . checked_add (1) . unwrap_or (255) ; let power_bonus = sqrt_newton (primary . base_power as u64) as u32 ; primary . base_power = primary . base_power . checked_add (power_bonus) . unwrap_or (u32 :: MAX) ; primary . durability = if primary . durability > 5 { primary . durability - 5 } else { 0 } ; forge . total_enhancements = forge . total_enhancements . checked_add (1) . unwrap_or (u64 :: MAX) ; msg ! (\"Primary enhanced to level: {}\" , primary . enhancement_level) ; } else { let absorption = (catalyst . base_power >> 2) & 0xFF ; catalyst . base_power = if catalyst . base_power > absorption { catalyst . base_power - absorption } else { 0 } ; catalyst . durability = if catalyst . durability > 10 { catalyst . durability - 10 } else { 0 } ; primary . enchanted = ! primary . enchanted ; forge . success_rate = ((forge . success_rate as u64 * 95) / 100) . min (100) as u8 ; msg ! (\"Catalyst power absorbed: {}\" , absorption) ; } if catalyst . durability == 0 { break ; } }"
      },
      {
        "id": 23,
        "label": "if primary . base_power > catalyst . base_power { let current_level = primary . enhancement_level ; primary . enhancement_level = current_level . checked_add (1) . unwrap_or (255) ; let power_bonus = sqrt_newton (primary . base_power as u64) as u32 ; primary . base_power = primary . base_power . checked_add (power_bonus) . unwrap_or (u32 :: MAX) ; primary . durability = if primary . durability > 5 { primary . durability - 5 } else { 0 } ; forge . total_enhancements = forge . total_enhancements . checked_add (1) . unwrap_or (u64 :: MAX) ; msg ! (\"Primary enhanced to level: {}\" , primary . enhancement_level) ; } else { let absorption = (catalyst . base_power >> 2) & 0xFF ; catalyst . base_power = if catalyst . base_power > absorption { catalyst . base_power - absorption } else { 0 } ; catalyst . durability = if catalyst . durability > 10 { catalyst . durability - 10 } else { 0 } ; primary . enchanted = ! primary . enchanted ; forge . success_rate = ((forge . success_rate as u64 * 95) / 100) . min (100) as u8 ; msg ! (\"Catalyst power absorbed: {}\" , absorption) ; }"
      },
      {
        "id": 24,
        "label": "let current_level = primary . enhancement_level ;"
      },
      {
        "id": 25,
        "label": "primary . enhancement_level = current_level . checked_add (1) . unwrap_or (255) ;"
      },
      {
        "id": 26,
        "label": "let power_bonus = sqrt_newton (primary . base_power as u64) as u32 ;"
      },
      {
        "id": 27,
        "label": "primary . base_power = primary . base_power . checked_add (power_bonus) . unwrap_or (u32 :: MAX) ;"
      },
      {
        "id": 28,
        "label": "primary . durability = if primary . durability > 5 { primary . durability - 5 } else { 0 } ;"
      },
      {
        "id": 29,
        "label": "primary . durability - 5"
      },
      {
        "id": 30,
        "label": "0"
      },
      {
        "id": 31,
        "label": "forge . total_enhancements = forge . total_enhancements . checked_add (1) . unwrap_or (u64 :: MAX) ;"
      },
      {
        "id": 32,
        "label": "msg ! (\"Primary enhanced to level: {}\" , primary . enhancement_level) ;"
      },
      {
        "id": 33,
        "label": "let absorption = (catalyst . base_power >> 2) & 0xFF ;"
      },
      {
        "id": 34,
        "label": "catalyst . base_power = if catalyst . base_power > absorption { catalyst . base_power - absorption } else { 0 } ;"
      },
      {
        "id": 35,
        "label": "catalyst . base_power - absorption"
      },
      {
        "id": 36,
        "label": "0"
      },
      {
        "id": 37,
        "label": "catalyst . durability = if catalyst . durability > 10 { catalyst . durability - 10 } else { 0 } ;"
      },
      {
        "id": 38,
        "label": "catalyst . durability - 10"
      },
      {
        "id": 39,
        "label": "0"
      },
      {
        "id": 40,
        "label": "primary . enchanted = ! primary . enchanted ;"
      },
      {
        "id": 41,
        "label": "forge . success_rate = ((forge . success_rate as u64 * 95) / 100) . min (100) as u8 ;"
      },
      {
        "id": 42,
        "label": "msg ! (\"Catalyst power absorbed: {}\" , absorption) ;"
      },
      {
        "id": 43,
        "label": "if catalyst . durability == 0 { break ; }"
      },
      {
        "id": 44,
        "label": "break ;"
      },
      {
        "id": 45,
        "label": "forge . last_maintenance = Clock :: get () ? . unix_timestamp ;"
      },
      {
        "id": 46,
        "label": "Ok (())"
      }
    ],
    "edges": [
      {
        "from": 19,
        "to": 19,
        "label": "def: primary"
      },
      {
        "from": 20,
        "to": 20,
        "label": "def: catalyst"
      },
      {
        "from": 21,
        "to": 21,
        "label": "def: forge"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: forge"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 22,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 22,
        "label": "data_dep: forge"
      },
      {
        "from": 20,
        "to": 22,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: forge"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 23,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 23,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 23,
        "label": "data_dep: forge"
      },
      {
        "from": 24,
        "to": 24,
        "label": "def: current_level"
      },
      {
        "from": 19,
        "to": 24,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 25,
        "label": "data_dep: primary"
      },
      {
        "from": 24,
        "to": 25,
        "label": "data_dep: current_level"
      },
      {
        "from": 26,
        "to": 26,
        "label": "def: power_bonus"
      },
      {
        "from": 19,
        "to": 26,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 27,
        "label": "data_dep: primary"
      },
      {
        "from": 26,
        "to": 27,
        "label": "data_dep: power_bonus"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 28,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 29,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 31,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 31,
        "label": "data_dep: forge"
      },
      {
        "from": 33,
        "to": 33,
        "label": "def: absorption"
      },
      {
        "from": 20,
        "to": 33,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 34,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 34,
        "label": "data_dep: catalyst"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: absorption"
      },
      {
        "from": 20,
        "to": 34,
        "label": "data_dep: catalyst"
      },
      {
        "from": 33,
        "to": 34,
        "label": "data_dep: absorption"
      },
      {
        "from": 20,
        "to": 35,
        "label": "data_dep: catalyst"
      },
      {
        "from": 33,
        "to": 35,
        "label": "data_dep: absorption"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 37,
        "label": "data_dep: catalyst"
      },
      {
        "from": 20,
        "to": 38,
        "label": "data_dep: catalyst"
      },
      {
        "from": 19,
        "to": 40,
        "label": "data_dep: primary"
      },
      {
        "from": 19,
        "to": 40,
        "label": "data_dep: primary"
      },
      {
        "from": 21,
        "to": 41,
        "label": "data_dep: forge"
      },
      {
        "from": 21,
        "to": 41,
        "label": "data_dep: forge"
      },
      {
        "from": 20,
        "to": 43,
        "label": "data_dep: catalyst"
      },
      {
        "from": 21,
        "to": 45,
        "label": "data_dep: forge"
      }
    ]
  },
  {
    "name": "sqrt_newton",
    "inputs": [
      "n: u64"
    ],
    "nodes": [
      {
        "id": 47,
        "label": "Entry"
      },
      {
        "id": 48,
        "label": "if n == 0 { return 0 ; }"
      },
      {
        "id": 49,
        "label": "return 0 ;"
      },
      {
        "id": 50,
        "label": "let mut x = n ;"
      },
      {
        "id": 51,
        "label": "let mut y = (x + 1) / 2 ;"
      },
      {
        "id": 52,
        "label": "while y < x { x = y ; y = (x + n / x) / 2 ; }"
      },
      {
        "id": 53,
        "label": "x = y ;"
      },
      {
        "id": 54,
        "label": "y = (x + n / x) / 2 ;"
      },
      {
        "id": 55,
        "label": "x"
      }
    ],
    "edges": [
      {
        "from": 50,
        "to": 50,
        "label": "def: x"
      },
      {
        "from": 51,
        "to": 51,
        "label": "def: y"
      },
      {
        "from": 50,
        "to": 51,
        "label": "data_dep: x"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: y"
      },
      {
        "from": 50,
        "to": 52,
        "label": "data_dep: x"
      },
      {
        "from": 50,
        "to": 52,
        "label": "data_dep: x"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: y"
      },
      {
        "from": 51,
        "to": 52,
        "label": "data_dep: y"
      },
      {
        "from": 50,
        "to": 52,
        "label": "data_dep: x"
      },
      {
        "from": 50,
        "to": 52,
        "label": "data_dep: x"
      },
      {
        "from": 50,
        "to": 53,
        "label": "data_dep: x"
      },
      {
        "from": 51,
        "to": 53,
        "label": "data_dep: y"
      },
      {
        "from": 51,
        "to": 54,
        "label": "data_dep: y"
      },
      {
        "from": 50,
        "to": 54,
        "label": "data_dep: x"
      },
      {
        "from": 50,
        "to": 54,
        "label": "data_dep: x"
      },
      {
        "from": 50,
        "to": 55,
        "label": "data_dep: x"
      }
    ]
  }
]